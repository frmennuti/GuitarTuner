
GuitarTuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000481c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080049b0  080049b0  000059b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080049e8  080049e8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049e8  080049e8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049ec  080049ec  000059ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080049f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000011d4  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011e0  200011e0  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010a6b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021d8  00000000  00000000  00016aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00018c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba5  00000000  00000000  00019b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e82  00000000  00000000  0001a6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013663  00000000  00000000  0003b577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfa3f  00000000  00000000  0004ebda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e619  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003efc  00000000  00000000  0011e65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00122558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004998 	.word	0x08004998

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004998 	.word	0x08004998

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fbb6 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f82a 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f9b6 	bl	8000550 <MX_GPIO_Init>
  MX_DMA_Init();
 80001e4:	f000 f996 	bl	8000514 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001e8:	f000 f964 	bl	80004b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001ec:	f000 f884 	bl	80002f8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80001f0:	f000 f8f4 	bl	80003dc <MX_TIM6_Init>
  MX_TIM7_Init();
 80001f4:	f000 f928 	bl	8000448 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, buffer_adc, ADC_BUFFER_LENGTH);
 80001f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80001fc:	4909      	ldr	r1, [pc, #36]	@ (8000224 <main+0x50>)
 80001fe:	480a      	ldr	r0, [pc, #40]	@ (8000228 <main+0x54>)
 8000200:	f000 fe30 	bl	8000e64 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8000204:	4809      	ldr	r0, [pc, #36]	@ (800022c <main+0x58>)
 8000206:	f003 fdbf 	bl	8003d88 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 800020a:	4809      	ldr	r0, [pc, #36]	@ (8000230 <main+0x5c>)
 800020c:	f003 fdbc 	bl	8003d88 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(150);
 8000210:	2096      	movs	r0, #150	@ 0x96
 8000212:	f000 fbff 	bl	8000a14 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 8000216:	2140      	movs	r1, #64	@ 0x40
 8000218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021c:	f002 f8b0 	bl	8002380 <HAL_GPIO_TogglePin>
	  HAL_Delay(150);
 8000220:	bf00      	nop
 8000222:	e7f5      	b.n	8000210 <main+0x3c>
 8000224:	200001dc 	.word	0x200001dc
 8000228:	20000028 	.word	0x20000028
 800022c:	200000bc 	.word	0x200000bc
 8000230:	20000108 	.word	0x20000108

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b0a6      	sub	sp, #152	@ 0x98
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800023e:	2228      	movs	r2, #40	@ 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f004 fb7b 	bl	800493e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2258      	movs	r2, #88	@ 0x58
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f004 fb6d 	bl	800493e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000264:	2302      	movs	r3, #2
 8000266:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026c:	2310      	movs	r3, #16
 800026e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000278:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800027c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000280:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000284:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000292:	4618      	mov	r0, r3
 8000294:	f002 f88e 	bl	80023b4 <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029e:	f000 f9d4 	bl	800064a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	2302      	movs	r3, #2
 80002a8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 f8cc 	bl	800345c <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ca:	f000 f9be 	bl	800064a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80002ce:	2382      	movs	r3, #130	@ 0x82
 80002d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f003 fadc 	bl	800389c <HAL_RCCEx_PeriphCLKConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002ea:	f000 f9ae 	bl	800064a <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3798      	adds	r7, #152	@ 0x98
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08a      	sub	sp, #40	@ 0x28
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002fe:	f107 031c 	add.w	r3, r7, #28
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
 8000318:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800031a:	4b2f      	ldr	r3, [pc, #188]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 800031c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000322:	4b2d      	ldr	r3, [pc, #180]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 8000324:	2200      	movs	r2, #0
 8000326:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000328:	4b2b      	ldr	r3, [pc, #172]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032e:	4b2a      	ldr	r3, [pc, #168]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000334:	4b28      	ldr	r3, [pc, #160]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 8000336:	2200      	movs	r2, #0
 8000338:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033a:	4b27      	ldr	r3, [pc, #156]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 800033c:	2200      	movs	r2, #0
 800033e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000342:	4b25      	ldr	r3, [pc, #148]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 8000344:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000348:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800034a:	4b23      	ldr	r3, [pc, #140]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 800034c:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8000350:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000352:	4b21      	ldr	r3, [pc, #132]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000358:	4b1f      	ldr	r3, [pc, #124]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 800035a:	2201      	movs	r2, #1
 800035c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800035e:	4b1e      	ldr	r3, [pc, #120]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 8000360:	2201      	movs	r2, #1
 8000362:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000366:	4b1c      	ldr	r3, [pc, #112]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 8000368:	2204      	movs	r2, #4
 800036a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800036c:	4b1a      	ldr	r3, [pc, #104]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 800036e:	2200      	movs	r2, #0
 8000370:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000372:	4b19      	ldr	r3, [pc, #100]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000378:	4817      	ldr	r0, [pc, #92]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 800037a:	f000 fb79 	bl	8000a70 <HAL_ADC_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000384:	f000 f961 	bl	800064a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000388:	2300      	movs	r3, #0
 800038a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800038c:	f107 031c 	add.w	r3, r7, #28
 8000390:	4619      	mov	r1, r3
 8000392:	4811      	ldr	r0, [pc, #68]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 8000394:	f001 f96c 	bl	8001670 <HAL_ADCEx_MultiModeConfigChannel>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800039e:	f000 f954 	bl	800064a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003a2:	2301      	movs	r3, #1
 80003a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4619      	mov	r1, r3
 80003be:	4806      	ldr	r0, [pc, #24]	@ (80003d8 <MX_ADC1_Init+0xe0>)
 80003c0:	f000 fe6c 	bl	800109c <HAL_ADC_ConfigChannel>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80003ca:	f000 f93e 	bl	800064a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	3728      	adds	r7, #40	@ 0x28
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000028 	.word	0x20000028

080003dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <MX_TIM6_Init+0x64>)
 80003ee:	4a15      	ldr	r2, [pc, #84]	@ (8000444 <MX_TIM6_Init+0x68>)
 80003f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 80003f2:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <MX_TIM6_Init+0x64>)
 80003f4:	2247      	movs	r2, #71	@ 0x47
 80003f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f8:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <MX_TIM6_Init+0x64>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 195-1;
 80003fe:	4b10      	ldr	r3, [pc, #64]	@ (8000440 <MX_TIM6_Init+0x64>)
 8000400:	22c2      	movs	r2, #194	@ 0xc2
 8000402:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <MX_TIM6_Init+0x64>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800040a:	480d      	ldr	r0, [pc, #52]	@ (8000440 <MX_TIM6_Init+0x64>)
 800040c:	f003 fc64 	bl	8003cd8 <HAL_TIM_Base_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000416:	f000 f918 	bl	800064a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800041a:	2320      	movs	r3, #32
 800041c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	4806      	ldr	r0, [pc, #24]	@ (8000440 <MX_TIM6_Init+0x64>)
 8000428:	f003 fdc0 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000432:	f000 f90a 	bl	800064a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	200000bc 	.word	0x200000bc
 8000444:	40001000 	.word	0x40001000

08000448 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000458:	4b14      	ldr	r3, [pc, #80]	@ (80004ac <MX_TIM7_Init+0x64>)
 800045a:	4a15      	ldr	r2, [pc, #84]	@ (80004b0 <MX_TIM7_Init+0x68>)
 800045c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 800045e:	4b13      	ldr	r3, [pc, #76]	@ (80004ac <MX_TIM7_Init+0x64>)
 8000460:	2201      	movs	r2, #1
 8000462:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000464:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <MX_TIM7_Init+0x64>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 36-1;
 800046a:	4b10      	ldr	r3, [pc, #64]	@ (80004ac <MX_TIM7_Init+0x64>)
 800046c:	2223      	movs	r2, #35	@ 0x23
 800046e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000470:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <MX_TIM7_Init+0x64>)
 8000472:	2200      	movs	r2, #0
 8000474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000476:	480d      	ldr	r0, [pc, #52]	@ (80004ac <MX_TIM7_Init+0x64>)
 8000478:	f003 fc2e 	bl	8003cd8 <HAL_TIM_Base_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000482:	f000 f8e2 	bl	800064a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000486:	2300      	movs	r3, #0
 8000488:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	4619      	mov	r1, r3
 8000492:	4806      	ldr	r0, [pc, #24]	@ (80004ac <MX_TIM7_Init+0x64>)
 8000494:	f003 fd8a 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800049e:	f000 f8d4 	bl	800064a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000108 	.word	0x20000108
 80004b0:	40001400 	.word	0x40001400

080004b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b8:	4b14      	ldr	r3, [pc, #80]	@ (800050c <MX_USART2_UART_Init+0x58>)
 80004ba:	4a15      	ldr	r2, [pc, #84]	@ (8000510 <MX_USART2_UART_Init+0x5c>)
 80004bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004be:	4b13      	ldr	r3, [pc, #76]	@ (800050c <MX_USART2_UART_Init+0x58>)
 80004c0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80004c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004c6:	4b11      	ldr	r3, [pc, #68]	@ (800050c <MX_USART2_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <MX_USART2_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <MX_USART2_UART_Init+0x58>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004de:	4b0b      	ldr	r3, [pc, #44]	@ (800050c <MX_USART2_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	4b09      	ldr	r3, [pc, #36]	@ (800050c <MX_USART2_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	@ (800050c <MX_USART2_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f0:	4b06      	ldr	r3, [pc, #24]	@ (800050c <MX_USART2_UART_Init+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f6:	4805      	ldr	r0, [pc, #20]	@ (800050c <MX_USART2_UART_Init+0x58>)
 80004f8:	f003 fde4 	bl	80040c4 <HAL_UART_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000502:	f000 f8a2 	bl	800064a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000154 	.word	0x20000154
 8000510:	40004400 	.word	0x40004400

08000514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <MX_DMA_Init+0x38>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <MX_DMA_Init+0x38>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b09      	ldr	r3, [pc, #36]	@ (800054c <MX_DMA_Init+0x38>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	200b      	movs	r0, #11
 8000538:	f001 fb97 	bl	8001c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800053c:	200b      	movs	r0, #11
 800053e:	f001 fbb0 	bl	8001ca2 <HAL_NVIC_EnableIRQ>

}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	@ 0x28
 8000554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <MX_GPIO_Init+0xc4>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a2a      	ldr	r2, [pc, #168]	@ (8000614 <MX_GPIO_Init+0xc4>)
 800056c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <MX_GPIO_Init+0xc4>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057e:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <MX_GPIO_Init+0xc4>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a24      	ldr	r2, [pc, #144]	@ (8000614 <MX_GPIO_Init+0xc4>)
 8000584:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <MX_GPIO_Init+0xc4>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b1f      	ldr	r3, [pc, #124]	@ (8000614 <MX_GPIO_Init+0xc4>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a1e      	ldr	r2, [pc, #120]	@ (8000614 <MX_GPIO_Init+0xc4>)
 800059c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <MX_GPIO_Init+0xc4>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <MX_GPIO_Init+0xc4>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a18      	ldr	r2, [pc, #96]	@ (8000614 <MX_GPIO_Init+0xc4>)
 80005b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <MX_GPIO_Init+0xc4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trace0_Pin|Trace1_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2160      	movs	r1, #96	@ 0x60
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f001 febf 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	480b      	ldr	r0, [pc, #44]	@ (8000618 <MX_GPIO_Init+0xc8>)
 80005ea:	f001 fd27 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : Trace0_Pin Trace1_Pin */
  GPIO_InitStruct.Pin = Trace0_Pin|Trace1_Pin;
 80005ee:	2360      	movs	r3, #96	@ 0x60
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000608:	f001 fd18 	bl	800203c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	@ 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	48000800 	.word	0x48000800

0800061c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <HAL_ADC_ConvCpltCallback>:
void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
 8000638:	2120      	movs	r1, #32
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f001 fe9f 	bl	8002380 <HAL_GPIO_TogglePin>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064e:	b672      	cpsid	i
}
 8000650:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000652:	bf00      	nop
 8000654:	e7fd      	b.n	8000652 <Error_Handler+0x8>
	...

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <HAL_MspInit+0x44>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a0e      	ldr	r2, [pc, #56]	@ (800069c <HAL_MspInit+0x44>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <HAL_MspInit+0x44>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <HAL_MspInit+0x44>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a08      	ldr	r2, [pc, #32]	@ (800069c <HAL_MspInit+0x44>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <HAL_MspInit+0x44>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800068e:	2007      	movs	r0, #7
 8000690:	f001 fae0 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006c0:	d14c      	bne.n	800075c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006c2:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <HAL_ADC_MspInit+0xc4>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a27      	ldr	r2, [pc, #156]	@ (8000764 <HAL_ADC_MspInit+0xc4>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <HAL_ADC_MspInit+0xc4>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <HAL_ADC_MspInit+0xc4>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a21      	ldr	r2, [pc, #132]	@ (8000764 <HAL_ADC_MspInit+0xc4>)
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <HAL_ADC_MspInit+0xc4>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000708:	f001 fc98 	bl	800203c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <HAL_ADC_MspInit+0xc8>)
 800070e:	4a17      	ldr	r2, [pc, #92]	@ (800076c <HAL_ADC_MspInit+0xcc>)
 8000710:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <HAL_ADC_MspInit+0xc8>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <HAL_ADC_MspInit+0xc8>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <HAL_ADC_MspInit+0xc8>)
 8000720:	2280      	movs	r2, #128	@ 0x80
 8000722:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000724:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <HAL_ADC_MspInit+0xc8>)
 8000726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800072a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <HAL_ADC_MspInit+0xc8>)
 800072e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000732:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <HAL_ADC_MspInit+0xc8>)
 8000736:	2220      	movs	r2, #32
 8000738:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <HAL_ADC_MspInit+0xc8>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000740:	4809      	ldr	r0, [pc, #36]	@ (8000768 <HAL_ADC_MspInit+0xc8>)
 8000742:	f001 fac8 	bl	8001cd6 <HAL_DMA_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 800074c:	f7ff ff7d 	bl	800064a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <HAL_ADC_MspInit+0xc8>)
 8000754:	639a      	str	r2, [r3, #56]	@ 0x38
 8000756:	4a04      	ldr	r2, [pc, #16]	@ (8000768 <HAL_ADC_MspInit+0xc8>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	@ 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	20000078 	.word	0x20000078
 800076c:	40020008 	.word	0x40020008

08000770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a13      	ldr	r2, [pc, #76]	@ (80007cc <HAL_TIM_Base_MspInit+0x5c>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d10c      	bne.n	800079c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800079a:	e010      	b.n	80007be <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0c      	ldr	r2, [pc, #48]	@ (80007d4 <HAL_TIM_Base_MspInit+0x64>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d10b      	bne.n	80007be <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80007a6:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	4a09      	ldr	r2, [pc, #36]	@ (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	61d3      	str	r3, [r2, #28]
 80007b2:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40001000 	.word	0x40001000
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40001400 	.word	0x40001400

080007d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	@ 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a17      	ldr	r2, [pc, #92]	@ (8000854 <HAL_UART_MspInit+0x7c>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d128      	bne.n	800084c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <HAL_UART_MspInit+0x80>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a16      	ldr	r2, [pc, #88]	@ (8000858 <HAL_UART_MspInit+0x80>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <HAL_UART_MspInit+0x80>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <HAL_UART_MspInit+0x80>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a10      	ldr	r2, [pc, #64]	@ (8000858 <HAL_UART_MspInit+0x80>)
 8000818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <HAL_UART_MspInit+0x80>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082a:	230c      	movs	r3, #12
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083a:	2307      	movs	r3, #7
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000848:	f001 fbf8 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	@ 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40004400 	.word	0x40004400
 8000858:	40021000 	.word	0x40021000

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <NMI_Handler+0x4>

08000864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <UsageFault_Handler+0x4>

08000884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b2:	f000 f88f 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008c0:	4802      	ldr	r0, [pc, #8]	@ (80008cc <DMA1_Channel1_IRQHandler+0x10>)
 80008c2:	f001 faae 	bl	8001e22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000078 	.word	0x20000078

080008d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <SystemInit+0x20>)
 80008d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008da:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <SystemInit+0x20>)
 80008dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800092c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f8:	f7ff ffea 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	@ (8000934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	@ (8000940 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f004 f815 	bl	8004950 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000926:	f7ff fc55 	bl	80001d4 <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800092c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000938:	080049f0 	.word	0x080049f0
  ldr r2, =_sbss
 800093c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000940:	200011e0 	.word	0x200011e0

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>
	...

08000948 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	@ (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f001 f97b 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	2000      	movs	r0, #0
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fe78 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f993 	bl	8001cbe <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f001 f95b 	bl	8001c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	@ (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	200011dc 	.word	0x200011dc

080009fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a00:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	200011dc 	.word	0x200011dc

08000a14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff ffee 	bl	80009fc <HAL_GetTick>
 8000a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d005      	beq.n	8000a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <HAL_Delay+0x44>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffde 	bl	80009fc <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8f7      	bhi.n	8000a3c <HAL_Delay+0x28>
  {
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008

08000a5c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b09a      	sub	sp, #104	@ 0x68
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d101      	bne.n	8000a90 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e1e3      	b.n	8000e58 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	f003 0310 	and.w	r3, r3, #16
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d176      	bne.n	8000b90 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d152      	bne.n	8000b50 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fdeb 	bl	80006a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d13b      	bne.n	8000b50 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 ff85 	bl	80019e8 <ADC_Disable>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	f003 0310 	and.w	r3, r3, #16
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d12f      	bne.n	8000b50 <HAL_ADC_Init+0xe0>
 8000af0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d12b      	bne.n	8000b50 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b00:	f023 0302 	bic.w	r3, r3, #2
 8000b04:	f043 0202 	orr.w	r2, r3, #2
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000b1a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b2a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b2c:	4b92      	ldr	r3, [pc, #584]	@ (8000d78 <HAL_ADC_Init+0x308>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a92      	ldr	r2, [pc, #584]	@ (8000d7c <HAL_ADC_Init+0x30c>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	0c9a      	lsrs	r2, r3, #18
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b42:	e002      	b.n	8000b4a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1f9      	bne.n	8000b44 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d007      	beq.n	8000b6e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b6c:	d110      	bne.n	8000b90 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f023 0312 	bic.w	r3, r3, #18
 8000b76:	f043 0210 	orr.w	r2, r3, #16
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	f043 0201 	orr.w	r2, r3, #1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8150 	bne.w	8000e3e <HAL_ADC_Init+0x3ce>
 8000b9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f040 814b 	bne.w	8000e3e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 8143 	bne.w	8000e3e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000bc0:	f043 0202 	orr.w	r2, r3, #2
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bd0:	d004      	beq.n	8000bdc <HAL_ADC_Init+0x16c>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a6a      	ldr	r2, [pc, #424]	@ (8000d80 <HAL_ADC_Init+0x310>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d101      	bne.n	8000be0 <HAL_ADC_Init+0x170>
 8000bdc:	4b69      	ldr	r3, [pc, #420]	@ (8000d84 <HAL_ADC_Init+0x314>)
 8000bde:	e000      	b.n	8000be2 <HAL_ADC_Init+0x172>
 8000be0:	4b69      	ldr	r3, [pc, #420]	@ (8000d88 <HAL_ADC_Init+0x318>)
 8000be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bec:	d102      	bne.n	8000bf4 <HAL_ADC_Init+0x184>
 8000bee:	4b64      	ldr	r3, [pc, #400]	@ (8000d80 <HAL_ADC_Init+0x310>)
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e01a      	b.n	8000c2a <HAL_ADC_Init+0x1ba>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a61      	ldr	r2, [pc, #388]	@ (8000d80 <HAL_ADC_Init+0x310>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d103      	bne.n	8000c06 <HAL_ADC_Init+0x196>
 8000bfe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	e011      	b.n	8000c2a <HAL_ADC_Init+0x1ba>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a60      	ldr	r2, [pc, #384]	@ (8000d8c <HAL_ADC_Init+0x31c>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d102      	bne.n	8000c16 <HAL_ADC_Init+0x1a6>
 8000c10:	4b5f      	ldr	r3, [pc, #380]	@ (8000d90 <HAL_ADC_Init+0x320>)
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	e009      	b.n	8000c2a <HAL_ADC_Init+0x1ba>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a5d      	ldr	r2, [pc, #372]	@ (8000d90 <HAL_ADC_Init+0x320>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d102      	bne.n	8000c26 <HAL_ADC_Init+0x1b6>
 8000c20:	4b5a      	ldr	r3, [pc, #360]	@ (8000d8c <HAL_ADC_Init+0x31c>)
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	e001      	b.n	8000c2a <HAL_ADC_Init+0x1ba>
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d108      	bne.n	8000c4a <HAL_ADC_Init+0x1da>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d101      	bne.n	8000c4a <HAL_ADC_Init+0x1da>
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <HAL_ADC_Init+0x1dc>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d11c      	bne.n	8000c8a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c50:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d010      	beq.n	8000c78 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d107      	bne.n	8000c72 <HAL_ADC_Init+0x202>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d101      	bne.n	8000c72 <HAL_ADC_Init+0x202>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e000      	b.n	8000c74 <HAL_ADC_Init+0x204>
 8000c72:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d108      	bne.n	8000c8a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	431a      	orrs	r2, r3
 8000c86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c88:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7e5b      	ldrb	r3, [r3, #25]
 8000c8e:	035b      	lsls	r3, r3, #13
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000c94:	2a01      	cmp	r2, #1
 8000c96:	d002      	beq.n	8000c9e <HAL_ADC_Init+0x22e>
 8000c98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c9c:	e000      	b.n	8000ca0 <HAL_ADC_Init+0x230>
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d11b      	bne.n	8000cf6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7e5b      	ldrb	r3, [r3, #25]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d109      	bne.n	8000cda <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	045a      	lsls	r2, r3, #17
 8000cce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8000cd8:	e00d      	b.n	8000cf6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000ce2:	f043 0220 	orr.w	r2, r3, #32
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	f043 0201 	orr.w	r2, r3, #1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d054      	beq.n	8000da8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a22      	ldr	r2, [pc, #136]	@ (8000d8c <HAL_ADC_Init+0x31c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d004      	beq.n	8000d12 <HAL_ADC_Init+0x2a2>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a20      	ldr	r2, [pc, #128]	@ (8000d90 <HAL_ADC_Init+0x320>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d140      	bne.n	8000d94 <HAL_ADC_Init+0x324>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d16:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000d1a:	d02a      	beq.n	8000d72 <HAL_ADC_Init+0x302>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d24:	d022      	beq.n	8000d6c <HAL_ADC_Init+0x2fc>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000d2e:	d01a      	beq.n	8000d66 <HAL_ADC_Init+0x2f6>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d34:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000d38:	d012      	beq.n	8000d60 <HAL_ADC_Init+0x2f0>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d3e:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000d42:	d00a      	beq.n	8000d5a <HAL_ADC_Init+0x2ea>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d48:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000d4c:	d002      	beq.n	8000d54 <HAL_ADC_Init+0x2e4>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d52:	e023      	b.n	8000d9c <HAL_ADC_Init+0x32c>
 8000d54:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d58:	e020      	b.n	8000d9c <HAL_ADC_Init+0x32c>
 8000d5a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d5e:	e01d      	b.n	8000d9c <HAL_ADC_Init+0x32c>
 8000d60:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d64:	e01a      	b.n	8000d9c <HAL_ADC_Init+0x32c>
 8000d66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d6a:	e017      	b.n	8000d9c <HAL_ADC_Init+0x32c>
 8000d6c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000d70:	e014      	b.n	8000d9c <HAL_ADC_Init+0x32c>
 8000d72:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000d76:	e011      	b.n	8000d9c <HAL_ADC_Init+0x32c>
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	50000100 	.word	0x50000100
 8000d84:	50000300 	.word	0x50000300
 8000d88:	50000700 	.word	0x50000700
 8000d8c:	50000400 	.word	0x50000400
 8000d90:	50000500 	.word	0x50000500
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000da0:	4313      	orrs	r3, r2
 8000da2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000da4:	4313      	orrs	r3, r2
 8000da6:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d114      	bne.n	8000de0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000dc4:	f023 0302 	bic.w	r3, r3, #2
 8000dc8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7e1b      	ldrb	r3, [r3, #24]
 8000dce:	039a      	lsls	r2, r3, #14
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <HAL_ADC_Init+0x3f0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000df0:	430b      	orrs	r3, r1
 8000df2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d10c      	bne.n	8000e16 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f023 010f 	bic.w	r1, r3, #15
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	1e5a      	subs	r2, r3, #1
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e14:	e007      	b.n	8000e26 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 020f 	bic.w	r2, r2, #15
 8000e24:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	f023 0303 	bic.w	r3, r3, #3
 8000e34:	f043 0201 	orr.w	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e3c:	e00a      	b.n	8000e54 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f023 0312 	bic.w	r3, r3, #18
 8000e46:	f043 0210 	orr.w	r2, r3, #16
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3768      	adds	r7, #104	@ 0x68
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	fff0c007 	.word	0xfff0c007

08000e64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f040 80f7 	bne.w	8001072 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d101      	bne.n	8000e92 <HAL_ADC_Start_DMA+0x2e>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e0f2      	b.n	8001078 <HAL_ADC_Start_DMA+0x214>
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ea2:	d004      	beq.n	8000eae <HAL_ADC_Start_DMA+0x4a>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a75      	ldr	r2, [pc, #468]	@ (8001080 <HAL_ADC_Start_DMA+0x21c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d109      	bne.n	8000ec2 <HAL_ADC_Start_DMA+0x5e>
 8000eae:	4b75      	ldr	r3, [pc, #468]	@ (8001084 <HAL_ADC_Start_DMA+0x220>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf0c      	ite	eq
 8000eba:	2301      	moveq	r3, #1
 8000ebc:	2300      	movne	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	e008      	b.n	8000ed4 <HAL_ADC_Start_DMA+0x70>
 8000ec2:	4b71      	ldr	r3, [pc, #452]	@ (8001088 <HAL_ADC_Start_DMA+0x224>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bf0c      	ite	eq
 8000ece:	2301      	moveq	r3, #1
 8000ed0:	2300      	movne	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80c5 	beq.w	8001064 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f000 fd20 	bl	8001920 <ADC_Enable>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 80b7 	bne.w	800105a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f08:	d004      	beq.n	8000f14 <HAL_ADC_Start_DMA+0xb0>
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001080 <HAL_ADC_Start_DMA+0x21c>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d106      	bne.n	8000f22 <HAL_ADC_Start_DMA+0xbe>
 8000f14:	4b5b      	ldr	r3, [pc, #364]	@ (8001084 <HAL_ADC_Start_DMA+0x220>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 031f 	and.w	r3, r3, #31
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d010      	beq.n	8000f42 <HAL_ADC_Start_DMA+0xde>
 8000f20:	e005      	b.n	8000f2e <HAL_ADC_Start_DMA+0xca>
 8000f22:	4b59      	ldr	r3, [pc, #356]	@ (8001088 <HAL_ADC_Start_DMA+0x224>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d009      	beq.n	8000f42 <HAL_ADC_Start_DMA+0xde>
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f36:	d004      	beq.n	8000f42 <HAL_ADC_Start_DMA+0xde>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a53      	ldr	r2, [pc, #332]	@ (800108c <HAL_ADC_Start_DMA+0x228>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d115      	bne.n	8000f6e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d036      	beq.n	8000fca <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f64:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f6c:	e02d      	b.n	8000fca <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f82:	d004      	beq.n	8000f8e <HAL_ADC_Start_DMA+0x12a>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a3d      	ldr	r2, [pc, #244]	@ (8001080 <HAL_ADC_Start_DMA+0x21c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d10a      	bne.n	8000fa4 <HAL_ADC_Start_DMA+0x140>
 8000f8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	bf14      	ite	ne
 8000f9c:	2301      	movne	r3, #1
 8000f9e:	2300      	moveq	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	e008      	b.n	8000fb6 <HAL_ADC_Start_DMA+0x152>
 8000fa4:	4b39      	ldr	r3, [pc, #228]	@ (800108c <HAL_ADC_Start_DMA+0x228>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d007      	beq.n	8000fca <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fc2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fd6:	d106      	bne.n	8000fe6 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fdc:	f023 0206 	bic.w	r2, r3, #6
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fe4:	e002      	b.n	8000fec <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ff8:	4a25      	ldr	r2, [pc, #148]	@ (8001090 <HAL_ADC_Start_DMA+0x22c>)
 8000ffa:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001000:	4a24      	ldr	r2, [pc, #144]	@ (8001094 <HAL_ADC_Start_DMA+0x230>)
 8001002:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001008:	4a23      	ldr	r2, [pc, #140]	@ (8001098 <HAL_ADC_Start_DMA+0x234>)
 800100a:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	221c      	movs	r2, #28
 8001012:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0210 	orr.w	r2, r2, #16
 8001022:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0201 	orr.w	r2, r2, #1
 8001032:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3340      	adds	r3, #64	@ 0x40
 800103e:	4619      	mov	r1, r3
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f000 fe8e 	bl	8001d64 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0204 	orr.w	r2, r2, #4
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	e00d      	b.n	8001076 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001062:	e008      	b.n	8001076 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001070:	e001      	b.n	8001076 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001072:	2302      	movs	r3, #2
 8001074:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001076:	7dfb      	ldrb	r3, [r7, #23]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	50000100 	.word	0x50000100
 8001084:	50000300 	.word	0x50000300
 8001088:	50000700 	.word	0x50000700
 800108c:	50000400 	.word	0x50000400
 8001090:	08001855 	.word	0x08001855
 8001094:	080018cf 	.word	0x080018cf
 8001098:	080018eb 	.word	0x080018eb

0800109c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800109c:	b480      	push	{r7}
 800109e:	b09b      	sub	sp, #108	@ 0x6c
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d101      	bne.n	80010be <HAL_ADC_ConfigChannel+0x22>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e2c8      	b.n	8001650 <HAL_ADC_ConfigChannel+0x5b4>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f040 82ac 	bne.w	800162e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d81c      	bhi.n	8001118 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	461a      	mov	r2, r3
 80010f2:	231f      	movs	r3, #31
 80010f4:	4093      	lsls	r3, r2
 80010f6:	43db      	mvns	r3, r3
 80010f8:	4019      	ands	r1, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa00 f203 	lsl.w	r2, r0, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	631a      	str	r2, [r3, #48]	@ 0x30
 8001116:	e063      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b09      	cmp	r3, #9
 800111e:	d81e      	bhi.n	800115e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	3b1e      	subs	r3, #30
 8001134:	221f      	movs	r2, #31
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	4019      	ands	r1, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	3b1e      	subs	r3, #30
 8001150:	fa00 f203 	lsl.w	r2, r0, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	635a      	str	r2, [r3, #52]	@ 0x34
 800115c:	e040      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b0e      	cmp	r3, #14
 8001164:	d81e      	bhi.n	80011a4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	3b3c      	subs	r3, #60	@ 0x3c
 800117a:	221f      	movs	r2, #31
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	4019      	ands	r1, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	3b3c      	subs	r3, #60	@ 0x3c
 8001196:	fa00 f203 	lsl.w	r2, r0, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80011a2:	e01d      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	3b5a      	subs	r3, #90	@ 0x5a
 80011b8:	221f      	movs	r2, #31
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	4019      	ands	r1, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	3b5a      	subs	r3, #90	@ 0x5a
 80011d4:	fa00 f203 	lsl.w	r2, r0, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 80e5 	bne.w	80013ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b09      	cmp	r3, #9
 80011f6:	d91c      	bls.n	8001232 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6999      	ldr	r1, [r3, #24]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	3b1e      	subs	r3, #30
 800120a:	2207      	movs	r2, #7
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	4019      	ands	r1, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6898      	ldr	r0, [r3, #8]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	3b1e      	subs	r3, #30
 8001224:	fa00 f203 	lsl.w	r2, r0, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	619a      	str	r2, [r3, #24]
 8001230:	e019      	b.n	8001266 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6959      	ldr	r1, [r3, #20]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	2207      	movs	r2, #7
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	4019      	ands	r1, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	6898      	ldr	r0, [r3, #8]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	fa00 f203 	lsl.w	r2, r0, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	695a      	ldr	r2, [r3, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	3b01      	subs	r3, #1
 8001284:	2b03      	cmp	r3, #3
 8001286:	d84f      	bhi.n	8001328 <HAL_ADC_ConfigChannel+0x28c>
 8001288:	a201      	add	r2, pc, #4	@ (adr r2, 8001290 <HAL_ADC_ConfigChannel+0x1f4>)
 800128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128e:	bf00      	nop
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012c3 	.word	0x080012c3
 8001298:	080012e5 	.word	0x080012e5
 800129c:	08001307 	.word	0x08001307
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012a6:	4b99      	ldr	r3, [pc, #612]	@ (800150c <HAL_ADC_ConfigChannel+0x470>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	0691      	lsls	r1, r2, #26
 80012b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012b2:	430a      	orrs	r2, r1
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80012be:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012c0:	e07b      	b.n	80013ba <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80012c8:	4b90      	ldr	r3, [pc, #576]	@ (800150c <HAL_ADC_ConfigChannel+0x470>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	0691      	lsls	r1, r2, #26
 80012d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012d4:	430a      	orrs	r2, r1
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80012e0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012e2:	e06a      	b.n	80013ba <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80012ea:	4b88      	ldr	r3, [pc, #544]	@ (800150c <HAL_ADC_ConfigChannel+0x470>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	0691      	lsls	r1, r2, #26
 80012f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012f6:	430a      	orrs	r2, r1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001302:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001304:	e059      	b.n	80013ba <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800130c:	4b7f      	ldr	r3, [pc, #508]	@ (800150c <HAL_ADC_ConfigChannel+0x470>)
 800130e:	4013      	ands	r3, r2
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	0691      	lsls	r1, r2, #26
 8001316:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001318:	430a      	orrs	r2, r1
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001324:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001326:	e048      	b.n	80013ba <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	069b      	lsls	r3, r3, #26
 8001338:	429a      	cmp	r2, r3
 800133a:	d107      	bne.n	800134c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800134a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001352:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	069b      	lsls	r3, r3, #26
 800135c:	429a      	cmp	r2, r3
 800135e:	d107      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800136e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001376:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	069b      	lsls	r3, r3, #26
 8001380:	429a      	cmp	r2, r3
 8001382:	d107      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001392:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800139a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	069b      	lsls	r3, r3, #26
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d107      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80013b6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80013b8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d108      	bne.n	80013da <HAL_ADC_ConfigChannel+0x33e>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d101      	bne.n	80013da <HAL_ADC_ConfigChannel+0x33e>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_ADC_ConfigChannel+0x340>
 80013da:	2300      	movs	r3, #0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f040 8131 	bne.w	8001644 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d00f      	beq.n	800140a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2201      	movs	r2, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43da      	mvns	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	400a      	ands	r2, r1
 8001404:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001408:	e049      	b.n	800149e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2201      	movs	r2, #1
 8001418:	409a      	lsls	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b09      	cmp	r3, #9
 800142a:	d91c      	bls.n	8001466 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6999      	ldr	r1, [r3, #24]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	3b1b      	subs	r3, #27
 800143e:	2207      	movs	r2, #7
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	4019      	ands	r1, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6898      	ldr	r0, [r3, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	3b1b      	subs	r3, #27
 8001458:	fa00 f203 	lsl.w	r2, r0, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	619a      	str	r2, [r3, #24]
 8001464:	e01b      	b.n	800149e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6959      	ldr	r1, [r3, #20]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	2207      	movs	r2, #7
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	4019      	ands	r1, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	6898      	ldr	r0, [r3, #8]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	fa00 f203 	lsl.w	r2, r0, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014a6:	d004      	beq.n	80014b2 <HAL_ADC_ConfigChannel+0x416>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <HAL_ADC_ConfigChannel+0x474>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x41a>
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <HAL_ADC_ConfigChannel+0x478>)
 80014b4:	e000      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x41c>
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <HAL_ADC_ConfigChannel+0x47c>)
 80014b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b10      	cmp	r3, #16
 80014c0:	d105      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d015      	beq.n	80014fa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014d2:	2b11      	cmp	r3, #17
 80014d4:	d105      	bne.n	80014e2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014e6:	2b12      	cmp	r3, #18
 80014e8:	f040 80ac 	bne.w	8001644 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80014ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f040 80a5 	bne.w	8001644 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001502:	d10b      	bne.n	800151c <HAL_ADC_ConfigChannel+0x480>
 8001504:	4b02      	ldr	r3, [pc, #8]	@ (8001510 <HAL_ADC_ConfigChannel+0x474>)
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e023      	b.n	8001552 <HAL_ADC_ConfigChannel+0x4b6>
 800150a:	bf00      	nop
 800150c:	83fff000 	.word	0x83fff000
 8001510:	50000100 	.word	0x50000100
 8001514:	50000300 	.word	0x50000300
 8001518:	50000700 	.word	0x50000700
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a4e      	ldr	r2, [pc, #312]	@ (800165c <HAL_ADC_ConfigChannel+0x5c0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d103      	bne.n	800152e <HAL_ADC_ConfigChannel+0x492>
 8001526:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	e011      	b.n	8001552 <HAL_ADC_ConfigChannel+0x4b6>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a4b      	ldr	r2, [pc, #300]	@ (8001660 <HAL_ADC_ConfigChannel+0x5c4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d102      	bne.n	800153e <HAL_ADC_ConfigChannel+0x4a2>
 8001538:	4b4a      	ldr	r3, [pc, #296]	@ (8001664 <HAL_ADC_ConfigChannel+0x5c8>)
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e009      	b.n	8001552 <HAL_ADC_ConfigChannel+0x4b6>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a48      	ldr	r2, [pc, #288]	@ (8001664 <HAL_ADC_ConfigChannel+0x5c8>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d102      	bne.n	800154e <HAL_ADC_ConfigChannel+0x4b2>
 8001548:	4b45      	ldr	r3, [pc, #276]	@ (8001660 <HAL_ADC_ConfigChannel+0x5c4>)
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e001      	b.n	8001552 <HAL_ADC_ConfigChannel+0x4b6>
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d108      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x4d6>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x4d6>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_ADC_ConfigChannel+0x4d8>
 8001572:	2300      	movs	r3, #0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d150      	bne.n	800161a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001578:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d010      	beq.n	80015a0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d107      	bne.n	800159a <HAL_ADC_ConfigChannel+0x4fe>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_ADC_ConfigChannel+0x4fe>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_ADC_ConfigChannel+0x500>
 800159a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800159c:	2b00      	cmp	r3, #0
 800159e:	d13c      	bne.n	800161a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b10      	cmp	r3, #16
 80015a6:	d11d      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x548>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b0:	d118      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80015b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015bc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <HAL_ADC_ConfigChannel+0x5cc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a2a      	ldr	r2, [pc, #168]	@ (800166c <HAL_ADC_ConfigChannel+0x5d0>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0c9a      	lsrs	r2, r3, #18
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015d4:	e002      	b.n	80015dc <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3b01      	subs	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f9      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015e2:	e02e      	b.n	8001642 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b11      	cmp	r3, #17
 80015ea:	d10b      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x568>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015f4:	d106      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80015f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80015fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001600:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001602:	e01e      	b.n	8001642 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b12      	cmp	r3, #18
 800160a:	d11a      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800160c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001614:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001616:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001618:	e013      	b.n	8001642 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f043 0220 	orr.w	r2, r3, #32
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800162c:	e00a      	b.n	8001644 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f043 0220 	orr.w	r2, r3, #32
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001640:	e000      	b.n	8001644 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001642:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800164c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001650:	4618      	mov	r0, r3
 8001652:	376c      	adds	r7, #108	@ 0x6c
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	50000100 	.word	0x50000100
 8001660:	50000400 	.word	0x50000400
 8001664:	50000500 	.word	0x50000500
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83

08001670 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001670:	b480      	push	{r7}
 8001672:	b099      	sub	sp, #100	@ 0x64
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001688:	d102      	bne.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800168a:	4b6d      	ldr	r3, [pc, #436]	@ (8001840 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	e01a      	b.n	80016c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a6a      	ldr	r2, [pc, #424]	@ (8001840 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d103      	bne.n	80016a2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800169a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	e011      	b.n	80016c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a67      	ldr	r2, [pc, #412]	@ (8001844 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d102      	bne.n	80016b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80016ac:	4b66      	ldr	r3, [pc, #408]	@ (8001848 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	e009      	b.n	80016c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a64      	ldr	r2, [pc, #400]	@ (8001848 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d102      	bne.n	80016c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80016bc:	4b61      	ldr	r3, [pc, #388]	@ (8001844 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	e001      	b.n	80016c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0b0      	b.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80016da:	2302      	movs	r3, #2
 80016dc:	e0a9      	b.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 808d 	bne.w	8001810 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 8086 	bne.w	8001810 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800170c:	d004      	beq.n	8001718 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a4b      	ldr	r2, [pc, #300]	@ (8001840 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d101      	bne.n	800171c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001718:	4b4c      	ldr	r3, [pc, #304]	@ (800184c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800171a:	e000      	b.n	800171e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800171c:	4b4c      	ldr	r3, [pc, #304]	@ (8001850 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800171e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d040      	beq.n	80017aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	6859      	ldr	r1, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800173a:	035b      	lsls	r3, r3, #13
 800173c:	430b      	orrs	r3, r1
 800173e:	431a      	orrs	r2, r3
 8001740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001742:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001764:	2300      	movs	r3, #0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d15c      	bne.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001786:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001788:	2b00      	cmp	r3, #0
 800178a:	d14b      	bne.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800178c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001794:	f023 030f 	bic.w	r3, r3, #15
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	6811      	ldr	r1, [r2, #0]
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	6892      	ldr	r2, [r2, #8]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	431a      	orrs	r2, r3
 80017a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017a8:	e03c      	b.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80017aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d108      	bne.n	80017d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80017d6:	2300      	movs	r3, #0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d123      	bne.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80017f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d112      	bne.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80017fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001806:	f023 030f 	bic.w	r3, r3, #15
 800180a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800180c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800180e:	e009      	b.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	f043 0220 	orr.w	r2, r3, #32
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001822:	e000      	b.n	8001826 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001824:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800182e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001832:	4618      	mov	r0, r3
 8001834:	3764      	adds	r7, #100	@ 0x64
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	50000100 	.word	0x50000100
 8001844:	50000400 	.word	0x50000400
 8001848:	50000500 	.word	0x50000500
 800184c:	50000300 	.word	0x50000300
 8001850:	50000700 	.word	0x50000700

08001854 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001860:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800186a:	2b00      	cmp	r3, #0
 800186c:	d126      	bne.n	80018bc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001884:	2b00      	cmp	r3, #0
 8001886:	d115      	bne.n	80018b4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800188c:	2b00      	cmp	r3, #0
 800188e:	d111      	bne.n	80018b4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f7fe febb 	bl	8000630 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80018ba:	e004      	b.n	80018c6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7fe fe9d 	bl	800061c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001908:	f043 0204 	orr.w	r2, r3, #4
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f7ff f8a3 	bl	8000a5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <ADC_Enable+0x2c>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <ADC_Enable+0x2c>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <ADC_Enable+0x2e>
 800194c:	2300      	movs	r3, #0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d143      	bne.n	80019da <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <ADC_Enable+0xc4>)
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	f043 0210 	orr.w	r2, r3, #16
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e02f      	b.n	80019dc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800198c:	f7ff f836 	bl	80009fc <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001992:	e01b      	b.n	80019cc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001994:	f7ff f832 	bl	80009fc <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d914      	bls.n	80019cc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d00d      	beq.n	80019cc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	f043 0210 	orr.w	r2, r3, #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e007      	b.n	80019dc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d1dc      	bne.n	8001994 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	8000003f 	.word	0x8000003f

080019e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d108      	bne.n	8001a14 <ADC_Disable+0x2c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <ADC_Disable+0x2c>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <ADC_Disable+0x2e>
 8001a14:	2300      	movs	r3, #0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d047      	beq.n	8001aaa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 030d 	and.w	r3, r3, #13
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10f      	bne.n	8001a48 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0202 	orr.w	r2, r2, #2
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001a40:	f7fe ffdc 	bl	80009fc <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a46:	e029      	b.n	8001a9c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	f043 0210 	orr.w	r2, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e023      	b.n	8001aac <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a64:	f7fe ffca 	bl	80009fc <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d914      	bls.n	8001a9c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d10d      	bne.n	8001a9c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	f043 0210 	orr.w	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e007      	b.n	8001aac <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d0dc      	beq.n	8001a64 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	@ (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	@ (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	@ (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	@ (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	@ (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	@ 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	@ 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c20:	d301      	bcc.n	8001c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00f      	b.n	8001c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c26:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <SysTick_Config+0x40>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2e:	210f      	movs	r1, #15
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f7ff ff8e 	bl	8001b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <SysTick_Config+0x40>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3e:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <SysTick_Config+0x40>)
 8001c40:	2207      	movs	r2, #7
 8001c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff29 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff3e 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff8e 	bl	8001ba8 <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff5d 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff31 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffa2 	bl	8001c10 <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e037      	b.n	8001d5c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d02:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001d06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f940 	bl	8001fc4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_DMA_Start_IT+0x20>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e04a      	b.n	8001e1a <HAL_DMA_Start_IT+0xb6>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d13a      	bne.n	8001e0c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f8d4 	bl	8001f68 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 020e 	orr.w	r2, r2, #14
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e00f      	b.n	8001dfa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 020a 	orr.w	r2, r2, #10
 8001de8:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0204 	bic.w	r2, r2, #4
 8001df8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e005      	b.n	8001e18 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e14:	2302      	movs	r3, #2
 8001e16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	2204      	movs	r2, #4
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d024      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x72>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01f      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d107      	bne.n	8001e72 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0204 	bic.w	r2, r2, #4
 8001e70:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7a:	2104      	movs	r1, #4
 8001e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d06a      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e92:	e065      	b.n	8001f60 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	2202      	movs	r2, #2
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d02c      	beq.n	8001efe <HAL_DMA_IRQHandler+0xdc>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d027      	beq.n	8001efe <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10b      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 020a 	bic.w	r2, r2, #10
 8001eca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001edc:	2102      	movs	r1, #2
 8001ede:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d035      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001efc:	e030      	b.n	8001f60 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2208      	movs	r2, #8
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d028      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x13e>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d023      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 020e 	bic.w	r2, r2, #14
 8001f26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f30:	2101      	movs	r1, #1
 8001f32:	fa01 f202 	lsl.w	r2, r1, r2
 8001f36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d004      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	4798      	blx	r3
    }
  }
}
 8001f5e:	e7ff      	b.n	8001f60 <HAL_DMA_IRQHandler+0x13e>
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d108      	bne.n	8001fa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fa6:	e007      	b.n	8001fb8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	60da      	str	r2, [r3, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <DMA_CalcBaseAndBitshift+0x60>)
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d80f      	bhi.n	8001ff8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <DMA_CalcBaseAndBitshift+0x64>)
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4a12      	ldr	r2, [pc, #72]	@ (800202c <DMA_CalcBaseAndBitshift+0x68>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	009a      	lsls	r2, r3, #2
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8002030 <DMA_CalcBaseAndBitshift+0x6c>)
 8001ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001ff6:	e00e      	b.n	8002016 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <DMA_CalcBaseAndBitshift+0x70>)
 8002000:	4413      	add	r3, r2
 8002002:	4a0a      	ldr	r2, [pc, #40]	@ (800202c <DMA_CalcBaseAndBitshift+0x68>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	009a      	lsls	r2, r3, #2
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a09      	ldr	r2, [pc, #36]	@ (8002038 <DMA_CalcBaseAndBitshift+0x74>)
 8002014:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40020407 	.word	0x40020407
 8002028:	bffdfff8 	.word	0xbffdfff8
 800202c:	cccccccd 	.word	0xcccccccd
 8002030:	40020000 	.word	0x40020000
 8002034:	bffdfbf8 	.word	0xbffdfbf8
 8002038:	40020400 	.word	0x40020400

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204a:	e160      	b.n	800230e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8152 	beq.w	8002308 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d005      	beq.n	800207c <HAL_GPIO_Init+0x40>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d130      	bne.n	80020de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b2:	2201      	movs	r2, #1
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0201 	and.w	r2, r3, #1
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d017      	beq.n	800211a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d123      	bne.n	800216e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3208      	adds	r2, #8
 800212e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	6939      	ldr	r1, [r7, #16]
 800216a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0203 	and.w	r2, r3, #3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80ac 	beq.w	8002308 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b0:	4b5e      	ldr	r3, [pc, #376]	@ (800232c <HAL_GPIO_Init+0x2f0>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a5d      	ldr	r2, [pc, #372]	@ (800232c <HAL_GPIO_Init+0x2f0>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b5b      	ldr	r3, [pc, #364]	@ (800232c <HAL_GPIO_Init+0x2f0>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021c8:	4a59      	ldr	r2, [pc, #356]	@ (8002330 <HAL_GPIO_Init+0x2f4>)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021f2:	d025      	beq.n	8002240 <HAL_GPIO_Init+0x204>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a4f      	ldr	r2, [pc, #316]	@ (8002334 <HAL_GPIO_Init+0x2f8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d01f      	beq.n	800223c <HAL_GPIO_Init+0x200>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a4e      	ldr	r2, [pc, #312]	@ (8002338 <HAL_GPIO_Init+0x2fc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d019      	beq.n	8002238 <HAL_GPIO_Init+0x1fc>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a4d      	ldr	r2, [pc, #308]	@ (800233c <HAL_GPIO_Init+0x300>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d013      	beq.n	8002234 <HAL_GPIO_Init+0x1f8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a4c      	ldr	r2, [pc, #304]	@ (8002340 <HAL_GPIO_Init+0x304>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00d      	beq.n	8002230 <HAL_GPIO_Init+0x1f4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a4b      	ldr	r2, [pc, #300]	@ (8002344 <HAL_GPIO_Init+0x308>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d007      	beq.n	800222c <HAL_GPIO_Init+0x1f0>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a4a      	ldr	r2, [pc, #296]	@ (8002348 <HAL_GPIO_Init+0x30c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d101      	bne.n	8002228 <HAL_GPIO_Init+0x1ec>
 8002224:	2306      	movs	r3, #6
 8002226:	e00c      	b.n	8002242 <HAL_GPIO_Init+0x206>
 8002228:	2307      	movs	r3, #7
 800222a:	e00a      	b.n	8002242 <HAL_GPIO_Init+0x206>
 800222c:	2305      	movs	r3, #5
 800222e:	e008      	b.n	8002242 <HAL_GPIO_Init+0x206>
 8002230:	2304      	movs	r3, #4
 8002232:	e006      	b.n	8002242 <HAL_GPIO_Init+0x206>
 8002234:	2303      	movs	r3, #3
 8002236:	e004      	b.n	8002242 <HAL_GPIO_Init+0x206>
 8002238:	2302      	movs	r3, #2
 800223a:	e002      	b.n	8002242 <HAL_GPIO_Init+0x206>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_GPIO_Init+0x206>
 8002240:	2300      	movs	r3, #0
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	f002 0203 	and.w	r2, r2, #3
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	4093      	lsls	r3, r2
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002252:	4937      	ldr	r1, [pc, #220]	@ (8002330 <HAL_GPIO_Init+0x2f4>)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002260:	4b3a      	ldr	r3, [pc, #232]	@ (800234c <HAL_GPIO_Init+0x310>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002284:	4a31      	ldr	r2, [pc, #196]	@ (800234c <HAL_GPIO_Init+0x310>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800228a:	4b30      	ldr	r3, [pc, #192]	@ (800234c <HAL_GPIO_Init+0x310>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022ae:	4a27      	ldr	r2, [pc, #156]	@ (800234c <HAL_GPIO_Init+0x310>)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b4:	4b25      	ldr	r3, [pc, #148]	@ (800234c <HAL_GPIO_Init+0x310>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022d8:	4a1c      	ldr	r2, [pc, #112]	@ (800234c <HAL_GPIO_Init+0x310>)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022de:	4b1b      	ldr	r3, [pc, #108]	@ (800234c <HAL_GPIO_Init+0x310>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002302:	4a12      	ldr	r2, [pc, #72]	@ (800234c <HAL_GPIO_Init+0x310>)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3301      	adds	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	f47f ae97 	bne.w	800204c <HAL_GPIO_Init+0x10>
  }
}
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40021000 	.word	0x40021000
 8002330:	40010000 	.word	0x40010000
 8002334:	48000400 	.word	0x48000400
 8002338:	48000800 	.word	0x48000800
 800233c:	48000c00 	.word	0x48000c00
 8002340:	48001000 	.word	0x48001000
 8002344:	48001400 	.word	0x48001400
 8002348:	48001800 	.word	0x48001800
 800234c:	40010400 	.word	0x40010400

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800236c:	e002      	b.n	8002374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	041a      	lsls	r2, r3, #16
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	43d9      	mvns	r1, r3
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	400b      	ands	r3, r1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f001 b83a 	b.w	800344e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 816f 	beq.w	80026ce <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023f0:	4bb5      	ldr	r3, [pc, #724]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d00c      	beq.n	8002416 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023fc:	4bb2      	ldr	r3, [pc, #712]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d15c      	bne.n	80024c2 <HAL_RCC_OscConfig+0x10e>
 8002408:	4baf      	ldr	r3, [pc, #700]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002414:	d155      	bne.n	80024c2 <HAL_RCC_OscConfig+0x10e>
 8002416:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800241a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800242a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <HAL_RCC_OscConfig+0x94>
 8002442:	4ba1      	ldr	r3, [pc, #644]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	e015      	b.n	8002474 <HAL_RCC_OscConfig+0xc0>
 8002448:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800244c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800245c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002460:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002464:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002470:	4b95      	ldr	r3, [pc, #596]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002478:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800247c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002480:	fa92 f2a2 	rbit	r2, r2
 8002484:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002488:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800248c:	fab2 f282 	clz	r2, r2
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	f042 0220 	orr.w	r2, r2, #32
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	f002 021f 	and.w	r2, r2, #31
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f202 	lsl.w	r2, r1, r2
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8111 	beq.w	80026cc <HAL_RCC_OscConfig+0x318>
 80024aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 8108 	bne.w	80026cc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	f000 bfc6 	b.w	800344e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12e>
 80024d4:	4b7c      	ldr	r3, [pc, #496]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a7b      	ldr	r2, [pc, #492]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e036      	b.n	8002550 <HAL_RCC_OscConfig+0x19c>
 80024e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x158>
 80024f2:	4b75      	ldr	r3, [pc, #468]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a74      	ldr	r2, [pc, #464]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b72      	ldr	r3, [pc, #456]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a71      	ldr	r2, [pc, #452]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 8002504:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e021      	b.n	8002550 <HAL_RCC_OscConfig+0x19c>
 800250c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002510:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x184>
 800251e:	4b6a      	ldr	r3, [pc, #424]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a69      	ldr	r2, [pc, #420]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b67      	ldr	r3, [pc, #412]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a66      	ldr	r2, [pc, #408]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0x19c>
 8002538:	4b63      	ldr	r3, [pc, #396]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a62      	ldr	r2, [pc, #392]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b60      	ldr	r3, [pc, #384]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a5f      	ldr	r2, [pc, #380]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800254e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002554:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d059      	beq.n	8002614 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fa4c 	bl	80009fc <HAL_GetTick>
 8002564:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256a:	f7fe fa47 	bl	80009fc <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	d902      	bls.n	8002580 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	f000 bf67 	b.w	800344e <HAL_RCC_OscConfig+0x109a>
 8002580:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002584:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002594:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d102      	bne.n	80025b2 <HAL_RCC_OscConfig+0x1fe>
 80025ac:	4b46      	ldr	r3, [pc, #280]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x22a>
 80025b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80025c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025ca:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80025ce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80025da:	4b3b      	ldr	r3, [pc, #236]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025e2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80025e6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80025ea:	fa92 f2a2 	rbit	r2, r2
 80025ee:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80025f2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80025f6:	fab2 f282 	clz	r2, r2
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	f042 0220 	orr.w	r2, r2, #32
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f002 021f 	and.w	r2, r2, #31
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f202 	lsl.w	r2, r1, r2
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0ab      	beq.n	800256a <HAL_RCC_OscConfig+0x1b6>
 8002612:	e05c      	b.n	80026ce <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe f9f2 	bl	80009fc <HAL_GetTick>
 8002618:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800261e:	f7fe f9ed 	bl	80009fc <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	@ 0x64
 800262c:	d902      	bls.n	8002634 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	f000 bf0d 	b.w	800344e <HAL_RCC_OscConfig+0x109a>
 8002634:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002638:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002648:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d102      	bne.n	8002666 <HAL_RCC_OscConfig+0x2b2>
 8002660:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	e015      	b.n	8002692 <HAL_RCC_OscConfig+0x2de>
 8002666:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800266a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800267a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800267e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002682:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800268e:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <HAL_RCC_OscConfig+0x314>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002696:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800269a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800269e:	fa92 f2a2 	rbit	r2, r2
 80026a2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80026a6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80026aa:	fab2 f282 	clz	r2, r2
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	f042 0220 	orr.w	r2, r2, #32
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	f002 021f 	and.w	r2, r2, #31
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f202 	lsl.w	r2, r1, r2
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ab      	bne.n	800261e <HAL_RCC_OscConfig+0x26a>
 80026c6:	e002      	b.n	80026ce <HAL_RCC_OscConfig+0x31a>
 80026c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 817f 	beq.w	80029e2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026e4:	4ba7      	ldr	r3, [pc, #668]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00c      	beq.n	800270a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026f0:	4ba4      	ldr	r3, [pc, #656]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d173      	bne.n	80027e4 <HAL_RCC_OscConfig+0x430>
 80026fc:	4ba1      	ldr	r3, [pc, #644]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002708:	d16c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x430>
 800270a:	2302      	movs	r3, #2
 800270c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800271c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d102      	bne.n	800273a <HAL_RCC_OscConfig+0x386>
 8002734:	4b93      	ldr	r3, [pc, #588]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	e013      	b.n	8002762 <HAL_RCC_OscConfig+0x3ae>
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800274c:	2302      	movs	r3, #2
 800274e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002752:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800275e:	4b89      	ldr	r3, [pc, #548]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	2202      	movs	r2, #2
 8002764:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002768:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800276c:	fa92 f2a2 	rbit	r2, r2
 8002770:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002774:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002778:	fab2 f282 	clz	r2, r2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f042 0220 	orr.w	r2, r2, #32
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f002 021f 	and.w	r2, r2, #31
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f202 	lsl.w	r2, r1, r2
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCC_OscConfig+0x3f6>
 8002794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002798:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d002      	beq.n	80027aa <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f000 be52 	b.w	800344e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	4b76      	ldr	r3, [pc, #472]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	21f8      	movs	r1, #248	@ 0xf8
 80027c0:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80027c8:	fa91 f1a1 	rbit	r1, r1
 80027cc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80027d0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80027d4:	fab1 f181 	clz	r1, r1
 80027d8:	b2c9      	uxtb	r1, r1
 80027da:	408b      	lsls	r3, r1
 80027dc:	4969      	ldr	r1, [pc, #420]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	e0fe      	b.n	80029e2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8088 	beq.w	8002906 <HAL_RCC_OscConfig+0x552>
 80027f6:	2301      	movs	r3, #1
 80027f8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002808:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002816:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	461a      	mov	r2, r3
 800281e:	2301      	movs	r3, #1
 8002820:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7fe f8eb 	bl	80009fc <HAL_GetTick>
 8002826:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	e00a      	b.n	8002842 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282c:	f7fe f8e6 	bl	80009fc <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d902      	bls.n	8002842 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	f000 be06 	b.w	800344e <HAL_RCC_OscConfig+0x109a>
 8002842:	2302      	movs	r3, #2
 8002844:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002854:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d102      	bne.n	8002872 <HAL_RCC_OscConfig+0x4be>
 800286c:	4b45      	ldr	r3, [pc, #276]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	e013      	b.n	800289a <HAL_RCC_OscConfig+0x4e6>
 8002872:	2302      	movs	r3, #2
 8002874:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002884:	2302      	movs	r3, #2
 8002886:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800288a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002896:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	2202      	movs	r2, #2
 800289c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80028a0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80028a4:	fa92 f2a2 	rbit	r2, r2
 80028a8:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80028ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80028b0:	fab2 f282 	clz	r2, r2
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f042 0220 	orr.w	r2, r2, #32
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f002 021f 	and.w	r2, r2, #31
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f202 	lsl.w	r2, r1, r2
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0af      	beq.n	800282c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	21f8      	movs	r1, #248	@ 0xf8
 80028e2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80028ea:	fa91 f1a1 	rbit	r1, r1
 80028ee:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80028f2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80028f6:	fab1 f181 	clz	r1, r1
 80028fa:	b2c9      	uxtb	r1, r1
 80028fc:	408b      	lsls	r3, r1
 80028fe:	4921      	ldr	r1, [pc, #132]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
 8002904:	e06d      	b.n	80029e2 <HAL_RCC_OscConfig+0x62e>
 8002906:	2301      	movs	r3, #1
 8002908:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002918:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002926:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	461a      	mov	r2, r3
 800292e:	2300      	movs	r3, #0
 8002930:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe f863 	bl	80009fc <HAL_GetTick>
 8002936:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293c:	f7fe f85e 	bl	80009fc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d902      	bls.n	8002952 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	f000 bd7e 	b.w	800344e <HAL_RCC_OscConfig+0x109a>
 8002952:	2302      	movs	r3, #2
 8002954:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002964:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d105      	bne.n	8002988 <HAL_RCC_OscConfig+0x5d4>
 800297c:	4b01      	ldr	r3, [pc, #4]	@ (8002984 <HAL_RCC_OscConfig+0x5d0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	e016      	b.n	80029b0 <HAL_RCC_OscConfig+0x5fc>
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	2302      	movs	r3, #2
 800298a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800299a:	2302      	movs	r3, #2
 800299c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80029a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029ac:	4bbf      	ldr	r3, [pc, #764]	@ (8002cac <HAL_RCC_OscConfig+0x8f8>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	2202      	movs	r2, #2
 80029b2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80029b6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80029ba:	fa92 f2a2 	rbit	r2, r2
 80029be:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80029c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80029c6:	fab2 f282 	clz	r2, r2
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	f042 0220 	orr.w	r2, r2, #32
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f002 021f 	and.w	r2, r2, #31
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f202 	lsl.w	r2, r1, r2
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1ac      	bne.n	800293c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8113 	beq.w	8002c1e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d07c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x74e>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002a1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	4ba2      	ldr	r3, [pc, #648]	@ (8002cb0 <HAL_RCC_OscConfig+0x8fc>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2301      	movs	r3, #1
 8002a30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7fd ffe3 	bl	80009fc <HAL_GetTick>
 8002a36:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fd ffde 	bl	80009fc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d902      	bls.n	8002a52 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	f000 bcfe 	b.w	800344e <HAL_RCC_OscConfig+0x109a>
 8002a52:	2302      	movs	r3, #2
 8002a54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a5c:	fa93 f2a3 	rbit	r2, r3
 8002a60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a64:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a72:	2202      	movs	r2, #2
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a96:	2202      	movs	r2, #2
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	fa93 f2a3 	rbit	r2, r3
 8002aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ab0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cac <HAL_RCC_OscConfig+0x8f8>)
 8002ab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002abe:	2102      	movs	r1, #2
 8002ac0:	6019      	str	r1, [r3, #0]
 8002ac2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f1a3 	rbit	r1, r3
 8002ad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ad8:	6019      	str	r1, [r3, #0]
  return result;
 8002ada:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ade:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d09d      	beq.n	8002a3c <HAL_RCC_OscConfig+0x688>
 8002b00:	e08d      	b.n	8002c1e <HAL_RCC_OscConfig+0x86a>
 8002b02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b06:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b12:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b20:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b24:	601a      	str	r2, [r3, #0]
  return result;
 8002b26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b2a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b2e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb0 <HAL_RCC_OscConfig+0x8fc>)
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2300      	movs	r3, #0
 8002b42:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b44:	f7fd ff5a 	bl	80009fc <HAL_GetTick>
 8002b48:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4e:	f7fd ff55 	bl	80009fc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d902      	bls.n	8002b64 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	f000 bc75 	b.w	800344e <HAL_RCC_OscConfig+0x109a>
 8002b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b68:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b74:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b82:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b90:	2202      	movs	r2, #2
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bbc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002bce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	4b36      	ldr	r3, [pc, #216]	@ (8002cac <HAL_RCC_OscConfig+0x8f8>)
 8002bd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bdc:	2102      	movs	r1, #2
 8002bde:	6019      	str	r1, [r3, #0]
 8002be0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f1a3 	rbit	r1, r3
 8002bee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bf6:	6019      	str	r1, [r3, #0]
  return result;
 8002bf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d197      	bne.n	8002b4e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 81a5 	beq.w	8002f7e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cac <HAL_RCC_OscConfig+0x8f8>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4b19      	ldr	r3, [pc, #100]	@ (8002cac <HAL_RCC_OscConfig+0x8f8>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4a18      	ldr	r2, [pc, #96]	@ (8002cac <HAL_RCC_OscConfig+0x8f8>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	61d3      	str	r3, [r2, #28]
 8002c52:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <HAL_RCC_OscConfig+0x8f8>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002c5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c6c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <HAL_RCC_OscConfig+0x900>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d121      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c80:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <HAL_RCC_OscConfig+0x900>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb4 <HAL_RCC_OscConfig+0x900>)
 8002c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c8a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8c:	f7fd feb6 	bl	80009fc <HAL_GetTick>
 8002c90:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	e010      	b.n	8002cb8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7fd feb1 	bl	80009fc <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	@ 0x64
 8002ca4:	d908      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e3d1      	b.n	800344e <HAL_RCC_OscConfig+0x109a>
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	10908120 	.word	0x10908120
 8002cb4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	4b8d      	ldr	r3, [pc, #564]	@ (8002ef0 <HAL_RCC_OscConfig+0xb3c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0e8      	beq.n	8002c96 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x92e>
 8002cd4:	4b87      	ldr	r3, [pc, #540]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a86      	ldr	r2, [pc, #536]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	e035      	b.n	8002d4e <HAL_RCC_OscConfig+0x99a>
 8002ce2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x958>
 8002cf2:	4b80      	ldr	r3, [pc, #512]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6213      	str	r3, [r2, #32]
 8002cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a7c      	ldr	r2, [pc, #496]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6213      	str	r3, [r2, #32]
 8002d0a:	e020      	b.n	8002d4e <HAL_RCC_OscConfig+0x99a>
 8002d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d10c      	bne.n	8002d36 <HAL_RCC_OscConfig+0x982>
 8002d1c:	4b75      	ldr	r3, [pc, #468]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4a74      	ldr	r2, [pc, #464]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	6213      	str	r3, [r2, #32]
 8002d28:	4b72      	ldr	r3, [pc, #456]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a71      	ldr	r2, [pc, #452]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	e00b      	b.n	8002d4e <HAL_RCC_OscConfig+0x99a>
 8002d36:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6213      	str	r3, [r2, #32]
 8002d42:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4a6b      	ldr	r2, [pc, #428]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8081 	beq.w	8002e62 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d60:	f7fd fe4c 	bl	80009fc <HAL_GetTick>
 8002d64:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	e00b      	b.n	8002d82 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fd fe47 	bl	80009fc <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e365      	b.n	800344e <HAL_RCC_OscConfig+0x109a>
 8002d82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d86:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d92:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	fa93 f2a3 	rbit	r2, r3
 8002d9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002daa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002dae:	2202      	movs	r2, #2
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	fa93 f2a3 	rbit	r2, r3
 8002dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002dc8:	601a      	str	r2, [r3, #0]
  return result;
 8002dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dce:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002dd2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f043 0302 	orr.w	r3, r3, #2
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d102      	bne.n	8002dee <HAL_RCC_OscConfig+0xa3a>
 8002de8:	4b42      	ldr	r3, [pc, #264]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	e013      	b.n	8002e16 <HAL_RCC_OscConfig+0xa62>
 8002dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002df6:	2202      	movs	r2, #2
 8002df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e0c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	4b38      	ldr	r3, [pc, #224]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e1a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002e1e:	2102      	movs	r1, #2
 8002e20:	6011      	str	r1, [r2, #0]
 8002e22:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e26:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	fa92 f1a2 	rbit	r1, r2
 8002e30:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e34:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002e38:	6011      	str	r1, [r2, #0]
  return result;
 8002e3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e3e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f002 021f 	and.w	r2, r2, #31
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d084      	beq.n	8002d6a <HAL_RCC_OscConfig+0x9b6>
 8002e60:	e083      	b.n	8002f6a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fd fdcb 	bl	80009fc <HAL_GetTick>
 8002e66:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fd fdc6 	bl	80009fc <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e2e4      	b.n	800344e <HAL_RCC_OscConfig+0x109a>
 8002e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e88:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e94:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	fa93 f2a3 	rbit	r2, r3
 8002e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	fa93 f2a3 	rbit	r2, r3
 8002ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002eca:	601a      	str	r2, [r3, #0]
  return result;
 8002ecc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ed4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0xb44>
 8002eea:	4b02      	ldr	r3, [pc, #8]	@ (8002ef4 <HAL_RCC_OscConfig+0xb40>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	e017      	b.n	8002f20 <HAL_RCC_OscConfig+0xb6c>
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002efc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002f00:	2202      	movs	r2, #2
 8002f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f08:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f16:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	4bb3      	ldr	r3, [pc, #716]	@ (80031ec <HAL_RCC_OscConfig+0xe38>)
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f24:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002f28:	2102      	movs	r1, #2
 8002f2a:	6011      	str	r1, [r2, #0]
 8002f2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f30:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	fa92 f1a2 	rbit	r1, r2
 8002f3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f3e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002f42:	6011      	str	r1, [r2, #0]
  return result;
 8002f44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f48:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	fab2 f282 	clz	r2, r2
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	f002 021f 	and.w	r2, r2, #31
 8002f5e:	2101      	movs	r1, #1
 8002f60:	fa01 f202 	lsl.w	r2, r1, r2
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d180      	bne.n	8002e6c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f6a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d105      	bne.n	8002f7e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f72:	4b9e      	ldr	r3, [pc, #632]	@ (80031ec <HAL_RCC_OscConfig+0xe38>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4a9d      	ldr	r2, [pc, #628]	@ (80031ec <HAL_RCC_OscConfig+0xe38>)
 8002f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f7c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 825e 	beq.w	800344c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f90:	4b96      	ldr	r3, [pc, #600]	@ (80031ec <HAL_RCC_OscConfig+0xe38>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	f000 821f 	beq.w	80033dc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	f040 8170 	bne.w	8003290 <HAL_RCC_OscConfig+0xedc>
 8002fb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002fb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f2a3 	rbit	r2, r3
 8002fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002fd4:	601a      	str	r2, [r3, #0]
  return result;
 8002fd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fda:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002fde:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fd fd01 	bl	80009fc <HAL_GetTick>
 8002ffa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffe:	e009      	b.n	8003014 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7fd fcfc 	bl	80009fc <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e21c      	b.n	800344e <HAL_RCC_OscConfig+0x109a>
 8003014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003018:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800301c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003026:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	fa93 f2a3 	rbit	r2, r3
 8003030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003034:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003038:	601a      	str	r2, [r3, #0]
  return result;
 800303a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003042:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	b2db      	uxtb	r3, r3
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d102      	bne.n	800305e <HAL_RCC_OscConfig+0xcaa>
 8003058:	4b64      	ldr	r3, [pc, #400]	@ (80031ec <HAL_RCC_OscConfig+0xe38>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	e027      	b.n	80030ae <HAL_RCC_OscConfig+0xcfa>
 800305e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003062:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003066:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800306a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003070:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	fa93 f2a3 	rbit	r2, r3
 800307a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800307e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003088:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800308c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003096:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	4b50      	ldr	r3, [pc, #320]	@ (80031ec <HAL_RCC_OscConfig+0xe38>)
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030b2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80030b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80030ba:	6011      	str	r1, [r2, #0]
 80030bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030c0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	fa92 f1a2 	rbit	r1, r2
 80030ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030ce:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80030d2:	6011      	str	r1, [r2, #0]
  return result;
 80030d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030d8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	fab2 f282 	clz	r2, r2
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f042 0220 	orr.w	r2, r2, #32
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f002 021f 	and.w	r2, r2, #31
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d182      	bne.n	8003000 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fa:	4b3c      	ldr	r3, [pc, #240]	@ (80031ec <HAL_RCC_OscConfig+0xe38>)
 80030fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fe:	f023 020f 	bic.w	r2, r3, #15
 8003102:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003106:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	4937      	ldr	r1, [pc, #220]	@ (80031ec <HAL_RCC_OscConfig+0xe38>)
 8003110:	4313      	orrs	r3, r2
 8003112:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003114:	4b35      	ldr	r3, [pc, #212]	@ (80031ec <HAL_RCC_OscConfig+0xe38>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800311c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003120:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a19      	ldr	r1, [r3, #32]
 8003128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800312c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	430b      	orrs	r3, r1
 8003136:	492d      	ldr	r1, [pc, #180]	@ (80031ec <HAL_RCC_OscConfig+0xe38>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003140:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003144:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800314e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	fa93 f2a3 	rbit	r2, r3
 8003158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800315c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003160:	601a      	str	r2, [r3, #0]
  return result;
 8003162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003166:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800316a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003176:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	461a      	mov	r2, r3
 800317e:	2301      	movs	r3, #1
 8003180:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fd fc3b 	bl	80009fc <HAL_GetTick>
 8003186:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800318a:	e009      	b.n	80031a0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318c:	f7fd fc36 	bl	80009fc <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e156      	b.n	800344e <HAL_RCC_OscConfig+0x109a>
 80031a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80031a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	fa93 f2a3 	rbit	r2, r3
 80031bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031c0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80031c4:	601a      	str	r2, [r3, #0]
  return result;
 80031c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80031ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0xe3c>
 80031e4:	4b01      	ldr	r3, [pc, #4]	@ (80031ec <HAL_RCC_OscConfig+0xe38>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	e02a      	b.n	8003240 <HAL_RCC_OscConfig+0xe8c>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003202:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003210:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800321a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800321e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003228:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	fa93 f2a3 	rbit	r2, r3
 8003232:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003236:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	4b86      	ldr	r3, [pc, #536]	@ (8003458 <HAL_RCC_OscConfig+0x10a4>)
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003244:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003248:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800324c:	6011      	str	r1, [r2, #0]
 800324e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003252:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	fa92 f1a2 	rbit	r1, r2
 800325c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003260:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003264:	6011      	str	r1, [r2, #0]
  return result;
 8003266:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800326a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	fab2 f282 	clz	r2, r2
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	f042 0220 	orr.w	r2, r2, #32
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	f002 021f 	and.w	r2, r2, #31
 8003280:	2101      	movs	r1, #1
 8003282:	fa01 f202 	lsl.w	r2, r1, r2
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	f43f af7f 	beq.w	800318c <HAL_RCC_OscConfig+0xdd8>
 800328e:	e0dd      	b.n	800344c <HAL_RCC_OscConfig+0x1098>
 8003290:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003294:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003298:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800329c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	fa93 f2a3 	rbit	r2, r3
 80032ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80032b4:	601a      	str	r2, [r3, #0]
  return result;
 80032b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80032be:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032ca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	461a      	mov	r2, r3
 80032d2:	2300      	movs	r3, #0
 80032d4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fd fb91 	bl	80009fc <HAL_GetTick>
 80032da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032de:	e009      	b.n	80032f4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fd fb8c 	bl	80009fc <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0ac      	b.n	800344e <HAL_RCC_OscConfig+0x109a>
 80032f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003306:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	fa93 f2a3 	rbit	r2, r3
 8003310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003314:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003318:	601a      	str	r2, [r3, #0]
  return result;
 800331a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003322:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d102      	bne.n	800333e <HAL_RCC_OscConfig+0xf8a>
 8003338:	4b47      	ldr	r3, [pc, #284]	@ (8003458 <HAL_RCC_OscConfig+0x10a4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	e027      	b.n	800338e <HAL_RCC_OscConfig+0xfda>
 800333e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003342:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003346:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800334a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003350:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fa93 f2a3 	rbit	r2, r3
 800335a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800335e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003368:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800336c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003376:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003384:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4b33      	ldr	r3, [pc, #204]	@ (8003458 <HAL_RCC_OscConfig+0x10a4>)
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003392:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003396:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800339a:	6011      	str	r1, [r2, #0]
 800339c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033a0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	fa92 f1a2 	rbit	r1, r2
 80033aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033ae:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80033b2:	6011      	str	r1, [r2, #0]
  return result;
 80033b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033b8:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	fab2 f282 	clz	r2, r2
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f042 0220 	orr.w	r2, r2, #32
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f002 021f 	and.w	r2, r2, #31
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d182      	bne.n	80032e0 <HAL_RCC_OscConfig+0xf2c>
 80033da:	e037      	b.n	800344c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e02e      	b.n	800344e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033f0:	4b19      	ldr	r3, [pc, #100]	@ (8003458 <HAL_RCC_OscConfig+0x10a4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80033f8:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <HAL_RCC_OscConfig+0x10a4>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003400:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003404:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003408:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800340c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	429a      	cmp	r2, r3
 8003416:	d117      	bne.n	8003448 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003418:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800341c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003424:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800342c:	429a      	cmp	r2, r3
 800342e:	d10b      	bne.n	8003448 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800343c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000

0800345c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b09e      	sub	sp, #120	@ 0x78
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e162      	b.n	800373a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003474:	4b90      	ldr	r3, [pc, #576]	@ (80036b8 <HAL_RCC_ClockConfig+0x25c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d910      	bls.n	80034a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b8d      	ldr	r3, [pc, #564]	@ (80036b8 <HAL_RCC_ClockConfig+0x25c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 0207 	bic.w	r2, r3, #7
 800348a:	498b      	ldr	r1, [pc, #556]	@ (80036b8 <HAL_RCC_ClockConfig+0x25c>)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b89      	ldr	r3, [pc, #548]	@ (80036b8 <HAL_RCC_ClockConfig+0x25c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e14a      	b.n	800373a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b0:	4b82      	ldr	r3, [pc, #520]	@ (80036bc <HAL_RCC_ClockConfig+0x260>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	497f      	ldr	r1, [pc, #508]	@ (80036bc <HAL_RCC_ClockConfig+0x260>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80dc 	beq.w	8003688 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d13c      	bne.n	8003552 <HAL_RCC_ClockConfig+0xf6>
 80034d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034dc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80034e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_ClockConfig+0xa6>
 80034fc:	4b6f      	ldr	r3, [pc, #444]	@ (80036bc <HAL_RCC_ClockConfig+0x260>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	e00f      	b.n	8003522 <HAL_RCC_ClockConfig+0xc6>
 8003502:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003506:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003510:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003514:	663b      	str	r3, [r7, #96]	@ 0x60
 8003516:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800351e:	4b67      	ldr	r3, [pc, #412]	@ (80036bc <HAL_RCC_ClockConfig+0x260>)
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003526:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003528:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800352a:	fa92 f2a2 	rbit	r2, r2
 800352e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003530:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003532:	fab2 f282 	clz	r2, r2
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	f042 0220 	orr.w	r2, r2, #32
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	f002 021f 	and.w	r2, r2, #31
 8003542:	2101      	movs	r1, #1
 8003544:	fa01 f202 	lsl.w	r2, r1, r2
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d17b      	bne.n	8003646 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0f3      	b.n	800373a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d13c      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x178>
 800355a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800355e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d102      	bne.n	8003584 <HAL_RCC_ClockConfig+0x128>
 800357e:	4b4f      	ldr	r3, [pc, #316]	@ (80036bc <HAL_RCC_ClockConfig+0x260>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	e00f      	b.n	80035a4 <HAL_RCC_ClockConfig+0x148>
 8003584:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003588:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	647b      	str	r3, [r7, #68]	@ 0x44
 8003592:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003596:	643b      	str	r3, [r7, #64]	@ 0x40
 8003598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035a0:	4b46      	ldr	r3, [pc, #280]	@ (80036bc <HAL_RCC_ClockConfig+0x260>)
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035a8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80035aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035ac:	fa92 f2a2 	rbit	r2, r2
 80035b0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80035b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035b4:	fab2 f282 	clz	r2, r2
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	f042 0220 	orr.w	r2, r2, #32
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	f002 021f 	and.w	r2, r2, #31
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d13a      	bne.n	8003646 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0b2      	b.n	800373a <HAL_RCC_ClockConfig+0x2de>
 80035d4:	2302      	movs	r3, #2
 80035d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80035e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_ClockConfig+0x1a0>
 80035f6:	4b31      	ldr	r3, [pc, #196]	@ (80036bc <HAL_RCC_ClockConfig+0x260>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	e00d      	b.n	8003618 <HAL_RCC_ClockConfig+0x1bc>
 80035fc:	2302      	movs	r3, #2
 80035fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
 8003608:	2302      	movs	r3, #2
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	4b29      	ldr	r3, [pc, #164]	@ (80036bc <HAL_RCC_ClockConfig+0x260>)
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	2202      	movs	r2, #2
 800361a:	61ba      	str	r2, [r7, #24]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	fa92 f2a2 	rbit	r2, r2
 8003622:	617a      	str	r2, [r7, #20]
  return result;
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	fab2 f282 	clz	r2, r2
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	f042 0220 	orr.w	r2, r2, #32
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	f002 021f 	and.w	r2, r2, #31
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e079      	b.n	800373a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003646:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <HAL_RCC_ClockConfig+0x260>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f023 0203 	bic.w	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	491a      	ldr	r1, [pc, #104]	@ (80036bc <HAL_RCC_ClockConfig+0x260>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003658:	f7fd f9d0 	bl	80009fc <HAL_GetTick>
 800365c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	e00a      	b.n	8003676 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7fd f9cc 	bl	80009fc <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e061      	b.n	800373a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	4b11      	ldr	r3, [pc, #68]	@ (80036bc <HAL_RCC_ClockConfig+0x260>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 020c 	and.w	r2, r3, #12
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	429a      	cmp	r2, r3
 8003686:	d1eb      	bne.n	8003660 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <HAL_RCC_ClockConfig+0x25c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d214      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b08      	ldr	r3, [pc, #32]	@ (80036b8 <HAL_RCC_ClockConfig+0x25c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 0207 	bic.w	r2, r3, #7
 800369e:	4906      	ldr	r1, [pc, #24]	@ (80036b8 <HAL_RCC_ClockConfig+0x25c>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b04      	ldr	r3, [pc, #16]	@ (80036b8 <HAL_RCC_ClockConfig+0x25c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e040      	b.n	800373a <HAL_RCC_ClockConfig+0x2de>
 80036b8:	40022000 	.word	0x40022000
 80036bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <HAL_RCC_ClockConfig+0x2e8>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	491a      	ldr	r1, [pc, #104]	@ (8003744 <HAL_RCC_ClockConfig+0x2e8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ea:	4b16      	ldr	r3, [pc, #88]	@ (8003744 <HAL_RCC_ClockConfig+0x2e8>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4912      	ldr	r1, [pc, #72]	@ (8003744 <HAL_RCC_ClockConfig+0x2e8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036fe:	f000 f829 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 8003702:	4601      	mov	r1, r0
 8003704:	4b0f      	ldr	r3, [pc, #60]	@ (8003744 <HAL_RCC_ClockConfig+0x2e8>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800370c:	22f0      	movs	r2, #240	@ 0xf0
 800370e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	fa92 f2a2 	rbit	r2, r2
 8003716:	60fa      	str	r2, [r7, #12]
  return result;
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	fab2 f282 	clz	r2, r2
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	40d3      	lsrs	r3, r2
 8003722:	4a09      	ldr	r2, [pc, #36]	@ (8003748 <HAL_RCC_ClockConfig+0x2ec>)
 8003724:	5cd3      	ldrb	r3, [r2, r3]
 8003726:	fa21 f303 	lsr.w	r3, r1, r3
 800372a:	4a08      	ldr	r2, [pc, #32]	@ (800374c <HAL_RCC_ClockConfig+0x2f0>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800372e:	4b08      	ldr	r3, [pc, #32]	@ (8003750 <HAL_RCC_ClockConfig+0x2f4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd f91e 	bl	8000974 <HAL_InitTick>
  
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3778      	adds	r7, #120	@ 0x78
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	080049b0 	.word	0x080049b0
 800374c:	20000000 	.word	0x20000000
 8003750:	20000004 	.word	0x20000004

08003754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800376e:	4b1f      	ldr	r3, [pc, #124]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b04      	cmp	r3, #4
 800377c:	d002      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x30>
 800377e:	2b08      	cmp	r3, #8
 8003780:	d003      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0x36>
 8003782:	e029      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003784:	4b1a      	ldr	r3, [pc, #104]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003786:	613b      	str	r3, [r7, #16]
      break;
 8003788:	e029      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	0c9b      	lsrs	r3, r3, #18
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	4a18      	ldr	r2, [pc, #96]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003794:	5cd3      	ldrb	r3, [r2, r3]
 8003796:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003798:	4b14      	ldr	r3, [pc, #80]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x98>)
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	4a15      	ldr	r2, [pc, #84]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037a2:	5cd3      	ldrb	r3, [r2, r3]
 80037a4:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037b0:	4a0f      	ldr	r2, [pc, #60]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e007      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037c2:	4a0b      	ldr	r2, [pc, #44]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	613b      	str	r3, [r7, #16]
      break;
 80037d6:	e002      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037da:	613b      	str	r3, [r7, #16]
      break;
 80037dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037de:	693b      	ldr	r3, [r7, #16]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40021000 	.word	0x40021000
 80037f0:	007a1200 	.word	0x007a1200
 80037f4:	080049c8 	.word	0x080049c8
 80037f8:	080049d8 	.word	0x080049d8

080037fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b03      	ldr	r3, [pc, #12]	@ (8003810 <HAL_RCC_GetHCLKFreq+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000

08003814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800381a:	f7ff ffef 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 800381e:	4601      	mov	r1, r0
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003828:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800382c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	fa92 f2a2 	rbit	r2, r2
 8003834:	603a      	str	r2, [r7, #0]
  return result;
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	fab2 f282 	clz	r2, r2
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	40d3      	lsrs	r3, r2
 8003840:	4a04      	ldr	r2, [pc, #16]	@ (8003854 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003842:	5cd3      	ldrb	r3, [r2, r3]
 8003844:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	080049c0 	.word	0x080049c0

08003858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800385e:	f7ff ffcd 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003862:	4601      	mov	r1, r0
 8003864:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800386c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003870:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	fa92 f2a2 	rbit	r2, r2
 8003878:	603a      	str	r2, [r7, #0]
  return result;
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	fab2 f282 	clz	r2, r2
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	40d3      	lsrs	r3, r2
 8003884:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003886:	5cd3      	ldrb	r3, [r2, r3]
 8003888:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000
 8003898:	080049c0 	.word	0x080049c0

0800389c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b092      	sub	sp, #72	@ 0x48
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80d4 	beq.w	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c0:	4b4e      	ldr	r3, [pc, #312]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10e      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038cc:	4b4b      	ldr	r3, [pc, #300]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	4a4a      	ldr	r2, [pc, #296]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d6:	61d3      	str	r3, [r2, #28]
 80038d8:	4b48      	ldr	r3, [pc, #288]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	4b45      	ldr	r3, [pc, #276]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d118      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f6:	4b42      	ldr	r3, [pc, #264]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a41      	ldr	r2, [pc, #260]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003900:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003902:	f7fd f87b 	bl	80009fc <HAL_GetTick>
 8003906:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	e008      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390a:	f7fd f877 	bl	80009fc <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b64      	cmp	r3, #100	@ 0x64
 8003916:	d901      	bls.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e1d6      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391c:	4b38      	ldr	r3, [pc, #224]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003928:	4b34      	ldr	r3, [pc, #208]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003930:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8084 	beq.w	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003942:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003944:	429a      	cmp	r2, r3
 8003946:	d07c      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003948:	4b2c      	ldr	r3, [pc, #176]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003952:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003956:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	4b26      	ldr	r3, [pc, #152]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	461a      	mov	r2, r3
 8003972:	2301      	movs	r3, #1
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800397a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	461a      	mov	r2, r3
 8003996:	2300      	movs	r3, #0
 8003998:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800399a:	4a18      	ldr	r2, [pc, #96]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800399e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d04b      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039aa:	f7fd f827 	bl	80009fc <HAL_GetTick>
 80039ae:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b0:	e00a      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b2:	f7fd f823 	bl	80009fc <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e180      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80039c8:	2302      	movs	r3, #2
 80039ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039d4:	2302      	movs	r3, #2
 80039d6:	623b      	str	r3, [r7, #32]
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	61fb      	str	r3, [r7, #28]
  return result;
 80039e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d108      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039f6:	4b01      	ldr	r3, [pc, #4]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	e00d      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40007000 	.word	0x40007000
 8003a04:	10908100 	.word	0x10908100
 8003a08:	2302      	movs	r3, #2
 8003a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	4b9a      	ldr	r3, [pc, #616]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	2202      	movs	r2, #2
 8003a1a:	613a      	str	r2, [r7, #16]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	fa92 f2a2 	rbit	r2, r2
 8003a22:	60fa      	str	r2, [r7, #12]
  return result;
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	fab2 f282 	clz	r2, r2
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	f002 021f 	and.w	r2, r2, #31
 8003a36:	2101      	movs	r1, #1
 8003a38:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0b7      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a42:	4b8f      	ldr	r3, [pc, #572]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	498c      	ldr	r1, [pc, #560]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5c:	4b88      	ldr	r3, [pc, #544]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	4a87      	ldr	r2, [pc, #540]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a74:	4b82      	ldr	r3, [pc, #520]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a78:	f023 0203 	bic.w	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	497f      	ldr	r1, [pc, #508]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a92:	4b7b      	ldr	r3, [pc, #492]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	4978      	ldr	r1, [pc, #480]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ab0:	4b73      	ldr	r3, [pc, #460]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	4970      	ldr	r1, [pc, #448]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ace:	4b6c      	ldr	r3, [pc, #432]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	f023 0210 	bic.w	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	4969      	ldr	r1, [pc, #420]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003aec:	4b64      	ldr	r3, [pc, #400]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af8:	4961      	ldr	r1, [pc, #388]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	f023 0220 	bic.w	r2, r3, #32
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	495a      	ldr	r1, [pc, #360]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b28:	4b55      	ldr	r3, [pc, #340]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	4952      	ldr	r1, [pc, #328]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b46:	4b4e      	ldr	r3, [pc, #312]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	494b      	ldr	r1, [pc, #300]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b64:	4b46      	ldr	r3, [pc, #280]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	4943      	ldr	r1, [pc, #268]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b82:	4b3f      	ldr	r3, [pc, #252]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	493c      	ldr	r1, [pc, #240]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ba0:	4b37      	ldr	r3, [pc, #220]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	4934      	ldr	r1, [pc, #208]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003bbe:	4b30      	ldr	r3, [pc, #192]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bca:	492d      	ldr	r1, [pc, #180]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bdc:	4b28      	ldr	r3, [pc, #160]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be8:	4925      	ldr	r1, [pc, #148]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003bfa:	4b21      	ldr	r3, [pc, #132]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	491e      	ldr	r1, [pc, #120]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003c18:	4b19      	ldr	r3, [pc, #100]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	4916      	ldr	r1, [pc, #88]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003c36:	4b12      	ldr	r3, [pc, #72]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c42:	490f      	ldr	r1, [pc, #60]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c60:	4907      	ldr	r1, [pc, #28]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00c      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003c72:	4b03      	ldr	r3, [pc, #12]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	e002      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c86:	4913      	ldr	r1, [pc, #76]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003c98:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca4:	490b      	ldr	r1, [pc, #44]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003cb6:	4b07      	ldr	r3, [pc, #28]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc2:	4904      	ldr	r1, [pc, #16]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3748      	adds	r7, #72	@ 0x48
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000

08003cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e049      	b.n	8003d7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fc fd36 	bl	8000770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f000 f89e 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d001      	beq.n	8003da0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e047      	b.n	8003e30 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a23      	ldr	r2, [pc, #140]	@ (8003e3c <HAL_TIM_Base_Start+0xb4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01d      	beq.n	8003dee <HAL_TIM_Base_Start+0x66>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dba:	d018      	beq.n	8003dee <HAL_TIM_Base_Start+0x66>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e40 <HAL_TIM_Base_Start+0xb8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_TIM_Base_Start+0x66>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	@ (8003e44 <HAL_TIM_Base_Start+0xbc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_TIM_Base_Start+0x66>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e48 <HAL_TIM_Base_Start+0xc0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_TIM_Base_Start+0x66>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	@ (8003e4c <HAL_TIM_Base_Start+0xc4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_TIM_Base_Start+0x66>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	@ (8003e50 <HAL_TIM_Base_Start+0xc8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d115      	bne.n	8003e1a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	4b17      	ldr	r3, [pc, #92]	@ (8003e54 <HAL_TIM_Base_Start+0xcc>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b06      	cmp	r3, #6
 8003dfe:	d015      	beq.n	8003e2c <HAL_TIM_Base_Start+0xa4>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e06:	d011      	beq.n	8003e2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e18:	e008      	b.n	8003e2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e000      	b.n	8003e2e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800
 8003e48:	40013400 	.word	0x40013400
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40015000 	.word	0x40015000
 8003e54:	00010007 	.word	0x00010007

08003e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a48      	ldr	r2, [pc, #288]	@ (8003f8c <TIM_Base_SetConfig+0x134>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e76:	d00f      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a45      	ldr	r2, [pc, #276]	@ (8003f90 <TIM_Base_SetConfig+0x138>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00b      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a44      	ldr	r2, [pc, #272]	@ (8003f94 <TIM_Base_SetConfig+0x13c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a43      	ldr	r2, [pc, #268]	@ (8003f98 <TIM_Base_SetConfig+0x140>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a42      	ldr	r2, [pc, #264]	@ (8003f9c <TIM_Base_SetConfig+0x144>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d108      	bne.n	8003eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a37      	ldr	r2, [pc, #220]	@ (8003f8c <TIM_Base_SetConfig+0x134>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb8:	d01b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a34      	ldr	r2, [pc, #208]	@ (8003f90 <TIM_Base_SetConfig+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d017      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a33      	ldr	r2, [pc, #204]	@ (8003f94 <TIM_Base_SetConfig+0x13c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a32      	ldr	r2, [pc, #200]	@ (8003f98 <TIM_Base_SetConfig+0x140>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00f      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a32      	ldr	r2, [pc, #200]	@ (8003fa0 <TIM_Base_SetConfig+0x148>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a31      	ldr	r2, [pc, #196]	@ (8003fa4 <TIM_Base_SetConfig+0x14c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a30      	ldr	r2, [pc, #192]	@ (8003fa8 <TIM_Base_SetConfig+0x150>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2b      	ldr	r2, [pc, #172]	@ (8003f9c <TIM_Base_SetConfig+0x144>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a18      	ldr	r2, [pc, #96]	@ (8003f8c <TIM_Base_SetConfig+0x134>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x100>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a19      	ldr	r2, [pc, #100]	@ (8003f98 <TIM_Base_SetConfig+0x140>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x100>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a19      	ldr	r2, [pc, #100]	@ (8003fa0 <TIM_Base_SetConfig+0x148>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x100>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a18      	ldr	r2, [pc, #96]	@ (8003fa4 <TIM_Base_SetConfig+0x14c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x100>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a17      	ldr	r2, [pc, #92]	@ (8003fa8 <TIM_Base_SetConfig+0x150>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x100>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a12      	ldr	r2, [pc, #72]	@ (8003f9c <TIM_Base_SetConfig+0x144>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d103      	bne.n	8003f60 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d105      	bne.n	8003f7e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	611a      	str	r2, [r3, #16]
  }
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800
 8003f98:	40013400 	.word	0x40013400
 8003f9c:	40015000 	.word	0x40015000
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800

08003fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e06d      	b.n	80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a30      	ldr	r2, [pc, #192]	@ (80040ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004008:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1e      	ldr	r2, [pc, #120]	@ (80040ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d01d      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004040:	d018      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1c      	ldr	r2, [pc, #112]	@ (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1a      	ldr	r2, [pc, #104]	@ (80040bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a15      	ldr	r2, [pc, #84]	@ (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a16      	ldr	r2, [pc, #88]	@ (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a11      	ldr	r2, [pc, #68]	@ (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10c      	bne.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800407a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	4313      	orrs	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40013400 	.word	0x40013400
 80040b4:	40015000 	.word	0x40015000
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40000800 	.word	0x40000800
 80040c0:	40014000 	.word	0x40014000

080040c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e040      	b.n	8004158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fc fb76 	bl	80007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2224      	movs	r2, #36	@ 0x24
 80040f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f9fc 	bl	8004508 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f825 	bl	8004160 <UART_SetConfig>
 8004116:	4603      	mov	r3, r0
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e01b      	b.n	8004158 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800412e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800413e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fa7b 	bl	800464c <UART_CheckIdleState>
 8004156:	4603      	mov	r3, r0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b92      	ldr	r3, [pc, #584]	@ (80043d4 <UART_SetConfig+0x274>)
 800418c:	4013      	ands	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	6979      	ldr	r1, [r7, #20]
 8004194:	430b      	orrs	r3, r1
 8004196:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a80      	ldr	r2, [pc, #512]	@ (80043d8 <UART_SetConfig+0x278>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d120      	bne.n	800421e <UART_SetConfig+0xbe>
 80041dc:	4b7f      	ldr	r3, [pc, #508]	@ (80043dc <UART_SetConfig+0x27c>)
 80041de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d817      	bhi.n	8004218 <UART_SetConfig+0xb8>
 80041e8:	a201      	add	r2, pc, #4	@ (adr r2, 80041f0 <UART_SetConfig+0x90>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004201 	.word	0x08004201
 80041f4:	0800420d 	.word	0x0800420d
 80041f8:	08004213 	.word	0x08004213
 80041fc:	08004207 	.word	0x08004207
 8004200:	2301      	movs	r3, #1
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e0b5      	b.n	8004372 <UART_SetConfig+0x212>
 8004206:	2302      	movs	r3, #2
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e0b2      	b.n	8004372 <UART_SetConfig+0x212>
 800420c:	2304      	movs	r3, #4
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e0af      	b.n	8004372 <UART_SetConfig+0x212>
 8004212:	2308      	movs	r3, #8
 8004214:	77fb      	strb	r3, [r7, #31]
 8004216:	e0ac      	b.n	8004372 <UART_SetConfig+0x212>
 8004218:	2310      	movs	r3, #16
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e0a9      	b.n	8004372 <UART_SetConfig+0x212>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a6f      	ldr	r2, [pc, #444]	@ (80043e0 <UART_SetConfig+0x280>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d124      	bne.n	8004272 <UART_SetConfig+0x112>
 8004228:	4b6c      	ldr	r3, [pc, #432]	@ (80043dc <UART_SetConfig+0x27c>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004230:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004234:	d011      	beq.n	800425a <UART_SetConfig+0xfa>
 8004236:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800423a:	d817      	bhi.n	800426c <UART_SetConfig+0x10c>
 800423c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004240:	d011      	beq.n	8004266 <UART_SetConfig+0x106>
 8004242:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004246:	d811      	bhi.n	800426c <UART_SetConfig+0x10c>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <UART_SetConfig+0xf4>
 800424c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004250:	d006      	beq.n	8004260 <UART_SetConfig+0x100>
 8004252:	e00b      	b.n	800426c <UART_SetConfig+0x10c>
 8004254:	2300      	movs	r3, #0
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	e08b      	b.n	8004372 <UART_SetConfig+0x212>
 800425a:	2302      	movs	r3, #2
 800425c:	77fb      	strb	r3, [r7, #31]
 800425e:	e088      	b.n	8004372 <UART_SetConfig+0x212>
 8004260:	2304      	movs	r3, #4
 8004262:	77fb      	strb	r3, [r7, #31]
 8004264:	e085      	b.n	8004372 <UART_SetConfig+0x212>
 8004266:	2308      	movs	r3, #8
 8004268:	77fb      	strb	r3, [r7, #31]
 800426a:	e082      	b.n	8004372 <UART_SetConfig+0x212>
 800426c:	2310      	movs	r3, #16
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e07f      	b.n	8004372 <UART_SetConfig+0x212>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a5b      	ldr	r2, [pc, #364]	@ (80043e4 <UART_SetConfig+0x284>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d124      	bne.n	80042c6 <UART_SetConfig+0x166>
 800427c:	4b57      	ldr	r3, [pc, #348]	@ (80043dc <UART_SetConfig+0x27c>)
 800427e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004280:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004284:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004288:	d011      	beq.n	80042ae <UART_SetConfig+0x14e>
 800428a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800428e:	d817      	bhi.n	80042c0 <UART_SetConfig+0x160>
 8004290:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004294:	d011      	beq.n	80042ba <UART_SetConfig+0x15a>
 8004296:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800429a:	d811      	bhi.n	80042c0 <UART_SetConfig+0x160>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <UART_SetConfig+0x148>
 80042a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042a4:	d006      	beq.n	80042b4 <UART_SetConfig+0x154>
 80042a6:	e00b      	b.n	80042c0 <UART_SetConfig+0x160>
 80042a8:	2300      	movs	r3, #0
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e061      	b.n	8004372 <UART_SetConfig+0x212>
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e05e      	b.n	8004372 <UART_SetConfig+0x212>
 80042b4:	2304      	movs	r3, #4
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e05b      	b.n	8004372 <UART_SetConfig+0x212>
 80042ba:	2308      	movs	r3, #8
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e058      	b.n	8004372 <UART_SetConfig+0x212>
 80042c0:	2310      	movs	r3, #16
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e055      	b.n	8004372 <UART_SetConfig+0x212>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a47      	ldr	r2, [pc, #284]	@ (80043e8 <UART_SetConfig+0x288>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d124      	bne.n	800431a <UART_SetConfig+0x1ba>
 80042d0:	4b42      	ldr	r3, [pc, #264]	@ (80043dc <UART_SetConfig+0x27c>)
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80042d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042dc:	d011      	beq.n	8004302 <UART_SetConfig+0x1a2>
 80042de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042e2:	d817      	bhi.n	8004314 <UART_SetConfig+0x1b4>
 80042e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042e8:	d011      	beq.n	800430e <UART_SetConfig+0x1ae>
 80042ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ee:	d811      	bhi.n	8004314 <UART_SetConfig+0x1b4>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <UART_SetConfig+0x19c>
 80042f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042f8:	d006      	beq.n	8004308 <UART_SetConfig+0x1a8>
 80042fa:	e00b      	b.n	8004314 <UART_SetConfig+0x1b4>
 80042fc:	2300      	movs	r3, #0
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e037      	b.n	8004372 <UART_SetConfig+0x212>
 8004302:	2302      	movs	r3, #2
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e034      	b.n	8004372 <UART_SetConfig+0x212>
 8004308:	2304      	movs	r3, #4
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e031      	b.n	8004372 <UART_SetConfig+0x212>
 800430e:	2308      	movs	r3, #8
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e02e      	b.n	8004372 <UART_SetConfig+0x212>
 8004314:	2310      	movs	r3, #16
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e02b      	b.n	8004372 <UART_SetConfig+0x212>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a33      	ldr	r2, [pc, #204]	@ (80043ec <UART_SetConfig+0x28c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d124      	bne.n	800436e <UART_SetConfig+0x20e>
 8004324:	4b2d      	ldr	r3, [pc, #180]	@ (80043dc <UART_SetConfig+0x27c>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800432c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004330:	d011      	beq.n	8004356 <UART_SetConfig+0x1f6>
 8004332:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004336:	d817      	bhi.n	8004368 <UART_SetConfig+0x208>
 8004338:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800433c:	d011      	beq.n	8004362 <UART_SetConfig+0x202>
 800433e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004342:	d811      	bhi.n	8004368 <UART_SetConfig+0x208>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <UART_SetConfig+0x1f0>
 8004348:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800434c:	d006      	beq.n	800435c <UART_SetConfig+0x1fc>
 800434e:	e00b      	b.n	8004368 <UART_SetConfig+0x208>
 8004350:	2300      	movs	r3, #0
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e00d      	b.n	8004372 <UART_SetConfig+0x212>
 8004356:	2302      	movs	r3, #2
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e00a      	b.n	8004372 <UART_SetConfig+0x212>
 800435c:	2304      	movs	r3, #4
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e007      	b.n	8004372 <UART_SetConfig+0x212>
 8004362:	2308      	movs	r3, #8
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e004      	b.n	8004372 <UART_SetConfig+0x212>
 8004368:	2310      	movs	r3, #16
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e001      	b.n	8004372 <UART_SetConfig+0x212>
 800436e:	2310      	movs	r3, #16
 8004370:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800437a:	d16b      	bne.n	8004454 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800437c:	7ffb      	ldrb	r3, [r7, #31]
 800437e:	2b08      	cmp	r3, #8
 8004380:	d838      	bhi.n	80043f4 <UART_SetConfig+0x294>
 8004382:	a201      	add	r2, pc, #4	@ (adr r2, 8004388 <UART_SetConfig+0x228>)
 8004384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043b5 	.word	0x080043b5
 8004390:	080043bd 	.word	0x080043bd
 8004394:	080043f5 	.word	0x080043f5
 8004398:	080043c3 	.word	0x080043c3
 800439c:	080043f5 	.word	0x080043f5
 80043a0:	080043f5 	.word	0x080043f5
 80043a4:	080043f5 	.word	0x080043f5
 80043a8:	080043cb 	.word	0x080043cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7ff fa32 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 80043b0:	61b8      	str	r0, [r7, #24]
        break;
 80043b2:	e024      	b.n	80043fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b4:	f7ff fa50 	bl	8003858 <HAL_RCC_GetPCLK2Freq>
 80043b8:	61b8      	str	r0, [r7, #24]
        break;
 80043ba:	e020      	b.n	80043fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043bc:	4b0c      	ldr	r3, [pc, #48]	@ (80043f0 <UART_SetConfig+0x290>)
 80043be:	61bb      	str	r3, [r7, #24]
        break;
 80043c0:	e01d      	b.n	80043fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c2:	f7ff f9c7 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 80043c6:	61b8      	str	r0, [r7, #24]
        break;
 80043c8:	e019      	b.n	80043fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ce:	61bb      	str	r3, [r7, #24]
        break;
 80043d0:	e015      	b.n	80043fe <UART_SetConfig+0x29e>
 80043d2:	bf00      	nop
 80043d4:	efff69f3 	.word	0xefff69f3
 80043d8:	40013800 	.word	0x40013800
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40004400 	.word	0x40004400
 80043e4:	40004800 	.word	0x40004800
 80043e8:	40004c00 	.word	0x40004c00
 80043ec:	40005000 	.word	0x40005000
 80043f0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	77bb      	strb	r3, [r7, #30]
        break;
 80043fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d073      	beq.n	80044ec <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	005a      	lsls	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	441a      	add	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b0f      	cmp	r3, #15
 800441e:	d916      	bls.n	800444e <UART_SetConfig+0x2ee>
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004426:	d212      	bcs.n	800444e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	b29b      	uxth	r3, r3
 800442c:	f023 030f 	bic.w	r3, r3, #15
 8004430:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	b29a      	uxth	r2, r3
 800443e:	89fb      	ldrh	r3, [r7, #14]
 8004440:	4313      	orrs	r3, r2
 8004442:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	89fa      	ldrh	r2, [r7, #14]
 800444a:	60da      	str	r2, [r3, #12]
 800444c:	e04e      	b.n	80044ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	77bb      	strb	r3, [r7, #30]
 8004452:	e04b      	b.n	80044ec <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004454:	7ffb      	ldrb	r3, [r7, #31]
 8004456:	2b08      	cmp	r3, #8
 8004458:	d827      	bhi.n	80044aa <UART_SetConfig+0x34a>
 800445a:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <UART_SetConfig+0x300>)
 800445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004460:	08004485 	.word	0x08004485
 8004464:	0800448d 	.word	0x0800448d
 8004468:	08004495 	.word	0x08004495
 800446c:	080044ab 	.word	0x080044ab
 8004470:	0800449b 	.word	0x0800449b
 8004474:	080044ab 	.word	0x080044ab
 8004478:	080044ab 	.word	0x080044ab
 800447c:	080044ab 	.word	0x080044ab
 8004480:	080044a3 	.word	0x080044a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004484:	f7ff f9c6 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8004488:	61b8      	str	r0, [r7, #24]
        break;
 800448a:	e013      	b.n	80044b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800448c:	f7ff f9e4 	bl	8003858 <HAL_RCC_GetPCLK2Freq>
 8004490:	61b8      	str	r0, [r7, #24]
        break;
 8004492:	e00f      	b.n	80044b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004494:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <UART_SetConfig+0x3a4>)
 8004496:	61bb      	str	r3, [r7, #24]
        break;
 8004498:	e00c      	b.n	80044b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449a:	f7ff f95b 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 800449e:	61b8      	str	r0, [r7, #24]
        break;
 80044a0:	e008      	b.n	80044b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044a6:	61bb      	str	r3, [r7, #24]
        break;
 80044a8:	e004      	b.n	80044b4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	77bb      	strb	r3, [r7, #30]
        break;
 80044b2:	bf00      	nop
    }

    if (pclk != 0U)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d018      	beq.n	80044ec <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	085a      	lsrs	r2, r3, #1
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	441a      	add	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b0f      	cmp	r3, #15
 80044d2:	d909      	bls.n	80044e8 <UART_SetConfig+0x388>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044da:	d205      	bcs.n	80044e8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	e001      	b.n	80044ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80044f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	007a1200 	.word	0x007a1200

08004508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01a      	beq.n	800461e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004606:	d10a      	bne.n	800461e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  }
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b098      	sub	sp, #96	@ 0x60
 8004650:	af02      	add	r7, sp, #8
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800465c:	f7fc f9ce 	bl	80009fc <HAL_GetTick>
 8004660:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b08      	cmp	r3, #8
 800466e:	d12e      	bne.n	80046ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004670:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004678:	2200      	movs	r2, #0
 800467a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f88c 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d021      	beq.n	80046ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800469e:	653b      	str	r3, [r7, #80]	@ 0x50
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e6      	bne.n	800468a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e062      	b.n	8004794 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d149      	bne.n	8004770 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f856 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03c      	beq.n	8004770 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	623b      	str	r3, [r7, #32]
   return(result);
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800470a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004714:	633b      	str	r3, [r7, #48]	@ 0x30
 8004716:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800471a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e6      	bne.n	80046f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	60fb      	str	r3, [r7, #12]
   return(result);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004748:	61fa      	str	r2, [r7, #28]
 800474a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	617b      	str	r3, [r7, #20]
   return(result);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e5      	bne.n	8004728 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e011      	b.n	8004794 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3758      	adds	r7, #88	@ 0x58
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ac:	e04f      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d04b      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7fc f921 	bl	80009fc <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <UART_WaitOnFlagUntilTimeout+0x30>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e04e      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d037      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b80      	cmp	r3, #128	@ 0x80
 80047e2:	d034      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b40      	cmp	r3, #64	@ 0x40
 80047e8:	d031      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d110      	bne.n	800481a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2208      	movs	r2, #8
 80047fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f838 	bl	8004876 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2208      	movs	r2, #8
 800480a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e029      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004828:	d111      	bne.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f81e 	bl	8004876 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e00f      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d0a0      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004876:	b480      	push	{r7}
 8004878:	b095      	sub	sp, #84	@ 0x54
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489c:	643b      	str	r3, [r7, #64]	@ 0x40
 800489e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e6      	bne.n	800487e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	61fb      	str	r3, [r7, #28]
   return(result);
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3308      	adds	r3, #8
 80048ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e5      	bne.n	80048b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d118      	bne.n	800491e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f023 0310 	bic.w	r3, r3, #16
 8004900:	647b      	str	r3, [r7, #68]	@ 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6979      	ldr	r1, [r7, #20]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	613b      	str	r3, [r7, #16]
   return(result);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e6      	bne.n	80048ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004932:	bf00      	nop
 8004934:	3754      	adds	r7, #84	@ 0x54
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <memset>:
 800493e:	4402      	add	r2, r0
 8004940:	4603      	mov	r3, r0
 8004942:	4293      	cmp	r3, r2
 8004944:	d100      	bne.n	8004948 <memset+0xa>
 8004946:	4770      	bx	lr
 8004948:	f803 1b01 	strb.w	r1, [r3], #1
 800494c:	e7f9      	b.n	8004942 <memset+0x4>
	...

08004950 <__libc_init_array>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4d0d      	ldr	r5, [pc, #52]	@ (8004988 <__libc_init_array+0x38>)
 8004954:	4c0d      	ldr	r4, [pc, #52]	@ (800498c <__libc_init_array+0x3c>)
 8004956:	1b64      	subs	r4, r4, r5
 8004958:	10a4      	asrs	r4, r4, #2
 800495a:	2600      	movs	r6, #0
 800495c:	42a6      	cmp	r6, r4
 800495e:	d109      	bne.n	8004974 <__libc_init_array+0x24>
 8004960:	4d0b      	ldr	r5, [pc, #44]	@ (8004990 <__libc_init_array+0x40>)
 8004962:	4c0c      	ldr	r4, [pc, #48]	@ (8004994 <__libc_init_array+0x44>)
 8004964:	f000 f818 	bl	8004998 <_init>
 8004968:	1b64      	subs	r4, r4, r5
 800496a:	10a4      	asrs	r4, r4, #2
 800496c:	2600      	movs	r6, #0
 800496e:	42a6      	cmp	r6, r4
 8004970:	d105      	bne.n	800497e <__libc_init_array+0x2e>
 8004972:	bd70      	pop	{r4, r5, r6, pc}
 8004974:	f855 3b04 	ldr.w	r3, [r5], #4
 8004978:	4798      	blx	r3
 800497a:	3601      	adds	r6, #1
 800497c:	e7ee      	b.n	800495c <__libc_init_array+0xc>
 800497e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004982:	4798      	blx	r3
 8004984:	3601      	adds	r6, #1
 8004986:	e7f2      	b.n	800496e <__libc_init_array+0x1e>
 8004988:	080049e8 	.word	0x080049e8
 800498c:	080049e8 	.word	0x080049e8
 8004990:	080049e8 	.word	0x080049e8
 8004994:	080049ec 	.word	0x080049ec

08004998 <_init>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	bf00      	nop
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr

080049a4 <_fini>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	bf00      	nop
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr
