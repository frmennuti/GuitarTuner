
GuitarTuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d544  08009c14  08009c14  0000ac14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027158  08027158  00029078  2**0
                  CONTENTS
  4 .ARM          00000000  08027158  08027158  00029078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08027158  08027158  00029078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027158  08027158  00028158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802715c  0802715c  0002815c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08027160  00029000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00029078  2**0
                  CONTENTS
 10 .bss          00009d64  20000078  20000078  00029078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20009ddc  20009ddc  00029078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00029078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029aea  00000000  00000000  000290a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004afc  00000000  00000000  00052b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e0  00000000  00000000  00057690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001199  00000000  00000000  00058e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004066  00000000  00000000  0005a009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f543  00000000  00000000  0005e06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e01df  00000000  00000000  0007d5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0015d791  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006898  00000000  00000000  0015d850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001640e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002fbb  00000000  00000000  0016414e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000d0  00000000  00000000  00167109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009bfc 	.word	0x08009bfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08009bfc 	.word	0x08009bfc

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <calc_magnitude>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calc_magnitude(float real_part, float img_part)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b62:	edc7 0a00 	vstr	s1, [r7]
	return sqrt(real_part*real_part + img_part*img_part);
 8000b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b6a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000b6e:	edd7 7a00 	vldr	s15, [r7]
 8000b72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b7a:	ee17 0a90 	vmov	r0, s15
 8000b7e:	f7ff fc93 	bl	80004a8 <__aeabi_f2d>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	ec43 2b10 	vmov	d0, r2, r3
 8000b8a:	f008 ff31 	bl	80099f0 <sqrt>
 8000b8e:	ec53 2b10 	vmov	r2, r3, d0
 8000b92:	4610      	mov	r0, r2
 8000b94:	4619      	mov	r1, r3
 8000b96:	f7ff ff8f 	bl	8000ab8 <__aeabi_d2f>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	ee07 3a90 	vmov	s15, r3
}
 8000ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f000 fd76 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 f844 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 f9d0 	bl	8000f5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bbc:	f000 f9b0 	bl	8000f20 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bc0:	f000 f97e 	bl	8000ec0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000bc4:	f000 f89e 	bl	8000d04 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000bc8:	f000 f90e 	bl	8000de8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000bcc:	f000 f942 	bl	8000e54 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_LENGTH);
 8000bd0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bd4:	4810      	ldr	r0, [pc, #64]	@ (8000c18 <main+0x6c>)
 8000bd6:	f007 fe39 	bl	800884c <arm_rfft_fast_init_f32>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bda:	f004 fec5 	bl	8005968 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DMATask */
  DMATaskHandle = osThreadNew(StartDMATask, NULL, &DMATask_attributes);
 8000bde:	4a0f      	ldr	r2, [pc, #60]	@ (8000c1c <main+0x70>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480f      	ldr	r0, [pc, #60]	@ (8000c20 <main+0x74>)
 8000be4:	f004 ff28 	bl	8005a38 <osThreadNew>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <main+0x78>)
 8000bec:	6013      	str	r3, [r2, #0]

  /* creation of fftTask */
  fftTaskHandle = osThreadNew(StartfftTaskTask, NULL, &fftTask_attributes);
 8000bee:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <main+0x7c>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	480e      	ldr	r0, [pc, #56]	@ (8000c2c <main+0x80>)
 8000bf4:	f004 ff20 	bl	8005a38 <osThreadNew>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <main+0x84>)
 8000bfc:	6013      	str	r3, [r2, #0]

  /* creation of elaborateFftDat */
  elaborateFftDatHandle = osThreadNew(elaborateFftData, NULL, &elaborateFftDat_attributes);
 8000bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <main+0x88>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <main+0x8c>)
 8000c04:	f004 ff18 	bl	8005a38 <osThreadNew>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <main+0x90>)
 8000c0c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c0e:	f004 fedf 	bl	80059d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c12:	bf00      	nop
 8000c14:	e7fd      	b.n	8000c12 <main+0x66>
 8000c16:	bf00      	nop
 8000c18:	20006254 	.word	0x20006254
 8000c1c:	08009c4c 	.word	0x08009c4c
 8000c20:	08001069 	.word	0x08001069
 8000c24:	20000248 	.word	0x20000248
 8000c28:	08009c70 	.word	0x08009c70
 8000c2c:	08001185 	.word	0x08001185
 8000c30:	2000024c 	.word	0x2000024c
 8000c34:	08009c94 	.word	0x08009c94
 8000c38:	080011e5 	.word	0x080011e5
 8000c3c:	20000250 	.word	0x20000250

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0a6      	sub	sp, #152	@ 0x98
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c4a:	2228      	movs	r2, #40	@ 0x28
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fde0 	bl	8009814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2258      	movs	r2, #88	@ 0x58
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fdd2 	bl	8009814 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c70:	2302      	movs	r3, #2
 8000c72:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c74:	2301      	movs	r3, #1
 8000c76:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c8c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 f9b2 	bl	8003008 <HAL_RCC_OscConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000caa:	f000 fb11 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cae:	230f      	movs	r3, #15
 8000cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cbe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cc8:	2102      	movs	r1, #2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 f9f0 	bl	80040b0 <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cd6:	f000 fafb 	bl	80012d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000cda:	2382      	movs	r3, #130	@ 0x82
 8000cdc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000ce2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fc32 	bl	8004554 <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cf6:	f000 faeb 	bl	80012d0 <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3798      	adds	r7, #152	@ 0x98
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d26:	4b2f      	ldr	r3, [pc, #188]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d34:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d40:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d46:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000d56:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d58:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8000d5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d74:	2204      	movs	r2, #4
 8000d76:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d84:	4817      	ldr	r0, [pc, #92]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000d86:	f000 fccb 	bl	8001720 <HAL_ADC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d90:	f000 fa9e 	bl	80012d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000da0:	f001 fabe 	bl	8002320 <HAL_ADCEx_MultiModeConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000daa:	f000 fa91 	bl	80012d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <MX_ADC1_Init+0xe0>)
 8000dcc:	f000 ffbe 	bl	8001d4c <HAL_ADC_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000dd6:	f000 fa7b 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	@ 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000094 	.word	0x20000094

08000de8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <MX_TIM6_Init+0x64>)
 8000dfa:	4a15      	ldr	r2, [pc, #84]	@ (8000e50 <MX_TIM6_Init+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <MX_TIM6_Init+0x64>)
 8000e00:	2247      	movs	r2, #71	@ 0x47
 8000e02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <MX_TIM6_Init+0x64>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 195-1;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <MX_TIM6_Init+0x64>)
 8000e0c:	22c2      	movs	r2, #194	@ 0xc2
 8000e0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <MX_TIM6_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <MX_TIM6_Init+0x64>)
 8000e18:	f003 fdba 	bl	8004990 <HAL_TIM_Base_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e22:	f000 fa55 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e26:	2320      	movs	r3, #32
 8000e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <MX_TIM6_Init+0x64>)
 8000e34:	f004 f8b0 	bl	8004f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e3e:	f000 fa47 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000128 	.word	0x20000128
 8000e50:	40001000 	.word	0x40001000

08000e54 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_TIM7_Init+0x64>)
 8000e66:	4a15      	ldr	r2, [pc, #84]	@ (8000ebc <MX_TIM7_Init+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <MX_TIM7_Init+0x64>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_TIM7_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 36-1;
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <MX_TIM7_Init+0x64>)
 8000e78:	2223      	movs	r2, #35	@ 0x23
 8000e7a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <MX_TIM7_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e82:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_TIM7_Init+0x64>)
 8000e84:	f003 fd84 	bl	8004990 <HAL_TIM_Base_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000e8e:	f000 fa1f 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <MX_TIM7_Init+0x64>)
 8000ea0:	f004 f87a 	bl	8004f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000eaa:	f000 fa11 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000174 	.word	0x20000174
 8000ebc:	40001400 	.word	0x40001400

08000ec0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ec6:	4a15      	ldr	r2, [pc, #84]	@ (8000f1c <MX_USART2_UART_Init+0x5c>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000eca:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ecc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <MX_USART2_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_USART2_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_USART2_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_USART2_UART_Init+0x58>)
 8000f04:	f004 f8f2 	bl	80050ec <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f0e:	f000 f9df 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200001c0 	.word	0x200001c0
 8000f1c:	40004400 	.word	0x40004400

08000f20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <MX_DMA_Init+0x38>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f58 <MX_DMA_Init+0x38>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6153      	str	r3, [r2, #20]
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <MX_DMA_Init+0x38>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2105      	movs	r1, #5
 8000f42:	200b      	movs	r0, #11
 8000f44:	f001 fcc6 	bl	80028d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f48:	200b      	movs	r0, #11
 8000f4a:	f001 fcdf 	bl	800290c <HAL_NVIC_EnableIRQ>

}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a2a      	ldr	r2, [pc, #168]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000f78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f8a:	4b25      	ldr	r3, [pc, #148]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a24      	ldr	r2, [pc, #144]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000f90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f94:	6153      	str	r3, [r2, #20]
 8000f96:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fac:	6153      	str	r3, [r2, #20]
 8000fae:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4a18      	ldr	r2, [pc, #96]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fc4:	6153      	str	r3, [r2, #20]
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <MX_GPIO_Init+0xc4>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trace0_Pin|Trace1_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2160      	movs	r1, #96	@ 0x60
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fda:	f001 ffe3 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480b      	ldr	r0, [pc, #44]	@ (8001024 <MX_GPIO_Init+0xc8>)
 8000ff6:	f001 fe4b 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trace0_Pin Trace1_Pin */
  GPIO_InitStruct.Pin = Trace0_Pin|Trace1_Pin;
 8000ffa:	2360      	movs	r3, #96	@ 0x60
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001014:	f001 fe3c 	bl	8002c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	@ 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000
 8001024:	48000800 	.word	0x48000800

08001028 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Notify the task that the transmission is complete. */
	vTaskNotifyGiveFromISR( DMATaskHandle, pdFALSE );
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f006 fb34 	bl	80076a4 <vTaskNotifyGiveFromISR>
	//HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000248 	.word	0x20000248

08001048 <HAL_ADC_ConvCpltCallback>:
void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Notify the task that the transmission is complete. */
	vTaskNotifyGiveFromISR( DMATaskHandle, pdFALSE );
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f006 fb24 	bl	80076a4 <vTaskNotifyGiveFromISR>
	//HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000248 	.word	0x20000248

08001068 <StartDMATask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDMATask */
void StartDMATask(void *argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  static bool sampled_first_half = true;

  uint32_t DMAnotificationValue;

  HAL_ADC_Start_DMA(&hadc1, buffer_adc, ADC_BUFFER_LENGTH);
 8001070:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001074:	493b      	ldr	r1, [pc, #236]	@ (8001164 <StartDMATask+0xfc>)
 8001076:	483c      	ldr	r0, [pc, #240]	@ (8001168 <StartDMATask+0x100>)
 8001078:	f000 fd4c 	bl	8001b14 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim6);
 800107c:	483b      	ldr	r0, [pc, #236]	@ (800116c <StartDMATask+0x104>)
 800107e:	f003 fcdf 	bl	8004a40 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 8001082:	483b      	ldr	r0, [pc, #236]	@ (8001170 <StartDMATask+0x108>)
 8001084:	f003 fcdc 	bl	8004a40 <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	  DMAnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	2001      	movs	r0, #1
 800108e:	f006 fa0f 	bl	80074b0 <ulTaskNotifyTake>
 8001092:	60f8      	str	r0, [r7, #12]

	  if(DMAnotificationValue == 1)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d15d      	bne.n	8001156 <StartDMATask+0xee>
	  {
		  HAL_GPIO_WritePin(GPIOA, Trace0_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2120      	movs	r1, #32
 800109e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a2:	f001 ff7f 	bl	8002fa4 <HAL_GPIO_WritePin>
		  //prima volta che arrivo qui ma mi sembra un marginal gain dato che
		  //tutte le altre volte che viene qua deve eseguirla. Una FSM, per
		  //quanto elegante sembra un overkill e mi sembra renda il codice più
		  //complesso da leggere e manutenere. Da implementare qualora le
		  //elaborazioni da fare qui risultino più complesse
		  memcpy(fft_buffer, &fft_buffer[PARK_BUFFER_LENGTH], sizeof(float)*PARK_BUFFER_LENGTH);
 80010a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010aa:	4932      	ldr	r1, [pc, #200]	@ (8001174 <StartDMATask+0x10c>)
 80010ac:	4832      	ldr	r0, [pc, #200]	@ (8001178 <StartDMATask+0x110>)
 80010ae:	f008 fc3b 	bl	8009928 <memcpy>

		  if(sampled_first_half)
 80010b2:	4b32      	ldr	r3, [pc, #200]	@ (800117c <StartDMATask+0x114>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d01a      	beq.n	80010f0 <StartDMATask+0x88>
		  {
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e012      	b.n	80010e6 <StartDMATask+0x7e>
				  fft_buffer[PARK_BUFFER_LENGTH+i] = (float)buffer_adc[i];
 80010c0:	4a28      	ldr	r2, [pc, #160]	@ (8001164 <StartDMATask+0xfc>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80010ce:	ee07 2a90 	vmov	s15, r2
 80010d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d6:	4a28      	ldr	r2, [pc, #160]	@ (8001178 <StartDMATask+0x110>)
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	edc3 7a00 	vstr	s15, [r3]
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ec:	dbe8      	blt.n	80010c0 <StartDMATask+0x58>
 80010ee:	e01b      	b.n	8001128 <StartDMATask+0xc0>
		  }
		  else
		  {
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	e014      	b.n	8001120 <StartDMATask+0xb8>
				  fft_buffer[PARK_BUFFER_LENGTH+i] = (float)buffer_adc[PARK_BUFFER_LENGTH+i];
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80010fc:	4a19      	ldr	r2, [pc, #100]	@ (8001164 <StartDMATask+0xfc>)
 80010fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001108:	ee07 2a90 	vmov	s15, r2
 800110c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001110:	4a19      	ldr	r2, [pc, #100]	@ (8001178 <StartDMATask+0x110>)
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	edc3 7a00 	vstr	s15, [r3]
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	3301      	adds	r3, #1
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001126:	dbe6      	blt.n	80010f6 <StartDMATask+0x8e>
		  }

		  //punto al prossimo inizio del blocco da 1024 elementi in buffer adc
		  sampled_first_half = !sampled_first_half;
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <StartDMATask+0x114>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f083 0301 	eor.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <StartDMATask+0x114>)
 8001144:	701a      	strb	r2, [r3, #0]

		  xTaskNotifyGive(fftTaskHandle);
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <StartDMATask+0x118>)
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	2202      	movs	r2, #2
 800114e:	2100      	movs	r1, #0
 8001150:	f006 f9fa 	bl	8007548 <xTaskGenericNotify>
 8001154:	e798      	b.n	8001088 <StartDMATask+0x20>
	  }
	  else
		  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 8001156:	2140      	movs	r1, #64	@ 0x40
 8001158:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800115c:	f001 ff3a 	bl	8002fd4 <HAL_GPIO_TogglePin>
	  DMAnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001160:	e792      	b.n	8001088 <StartDMATask+0x20>
 8001162:	bf00      	nop
 8001164:	20000254 	.word	0x20000254
 8001168:	20000094 	.word	0x20000094
 800116c:	20000128 	.word	0x20000128
 8001170:	20000174 	.word	0x20000174
 8001174:	20003254 	.word	0x20003254
 8001178:	20002254 	.word	0x20002254
 800117c:	20000000 	.word	0x20000000
 8001180:	2000024c 	.word	0x2000024c

08001184 <StartfftTaskTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartfftTaskTask */
void StartfftTaskTask(void *argument)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartfftTaskTask */
  uint32_t fftnotificationValue;
  /* Infinite loop */
  for(;;)
  {
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	2001      	movs	r0, #1
 8001192:	f006 f98d 	bl	80074b0 <ulTaskNotifyTake>
 8001196:	60f8      	str	r0, [r7, #12]

	  if(fftnotificationValue == 1)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d113      	bne.n	80011c6 <StartfftTaskTask+0x42>
	  {
		  HAL_GPIO_WritePin(GPIOA, Trace0_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2120      	movs	r1, #32
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a6:	f001 fefd 	bl	8002fa4 <HAL_GPIO_WritePin>

		  //eseguire la fft
		  arm_rfft_fast_f32(&fftHandler, fft_buffer, fft_buffer_result, 0);
 80011aa:	2300      	movs	r3, #0
 80011ac:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <StartfftTaskTask+0x50>)
 80011ae:	490a      	ldr	r1, [pc, #40]	@ (80011d8 <StartfftTaskTask+0x54>)
 80011b0:	480a      	ldr	r0, [pc, #40]	@ (80011dc <StartfftTaskTask+0x58>)
 80011b2:	f007 fc35 	bl	8008a20 <arm_rfft_fast_f32>

		  xTaskNotifyGive(elaborateFftDatHandle);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <StartfftTaskTask+0x5c>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	2300      	movs	r3, #0
 80011bc:	2202      	movs	r2, #2
 80011be:	2100      	movs	r1, #0
 80011c0:	f006 f9c2 	bl	8007548 <xTaskGenericNotify>
 80011c4:	e7e2      	b.n	800118c <StartfftTaskTask+0x8>
	  }
	  else
		  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 80011c6:	2140      	movs	r1, #64	@ 0x40
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011cc:	f001 ff02 	bl	8002fd4 <HAL_GPIO_TogglePin>
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80011d0:	e7dc      	b.n	800118c <StartfftTaskTask+0x8>
 80011d2:	bf00      	nop
 80011d4:	20004254 	.word	0x20004254
 80011d8:	20002254 	.word	0x20002254
 80011dc:	20006254 	.word	0x20006254
 80011e0:	20000250 	.word	0x20000250

080011e4 <elaborateFftData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_elaborateFftData */
void elaborateFftData(void *argument)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN alaborateFftData */
  uint32_t fftnotificationValue;

  //inizializzo il campo contenente i bin della frequenza, non devo
  //ricalcolarlo ogni volta ma solo la prima
  for(int32_t cnt = 0; cnt < ADC_BUFFER_LENGTH/2; cnt++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e01a      	b.n	8001228 <elaborateFftData+0x44>
  {
	  fft_out[cnt/2].frq = (cnt*SAMPLING_FREQUENCY_HZ)/ADC_BUFFER_LENGTH;
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	da01      	bge.n	8001204 <elaborateFftData+0x20>
 8001200:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001204:	12db      	asrs	r3, r3, #11
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	0fda      	lsrs	r2, r3, #31
 800120e:	4413      	add	r3, r2
 8001210:	105b      	asrs	r3, r3, #1
 8001212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001216:	4a23      	ldr	r2, [pc, #140]	@ (80012a4 <elaborateFftData+0xc0>)
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	3304      	adds	r3, #4
 800121e:	edc3 7a00 	vstr	s15, [r3]
  for(int32_t cnt = 0; cnt < ADC_BUFFER_LENGTH/2; cnt++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800122e:	dbe0      	blt.n	80011f2 <elaborateFftData+0xe>
  }
  /* Infinite loop */
  for(;;)
  {
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	2001      	movs	r0, #1
 8001236:	f006 f93b 	bl	80074b0 <ulTaskNotifyTake>
 800123a:	60f8      	str	r0, [r7, #12]
	  if(fftnotificationValue == 1)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d12a      	bne.n	8001298 <elaborateFftData+0xb4>
	  {
		  //fft_buffer_result contains imaginary numbers, the magnitude
		  //must be evaluated in order to recover the tones strength
		  //frequency bins must be evaluated
		  //after that data shall be sent through USB communication
		  for(int32_t cnt = 0; cnt < (ADC_BUFFER_LENGTH-2); cnt += 2)
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	e021      	b.n	800128c <elaborateFftData+0xa8>
		  {
			  fft_out[cnt/2].mag = calc_magnitude(fft_buffer_result[cnt],fft_buffer_result[cnt+1]);
 8001248:	4a17      	ldr	r2, [pc, #92]	@ (80012a8 <elaborateFftData+0xc4>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	3301      	adds	r3, #1
 8001258:	4a13      	ldr	r2, [pc, #76]	@ (80012a8 <elaborateFftData+0xc4>)
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	ed93 7a00 	vldr	s14, [r3]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	0fda      	lsrs	r2, r3, #31
 8001266:	4413      	add	r3, r2
 8001268:	105b      	asrs	r3, r3, #1
 800126a:	461c      	mov	r4, r3
 800126c:	eef0 0a47 	vmov.f32	s1, s14
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	f7ff fc70 	bl	8000b58 <calc_magnitude>
 8001278:	eef0 7a40 	vmov.f32	s15, s0
 800127c:	4a09      	ldr	r2, [pc, #36]	@ (80012a4 <elaborateFftData+0xc0>)
 800127e:	00e3      	lsls	r3, r4, #3
 8001280:	4413      	add	r3, r2
 8001282:	edc3 7a00 	vstr	s15, [r3]
		  for(int32_t cnt = 0; cnt < (ADC_BUFFER_LENGTH-2); cnt += 2)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	3302      	adds	r3, #2
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	f240 72fd 	movw	r2, #2045	@ 0x7fd
 8001292:	4293      	cmp	r3, r2
 8001294:	ddd8      	ble.n	8001248 <elaborateFftData+0x64>
 8001296:	e7cb      	b.n	8001230 <elaborateFftData+0x4c>
		  }
	  }
	  else
		  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 8001298:	2140      	movs	r1, #64	@ 0x40
 800129a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129e:	f001 fe99 	bl	8002fd4 <HAL_GPIO_TogglePin>
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80012a2:	e7c5      	b.n	8001230 <elaborateFftData+0x4c>
 80012a4:	2000626c 	.word	0x2000626c
 80012a8:	20004254 	.word	0x20004254

080012ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012be:	f000 fa05 	bl	80016cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40012c00 	.word	0x40012c00

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <Error_Handler+0x8>

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <HAL_MspInit+0x4c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4a10      	ldr	r2, [pc, #64]	@ (8001328 <HAL_MspInit+0x4c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6193      	str	r3, [r2, #24]
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <HAL_MspInit+0x4c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <HAL_MspInit+0x4c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <HAL_MspInit+0x4c>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <HAL_MspInit+0x4c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	210f      	movs	r1, #15
 8001316:	f06f 0001 	mvn.w	r0, #1
 800131a:	f001 fadb 	bl	80028d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000

0800132c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800134c:	d14c      	bne.n	80013e8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800134e:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <HAL_ADC_MspInit+0xc4>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	4a27      	ldr	r2, [pc, #156]	@ (80013f0 <HAL_ADC_MspInit+0xc4>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001358:	6153      	str	r3, [r2, #20]
 800135a:	4b25      	ldr	r3, [pc, #148]	@ (80013f0 <HAL_ADC_MspInit+0xc4>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b22      	ldr	r3, [pc, #136]	@ (80013f0 <HAL_ADC_MspInit+0xc4>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <HAL_ADC_MspInit+0xc4>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001370:	6153      	str	r3, [r2, #20]
 8001372:	4b1f      	ldr	r3, [pc, #124]	@ (80013f0 <HAL_ADC_MspInit+0xc4>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800137e:	2301      	movs	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001382:	2303      	movs	r3, #3
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001394:	f001 fc7c 	bl	8002c90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <HAL_ADC_MspInit+0xc8>)
 800139a:	4a17      	ldr	r2, [pc, #92]	@ (80013f8 <HAL_ADC_MspInit+0xcc>)
 800139c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_ADC_MspInit+0xc8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <HAL_ADC_MspInit+0xc8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <HAL_ADC_MspInit+0xc8>)
 80013ac:	2280      	movs	r2, #128	@ 0x80
 80013ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013b0:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_ADC_MspInit+0xc8>)
 80013b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <HAL_ADC_MspInit+0xc8>)
 80013ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <HAL_ADC_MspInit+0xc8>)
 80013c2:	2220      	movs	r2, #32
 80013c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <HAL_ADC_MspInit+0xc8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013cc:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <HAL_ADC_MspInit+0xc8>)
 80013ce:	f001 faab 	bl	8002928 <HAL_DMA_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80013d8:	f7ff ff7a 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <HAL_ADC_MspInit+0xc8>)
 80013e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80013e2:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_ADC_MspInit+0xc8>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	@ 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	200000e4 	.word	0x200000e4
 80013f8:	40020008 	.word	0x40020008

080013fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a13      	ldr	r2, [pc, #76]	@ (8001458 <HAL_TIM_Base_MspInit+0x5c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d10c      	bne.n	8001428 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 8001414:	f043 0310 	orr.w	r3, r3, #16
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001426:	e010      	b.n	800144a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0c      	ldr	r2, [pc, #48]	@ (8001460 <HAL_TIM_Base_MspInit+0x64>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d10b      	bne.n	800144a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a09      	ldr	r2, [pc, #36]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	61d3      	str	r3, [r2, #28]
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40001000 	.word	0x40001000
 800145c:	40021000 	.word	0x40021000
 8001460:	40001400 	.word	0x40001400

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <HAL_UART_MspInit+0x7c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d128      	bne.n	80014d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <HAL_UART_MspInit+0x80>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a16      	ldr	r2, [pc, #88]	@ (80014e4 <HAL_UART_MspInit+0x80>)
 800148c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <HAL_UART_MspInit+0x80>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_UART_MspInit+0x80>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <HAL_UART_MspInit+0x80>)
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a8:	6153      	str	r3, [r2, #20]
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_UART_MspInit+0x80>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014b6:	230c      	movs	r3, #12
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c6:	2307      	movs	r3, #7
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d4:	f001 fbdc 	bl	8002c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	@ 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40004400 	.word	0x40004400
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	@ 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014f8:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <HAL_InitTick+0xcc>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a2d      	ldr	r2, [pc, #180]	@ (80015b4 <HAL_InitTick+0xcc>)
 80014fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <HAL_InitTick+0xcc>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001510:	f107 020c 	add.w	r2, r7, #12
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f002 ffe8 	bl	80044f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001520:	f002 ffc4 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8001524:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001528:	4a23      	ldr	r2, [pc, #140]	@ (80015b8 <HAL_InitTick+0xd0>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	0c9b      	lsrs	r3, r3, #18
 8001530:	3b01      	subs	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001534:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <HAL_InitTick+0xd4>)
 8001536:	4a22      	ldr	r2, [pc, #136]	@ (80015c0 <HAL_InitTick+0xd8>)
 8001538:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800153a:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <HAL_InitTick+0xd4>)
 800153c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001540:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001542:	4a1e      	ldr	r2, [pc, #120]	@ (80015bc <HAL_InitTick+0xd4>)
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001548:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <HAL_InitTick+0xd4>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <HAL_InitTick+0xd4>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <HAL_InitTick+0xd4>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800155a:	4818      	ldr	r0, [pc, #96]	@ (80015bc <HAL_InitTick+0xd4>)
 800155c:	f003 fa18 	bl	8004990 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001566:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800156a:	2b00      	cmp	r3, #0
 800156c:	d11b      	bne.n	80015a6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800156e:	4813      	ldr	r0, [pc, #76]	@ (80015bc <HAL_InitTick+0xd4>)
 8001570:	f003 face 	bl	8004b10 <HAL_TIM_Base_Start_IT>
 8001574:	4603      	mov	r3, r0
 8001576:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800157a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800157e:	2b00      	cmp	r3, #0
 8001580:	d111      	bne.n	80015a6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001582:	2019      	movs	r0, #25
 8001584:	f001 f9c2 	bl	800290c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	d808      	bhi.n	80015a0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800158e:	2200      	movs	r2, #0
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	2019      	movs	r0, #25
 8001594:	f001 f99e 	bl	80028d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001598:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <HAL_InitTick+0xdc>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e002      	b.n	80015a6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3730      	adds	r7, #48	@ 0x30
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	431bde83 	.word	0x431bde83
 80015bc:	2000826c 	.word	0x2000826c
 80015c0:	40012c00 	.word	0x40012c00
 80015c4:	20000008 	.word	0x20000008

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <NMI_Handler+0x4>

080015d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <MemManage_Handler+0x4>

080015e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <UsageFault_Handler+0x4>

080015f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <DMA1_Channel1_IRQHandler+0x10>)
 8001606:	f001 fa35 	bl	8002a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200000e4 	.word	0x200000e4

08001614 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800161a:	f003 fae9 	bl	8004bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000826c 	.word	0x2000826c

08001628 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001684 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001650:	f7ff ffea 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <LoopForever+0x6>)
  ldr r1, =_edata
 8001656:	490d      	ldr	r1, [pc, #52]	@ (800168c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001658:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <LoopForever+0xe>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800166c:	4c0a      	ldr	r4, [pc, #40]	@ (8001698 <LoopForever+0x16>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167a:	f008 f92f 	bl	80098dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167e:	f7ff fa95 	bl	8000bac <main>

08001682 <LoopForever>:

LoopForever:
    b LoopForever
 8001682:	e7fe      	b.n	8001682 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001684:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001690:	08027160 	.word	0x08027160
  ldr r2, =_sbss
 8001694:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001698:	20009ddc 	.word	0x20009ddc

0800169c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <HAL_Init+0x28>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	@ (80016c8 <HAL_Init+0x28>)
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f001 f904 	bl	80028be <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f7ff ff16 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff fe0e 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40022000 	.word	0x40022000

080016cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	2000000c 	.word	0x2000000c
 80016f0:	200082b8 	.word	0x200082b8

080016f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	200082b8 	.word	0x200082b8

0800170c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b09a      	sub	sp, #104	@ 0x68
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e1e3      	b.n	8001b08 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b00      	cmp	r3, #0
 8001750:	d176      	bne.n	8001840 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	2b00      	cmp	r3, #0
 8001758:	d152      	bne.n	8001800 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fdd9 	bl	800132c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d13b      	bne.n	8001800 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 ff85 	bl	8002698 <ADC_Disable>
 800178e:	4603      	mov	r3, r0
 8001790:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	d12f      	bne.n	8001800 <HAL_ADC_Init+0xe0>
 80017a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d12b      	bne.n	8001800 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017b0:	f023 0302 	bic.w	r3, r3, #2
 80017b4:	f043 0202 	orr.w	r2, r3, #2
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017ca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80017da:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017dc:	4b92      	ldr	r3, [pc, #584]	@ (8001a28 <HAL_ADC_Init+0x308>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a92      	ldr	r2, [pc, #584]	@ (8001a2c <HAL_ADC_Init+0x30c>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	0c9a      	lsrs	r2, r3, #18
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f2:	e002      	b.n	80017fa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f9      	bne.n	80017f4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800181c:	d110      	bne.n	8001840 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	f023 0312 	bic.w	r3, r3, #18
 8001826:	f043 0210 	orr.w	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	f040 8150 	bne.w	8001aee <HAL_ADC_Init+0x3ce>
 800184e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 814b 	bne.w	8001aee <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 8143 	bne.w	8001aee <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001870:	f043 0202 	orr.w	r2, r3, #2
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001880:	d004      	beq.n	800188c <HAL_ADC_Init+0x16c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a6a      	ldr	r2, [pc, #424]	@ (8001a30 <HAL_ADC_Init+0x310>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_ADC_Init+0x170>
 800188c:	4b69      	ldr	r3, [pc, #420]	@ (8001a34 <HAL_ADC_Init+0x314>)
 800188e:	e000      	b.n	8001892 <HAL_ADC_Init+0x172>
 8001890:	4b69      	ldr	r3, [pc, #420]	@ (8001a38 <HAL_ADC_Init+0x318>)
 8001892:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800189c:	d102      	bne.n	80018a4 <HAL_ADC_Init+0x184>
 800189e:	4b64      	ldr	r3, [pc, #400]	@ (8001a30 <HAL_ADC_Init+0x310>)
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e01a      	b.n	80018da <HAL_ADC_Init+0x1ba>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a61      	ldr	r2, [pc, #388]	@ (8001a30 <HAL_ADC_Init+0x310>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d103      	bne.n	80018b6 <HAL_ADC_Init+0x196>
 80018ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e011      	b.n	80018da <HAL_ADC_Init+0x1ba>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a60      	ldr	r2, [pc, #384]	@ (8001a3c <HAL_ADC_Init+0x31c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d102      	bne.n	80018c6 <HAL_ADC_Init+0x1a6>
 80018c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a40 <HAL_ADC_Init+0x320>)
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e009      	b.n	80018da <HAL_ADC_Init+0x1ba>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a5d      	ldr	r2, [pc, #372]	@ (8001a40 <HAL_ADC_Init+0x320>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d102      	bne.n	80018d6 <HAL_ADC_Init+0x1b6>
 80018d0:	4b5a      	ldr	r3, [pc, #360]	@ (8001a3c <HAL_ADC_Init+0x31c>)
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e001      	b.n	80018da <HAL_ADC_Init+0x1ba>
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d108      	bne.n	80018fa <HAL_ADC_Init+0x1da>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Init+0x1da>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_ADC_Init+0x1dc>
 80018fa:	2300      	movs	r3, #0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d11c      	bne.n	800193a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001900:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001902:	2b00      	cmp	r3, #0
 8001904:	d010      	beq.n	8001928 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_ADC_Init+0x202>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_ADC_Init+0x202>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_ADC_Init+0x204>
 8001922:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001924:	2b00      	cmp	r3, #0
 8001926:	d108      	bne.n	800193a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	431a      	orrs	r2, r3
 8001936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001938:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7e5b      	ldrb	r3, [r3, #25]
 800193e:	035b      	lsls	r3, r3, #13
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001944:	2a01      	cmp	r2, #1
 8001946:	d002      	beq.n	800194e <HAL_ADC_Init+0x22e>
 8001948:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800194c:	e000      	b.n	8001950 <HAL_ADC_Init+0x230>
 800194e:	2200      	movs	r2, #0
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4313      	orrs	r3, r2
 800195e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001960:	4313      	orrs	r3, r2
 8001962:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d11b      	bne.n	80019a6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7e5b      	ldrb	r3, [r3, #25]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	3b01      	subs	r3, #1
 800197c:	045a      	lsls	r2, r3, #17
 800197e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001980:	4313      	orrs	r3, r2
 8001982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001986:	663b      	str	r3, [r7, #96]	@ 0x60
 8001988:	e00d      	b.n	80019a6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001992:	f043 0220 	orr.w	r2, r3, #32
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f043 0201 	orr.w	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d054      	beq.n	8001a58 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a22      	ldr	r2, [pc, #136]	@ (8001a3c <HAL_ADC_Init+0x31c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d004      	beq.n	80019c2 <HAL_ADC_Init+0x2a2>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a20      	ldr	r2, [pc, #128]	@ (8001a40 <HAL_ADC_Init+0x320>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d140      	bne.n	8001a44 <HAL_ADC_Init+0x324>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c6:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80019ca:	d02a      	beq.n	8001a22 <HAL_ADC_Init+0x302>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019d4:	d022      	beq.n	8001a1c <HAL_ADC_Init+0x2fc>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019da:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80019de:	d01a      	beq.n	8001a16 <HAL_ADC_Init+0x2f6>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 80019e8:	d012      	beq.n	8001a10 <HAL_ADC_Init+0x2f0>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ee:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 80019f2:	d00a      	beq.n	8001a0a <HAL_ADC_Init+0x2ea>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 80019fc:	d002      	beq.n	8001a04 <HAL_ADC_Init+0x2e4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a02:	e023      	b.n	8001a4c <HAL_ADC_Init+0x32c>
 8001a04:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a08:	e020      	b.n	8001a4c <HAL_ADC_Init+0x32c>
 8001a0a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001a0e:	e01d      	b.n	8001a4c <HAL_ADC_Init+0x32c>
 8001a10:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001a14:	e01a      	b.n	8001a4c <HAL_ADC_Init+0x32c>
 8001a16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a1a:	e017      	b.n	8001a4c <HAL_ADC_Init+0x32c>
 8001a1c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001a20:	e014      	b.n	8001a4c <HAL_ADC_Init+0x32c>
 8001a22:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001a26:	e011      	b.n	8001a4c <HAL_ADC_Init+0x32c>
 8001a28:	20000004 	.word	0x20000004
 8001a2c:	431bde83 	.word	0x431bde83
 8001a30:	50000100 	.word	0x50000100
 8001a34:	50000300 	.word	0x50000300
 8001a38:	50000700 	.word	0x50000700
 8001a3c:	50000400 	.word	0x50000400
 8001a40:	50000500 	.word	0x50000500
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a50:	4313      	orrs	r3, r2
 8001a52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a54:	4313      	orrs	r3, r2
 8001a56:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d114      	bne.n	8001a90 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a74:	f023 0302 	bic.w	r3, r3, #2
 8001a78:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7e1b      	ldrb	r3, [r3, #24]
 8001a7e:	039a      	lsls	r2, r3, #14
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <HAL_ADC_Init+0x3f0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d10c      	bne.n	8001ac6 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f023 010f 	bic.w	r1, r3, #15
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	1e5a      	subs	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ac4:	e007      	b.n	8001ad6 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 020f 	bic.w	r2, r2, #15
 8001ad4:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	f023 0303 	bic.w	r3, r3, #3
 8001ae4:	f043 0201 	orr.w	r2, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aec:	e00a      	b.n	8001b04 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f023 0312 	bic.w	r3, r3, #18
 8001af6:	f043 0210 	orr.w	r2, r3, #16
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001afe:	2301      	movs	r3, #1
 8001b00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3768      	adds	r7, #104	@ 0x68
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	fff0c007 	.word	0xfff0c007

08001b14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80f7 	bne.w	8001d22 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Start_DMA+0x2e>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e0f2      	b.n	8001d28 <HAL_ADC_Start_DMA+0x214>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b52:	d004      	beq.n	8001b5e <HAL_ADC_Start_DMA+0x4a>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a75      	ldr	r2, [pc, #468]	@ (8001d30 <HAL_ADC_Start_DMA+0x21c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d109      	bne.n	8001b72 <HAL_ADC_Start_DMA+0x5e>
 8001b5e:	4b75      	ldr	r3, [pc, #468]	@ (8001d34 <HAL_ADC_Start_DMA+0x220>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	e008      	b.n	8001b84 <HAL_ADC_Start_DMA+0x70>
 8001b72:	4b71      	ldr	r3, [pc, #452]	@ (8001d38 <HAL_ADC_Start_DMA+0x224>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	2300      	movne	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80c5 	beq.w	8001d14 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fd20 	bl	80025d0 <ADC_Enable>
 8001b90:	4603      	mov	r3, r0
 8001b92:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 80b7 	bne.w	8001d0a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bb8:	d004      	beq.n	8001bc4 <HAL_ADC_Start_DMA+0xb0>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a5c      	ldr	r2, [pc, #368]	@ (8001d30 <HAL_ADC_Start_DMA+0x21c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d106      	bne.n	8001bd2 <HAL_ADC_Start_DMA+0xbe>
 8001bc4:	4b5b      	ldr	r3, [pc, #364]	@ (8001d34 <HAL_ADC_Start_DMA+0x220>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d010      	beq.n	8001bf2 <HAL_ADC_Start_DMA+0xde>
 8001bd0:	e005      	b.n	8001bde <HAL_ADC_Start_DMA+0xca>
 8001bd2:	4b59      	ldr	r3, [pc, #356]	@ (8001d38 <HAL_ADC_Start_DMA+0x224>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_ADC_Start_DMA+0xde>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001be6:	d004      	beq.n	8001bf2 <HAL_ADC_Start_DMA+0xde>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a53      	ldr	r2, [pc, #332]	@ (8001d3c <HAL_ADC_Start_DMA+0x228>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d115      	bne.n	8001c1e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d036      	beq.n	8001c7a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c14:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c1c:	e02d      	b.n	8001c7a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c32:	d004      	beq.n	8001c3e <HAL_ADC_Start_DMA+0x12a>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a3d      	ldr	r2, [pc, #244]	@ (8001d30 <HAL_ADC_Start_DMA+0x21c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10a      	bne.n	8001c54 <HAL_ADC_Start_DMA+0x140>
 8001c3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf14      	ite	ne
 8001c4c:	2301      	movne	r3, #1
 8001c4e:	2300      	moveq	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	e008      	b.n	8001c66 <HAL_ADC_Start_DMA+0x152>
 8001c54:	4b39      	ldr	r3, [pc, #228]	@ (8001d3c <HAL_ADC_Start_DMA+0x228>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf14      	ite	ne
 8001c60:	2301      	movne	r3, #1
 8001c62:	2300      	moveq	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c72:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c86:	d106      	bne.n	8001c96 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	f023 0206 	bic.w	r2, r3, #6
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca8:	4a25      	ldr	r2, [pc, #148]	@ (8001d40 <HAL_ADC_Start_DMA+0x22c>)
 8001caa:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb0:	4a24      	ldr	r2, [pc, #144]	@ (8001d44 <HAL_ADC_Start_DMA+0x230>)
 8001cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb8:	4a23      	ldr	r2, [pc, #140]	@ (8001d48 <HAL_ADC_Start_DMA+0x234>)
 8001cba:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	221c      	movs	r2, #28
 8001cc2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0210 	orr.w	r2, r2, #16
 8001cd2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3340      	adds	r3, #64	@ 0x40
 8001cee:	4619      	mov	r1, r3
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f000 fe5f 	bl	80029b6 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0204 	orr.w	r2, r2, #4
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	e00d      	b.n	8001d26 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001d12:	e008      	b.n	8001d26 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001d20:	e001      	b.n	8001d26 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d22:	2302      	movs	r3, #2
 8001d24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	50000100 	.word	0x50000100
 8001d34:	50000300 	.word	0x50000300
 8001d38:	50000700 	.word	0x50000700
 8001d3c:	50000400 	.word	0x50000400
 8001d40:	08002505 	.word	0x08002505
 8001d44:	0800257f 	.word	0x0800257f
 8001d48:	0800259b 	.word	0x0800259b

08001d4c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b09b      	sub	sp, #108	@ 0x6c
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x22>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e2c8      	b.n	8002300 <HAL_ADC_ConfigChannel+0x5b4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 82ac 	bne.w	80022de <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d81c      	bhi.n	8001dc8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	461a      	mov	r2, r3
 8001da2:	231f      	movs	r3, #31
 8001da4:	4093      	lsls	r3, r2
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4019      	ands	r1, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dc6:	e063      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b09      	cmp	r3, #9
 8001dce:	d81e      	bhi.n	8001e0e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	3b1e      	subs	r3, #30
 8001de4:	221f      	movs	r2, #31
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	4019      	ands	r1, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	3b1e      	subs	r3, #30
 8001e00:	fa00 f203 	lsl.w	r2, r0, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e0c:	e040      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b0e      	cmp	r3, #14
 8001e14:	d81e      	bhi.n	8001e54 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	3b3c      	subs	r3, #60	@ 0x3c
 8001e2a:	221f      	movs	r2, #31
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	4019      	ands	r1, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	3b3c      	subs	r3, #60	@ 0x3c
 8001e46:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e52:	e01d      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	3b5a      	subs	r3, #90	@ 0x5a
 8001e68:	221f      	movs	r2, #31
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4019      	ands	r1, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	3b5a      	subs	r3, #90	@ 0x5a
 8001e84:	fa00 f203 	lsl.w	r2, r0, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 80e5 	bne.w	800206a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	d91c      	bls.n	8001ee2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6999      	ldr	r1, [r3, #24]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b1e      	subs	r3, #30
 8001eba:	2207      	movs	r2, #7
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4019      	ands	r1, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6898      	ldr	r0, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b1e      	subs	r3, #30
 8001ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	619a      	str	r2, [r3, #24]
 8001ee0:	e019      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6959      	ldr	r1, [r3, #20]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	4019      	ands	r1, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6898      	ldr	r0, [r3, #8]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d84f      	bhi.n	8001fd8 <HAL_ADC_ConfigChannel+0x28c>
 8001f38:	a201      	add	r2, pc, #4	@ (adr r2, 8001f40 <HAL_ADC_ConfigChannel+0x1f4>)
 8001f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3e:	bf00      	nop
 8001f40:	08001f51 	.word	0x08001f51
 8001f44:	08001f73 	.word	0x08001f73
 8001f48:	08001f95 	.word	0x08001f95
 8001f4c:	08001fb7 	.word	0x08001fb7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f56:	4b99      	ldr	r3, [pc, #612]	@ (80021bc <HAL_ADC_ConfigChannel+0x470>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	0691      	lsls	r1, r2, #26
 8001f60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001f62:	430a      	orrs	r2, r1
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001f6e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f70:	e07b      	b.n	800206a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f78:	4b90      	ldr	r3, [pc, #576]	@ (80021bc <HAL_ADC_ConfigChannel+0x470>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	0691      	lsls	r1, r2, #26
 8001f82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001f84:	430a      	orrs	r2, r1
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001f90:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f92:	e06a      	b.n	800206a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001f9a:	4b88      	ldr	r3, [pc, #544]	@ (80021bc <HAL_ADC_ConfigChannel+0x470>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	0691      	lsls	r1, r2, #26
 8001fa4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001fb2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fb4:	e059      	b.n	800206a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001fbc:	4b7f      	ldr	r3, [pc, #508]	@ (80021bc <HAL_ADC_ConfigChannel+0x470>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	0691      	lsls	r1, r2, #26
 8001fc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001fd4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fd6:	e048      	b.n	800206a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	069b      	lsls	r3, r3, #26
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d107      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ffa:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002002:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	069b      	lsls	r3, r3, #26
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800201e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002026:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	069b      	lsls	r3, r3, #26
 8002030:	429a      	cmp	r2, r3
 8002032:	d107      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002042:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800204a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	069b      	lsls	r3, r3, #26
 8002054:	429a      	cmp	r2, r3
 8002056:	d107      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002066:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002068:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d108      	bne.n	800208a <HAL_ADC_ConfigChannel+0x33e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x33e>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_ADC_ConfigChannel+0x340>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	f040 8131 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d00f      	beq.n	80020ba <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43da      	mvns	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	400a      	ands	r2, r1
 80020b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80020b8:	e049      	b.n	800214e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	409a      	lsls	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b09      	cmp	r3, #9
 80020da:	d91c      	bls.n	8002116 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6999      	ldr	r1, [r3, #24]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	3b1b      	subs	r3, #27
 80020ee:	2207      	movs	r2, #7
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	4019      	ands	r1, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6898      	ldr	r0, [r3, #8]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	3b1b      	subs	r3, #27
 8002108:	fa00 f203 	lsl.w	r2, r0, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	619a      	str	r2, [r3, #24]
 8002114:	e01b      	b.n	800214e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6959      	ldr	r1, [r3, #20]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	2207      	movs	r2, #7
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	4019      	ands	r1, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6898      	ldr	r0, [r3, #8]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	fa00 f203 	lsl.w	r2, r0, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002156:	d004      	beq.n	8002162 <HAL_ADC_ConfigChannel+0x416>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a18      	ldr	r2, [pc, #96]	@ (80021c0 <HAL_ADC_ConfigChannel+0x474>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x41a>
 8002162:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <HAL_ADC_ConfigChannel+0x478>)
 8002164:	e000      	b.n	8002168 <HAL_ADC_ConfigChannel+0x41c>
 8002166:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <HAL_ADC_ConfigChannel+0x47c>)
 8002168:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b10      	cmp	r3, #16
 8002170:	d105      	bne.n	800217e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002182:	2b11      	cmp	r3, #17
 8002184:	d105      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002196:	2b12      	cmp	r3, #18
 8002198:	f040 80ac 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800219c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 80a5 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021b2:	d10b      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x480>
 80021b4:	4b02      	ldr	r3, [pc, #8]	@ (80021c0 <HAL_ADC_ConfigChannel+0x474>)
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e023      	b.n	8002202 <HAL_ADC_ConfigChannel+0x4b6>
 80021ba:	bf00      	nop
 80021bc:	83fff000 	.word	0x83fff000
 80021c0:	50000100 	.word	0x50000100
 80021c4:	50000300 	.word	0x50000300
 80021c8:	50000700 	.word	0x50000700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a4e      	ldr	r2, [pc, #312]	@ (800230c <HAL_ADC_ConfigChannel+0x5c0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d103      	bne.n	80021de <HAL_ADC_ConfigChannel+0x492>
 80021d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e011      	b.n	8002202 <HAL_ADC_ConfigChannel+0x4b6>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002310 <HAL_ADC_ConfigChannel+0x5c4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d102      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x4a2>
 80021e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <HAL_ADC_ConfigChannel+0x5c8>)
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e009      	b.n	8002202 <HAL_ADC_ConfigChannel+0x4b6>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a48      	ldr	r2, [pc, #288]	@ (8002314 <HAL_ADC_ConfigChannel+0x5c8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d102      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x4b2>
 80021f8:	4b45      	ldr	r3, [pc, #276]	@ (8002310 <HAL_ADC_ConfigChannel+0x5c4>)
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	e001      	b.n	8002202 <HAL_ADC_ConfigChannel+0x4b6>
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d108      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x4d6>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x4d6>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_ADC_ConfigChannel+0x4d8>
 8002222:	2300      	movs	r3, #0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d150      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002228:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800222a:	2b00      	cmp	r3, #0
 800222c:	d010      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d107      	bne.n	800224a <HAL_ADC_ConfigChannel+0x4fe>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x4fe>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_ADC_ConfigChannel+0x500>
 800224a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800224c:	2b00      	cmp	r3, #0
 800224e:	d13c      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b10      	cmp	r3, #16
 8002256:	d11d      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x548>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002260:	d118      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800226a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800226c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800226e:	4b2a      	ldr	r3, [pc, #168]	@ (8002318 <HAL_ADC_ConfigChannel+0x5cc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2a      	ldr	r2, [pc, #168]	@ (800231c <HAL_ADC_ConfigChannel+0x5d0>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	0c9a      	lsrs	r2, r3, #18
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002284:	e002      	b.n	800228c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3b01      	subs	r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f9      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002292:	e02e      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b11      	cmp	r3, #17
 800229a:	d10b      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x568>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022a4:	d106      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80022ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022b0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022b2:	e01e      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b12      	cmp	r3, #18
 80022ba:	d11a      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80022bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022c6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022c8:	e013      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f043 0220 	orr.w	r2, r3, #32
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80022dc:	e00a      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80022f0:	e000      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022f2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002300:	4618      	mov	r0, r3
 8002302:	376c      	adds	r7, #108	@ 0x6c
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	50000100 	.word	0x50000100
 8002310:	50000400 	.word	0x50000400
 8002314:	50000500 	.word	0x50000500
 8002318:	20000004 	.word	0x20000004
 800231c:	431bde83 	.word	0x431bde83

08002320 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002320:	b480      	push	{r7}
 8002322:	b099      	sub	sp, #100	@ 0x64
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002338:	d102      	bne.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800233a:	4b6d      	ldr	r3, [pc, #436]	@ (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	e01a      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6a      	ldr	r2, [pc, #424]	@ (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d103      	bne.n	8002352 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800234a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	e011      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a67      	ldr	r2, [pc, #412]	@ (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d102      	bne.n	8002362 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800235c:	4b66      	ldr	r3, [pc, #408]	@ (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	e009      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a64      	ldr	r2, [pc, #400]	@ (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d102      	bne.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800236c:	4b61      	ldr	r3, [pc, #388]	@ (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	e001      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b0      	b.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800238a:	2302      	movs	r3, #2
 800238c:	e0a9      	b.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 808d 	bne.w	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8086 	bne.w	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023bc:	d004      	beq.n	80023c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a4b      	ldr	r2, [pc, #300]	@ (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80023c8:	4b4c      	ldr	r3, [pc, #304]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80023ca:	e000      	b.n	80023ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80023cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80023ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d040      	beq.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023ea:	035b      	lsls	r3, r3, #13
 80023ec:	430b      	orrs	r3, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023f2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002414:	2300      	movs	r3, #0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d15c      	bne.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002436:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002438:	2b00      	cmp	r3, #0
 800243a:	d14b      	bne.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800243c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002444:	f023 030f 	bic.w	r3, r3, #15
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	6811      	ldr	r1, [r2, #0]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	6892      	ldr	r2, [r2, #8]
 8002450:	430a      	orrs	r2, r1
 8002452:	431a      	orrs	r2, r3
 8002454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002456:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002458:	e03c      	b.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800245a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002464:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d108      	bne.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d123      	bne.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d107      	bne.n	80024a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80024a8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d112      	bne.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80024ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024b6:	f023 030f 	bic.w	r3, r3, #15
 80024ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024bc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024be:	e009      	b.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80024d2:	e000      	b.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024d4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80024e2:	4618      	mov	r0, r3
 80024e4:	3764      	adds	r7, #100	@ 0x64
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	50000100 	.word	0x50000100
 80024f4:	50000400 	.word	0x50000400
 80024f8:	50000500 	.word	0x50000500
 80024fc:	50000300 	.word	0x50000300
 8002500:	50000700 	.word	0x50000700

08002504 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800251a:	2b00      	cmp	r3, #0
 800251c:	d126      	bne.n	800256c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002534:	2b00      	cmp	r3, #0
 8002536:	d115      	bne.n	8002564 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800253c:	2b00      	cmp	r3, #0
 800253e:	d111      	bne.n	8002564 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7fe fd6f 	bl	8001048 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800256a:	e004      	b.n	8002576 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7fe fd4b 	bl	8001028 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff f8a3 	bl	800170c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d108      	bne.n	80025fc <ADC_Enable+0x2c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <ADC_Enable+0x2c>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <ADC_Enable+0x2e>
 80025fc:	2300      	movs	r3, #0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d143      	bne.n	800268a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	4b22      	ldr	r3, [pc, #136]	@ (8002694 <ADC_Enable+0xc4>)
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	f043 0210 	orr.w	r2, r3, #16
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e02f      	b.n	800268c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800263c:	f7ff f85a 	bl	80016f4 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002642:	e01b      	b.n	800267c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002644:	f7ff f856 	bl	80016f4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d914      	bls.n	800267c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d00d      	beq.n	800267c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	f043 0210 	orr.w	r2, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e007      	b.n	800268c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d1dc      	bne.n	8002644 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	8000003f 	.word	0x8000003f

08002698 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d108      	bne.n	80026c4 <ADC_Disable+0x2c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <ADC_Disable+0x2c>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <ADC_Disable+0x2e>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d047      	beq.n	800275a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 030d 	and.w	r3, r3, #13
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d10f      	bne.n	80026f8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0202 	orr.w	r2, r2, #2
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2203      	movs	r2, #3
 80026ee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80026f0:	f7ff f800 	bl	80016f4 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026f6:	e029      	b.n	800274c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	f043 0210 	orr.w	r2, r3, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e023      	b.n	800275c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002714:	f7fe ffee 	bl	80016f4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d914      	bls.n	800274c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d10d      	bne.n	800274c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f043 0210 	orr.w	r2, r3, #16
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e007      	b.n	800275c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d0dc      	beq.n	8002714 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800278c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002796:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	60d3      	str	r3, [r2, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db0b      	blt.n	80027f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4907      	ldr	r1, [pc, #28]	@ (8002800 <__NVIC_EnableIRQ+0x38>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db0a      	blt.n	800282e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	490c      	ldr	r1, [pc, #48]	@ (8002850 <__NVIC_SetPriority+0x4c>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	440b      	add	r3, r1
 8002828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800282c:	e00a      	b.n	8002844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4908      	ldr	r1, [pc, #32]	@ (8002854 <__NVIC_SetPriority+0x50>)
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b04      	subs	r3, #4
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	440b      	add	r3, r1
 8002842:	761a      	strb	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	@ 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f1c3 0307 	rsb	r3, r3, #7
 8002872:	2b04      	cmp	r3, #4
 8002874:	bf28      	it	cs
 8002876:	2304      	movcs	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3304      	adds	r3, #4
 800287e:	2b06      	cmp	r3, #6
 8002880:	d902      	bls.n	8002888 <NVIC_EncodePriority+0x30>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3b03      	subs	r3, #3
 8002886:	e000      	b.n	800288a <NVIC_EncodePriority+0x32>
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	4313      	orrs	r3, r2
         );
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	@ 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ff4c 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e6:	f7ff ff61 	bl	80027ac <__NVIC_GetPriorityGrouping>
 80028ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	6978      	ldr	r0, [r7, #20]
 80028f2:	f7ff ffb1 	bl	8002858 <NVIC_EncodePriority>
 80028f6:	4602      	mov	r2, r0
 80028f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff80 	bl	8002804 <__NVIC_SetPriority>
}
 8002904:	bf00      	nop
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff ff54 	bl	80027c8 <__NVIC_EnableIRQ>
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e037      	b.n	80029ae <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002954:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002958:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002962:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f941 	bl	8002c18 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_DMA_Start_IT+0x20>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e04a      	b.n	8002a6c <HAL_DMA_Start_IT+0xb6>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d13a      	bne.n	8002a5e <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f8d4 	bl	8002bba <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 020e 	orr.w	r2, r2, #14
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	e00f      	b.n	8002a4c <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 020a 	orr.w	r2, r2, #10
 8002a3a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0204 	bic.w	r2, r2, #4
 8002a4a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e005      	b.n	8002a6a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
 8002a68:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	2204      	movs	r2, #4
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d024      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x72>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01f      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0204 	bic.w	r2, r2, #4
 8002ac2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002acc:	2104      	movs	r1, #4
 8002ace:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d06a      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ae4:	e065      	b.n	8002bb2 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	2202      	movs	r2, #2
 8002aec:	409a      	lsls	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d02c      	beq.n	8002b50 <HAL_DMA_IRQHandler+0xdc>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d027      	beq.n	8002b50 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10b      	bne.n	8002b26 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 020a 	bic.w	r2, r2, #10
 8002b1c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2e:	2102      	movs	r1, #2
 8002b30:	fa01 f202 	lsl.w	r2, r1, r2
 8002b34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d035      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b4e:	e030      	b.n	8002bb2 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	2208      	movs	r2, #8
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d028      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x13e>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d023      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 020e 	bic.w	r2, r2, #14
 8002b78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f202 	lsl.w	r2, r1, r2
 8002b88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4798      	blx	r3
    }
  }
}
 8002bb0:	e7ff      	b.n	8002bb2 <HAL_DMA_IRQHandler+0x13e>
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d108      	bne.n	8002bfa <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bf8:	e007      	b.n	8002c0a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	60da      	str	r2, [r3, #12]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b14      	ldr	r3, [pc, #80]	@ (8002c78 <DMA_CalcBaseAndBitshift+0x60>)
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d80f      	bhi.n	8002c4c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <DMA_CalcBaseAndBitshift+0x64>)
 8002c34:	4413      	add	r3, r2
 8002c36:	4a12      	ldr	r2, [pc, #72]	@ (8002c80 <DMA_CalcBaseAndBitshift+0x68>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	009a      	lsls	r2, r3, #2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a0f      	ldr	r2, [pc, #60]	@ (8002c84 <DMA_CalcBaseAndBitshift+0x6c>)
 8002c48:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002c4a:	e00e      	b.n	8002c6a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <DMA_CalcBaseAndBitshift+0x70>)
 8002c54:	4413      	add	r3, r2
 8002c56:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <DMA_CalcBaseAndBitshift+0x68>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	009a      	lsls	r2, r3, #2
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a09      	ldr	r2, [pc, #36]	@ (8002c8c <DMA_CalcBaseAndBitshift+0x74>)
 8002c68:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40020407 	.word	0x40020407
 8002c7c:	bffdfff8 	.word	0xbffdfff8
 8002c80:	cccccccd 	.word	0xcccccccd
 8002c84:	40020000 	.word	0x40020000
 8002c88:	bffdfbf8 	.word	0xbffdfbf8
 8002c8c:	40020400 	.word	0x40020400

08002c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9e:	e160      	b.n	8002f62 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	4013      	ands	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8152 	beq.w	8002f5c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d005      	beq.n	8002cd0 <HAL_GPIO_Init+0x40>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d130      	bne.n	8002d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d06:	2201      	movs	r2, #1
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 0201 	and.w	r2, r3, #1
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d017      	beq.n	8002d6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	2203      	movs	r2, #3
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d123      	bne.n	8002dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	08da      	lsrs	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3208      	adds	r2, #8
 8002d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	08da      	lsrs	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3208      	adds	r2, #8
 8002dbc:	6939      	ldr	r1, [r7, #16]
 8002dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0203 	and.w	r2, r3, #3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80ac 	beq.w	8002f5c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e04:	4b5e      	ldr	r3, [pc, #376]	@ (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4a5d      	ldr	r2, [pc, #372]	@ (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6193      	str	r3, [r2, #24]
 8002e10:	4b5b      	ldr	r3, [pc, #364]	@ (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e1c:	4a59      	ldr	r2, [pc, #356]	@ (8002f84 <HAL_GPIO_Init+0x2f4>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	220f      	movs	r2, #15
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e46:	d025      	beq.n	8002e94 <HAL_GPIO_Init+0x204>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a4f      	ldr	r2, [pc, #316]	@ (8002f88 <HAL_GPIO_Init+0x2f8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d01f      	beq.n	8002e90 <HAL_GPIO_Init+0x200>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a4e      	ldr	r2, [pc, #312]	@ (8002f8c <HAL_GPIO_Init+0x2fc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d019      	beq.n	8002e8c <HAL_GPIO_Init+0x1fc>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f90 <HAL_GPIO_Init+0x300>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <HAL_GPIO_Init+0x1f8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a4c      	ldr	r2, [pc, #304]	@ (8002f94 <HAL_GPIO_Init+0x304>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00d      	beq.n	8002e84 <HAL_GPIO_Init+0x1f4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a4b      	ldr	r2, [pc, #300]	@ (8002f98 <HAL_GPIO_Init+0x308>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <HAL_GPIO_Init+0x1f0>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a4a      	ldr	r2, [pc, #296]	@ (8002f9c <HAL_GPIO_Init+0x30c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_GPIO_Init+0x1ec>
 8002e78:	2306      	movs	r3, #6
 8002e7a:	e00c      	b.n	8002e96 <HAL_GPIO_Init+0x206>
 8002e7c:	2307      	movs	r3, #7
 8002e7e:	e00a      	b.n	8002e96 <HAL_GPIO_Init+0x206>
 8002e80:	2305      	movs	r3, #5
 8002e82:	e008      	b.n	8002e96 <HAL_GPIO_Init+0x206>
 8002e84:	2304      	movs	r3, #4
 8002e86:	e006      	b.n	8002e96 <HAL_GPIO_Init+0x206>
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e004      	b.n	8002e96 <HAL_GPIO_Init+0x206>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e002      	b.n	8002e96 <HAL_GPIO_Init+0x206>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_GPIO_Init+0x206>
 8002e94:	2300      	movs	r3, #0
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	f002 0203 	and.w	r2, r2, #3
 8002e9c:	0092      	lsls	r2, r2, #2
 8002e9e:	4093      	lsls	r3, r2
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ea6:	4937      	ldr	r1, [pc, #220]	@ (8002f84 <HAL_GPIO_Init+0x2f4>)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa0 <HAL_GPIO_Init+0x310>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ed8:	4a31      	ldr	r2, [pc, #196]	@ (8002fa0 <HAL_GPIO_Init+0x310>)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ede:	4b30      	ldr	r3, [pc, #192]	@ (8002fa0 <HAL_GPIO_Init+0x310>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f02:	4a27      	ldr	r2, [pc, #156]	@ (8002fa0 <HAL_GPIO_Init+0x310>)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f08:	4b25      	ldr	r3, [pc, #148]	@ (8002fa0 <HAL_GPIO_Init+0x310>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa0 <HAL_GPIO_Init+0x310>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f32:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <HAL_GPIO_Init+0x310>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f56:	4a12      	ldr	r2, [pc, #72]	@ (8002fa0 <HAL_GPIO_Init+0x310>)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f47f ae97 	bne.w	8002ca0 <HAL_GPIO_Init+0x10>
  }
}
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40010000 	.word	0x40010000
 8002f88:	48000400 	.word	0x48000400
 8002f8c:	48000800 	.word	0x48000800
 8002f90:	48000c00 	.word	0x48000c00
 8002f94:	48001000 	.word	0x48001000
 8002f98:	48001400 	.word	0x48001400
 8002f9c:	48001800 	.word	0x48001800
 8002fa0:	40010400 	.word	0x40010400

08002fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb4:	787b      	ldrb	r3, [r7, #1]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fc0:	e002      	b.n	8002fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4013      	ands	r3, r2
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	43d9      	mvns	r1, r3
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	619a      	str	r2, [r3, #24]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800300e:	af00      	add	r7, sp, #0
 8003010:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003014:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003018:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800301a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800301e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f001 b83a 	b.w	80040a2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003032:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 816f 	beq.w	8003322 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003044:	4bb5      	ldr	r3, [pc, #724]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b04      	cmp	r3, #4
 800304e:	d00c      	beq.n	800306a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003050:	4bb2      	ldr	r3, [pc, #712]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b08      	cmp	r3, #8
 800305a:	d15c      	bne.n	8003116 <HAL_RCC_OscConfig+0x10e>
 800305c:	4baf      	ldr	r3, [pc, #700]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003068:	d155      	bne.n	8003116 <HAL_RCC_OscConfig+0x10e>
 800306a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800306e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800307e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d102      	bne.n	800309c <HAL_RCC_OscConfig+0x94>
 8003096:	4ba1      	ldr	r3, [pc, #644]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	e015      	b.n	80030c8 <HAL_RCC_OscConfig+0xc0>
 800309c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030a0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80030b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030b4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80030b8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80030c4:	4b95      	ldr	r3, [pc, #596]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030cc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80030d0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80030d4:	fa92 f2a2 	rbit	r2, r2
 80030d8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80030dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80030e0:	fab2 f282 	clz	r2, r2
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f042 0220 	orr.w	r2, r2, #32
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	f002 021f 	and.w	r2, r2, #31
 80030f0:	2101      	movs	r1, #1
 80030f2:	fa01 f202 	lsl.w	r2, r1, r2
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8111 	beq.w	8003320 <HAL_RCC_OscConfig+0x318>
 80030fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003102:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 8108 	bne.w	8003320 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f000 bfc6 	b.w	80040a2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x12e>
 8003128:	4b7c      	ldr	r3, [pc, #496]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a7b      	ldr	r2, [pc, #492]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e036      	b.n	80031a4 <HAL_RCC_OscConfig+0x19c>
 8003136:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800313a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10c      	bne.n	8003160 <HAL_RCC_OscConfig+0x158>
 8003146:	4b75      	ldr	r3, [pc, #468]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a74      	ldr	r2, [pc, #464]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 800314c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	4b72      	ldr	r3, [pc, #456]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a71      	ldr	r2, [pc, #452]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003158:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e021      	b.n	80031a4 <HAL_RCC_OscConfig+0x19c>
 8003160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003164:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x184>
 8003172:	4b6a      	ldr	r3, [pc, #424]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a69      	ldr	r2, [pc, #420]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b67      	ldr	r3, [pc, #412]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a66      	ldr	r2, [pc, #408]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0x19c>
 800318c:	4b63      	ldr	r3, [pc, #396]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a62      	ldr	r2, [pc, #392]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b60      	ldr	r3, [pc, #384]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a5f      	ldr	r2, [pc, #380]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 800319e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031a2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d059      	beq.n	8003268 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fa9e 	bl	80016f4 <HAL_GetTick>
 80031b8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031bc:	e00a      	b.n	80031d4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031be:	f7fe fa99 	bl	80016f4 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	@ 0x64
 80031cc:	d902      	bls.n	80031d4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	f000 bf67 	b.w	80040a2 <HAL_RCC_OscConfig+0x109a>
 80031d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031d8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80031e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d102      	bne.n	8003206 <HAL_RCC_OscConfig+0x1fe>
 8003200:	4b46      	ldr	r3, [pc, #280]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	e015      	b.n	8003232 <HAL_RCC_OscConfig+0x22a>
 8003206:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800320a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800321a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800321e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003222:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800322e:	4b3b      	ldr	r3, [pc, #236]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003236:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800323a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800323e:	fa92 f2a2 	rbit	r2, r2
 8003242:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8003246:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800324a:	fab2 f282 	clz	r2, r2
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	f042 0220 	orr.w	r2, r2, #32
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	f002 021f 	and.w	r2, r2, #31
 800325a:	2101      	movs	r1, #1
 800325c:	fa01 f202 	lsl.w	r2, r1, r2
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0ab      	beq.n	80031be <HAL_RCC_OscConfig+0x1b6>
 8003266:	e05c      	b.n	8003322 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fa44 	bl	80016f4 <HAL_GetTick>
 800326c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003272:	f7fe fa3f 	bl	80016f4 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	@ 0x64
 8003280:	d902      	bls.n	8003288 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	f000 bf0d 	b.w	80040a2 <HAL_RCC_OscConfig+0x109a>
 8003288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800328c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800329c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <HAL_RCC_OscConfig+0x2b2>
 80032b4:	4b19      	ldr	r3, [pc, #100]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	e015      	b.n	80032e6 <HAL_RCC_OscConfig+0x2de>
 80032ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032be:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80032ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032d2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80032d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80032e2:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <HAL_RCC_OscConfig+0x314>)
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032ea:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80032ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80032f2:	fa92 f2a2 	rbit	r2, r2
 80032f6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80032fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80032fe:	fab2 f282 	clz	r2, r2
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	f042 0220 	orr.w	r2, r2, #32
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	f002 021f 	and.w	r2, r2, #31
 800330e:	2101      	movs	r1, #1
 8003310:	fa01 f202 	lsl.w	r2, r1, r2
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ab      	bne.n	8003272 <HAL_RCC_OscConfig+0x26a>
 800331a:	e002      	b.n	8003322 <HAL_RCC_OscConfig+0x31a>
 800331c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003326:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 817f 	beq.w	8003636 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003338:	4ba7      	ldr	r3, [pc, #668]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00c      	beq.n	800335e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003344:	4ba4      	ldr	r3, [pc, #656]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d173      	bne.n	8003438 <HAL_RCC_OscConfig+0x430>
 8003350:	4ba1      	ldr	r3, [pc, #644]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800335c:	d16c      	bne.n	8003438 <HAL_RCC_OscConfig+0x430>
 800335e:	2302      	movs	r3, #2
 8003360:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003370:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	b2db      	uxtb	r3, r3
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d102      	bne.n	800338e <HAL_RCC_OscConfig+0x386>
 8003388:	4b93      	ldr	r3, [pc, #588]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	e013      	b.n	80033b6 <HAL_RCC_OscConfig+0x3ae>
 800338e:	2302      	movs	r3, #2
 8003390:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80033a0:	2302      	movs	r3, #2
 80033a2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80033a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80033b2:	4b89      	ldr	r3, [pc, #548]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	2202      	movs	r2, #2
 80033b8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80033bc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80033c0:	fa92 f2a2 	rbit	r2, r2
 80033c4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80033c8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	f042 0220 	orr.w	r2, r2, #32
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	f002 021f 	and.w	r2, r2, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCC_OscConfig+0x3f6>
 80033e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d002      	beq.n	80033fe <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f000 be52 	b.w	80040a2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fe:	4b76      	ldr	r3, [pc, #472]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800340a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	21f8      	movs	r1, #248	@ 0xf8
 8003414:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800341c:	fa91 f1a1 	rbit	r1, r1
 8003420:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003424:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003428:	fab1 f181 	clz	r1, r1
 800342c:	b2c9      	uxtb	r1, r1
 800342e:	408b      	lsls	r3, r1
 8003430:	4969      	ldr	r1, [pc, #420]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	e0fe      	b.n	8003636 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003438:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800343c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8088 	beq.w	800355a <HAL_RCC_OscConfig+0x552>
 800344a:	2301      	movs	r3, #1
 800344c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800345c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800346a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	461a      	mov	r2, r3
 8003472:	2301      	movs	r3, #1
 8003474:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe f93d 	bl	80016f4 <HAL_GetTick>
 800347a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	e00a      	b.n	8003496 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003480:	f7fe f938 	bl	80016f4 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d902      	bls.n	8003496 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	f000 be06 	b.w	80040a2 <HAL_RCC_OscConfig+0x109a>
 8003496:	2302      	movs	r3, #2
 8003498:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80034a8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_OscConfig+0x4be>
 80034c0:	4b45      	ldr	r3, [pc, #276]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	e013      	b.n	80034ee <HAL_RCC_OscConfig+0x4e6>
 80034c6:	2302      	movs	r3, #2
 80034c8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80034d8:	2302      	movs	r3, #2
 80034da:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80034de:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80034ea:	4b3b      	ldr	r3, [pc, #236]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ee:	2202      	movs	r2, #2
 80034f0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80034f4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80034f8:	fa92 f2a2 	rbit	r2, r2
 80034fc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003500:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003504:	fab2 f282 	clz	r2, r2
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	f042 0220 	orr.w	r2, r2, #32
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	f002 021f 	and.w	r2, r2, #31
 8003514:	2101      	movs	r1, #1
 8003516:	fa01 f202 	lsl.w	r2, r1, r2
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0af      	beq.n	8003480 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003520:	4b2d      	ldr	r3, [pc, #180]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800352c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	21f8      	movs	r1, #248	@ 0xf8
 8003536:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800353e:	fa91 f1a1 	rbit	r1, r1
 8003542:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003546:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800354a:	fab1 f181 	clz	r1, r1
 800354e:	b2c9      	uxtb	r1, r1
 8003550:	408b      	lsls	r3, r1
 8003552:	4921      	ldr	r1, [pc, #132]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e06d      	b.n	8003636 <HAL_RCC_OscConfig+0x62e>
 800355a:	2301      	movs	r3, #1
 800355c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003564:	fa93 f3a3 	rbit	r3, r3
 8003568:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800356c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800357a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	461a      	mov	r2, r3
 8003582:	2300      	movs	r3, #0
 8003584:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003586:	f7fe f8b5 	bl	80016f4 <HAL_GetTick>
 800358a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003590:	f7fe f8b0 	bl	80016f4 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d902      	bls.n	80035a6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	f000 bd7e 	b.w	80040a2 <HAL_RCC_OscConfig+0x109a>
 80035a6:	2302      	movs	r3, #2
 80035a8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80035b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d105      	bne.n	80035dc <HAL_RCC_OscConfig+0x5d4>
 80035d0:	4b01      	ldr	r3, [pc, #4]	@ (80035d8 <HAL_RCC_OscConfig+0x5d0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	e016      	b.n	8003604 <HAL_RCC_OscConfig+0x5fc>
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	2302      	movs	r3, #2
 80035de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80035ee:	2302      	movs	r3, #2
 80035f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80035f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003600:	4bbf      	ldr	r3, [pc, #764]	@ (8003900 <HAL_RCC_OscConfig+0x8f8>)
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	2202      	movs	r2, #2
 8003606:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800360a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800360e:	fa92 f2a2 	rbit	r2, r2
 8003612:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003616:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800361a:	fab2 f282 	clz	r2, r2
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	f042 0220 	orr.w	r2, r2, #32
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	f002 021f 	and.w	r2, r2, #31
 800362a:	2101      	movs	r1, #1
 800362c:	fa01 f202 	lsl.w	r2, r1, r2
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1ac      	bne.n	8003590 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800363a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8113 	beq.w	8003872 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800364c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003650:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d07c      	beq.n	8003756 <HAL_RCC_OscConfig+0x74e>
 800365c:	2301      	movs	r3, #1
 800365e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800366e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	4ba2      	ldr	r3, [pc, #648]	@ (8003904 <HAL_RCC_OscConfig+0x8fc>)
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	461a      	mov	r2, r3
 8003682:	2301      	movs	r3, #1
 8003684:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003686:	f7fe f835 	bl	80016f4 <HAL_GetTick>
 800368a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003690:	f7fe f830 	bl	80016f4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d902      	bls.n	80036a6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	f000 bcfe 	b.w	80040a2 <HAL_RCC_OscConfig+0x109a>
 80036a6:	2302      	movs	r3, #2
 80036a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036b0:	fa93 f2a3 	rbit	r2, r3
 80036b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80036c6:	2202      	movs	r2, #2
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	fa93 f2a3 	rbit	r2, r3
 80036d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80036ea:	2202      	movs	r2, #2
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	fa93 f2a3 	rbit	r2, r3
 80036fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003700:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003704:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	4b7e      	ldr	r3, [pc, #504]	@ (8003900 <HAL_RCC_OscConfig+0x8f8>)
 8003708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800370a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800370e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003712:	2102      	movs	r1, #2
 8003714:	6019      	str	r1, [r3, #0]
 8003716:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800371a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	fa93 f1a3 	rbit	r1, r3
 8003724:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003728:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800372c:	6019      	str	r1, [r3, #0]
  return result;
 800372e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003732:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2101      	movs	r1, #1
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d09d      	beq.n	8003690 <HAL_RCC_OscConfig+0x688>
 8003754:	e08d      	b.n	8003872 <HAL_RCC_OscConfig+0x86a>
 8003756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800375a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003766:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	fa93 f2a3 	rbit	r2, r3
 8003770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003774:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003778:	601a      	str	r2, [r3, #0]
  return result;
 800377a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800377e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003782:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	4b5d      	ldr	r3, [pc, #372]	@ (8003904 <HAL_RCC_OscConfig+0x8fc>)
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	461a      	mov	r2, r3
 8003794:	2300      	movs	r3, #0
 8003796:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003798:	f7fd ffac 	bl	80016f4 <HAL_GetTick>
 800379c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a2:	f7fd ffa7 	bl	80016f4 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d902      	bls.n	80037b8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	f000 bc75 	b.w	80040a2 <HAL_RCC_OscConfig+0x109a>
 80037b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80037c0:	2202      	movs	r2, #2
 80037c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	fa93 f2a3 	rbit	r2, r3
 80037d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80037e4:	2202      	movs	r2, #2
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fa93 f2a3 	rbit	r2, r3
 80037f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003804:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003808:	2202      	movs	r2, #2
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003810:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	fa93 f2a3 	rbit	r2, r3
 800381a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800381e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003822:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <HAL_RCC_OscConfig+0x8f8>)
 8003826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003828:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800382c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003830:	2102      	movs	r1, #2
 8003832:	6019      	str	r1, [r3, #0]
 8003834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003838:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	fa93 f1a3 	rbit	r1, r3
 8003842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003846:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800384a:	6019      	str	r1, [r3, #0]
  return result;
 800384c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003850:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2101      	movs	r1, #1
 8003868:	fa01 f303 	lsl.w	r3, r1, r3
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d197      	bne.n	80037a2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003872:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003876:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 81a5 	beq.w	8003bd2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003888:	2300      	movs	r3, #0
 800388a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388e:	4b1c      	ldr	r3, [pc, #112]	@ (8003900 <HAL_RCC_OscConfig+0x8f8>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d116      	bne.n	80038c8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <HAL_RCC_OscConfig+0x8f8>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	4a18      	ldr	r2, [pc, #96]	@ (8003900 <HAL_RCC_OscConfig+0x8f8>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	61d3      	str	r3, [r2, #28]
 80038a6:	4b16      	ldr	r3, [pc, #88]	@ (8003900 <HAL_RCC_OscConfig+0x8f8>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80038ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038c0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003908 <HAL_RCC_OscConfig+0x900>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d121      	bne.n	8003918 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <HAL_RCC_OscConfig+0x900>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003908 <HAL_RCC_OscConfig+0x900>)
 80038da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038de:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e0:	f7fd ff08 	bl	80016f4 <HAL_GetTick>
 80038e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	e010      	b.n	800390c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ea:	f7fd ff03 	bl	80016f4 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	@ 0x64
 80038f8:	d908      	bls.n	800390c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e3d1      	b.n	80040a2 <HAL_RCC_OscConfig+0x109a>
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000
 8003904:	10908120 	.word	0x10908120
 8003908:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	4b8d      	ldr	r3, [pc, #564]	@ (8003b44 <HAL_RCC_OscConfig+0xb3c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0e8      	beq.n	80038ea <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800391c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x92e>
 8003928:	4b87      	ldr	r3, [pc, #540]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4a86      	ldr	r2, [pc, #536]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6213      	str	r3, [r2, #32]
 8003934:	e035      	b.n	80039a2 <HAL_RCC_OscConfig+0x99a>
 8003936:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800393a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x958>
 8003946:	4b80      	ldr	r3, [pc, #512]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4a7f      	ldr	r2, [pc, #508]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	6213      	str	r3, [r2, #32]
 8003952:	4b7d      	ldr	r3, [pc, #500]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	4a7c      	ldr	r2, [pc, #496]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	6213      	str	r3, [r2, #32]
 800395e:	e020      	b.n	80039a2 <HAL_RCC_OscConfig+0x99a>
 8003960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003964:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b05      	cmp	r3, #5
 800396e:	d10c      	bne.n	800398a <HAL_RCC_OscConfig+0x982>
 8003970:	4b75      	ldr	r3, [pc, #468]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4a74      	ldr	r2, [pc, #464]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 8003976:	f043 0304 	orr.w	r3, r3, #4
 800397a:	6213      	str	r3, [r2, #32]
 800397c:	4b72      	ldr	r3, [pc, #456]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	4a71      	ldr	r2, [pc, #452]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6213      	str	r3, [r2, #32]
 8003988:	e00b      	b.n	80039a2 <HAL_RCC_OscConfig+0x99a>
 800398a:	4b6f      	ldr	r3, [pc, #444]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	4a6e      	ldr	r2, [pc, #440]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	6213      	str	r3, [r2, #32]
 8003996:	4b6c      	ldr	r3, [pc, #432]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4a6b      	ldr	r2, [pc, #428]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 800399c:	f023 0304 	bic.w	r3, r3, #4
 80039a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8081 	beq.w	8003ab6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b4:	f7fd fe9e 	bl	80016f4 <HAL_GetTick>
 80039b8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039bc:	e00b      	b.n	80039d6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fd fe99 	bl	80016f4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e365      	b.n	80040a2 <HAL_RCC_OscConfig+0x109a>
 80039d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80039de:	2202      	movs	r2, #2
 80039e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	fa93 f2a3 	rbit	r2, r3
 80039f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039f4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003a02:	2202      	movs	r2, #2
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a0a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	fa93 f2a3 	rbit	r2, r3
 8003a14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a18:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003a1c:	601a      	str	r2, [r3, #0]
  return result;
 8003a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a22:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003a26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f043 0302 	orr.w	r3, r3, #2
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d102      	bne.n	8003a42 <HAL_RCC_OscConfig+0xa3a>
 8003a3c:	4b42      	ldr	r3, [pc, #264]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	e013      	b.n	8003a6a <HAL_RCC_OscConfig+0xa62>
 8003a42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a46:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a52:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	fa93 f2a3 	rbit	r2, r3
 8003a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a60:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	4b38      	ldr	r3, [pc, #224]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a6e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a72:	2102      	movs	r1, #2
 8003a74:	6011      	str	r1, [r2, #0]
 8003a76:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a7a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	fa92 f1a2 	rbit	r1, r2
 8003a84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a88:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003a8c:	6011      	str	r1, [r2, #0]
  return result;
 8003a8e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a92:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	fab2 f282 	clz	r2, r2
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	f002 021f 	and.w	r2, r2, #31
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d084      	beq.n	80039be <HAL_RCC_OscConfig+0x9b6>
 8003ab4:	e083      	b.n	8003bbe <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fe1d 	bl	80016f4 <HAL_GetTick>
 8003aba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fd fe18 	bl	80016f4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e2e4      	b.n	80040a2 <HAL_RCC_OscConfig+0x109a>
 8003ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003adc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	fa93 f2a3 	rbit	r2, r3
 8003af2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003af6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b00:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b04:	2202      	movs	r2, #2
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b0c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	fa93 f2a3 	rbit	r2, r3
 8003b16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b1a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003b1e:	601a      	str	r2, [r3, #0]
  return result;
 8003b20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b24:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003b28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d106      	bne.n	8003b4c <HAL_RCC_OscConfig+0xb44>
 8003b3e:	4b02      	ldr	r3, [pc, #8]	@ (8003b48 <HAL_RCC_OscConfig+0xb40>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	e017      	b.n	8003b74 <HAL_RCC_OscConfig+0xb6c>
 8003b44:	40007000 	.word	0x40007000
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b50:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003b54:	2202      	movs	r2, #2
 8003b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b5c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	fa93 f2a3 	rbit	r2, r3
 8003b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b6a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	4bb3      	ldr	r3, [pc, #716]	@ (8003e40 <HAL_RCC_OscConfig+0xe38>)
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b78:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	6011      	str	r1, [r2, #0]
 8003b80:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b84:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	fa92 f1a2 	rbit	r1, r2
 8003b8e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b92:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003b96:	6011      	str	r1, [r2, #0]
  return result;
 8003b98:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b9c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	fab2 f282 	clz	r2, r2
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	f002 021f 	and.w	r2, r2, #31
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d180      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bbe:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d105      	bne.n	8003bd2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc6:	4b9e      	ldr	r3, [pc, #632]	@ (8003e40 <HAL_RCC_OscConfig+0xe38>)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	4a9d      	ldr	r2, [pc, #628]	@ (8003e40 <HAL_RCC_OscConfig+0xe38>)
 8003bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 825e 	beq.w	80040a0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003be4:	4b96      	ldr	r3, [pc, #600]	@ (8003e40 <HAL_RCC_OscConfig+0xe38>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	f000 821f 	beq.w	8004030 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	f040 8170 	bne.w	8003ee4 <HAL_RCC_OscConfig+0xedc>
 8003c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c08:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003c0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c16:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	fa93 f2a3 	rbit	r2, r3
 8003c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c24:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c28:	601a      	str	r2, [r3, #0]
  return result;
 8003c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c2e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c32:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c34:	fab3 f383 	clz	r3, r3
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c3e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	461a      	mov	r2, r3
 8003c46:	2300      	movs	r3, #0
 8003c48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fd53 	bl	80016f4 <HAL_GetTick>
 8003c4e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c52:	e009      	b.n	8003c68 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fd fd4e 	bl	80016f4 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e21c      	b.n	80040a2 <HAL_RCC_OscConfig+0x109a>
 8003c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c6c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c7a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f2a3 	rbit	r2, r3
 8003c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c88:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c8c:	601a      	str	r2, [r3, #0]
  return result;
 8003c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c92:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c98:	fab3 f383 	clz	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d102      	bne.n	8003cb2 <HAL_RCC_OscConfig+0xcaa>
 8003cac:	4b64      	ldr	r3, [pc, #400]	@ (8003e40 <HAL_RCC_OscConfig+0xe38>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	e027      	b.n	8003d02 <HAL_RCC_OscConfig+0xcfa>
 8003cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003cba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cc4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	fa93 f2a3 	rbit	r2, r3
 8003cce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cd2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cdc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003ce0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	fa93 f2a3 	rbit	r2, r3
 8003cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cf8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	4b50      	ldr	r3, [pc, #320]	@ (8003e40 <HAL_RCC_OscConfig+0xe38>)
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d06:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003d0a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003d0e:	6011      	str	r1, [r2, #0]
 8003d10:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d14:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	fa92 f1a2 	rbit	r1, r2
 8003d1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d22:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003d26:	6011      	str	r1, [r2, #0]
  return result;
 8003d28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d2c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	fab2 f282 	clz	r2, r2
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	f042 0220 	orr.w	r2, r2, #32
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	f002 021f 	and.w	r2, r2, #31
 8003d42:	2101      	movs	r1, #1
 8003d44:	fa01 f202 	lsl.w	r2, r1, r2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d182      	bne.n	8003c54 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e40 <HAL_RCC_OscConfig+0xe38>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d52:	f023 020f 	bic.w	r2, r3, #15
 8003d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	4937      	ldr	r1, [pc, #220]	@ (8003e40 <HAL_RCC_OscConfig+0xe38>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003d68:	4b35      	ldr	r3, [pc, #212]	@ (8003e40 <HAL_RCC_OscConfig+0xe38>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6a19      	ldr	r1, [r3, #32]
 8003d7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	492d      	ldr	r1, [pc, #180]	@ (8003e40 <HAL_RCC_OscConfig+0xe38>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
 8003d90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d94:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003da2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	fa93 f2a3 	rbit	r2, r3
 8003dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003db0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003db4:	601a      	str	r2, [r3, #0]
  return result;
 8003db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003dbe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	fab3 f383 	clz	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003dca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7fd fc8d 	bl	80016f4 <HAL_GetTick>
 8003dda:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dde:	e009      	b.n	8003df4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fd fc88 	bl	80016f4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e156      	b.n	80040a2 <HAL_RCC_OscConfig+0x109a>
 8003df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003df8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003dfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e06:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	fa93 f2a3 	rbit	r2, r3
 8003e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e14:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003e18:	601a      	str	r2, [r3, #0]
  return result;
 8003e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e1e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003e22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e24:	fab3 f383 	clz	r3, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d105      	bne.n	8003e44 <HAL_RCC_OscConfig+0xe3c>
 8003e38:	4b01      	ldr	r3, [pc, #4]	@ (8003e40 <HAL_RCC_OscConfig+0xe38>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	e02a      	b.n	8003e94 <HAL_RCC_OscConfig+0xe8c>
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e48:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003e4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e56:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	fa93 f2a3 	rbit	r2, r3
 8003e60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e64:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e6e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003e72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e7c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	fa93 f2a3 	rbit	r2, r3
 8003e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e8a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	4b86      	ldr	r3, [pc, #536]	@ (80040ac <HAL_RCC_OscConfig+0x10a4>)
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e98:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ea0:	6011      	str	r1, [r2, #0]
 8003ea2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ea6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	fa92 f1a2 	rbit	r1, r2
 8003eb0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003eb4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003eb8:	6011      	str	r1, [r2, #0]
  return result;
 8003eba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ebe:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	fab2 f282 	clz	r2, r2
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	f042 0220 	orr.w	r2, r2, #32
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	f002 021f 	and.w	r2, r2, #31
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f43f af7f 	beq.w	8003de0 <HAL_RCC_OscConfig+0xdd8>
 8003ee2:	e0dd      	b.n	80040a0 <HAL_RCC_OscConfig+0x1098>
 8003ee4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ee8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003eec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ef6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	fa93 f2a3 	rbit	r2, r3
 8003f00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f04:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003f08:	601a      	str	r2, [r3, #0]
  return result;
 8003f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f0e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003f12:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003f1e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	461a      	mov	r2, r3
 8003f26:	2300      	movs	r3, #0
 8003f28:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2a:	f7fd fbe3 	bl	80016f4 <HAL_GetTick>
 8003f2e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f32:	e009      	b.n	8003f48 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fd fbde 	bl	80016f4 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0ac      	b.n	80040a2 <HAL_RCC_OscConfig+0x109a>
 8003f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f4c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003f50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f5a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	fa93 f2a3 	rbit	r2, r3
 8003f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f68:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f6c:	601a      	str	r2, [r3, #0]
  return result;
 8003f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f72:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f78:	fab3 f383 	clz	r3, r3
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <HAL_RCC_OscConfig+0xf8a>
 8003f8c:	4b47      	ldr	r3, [pc, #284]	@ (80040ac <HAL_RCC_OscConfig+0x10a4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	e027      	b.n	8003fe2 <HAL_RCC_OscConfig+0xfda>
 8003f92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f96:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003f9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fa4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	fa93 f2a3 	rbit	r2, r3
 8003fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fb2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fbc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003fc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fca:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	fa93 f2a3 	rbit	r2, r3
 8003fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fd8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	4b33      	ldr	r3, [pc, #204]	@ (80040ac <HAL_RCC_OscConfig+0x10a4>)
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003fe6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003fea:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003fee:	6011      	str	r1, [r2, #0]
 8003ff0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ff4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	fa92 f1a2 	rbit	r1, r2
 8003ffe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004002:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004006:	6011      	str	r1, [r2, #0]
  return result;
 8004008:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800400c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	fab2 f282 	clz	r2, r2
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	f042 0220 	orr.w	r2, r2, #32
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	f002 021f 	and.w	r2, r2, #31
 8004022:	2101      	movs	r1, #1
 8004024:	fa01 f202 	lsl.w	r2, r1, r2
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d182      	bne.n	8003f34 <HAL_RCC_OscConfig+0xf2c>
 800402e:	e037      	b.n	80040a0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004034:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e02e      	b.n	80040a2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004044:	4b19      	ldr	r3, [pc, #100]	@ (80040ac <HAL_RCC_OscConfig+0x10a4>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800404c:	4b17      	ldr	r3, [pc, #92]	@ (80040ac <HAL_RCC_OscConfig+0x10a4>)
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004054:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004058:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 800405c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004060:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	429a      	cmp	r2, r3
 800406a:	d117      	bne.n	800409c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800406c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004070:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004074:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004078:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004080:	429a      	cmp	r2, r3
 8004082:	d10b      	bne.n	800409c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004088:	f003 020f 	and.w	r2, r3, #15
 800408c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004090:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000

080040b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b09e      	sub	sp, #120	@ 0x78
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e162      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b90      	ldr	r3, [pc, #576]	@ (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d910      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b8d      	ldr	r3, [pc, #564]	@ (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	498b      	ldr	r1, [pc, #556]	@ (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b89      	ldr	r3, [pc, #548]	@ (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e14a      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b82      	ldr	r3, [pc, #520]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	497f      	ldr	r1, [pc, #508]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80dc 	beq.w	80042dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d13c      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xf6>
 800412c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004130:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800413a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d102      	bne.n	8004156 <HAL_RCC_ClockConfig+0xa6>
 8004150:	4b6f      	ldr	r3, [pc, #444]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	e00f      	b.n	8004176 <HAL_RCC_ClockConfig+0xc6>
 8004156:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800415a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	667b      	str	r3, [r7, #100]	@ 0x64
 8004164:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004168:	663b      	str	r3, [r7, #96]	@ 0x60
 800416a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800416c:	fa93 f3a3 	rbit	r3, r3
 8004170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004172:	4b67      	ldr	r3, [pc, #412]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800417a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800417c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800417e:	fa92 f2a2 	rbit	r2, r2
 8004182:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004184:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004186:	fab2 f282 	clz	r2, r2
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	f042 0220 	orr.w	r2, r2, #32
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	f002 021f 	and.w	r2, r2, #31
 8004196:	2101      	movs	r1, #1
 8004198:	fa01 f202 	lsl.w	r2, r1, r2
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d17b      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0f3      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d13c      	bne.n	8004228 <HAL_RCC_ClockConfig+0x178>
 80041ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80041bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d102      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x128>
 80041d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	e00f      	b.n	80041f8 <HAL_RCC_ClockConfig+0x148>
 80041d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041f4:	4b46      	ldr	r3, [pc, #280]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041fc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80041fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004200:	fa92 f2a2 	rbit	r2, r2
 8004204:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004206:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004208:	fab2 f282 	clz	r2, r2
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	f042 0220 	orr.w	r2, r2, #32
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	f002 021f 	and.w	r2, r2, #31
 8004218:	2101      	movs	r1, #1
 800421a:	fa01 f202 	lsl.w	r2, r1, r2
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d13a      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0b2      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
 8004228:	2302      	movs	r3, #2
 800422a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d102      	bne.n	8004250 <HAL_RCC_ClockConfig+0x1a0>
 800424a:	4b31      	ldr	r3, [pc, #196]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	e00d      	b.n	800426c <HAL_RCC_ClockConfig+0x1bc>
 8004250:	2302      	movs	r3, #2
 8004252:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
 800425c:	2302      	movs	r3, #2
 800425e:	623b      	str	r3, [r7, #32]
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	4b29      	ldr	r3, [pc, #164]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	2202      	movs	r2, #2
 800426e:	61ba      	str	r2, [r7, #24]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	fa92 f2a2 	rbit	r2, r2
 8004276:	617a      	str	r2, [r7, #20]
  return result;
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	fab2 f282 	clz	r2, r2
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	f042 0220 	orr.w	r2, r2, #32
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	f002 021f 	and.w	r2, r2, #31
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f202 	lsl.w	r2, r1, r2
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e079      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429a:	4b1d      	ldr	r3, [pc, #116]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	491a      	ldr	r1, [pc, #104]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042ac:	f7fd fa22 	bl	80016f4 <HAL_GetTick>
 80042b0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b4:	f7fd fa1e 	bl	80016f4 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e061      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	4b11      	ldr	r3, [pc, #68]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 020c 	and.w	r2, r3, #12
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	429a      	cmp	r2, r3
 80042da:	d1eb      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042dc:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d214      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b08      	ldr	r3, [pc, #32]	@ (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 0207 	bic.w	r2, r3, #7
 80042f2:	4906      	ldr	r1, [pc, #24]	@ (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b04      	ldr	r3, [pc, #16]	@ (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d005      	beq.n	8004314 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e040      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
 800430c:	40022000 	.word	0x40022000
 8004310:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b1d      	ldr	r3, [pc, #116]	@ (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	491a      	ldr	r1, [pc, #104]	@ (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 800432e:	4313      	orrs	r3, r2
 8004330:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433e:	4b16      	ldr	r3, [pc, #88]	@ (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4912      	ldr	r1, [pc, #72]	@ (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004352:	f000 f829 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 8004356:	4601      	mov	r1, r0
 8004358:	4b0f      	ldr	r3, [pc, #60]	@ (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004360:	22f0      	movs	r2, #240	@ 0xf0
 8004362:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	fa92 f2a2 	rbit	r2, r2
 800436a:	60fa      	str	r2, [r7, #12]
  return result;
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	fab2 f282 	clz	r2, r2
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	40d3      	lsrs	r3, r2
 8004376:	4a09      	ldr	r2, [pc, #36]	@ (800439c <HAL_RCC_ClockConfig+0x2ec>)
 8004378:	5cd3      	ldrb	r3, [r2, r3]
 800437a:	fa21 f303 	lsr.w	r3, r1, r3
 800437e:	4a08      	ldr	r2, [pc, #32]	@ (80043a0 <HAL_RCC_ClockConfig+0x2f0>)
 8004380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004382:	4b08      	ldr	r3, [pc, #32]	@ (80043a4 <HAL_RCC_ClockConfig+0x2f4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd f8ae 	bl	80014e8 <HAL_InitTick>
  
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3778      	adds	r7, #120	@ 0x78
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	08009cb8 	.word	0x08009cb8
 80043a0:	20000004 	.word	0x20000004
 80043a4:	20000008 	.word	0x20000008

080043a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	2300      	movs	r3, #0
 80043bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80043c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x98>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d002      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x30>
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d003      	beq.n	80043de <HAL_RCC_GetSysClockFreq+0x36>
 80043d6:	e029      	b.n	800442c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043da:	613b      	str	r3, [r7, #16]
      break;
 80043dc:	e029      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	0c9b      	lsrs	r3, r3, #18
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	4a18      	ldr	r2, [pc, #96]	@ (8004448 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043e8:	5cd3      	ldrb	r3, [r2, r3]
 80043ea:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80043ec:	4b14      	ldr	r3, [pc, #80]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x98>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	4a15      	ldr	r2, [pc, #84]	@ (800444c <HAL_RCC_GetSysClockFreq+0xa4>)
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004404:	4a0f      	ldr	r2, [pc, #60]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	fbb2 f2f3 	udiv	r2, r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e007      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004416:	4a0b      	ldr	r2, [pc, #44]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	fbb2 f2f3 	udiv	r2, r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	fb02 f303 	mul.w	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	613b      	str	r3, [r7, #16]
      break;
 800442a:	e002      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x9c>)
 800442e:	613b      	str	r3, [r7, #16]
      break;
 8004430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004432:	693b      	ldr	r3, [r7, #16]
}
 8004434:	4618      	mov	r0, r3
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40021000 	.word	0x40021000
 8004444:	007a1200 	.word	0x007a1200
 8004448:	08009cd0 	.word	0x08009cd0
 800444c:	08009ce0 	.word	0x08009ce0

08004450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004454:	4b03      	ldr	r3, [pc, #12]	@ (8004464 <HAL_RCC_GetHCLKFreq+0x14>)
 8004456:	681b      	ldr	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	20000004 	.word	0x20000004

08004468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800446e:	f7ff ffef 	bl	8004450 <HAL_RCC_GetHCLKFreq>
 8004472:	4601      	mov	r1, r0
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800447c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004480:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	fa92 f2a2 	rbit	r2, r2
 8004488:	603a      	str	r2, [r7, #0]
  return result;
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	fab2 f282 	clz	r2, r2
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	40d3      	lsrs	r3, r2
 8004494:	4a04      	ldr	r2, [pc, #16]	@ (80044a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000
 80044a8:	08009cc8 	.word	0x08009cc8

080044ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044b2:	f7ff ffcd 	bl	8004450 <HAL_RCC_GetHCLKFreq>
 80044b6:	4601      	mov	r1, r0
 80044b8:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80044c0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80044c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	fa92 f2a2 	rbit	r2, r2
 80044cc:	603a      	str	r2, [r7, #0]
  return result;
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	fab2 f282 	clz	r2, r2
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	40d3      	lsrs	r3, r2
 80044d8:	4a04      	ldr	r2, [pc, #16]	@ (80044ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80044da:	5cd3      	ldrb	r3, [r2, r3]
 80044dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	08009cc8 	.word	0x08009cc8

080044f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	220f      	movs	r2, #15
 80044fe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004500:	4b12      	ldr	r3, [pc, #72]	@ (800454c <HAL_RCC_GetClockConfig+0x5c>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 0203 	and.w	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800450c:	4b0f      	ldr	r3, [pc, #60]	@ (800454c <HAL_RCC_GetClockConfig+0x5c>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004518:	4b0c      	ldr	r3, [pc, #48]	@ (800454c <HAL_RCC_GetClockConfig+0x5c>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004524:	4b09      	ldr	r3, [pc, #36]	@ (800454c <HAL_RCC_GetClockConfig+0x5c>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	08db      	lsrs	r3, r3, #3
 800452a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004532:	4b07      	ldr	r3, [pc, #28]	@ (8004550 <HAL_RCC_GetClockConfig+0x60>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0207 	and.w	r2, r3, #7
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	601a      	str	r2, [r3, #0]
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000
 8004550:	40022000 	.word	0x40022000

08004554 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b092      	sub	sp, #72	@ 0x48
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004564:	2300      	movs	r3, #0
 8004566:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80d4 	beq.w	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004578:	4b4e      	ldr	r3, [pc, #312]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10e      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004584:	4b4b      	ldr	r3, [pc, #300]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	4a4a      	ldr	r2, [pc, #296]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800458e:	61d3      	str	r3, [r2, #28]
 8004590:	4b48      	ldr	r3, [pc, #288]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a2:	4b45      	ldr	r3, [pc, #276]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d118      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ae:	4b42      	ldr	r3, [pc, #264]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a41      	ldr	r2, [pc, #260]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ba:	f7fd f89b 	bl	80016f4 <HAL_GetTick>
 80045be:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c0:	e008      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7fd f897 	bl	80016f4 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b64      	cmp	r3, #100	@ 0x64
 80045ce:	d901      	bls.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e1d6      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	4b38      	ldr	r3, [pc, #224]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045e0:	4b34      	ldr	r3, [pc, #208]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8084 	beq.w	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d07c      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004600:	4b2c      	ldr	r3, [pc, #176]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800460a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800460e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	4b26      	ldr	r3, [pc, #152]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	461a      	mov	r2, r3
 800462a:	2301      	movs	r3, #1
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004632:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800463c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800463e:	fab3 f383 	clz	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	4b1d      	ldr	r3, [pc, #116]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	461a      	mov	r2, r3
 800464e:	2300      	movs	r3, #0
 8004650:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004652:	4a18      	ldr	r2, [pc, #96]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004656:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d04b      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004662:	f7fd f847 	bl	80016f4 <HAL_GetTick>
 8004666:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004668:	e00a      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466a:	f7fd f843 	bl	80016f4 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e180      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004680:	2302      	movs	r3, #2
 8004682:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004686:	fa93 f3a3 	rbit	r3, r3
 800468a:	627b      	str	r3, [r7, #36]	@ 0x24
 800468c:	2302      	movs	r3, #2
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	61fb      	str	r3, [r7, #28]
  return result;
 8004698:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f043 0302 	orr.w	r3, r3, #2
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d108      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80046ae:	4b01      	ldr	r3, [pc, #4]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	e00d      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40007000 	.word	0x40007000
 80046bc:	10908100 	.word	0x10908100
 80046c0:	2302      	movs	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	fa93 f3a3 	rbit	r3, r3
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	4b9a      	ldr	r3, [pc, #616]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	2202      	movs	r2, #2
 80046d2:	613a      	str	r2, [r7, #16]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	fa92 f2a2 	rbit	r2, r2
 80046da:	60fa      	str	r2, [r7, #12]
  return result;
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	fab2 f282 	clz	r2, r2
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	f002 021f 	and.w	r2, r2, #31
 80046ee:	2101      	movs	r1, #1
 80046f0:	fa01 f202 	lsl.w	r2, r1, r2
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0b7      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	498c      	ldr	r1, [pc, #560]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004708:	4313      	orrs	r3, r2
 800470a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800470c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004710:	2b01      	cmp	r3, #1
 8004712:	d105      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004714:	4b88      	ldr	r3, [pc, #544]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	4a87      	ldr	r2, [pc, #540]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800471a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800471e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800472c:	4b82      	ldr	r3, [pc, #520]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004730:	f023 0203 	bic.w	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	497f      	ldr	r1, [pc, #508]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800474a:	4b7b      	ldr	r3, [pc, #492]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4978      	ldr	r1, [pc, #480]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004758:	4313      	orrs	r3, r2
 800475a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004768:	4b73      	ldr	r3, [pc, #460]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	4970      	ldr	r1, [pc, #448]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004776:	4313      	orrs	r3, r2
 8004778:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004786:	4b6c      	ldr	r3, [pc, #432]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478a:	f023 0210 	bic.w	r2, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4969      	ldr	r1, [pc, #420]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004794:	4313      	orrs	r3, r2
 8004796:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047a4:	4b64      	ldr	r3, [pc, #400]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b0:	4961      	ldr	r1, [pc, #388]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	f023 0220 	bic.w	r2, r3, #32
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	495a      	ldr	r1, [pc, #360]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047e0:	4b55      	ldr	r3, [pc, #340]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	4952      	ldr	r1, [pc, #328]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047fe:	4b4e      	ldr	r3, [pc, #312]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004802:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	494b      	ldr	r1, [pc, #300]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480c:	4313      	orrs	r3, r2
 800480e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800481c:	4b46      	ldr	r3, [pc, #280]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	4943      	ldr	r1, [pc, #268]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482a:	4313      	orrs	r3, r2
 800482c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800483a:	4b3f      	ldr	r3, [pc, #252]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004846:	493c      	ldr	r1, [pc, #240]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004858:	4b37      	ldr	r3, [pc, #220]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	4934      	ldr	r1, [pc, #208]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004866:	4313      	orrs	r3, r2
 8004868:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004876:	4b30      	ldr	r3, [pc, #192]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	492d      	ldr	r1, [pc, #180]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004884:	4313      	orrs	r3, r2
 8004886:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004894:	4b28      	ldr	r3, [pc, #160]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a0:	4925      	ldr	r1, [pc, #148]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80048b2:	4b21      	ldr	r3, [pc, #132]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	491e      	ldr	r1, [pc, #120]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80048d0:	4b19      	ldr	r3, [pc, #100]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	4916      	ldr	r1, [pc, #88]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80048ee:	4b12      	ldr	r3, [pc, #72]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fa:	490f      	ldr	r1, [pc, #60]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800490c:	4b0a      	ldr	r3, [pc, #40]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004910:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004918:	4907      	ldr	r1, [pc, #28]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00c      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800492a:	4b03      	ldr	r3, [pc, #12]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	e002      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800493e:	4913      	ldr	r1, [pc, #76]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004940:	4313      	orrs	r3, r2
 8004942:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004950:	4b0e      	ldr	r3, [pc, #56]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495c:	490b      	ldr	r1, [pc, #44]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800495e:	4313      	orrs	r3, r2
 8004960:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800496e:	4b07      	ldr	r3, [pc, #28]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497a:	4904      	ldr	r1, [pc, #16]	@ (800498c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800497c:	4313      	orrs	r3, r2
 800497e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3748      	adds	r7, #72	@ 0x48
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000

08004990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e049      	b.n	8004a36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc fd20 	bl	80013fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 fa38 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d001      	beq.n	8004a58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e047      	b.n	8004ae8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a23      	ldr	r2, [pc, #140]	@ (8004af4 <HAL_TIM_Base_Start+0xb4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01d      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a72:	d018      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1f      	ldr	r2, [pc, #124]	@ (8004af8 <HAL_TIM_Base_Start+0xb8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1e      	ldr	r2, [pc, #120]	@ (8004afc <HAL_TIM_Base_Start+0xbc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b00 <HAL_TIM_Base_Start+0xc0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <HAL_TIM_Base_Start+0xc4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a19      	ldr	r2, [pc, #100]	@ (8004b08 <HAL_TIM_Base_Start+0xc8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d115      	bne.n	8004ad2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	4b17      	ldr	r3, [pc, #92]	@ (8004b0c <HAL_TIM_Base_Start+0xcc>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b06      	cmp	r3, #6
 8004ab6:	d015      	beq.n	8004ae4 <HAL_TIM_Base_Start+0xa4>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004abe:	d011      	beq.n	8004ae4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad0:	e008      	b.n	8004ae4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e000      	b.n	8004ae6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40013400 	.word	0x40013400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40015000 	.word	0x40015000
 8004b0c:	00010007 	.word	0x00010007

08004b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d001      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e04f      	b.n	8004bc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a23      	ldr	r2, [pc, #140]	@ (8004bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01d      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b52:	d018      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1e      	ldr	r2, [pc, #120]	@ (8004bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1b      	ldr	r2, [pc, #108]	@ (8004be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a19      	ldr	r2, [pc, #100]	@ (8004be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d115      	bne.n	8004bb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b17      	ldr	r3, [pc, #92]	@ (8004bec <HAL_TIM_Base_Start_IT+0xdc>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b06      	cmp	r3, #6
 8004b96:	d015      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b9e:	d011      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	e008      	b.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e000      	b.n	8004bc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40013400 	.word	0x40013400
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40015000 	.word	0x40015000
 8004bec:	00010007 	.word	0x00010007

08004bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0202 	mvn.w	r2, #2
 8004c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8e4 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8d6 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8e7 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d020      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01b      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0204 	mvn.w	r2, #4
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8be 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8b0 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f8c1 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d020      	beq.n	8004cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01b      	beq.n	8004cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0208 	mvn.w	r2, #8
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f898 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f88a 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f89b 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d020      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01b      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0210 	mvn.w	r2, #16
 8004d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f872 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004d24:	e005      	b.n	8004d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f864 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f875 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0201 	mvn.w	r2, #1
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc faa8 	bl	80012ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00c      	beq.n	8004d80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f9a2 	bl	80050c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00c      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f99a 	bl	80050d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00c      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f834 	bl	8004e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00c      	beq.n	8004dec <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0220 	mvn.w	r2, #32
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f962 	bl	80050b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a48      	ldr	r2, [pc, #288]	@ (8004f78 <TIM_Base_SetConfig+0x134>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e62:	d00f      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a45      	ldr	r2, [pc, #276]	@ (8004f7c <TIM_Base_SetConfig+0x138>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a44      	ldr	r2, [pc, #272]	@ (8004f80 <TIM_Base_SetConfig+0x13c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a43      	ldr	r2, [pc, #268]	@ (8004f84 <TIM_Base_SetConfig+0x140>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a42      	ldr	r2, [pc, #264]	@ (8004f88 <TIM_Base_SetConfig+0x144>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d108      	bne.n	8004e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a37      	ldr	r2, [pc, #220]	@ (8004f78 <TIM_Base_SetConfig+0x134>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01f      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea4:	d01b      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a34      	ldr	r2, [pc, #208]	@ (8004f7c <TIM_Base_SetConfig+0x138>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d017      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a33      	ldr	r2, [pc, #204]	@ (8004f80 <TIM_Base_SetConfig+0x13c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a32      	ldr	r2, [pc, #200]	@ (8004f84 <TIM_Base_SetConfig+0x140>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00f      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a32      	ldr	r2, [pc, #200]	@ (8004f8c <TIM_Base_SetConfig+0x148>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a31      	ldr	r2, [pc, #196]	@ (8004f90 <TIM_Base_SetConfig+0x14c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a30      	ldr	r2, [pc, #192]	@ (8004f94 <TIM_Base_SetConfig+0x150>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f88 <TIM_Base_SetConfig+0x144>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d108      	bne.n	8004ef0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a18      	ldr	r2, [pc, #96]	@ (8004f78 <TIM_Base_SetConfig+0x134>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d013      	beq.n	8004f44 <TIM_Base_SetConfig+0x100>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a19      	ldr	r2, [pc, #100]	@ (8004f84 <TIM_Base_SetConfig+0x140>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00f      	beq.n	8004f44 <TIM_Base_SetConfig+0x100>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a19      	ldr	r2, [pc, #100]	@ (8004f8c <TIM_Base_SetConfig+0x148>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <TIM_Base_SetConfig+0x100>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a18      	ldr	r2, [pc, #96]	@ (8004f90 <TIM_Base_SetConfig+0x14c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d007      	beq.n	8004f44 <TIM_Base_SetConfig+0x100>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <TIM_Base_SetConfig+0x150>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_Base_SetConfig+0x100>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a12      	ldr	r2, [pc, #72]	@ (8004f88 <TIM_Base_SetConfig+0x144>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d103      	bne.n	8004f4c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d105      	bne.n	8004f6a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f023 0201 	bic.w	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	611a      	str	r2, [r3, #16]
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40013400 	.word	0x40013400
 8004f88:	40015000 	.word	0x40015000
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800

08004f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e06d      	b.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a30      	ldr	r2, [pc, #192]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2f      	ldr	r2, [pc, #188]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d108      	bne.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004ff4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1e      	ldr	r2, [pc, #120]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d01d      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800502c:	d018      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1c      	ldr	r2, [pc, #112]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1a      	ldr	r2, [pc, #104]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a15      	ldr	r2, [pc, #84]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a16      	ldr	r2, [pc, #88]	@ (80050ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a11      	ldr	r2, [pc, #68]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10c      	bne.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005066:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	4313      	orrs	r3, r2
 8005070:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40013400 	.word	0x40013400
 80050a0:	40015000 	.word	0x40015000
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40014000 	.word	0x40014000

080050b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e040      	b.n	8005180 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fc f9a8 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2224      	movs	r2, #36	@ 0x24
 8005118:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f9fc 	bl	8005530 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f825 	bl	8005188 <UART_SetConfig>
 800513e:	4603      	mov	r3, r0
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e01b      	b.n	8005180 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005156:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005166:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fa7b 	bl	8005674 <UART_CheckIdleState>
 800517e:	4603      	mov	r3, r0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	4b92      	ldr	r3, [pc, #584]	@ (80053fc <UART_SetConfig+0x274>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	6979      	ldr	r1, [r7, #20]
 80051bc:	430b      	orrs	r3, r1
 80051be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a80      	ldr	r2, [pc, #512]	@ (8005400 <UART_SetConfig+0x278>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d120      	bne.n	8005246 <UART_SetConfig+0xbe>
 8005204:	4b7f      	ldr	r3, [pc, #508]	@ (8005404 <UART_SetConfig+0x27c>)
 8005206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	2b03      	cmp	r3, #3
 800520e:	d817      	bhi.n	8005240 <UART_SetConfig+0xb8>
 8005210:	a201      	add	r2, pc, #4	@ (adr r2, 8005218 <UART_SetConfig+0x90>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	08005229 	.word	0x08005229
 800521c:	08005235 	.word	0x08005235
 8005220:	0800523b 	.word	0x0800523b
 8005224:	0800522f 	.word	0x0800522f
 8005228:	2301      	movs	r3, #1
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e0b5      	b.n	800539a <UART_SetConfig+0x212>
 800522e:	2302      	movs	r3, #2
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e0b2      	b.n	800539a <UART_SetConfig+0x212>
 8005234:	2304      	movs	r3, #4
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e0af      	b.n	800539a <UART_SetConfig+0x212>
 800523a:	2308      	movs	r3, #8
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e0ac      	b.n	800539a <UART_SetConfig+0x212>
 8005240:	2310      	movs	r3, #16
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e0a9      	b.n	800539a <UART_SetConfig+0x212>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6f      	ldr	r2, [pc, #444]	@ (8005408 <UART_SetConfig+0x280>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d124      	bne.n	800529a <UART_SetConfig+0x112>
 8005250:	4b6c      	ldr	r3, [pc, #432]	@ (8005404 <UART_SetConfig+0x27c>)
 8005252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005258:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800525c:	d011      	beq.n	8005282 <UART_SetConfig+0xfa>
 800525e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005262:	d817      	bhi.n	8005294 <UART_SetConfig+0x10c>
 8005264:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005268:	d011      	beq.n	800528e <UART_SetConfig+0x106>
 800526a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800526e:	d811      	bhi.n	8005294 <UART_SetConfig+0x10c>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <UART_SetConfig+0xf4>
 8005274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005278:	d006      	beq.n	8005288 <UART_SetConfig+0x100>
 800527a:	e00b      	b.n	8005294 <UART_SetConfig+0x10c>
 800527c:	2300      	movs	r3, #0
 800527e:	77fb      	strb	r3, [r7, #31]
 8005280:	e08b      	b.n	800539a <UART_SetConfig+0x212>
 8005282:	2302      	movs	r3, #2
 8005284:	77fb      	strb	r3, [r7, #31]
 8005286:	e088      	b.n	800539a <UART_SetConfig+0x212>
 8005288:	2304      	movs	r3, #4
 800528a:	77fb      	strb	r3, [r7, #31]
 800528c:	e085      	b.n	800539a <UART_SetConfig+0x212>
 800528e:	2308      	movs	r3, #8
 8005290:	77fb      	strb	r3, [r7, #31]
 8005292:	e082      	b.n	800539a <UART_SetConfig+0x212>
 8005294:	2310      	movs	r3, #16
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	e07f      	b.n	800539a <UART_SetConfig+0x212>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a5b      	ldr	r2, [pc, #364]	@ (800540c <UART_SetConfig+0x284>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d124      	bne.n	80052ee <UART_SetConfig+0x166>
 80052a4:	4b57      	ldr	r3, [pc, #348]	@ (8005404 <UART_SetConfig+0x27c>)
 80052a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80052ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052b0:	d011      	beq.n	80052d6 <UART_SetConfig+0x14e>
 80052b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052b6:	d817      	bhi.n	80052e8 <UART_SetConfig+0x160>
 80052b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052bc:	d011      	beq.n	80052e2 <UART_SetConfig+0x15a>
 80052be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052c2:	d811      	bhi.n	80052e8 <UART_SetConfig+0x160>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <UART_SetConfig+0x148>
 80052c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052cc:	d006      	beq.n	80052dc <UART_SetConfig+0x154>
 80052ce:	e00b      	b.n	80052e8 <UART_SetConfig+0x160>
 80052d0:	2300      	movs	r3, #0
 80052d2:	77fb      	strb	r3, [r7, #31]
 80052d4:	e061      	b.n	800539a <UART_SetConfig+0x212>
 80052d6:	2302      	movs	r3, #2
 80052d8:	77fb      	strb	r3, [r7, #31]
 80052da:	e05e      	b.n	800539a <UART_SetConfig+0x212>
 80052dc:	2304      	movs	r3, #4
 80052de:	77fb      	strb	r3, [r7, #31]
 80052e0:	e05b      	b.n	800539a <UART_SetConfig+0x212>
 80052e2:	2308      	movs	r3, #8
 80052e4:	77fb      	strb	r3, [r7, #31]
 80052e6:	e058      	b.n	800539a <UART_SetConfig+0x212>
 80052e8:	2310      	movs	r3, #16
 80052ea:	77fb      	strb	r3, [r7, #31]
 80052ec:	e055      	b.n	800539a <UART_SetConfig+0x212>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a47      	ldr	r2, [pc, #284]	@ (8005410 <UART_SetConfig+0x288>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d124      	bne.n	8005342 <UART_SetConfig+0x1ba>
 80052f8:	4b42      	ldr	r3, [pc, #264]	@ (8005404 <UART_SetConfig+0x27c>)
 80052fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005300:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005304:	d011      	beq.n	800532a <UART_SetConfig+0x1a2>
 8005306:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800530a:	d817      	bhi.n	800533c <UART_SetConfig+0x1b4>
 800530c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005310:	d011      	beq.n	8005336 <UART_SetConfig+0x1ae>
 8005312:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005316:	d811      	bhi.n	800533c <UART_SetConfig+0x1b4>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <UART_SetConfig+0x19c>
 800531c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005320:	d006      	beq.n	8005330 <UART_SetConfig+0x1a8>
 8005322:	e00b      	b.n	800533c <UART_SetConfig+0x1b4>
 8005324:	2300      	movs	r3, #0
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e037      	b.n	800539a <UART_SetConfig+0x212>
 800532a:	2302      	movs	r3, #2
 800532c:	77fb      	strb	r3, [r7, #31]
 800532e:	e034      	b.n	800539a <UART_SetConfig+0x212>
 8005330:	2304      	movs	r3, #4
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	e031      	b.n	800539a <UART_SetConfig+0x212>
 8005336:	2308      	movs	r3, #8
 8005338:	77fb      	strb	r3, [r7, #31]
 800533a:	e02e      	b.n	800539a <UART_SetConfig+0x212>
 800533c:	2310      	movs	r3, #16
 800533e:	77fb      	strb	r3, [r7, #31]
 8005340:	e02b      	b.n	800539a <UART_SetConfig+0x212>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a33      	ldr	r2, [pc, #204]	@ (8005414 <UART_SetConfig+0x28c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d124      	bne.n	8005396 <UART_SetConfig+0x20e>
 800534c:	4b2d      	ldr	r3, [pc, #180]	@ (8005404 <UART_SetConfig+0x27c>)
 800534e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005350:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005354:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005358:	d011      	beq.n	800537e <UART_SetConfig+0x1f6>
 800535a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800535e:	d817      	bhi.n	8005390 <UART_SetConfig+0x208>
 8005360:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005364:	d011      	beq.n	800538a <UART_SetConfig+0x202>
 8005366:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800536a:	d811      	bhi.n	8005390 <UART_SetConfig+0x208>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <UART_SetConfig+0x1f0>
 8005370:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005374:	d006      	beq.n	8005384 <UART_SetConfig+0x1fc>
 8005376:	e00b      	b.n	8005390 <UART_SetConfig+0x208>
 8005378:	2300      	movs	r3, #0
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e00d      	b.n	800539a <UART_SetConfig+0x212>
 800537e:	2302      	movs	r3, #2
 8005380:	77fb      	strb	r3, [r7, #31]
 8005382:	e00a      	b.n	800539a <UART_SetConfig+0x212>
 8005384:	2304      	movs	r3, #4
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e007      	b.n	800539a <UART_SetConfig+0x212>
 800538a:	2308      	movs	r3, #8
 800538c:	77fb      	strb	r3, [r7, #31]
 800538e:	e004      	b.n	800539a <UART_SetConfig+0x212>
 8005390:	2310      	movs	r3, #16
 8005392:	77fb      	strb	r3, [r7, #31]
 8005394:	e001      	b.n	800539a <UART_SetConfig+0x212>
 8005396:	2310      	movs	r3, #16
 8005398:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a2:	d16b      	bne.n	800547c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80053a4:	7ffb      	ldrb	r3, [r7, #31]
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d838      	bhi.n	800541c <UART_SetConfig+0x294>
 80053aa:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <UART_SetConfig+0x228>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053d5 	.word	0x080053d5
 80053b4:	080053dd 	.word	0x080053dd
 80053b8:	080053e5 	.word	0x080053e5
 80053bc:	0800541d 	.word	0x0800541d
 80053c0:	080053eb 	.word	0x080053eb
 80053c4:	0800541d 	.word	0x0800541d
 80053c8:	0800541d 	.word	0x0800541d
 80053cc:	0800541d 	.word	0x0800541d
 80053d0:	080053f3 	.word	0x080053f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d4:	f7ff f848 	bl	8004468 <HAL_RCC_GetPCLK1Freq>
 80053d8:	61b8      	str	r0, [r7, #24]
        break;
 80053da:	e024      	b.n	8005426 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053dc:	f7ff f866 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 80053e0:	61b8      	str	r0, [r7, #24]
        break;
 80053e2:	e020      	b.n	8005426 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005418 <UART_SetConfig+0x290>)
 80053e6:	61bb      	str	r3, [r7, #24]
        break;
 80053e8:	e01d      	b.n	8005426 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ea:	f7fe ffdd 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 80053ee:	61b8      	str	r0, [r7, #24]
        break;
 80053f0:	e019      	b.n	8005426 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053f6:	61bb      	str	r3, [r7, #24]
        break;
 80053f8:	e015      	b.n	8005426 <UART_SetConfig+0x29e>
 80053fa:	bf00      	nop
 80053fc:	efff69f3 	.word	0xefff69f3
 8005400:	40013800 	.word	0x40013800
 8005404:	40021000 	.word	0x40021000
 8005408:	40004400 	.word	0x40004400
 800540c:	40004800 	.word	0x40004800
 8005410:	40004c00 	.word	0x40004c00
 8005414:	40005000 	.word	0x40005000
 8005418:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	77bb      	strb	r3, [r7, #30]
        break;
 8005424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d073      	beq.n	8005514 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	005a      	lsls	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	441a      	add	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b0f      	cmp	r3, #15
 8005446:	d916      	bls.n	8005476 <UART_SetConfig+0x2ee>
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544e:	d212      	bcs.n	8005476 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f023 030f 	bic.w	r3, r3, #15
 8005458:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	b29b      	uxth	r3, r3
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	b29a      	uxth	r2, r3
 8005466:	89fb      	ldrh	r3, [r7, #14]
 8005468:	4313      	orrs	r3, r2
 800546a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	89fa      	ldrh	r2, [r7, #14]
 8005472:	60da      	str	r2, [r3, #12]
 8005474:	e04e      	b.n	8005514 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	77bb      	strb	r3, [r7, #30]
 800547a:	e04b      	b.n	8005514 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800547c:	7ffb      	ldrb	r3, [r7, #31]
 800547e:	2b08      	cmp	r3, #8
 8005480:	d827      	bhi.n	80054d2 <UART_SetConfig+0x34a>
 8005482:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <UART_SetConfig+0x300>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054b5 	.word	0x080054b5
 8005490:	080054bd 	.word	0x080054bd
 8005494:	080054d3 	.word	0x080054d3
 8005498:	080054c3 	.word	0x080054c3
 800549c:	080054d3 	.word	0x080054d3
 80054a0:	080054d3 	.word	0x080054d3
 80054a4:	080054d3 	.word	0x080054d3
 80054a8:	080054cb 	.word	0x080054cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ac:	f7fe ffdc 	bl	8004468 <HAL_RCC_GetPCLK1Freq>
 80054b0:	61b8      	str	r0, [r7, #24]
        break;
 80054b2:	e013      	b.n	80054dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b4:	f7fe fffa 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 80054b8:	61b8      	str	r0, [r7, #24]
        break;
 80054ba:	e00f      	b.n	80054dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054bc:	4b1b      	ldr	r3, [pc, #108]	@ (800552c <UART_SetConfig+0x3a4>)
 80054be:	61bb      	str	r3, [r7, #24]
        break;
 80054c0:	e00c      	b.n	80054dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c2:	f7fe ff71 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 80054c6:	61b8      	str	r0, [r7, #24]
        break;
 80054c8:	e008      	b.n	80054dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ce:	61bb      	str	r3, [r7, #24]
        break;
 80054d0:	e004      	b.n	80054dc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	77bb      	strb	r3, [r7, #30]
        break;
 80054da:	bf00      	nop
    }

    if (pclk != 0U)
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d018      	beq.n	8005514 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	085a      	lsrs	r2, r3, #1
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	441a      	add	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b0f      	cmp	r3, #15
 80054fa:	d909      	bls.n	8005510 <UART_SetConfig+0x388>
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005502:	d205      	bcs.n	8005510 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	b29a      	uxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60da      	str	r2, [r3, #12]
 800550e:	e001      	b.n	8005514 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005520:	7fbb      	ldrb	r3, [r7, #30]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	007a1200 	.word	0x007a1200

08005530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01a      	beq.n	8005646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800562e:	d10a      	bne.n	8005646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	605a      	str	r2, [r3, #4]
  }
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b098      	sub	sp, #96	@ 0x60
 8005678:	af02      	add	r7, sp, #8
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005684:	f7fc f836 	bl	80016f4 <HAL_GetTick>
 8005688:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b08      	cmp	r3, #8
 8005696:	d12e      	bne.n	80056f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005698:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a0:	2200      	movs	r2, #0
 80056a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f88c 	bl	80057c4 <UART_WaitOnFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d021      	beq.n	80056f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e6      	bne.n	80056b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e062      	b.n	80057bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b04      	cmp	r3, #4
 8005702:	d149      	bne.n	8005798 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005704:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800570c:	2200      	movs	r2, #0
 800570e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f856 	bl	80057c4 <UART_WaitOnFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d03c      	beq.n	8005798 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	623b      	str	r3, [r7, #32]
   return(result);
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800573c:	633b      	str	r3, [r7, #48]	@ 0x30
 800573e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800574a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e6      	bne.n	800571e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3308      	adds	r3, #8
 800576e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005770:	61fa      	str	r2, [r7, #28]
 8005772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	69b9      	ldr	r1, [r7, #24]
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	617b      	str	r3, [r7, #20]
   return(result);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e5      	bne.n	8005750 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e011      	b.n	80057bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3758      	adds	r7, #88	@ 0x58
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d4:	e04f      	b.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d04b      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7fb ff89 	bl	80016f4 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d302      	bcc.n	80057f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e04e      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d037      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b80      	cmp	r3, #128	@ 0x80
 800580a:	d034      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b40      	cmp	r3, #64	@ 0x40
 8005810:	d031      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d110      	bne.n	8005842 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2208      	movs	r2, #8
 8005826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f838 	bl	800589e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2208      	movs	r2, #8
 8005832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e029      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800584c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005850:	d111      	bne.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800585a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f81e 	bl	800589e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e00f      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4013      	ands	r3, r2
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	bf0c      	ite	eq
 8005886:	2301      	moveq	r3, #1
 8005888:	2300      	movne	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	429a      	cmp	r2, r3
 8005892:	d0a0      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800589e:	b480      	push	{r7}
 80058a0:	b095      	sub	sp, #84	@ 0x54
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80058c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e6      	bne.n	80058a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f023 0301 	bic.w	r3, r3, #1
 80058ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3308      	adds	r3, #8
 80058f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e5      	bne.n	80058d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005910:	2b01      	cmp	r3, #1
 8005912:	d118      	bne.n	8005946 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	60bb      	str	r3, [r7, #8]
   return(result);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f023 0310 	bic.w	r3, r3, #16
 8005928:	647b      	str	r3, [r7, #68]	@ 0x44
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005932:	61bb      	str	r3, [r7, #24]
 8005934:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6979      	ldr	r1, [r7, #20]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	613b      	str	r3, [r7, #16]
   return(result);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e6      	bne.n	8005914 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800595a:	bf00      	nop
 800595c:	3754      	adds	r7, #84	@ 0x54
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800596e:	f3ef 8305 	mrs	r3, IPSR
 8005972:	60bb      	str	r3, [r7, #8]
  return(result);
 8005974:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10f      	bne.n	800599a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800597a:	f3ef 8310 	mrs	r3, PRIMASK
 800597e:	607b      	str	r3, [r7, #4]
  return(result);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <osKernelInitialize+0x32>
 8005986:	4b11      	ldr	r3, [pc, #68]	@ (80059cc <osKernelInitialize+0x64>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d109      	bne.n	80059a2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800598e:	f3ef 8311 	mrs	r3, BASEPRI
 8005992:	603b      	str	r3, [r7, #0]
  return(result);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800599a:	f06f 0305 	mvn.w	r3, #5
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	e00c      	b.n	80059bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80059a2:	4b0a      	ldr	r3, [pc, #40]	@ (80059cc <osKernelInitialize+0x64>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d105      	bne.n	80059b6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80059aa:	4b08      	ldr	r3, [pc, #32]	@ (80059cc <osKernelInitialize+0x64>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	e002      	b.n	80059bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80059b6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059bc:	68fb      	ldr	r3, [r7, #12]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	200082bc 	.word	0x200082bc

080059d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d6:	f3ef 8305 	mrs	r3, IPSR
 80059da:	60bb      	str	r3, [r7, #8]
  return(result);
 80059dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10f      	bne.n	8005a02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e2:	f3ef 8310 	mrs	r3, PRIMASK
 80059e6:	607b      	str	r3, [r7, #4]
  return(result);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <osKernelStart+0x32>
 80059ee:	4b11      	ldr	r3, [pc, #68]	@ (8005a34 <osKernelStart+0x64>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d109      	bne.n	8005a0a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059f6:	f3ef 8311 	mrs	r3, BASEPRI
 80059fa:	603b      	str	r3, [r7, #0]
  return(result);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005a02:	f06f 0305 	mvn.w	r3, #5
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e00e      	b.n	8005a28 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <osKernelStart+0x64>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d107      	bne.n	8005a22 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005a12:	4b08      	ldr	r3, [pc, #32]	@ (8005a34 <osKernelStart+0x64>)
 8005a14:	2202      	movs	r2, #2
 8005a16:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005a18:	f001 f84c 	bl	8006ab4 <vTaskStartScheduler>
      stat = osOK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e002      	b.n	8005a28 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005a22:	f04f 33ff 	mov.w	r3, #4294967295
 8005a26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a28:	68fb      	ldr	r3, [r7, #12]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	200082bc 	.word	0x200082bc

08005a38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b092      	sub	sp, #72	@ 0x48
 8005a3c:	af04      	add	r7, sp, #16
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a48:	f3ef 8305 	mrs	r3, IPSR
 8005a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 8094 	bne.w	8005b7e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a56:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5a:	623b      	str	r3, [r7, #32]
  return(result);
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f040 808d 	bne.w	8005b7e <osThreadNew+0x146>
 8005a64:	4b48      	ldr	r3, [pc, #288]	@ (8005b88 <osThreadNew+0x150>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d106      	bne.n	8005a7a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a70:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f040 8082 	bne.w	8005b7e <osThreadNew+0x146>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d07e      	beq.n	8005b7e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005a80:	2380      	movs	r3, #128	@ 0x80
 8005a82:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005a84:	2318      	movs	r3, #24
 8005a86:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8005a88:	2300      	movs	r3, #0
 8005a8a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005a8c:	f107 031b 	add.w	r3, r7, #27
 8005a90:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295
 8005a96:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d045      	beq.n	8005b2a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <osThreadNew+0x74>
        name = attr->name;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <osThreadNew+0x9a>
 8005ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac2:	2b38      	cmp	r3, #56	@ 0x38
 8005ac4:	d805      	bhi.n	8005ad2 <osThreadNew+0x9a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <osThreadNew+0x9e>
        return (NULL);
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e054      	b.n	8005b80 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	089b      	lsrs	r3, r3, #2
 8005ae4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00e      	beq.n	8005b0c <osThreadNew+0xd4>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2ba7      	cmp	r3, #167	@ 0xa7
 8005af4:	d90a      	bls.n	8005b0c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d006      	beq.n	8005b0c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <osThreadNew+0xd4>
        mem = 1;
 8005b06:	2301      	movs	r3, #1
 8005b08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b0a:	e010      	b.n	8005b2e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10c      	bne.n	8005b2e <osThreadNew+0xf6>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d108      	bne.n	8005b2e <osThreadNew+0xf6>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d104      	bne.n	8005b2e <osThreadNew+0xf6>
          mem = 0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b28:	e001      	b.n	8005b2e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8005b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d110      	bne.n	8005b56 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b3c:	9202      	str	r2, [sp, #8]
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b48:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fdfe 	bl	800674c <xTaskCreateStatic>
 8005b50:	4603      	mov	r3, r0
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	e013      	b.n	8005b7e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d110      	bne.n	8005b7e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	f107 0314 	add.w	r3, r7, #20
 8005b64:	9301      	str	r3, [sp, #4]
 8005b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fe4b 	bl	800680a <xTaskCreate>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d001      	beq.n	8005b7e <osThreadNew+0x146>
          hTask = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b7e:	697b      	ldr	r3, [r7, #20]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3738      	adds	r7, #56	@ 0x38
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	200082bc 	.word	0x200082bc

08005b8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4a07      	ldr	r2, [pc, #28]	@ (8005bb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4a06      	ldr	r2, [pc, #24]	@ (8005bbc <vApplicationGetIdleTaskMemory+0x30>)
 8005ba2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2280      	movs	r2, #128	@ 0x80
 8005ba8:	601a      	str	r2, [r3, #0]
}
 8005baa:	bf00      	nop
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	200082c0 	.word	0x200082c0
 8005bbc:	20008368 	.word	0x20008368

08005bc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a07      	ldr	r2, [pc, #28]	@ (8005bec <vApplicationGetTimerTaskMemory+0x2c>)
 8005bd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	4a06      	ldr	r2, [pc, #24]	@ (8005bf0 <vApplicationGetTimerTaskMemory+0x30>)
 8005bd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bde:	601a      	str	r2, [r3, #0]
}
 8005be0:	bf00      	nop
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	20008568 	.word	0x20008568
 8005bf0:	20008610 	.word	0x20008610

08005bf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f103 0208 	add.w	r2, r3, #8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f103 0208 	add.w	r2, r3, #8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f103 0208 	add.w	r2, r3, #8
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b085      	sub	sp, #20
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	601a      	str	r2, [r3, #0]
}
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d103      	bne.n	8005cb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e00c      	b.n	8005cd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3308      	adds	r3, #8
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	e002      	b.n	8005cc4 <vListInsert+0x2e>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d2f6      	bcs.n	8005cbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	601a      	str	r2, [r3, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6892      	ldr	r2, [r2, #8]
 8005d1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6852      	ldr	r2, [r2, #4]
 8005d28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d103      	bne.n	8005d3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	1e5a      	subs	r2, r3, #1
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10b      	bne.n	8005d88 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	e7fd      	b.n	8005d84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d88:	f002 f9c6 	bl	8008118 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d94:	68f9      	ldr	r1, [r7, #12]
 8005d96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d98:	fb01 f303 	mul.w	r3, r1, r3
 8005d9c:	441a      	add	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db8:	3b01      	subs	r3, #1
 8005dba:	68f9      	ldr	r1, [r7, #12]
 8005dbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	441a      	add	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	22ff      	movs	r2, #255	@ 0xff
 8005dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	22ff      	movs	r2, #255	@ 0xff
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d114      	bne.n	8005e08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d01a      	beq.n	8005e1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3310      	adds	r3, #16
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 f906 	bl	8006ffc <xTaskRemoveFromEventList>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d012      	beq.n	8005e1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005df6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e2c <xQueueGenericReset+0xd0>)
 8005df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	e009      	b.n	8005e1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3310      	adds	r3, #16
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fef1 	bl	8005bf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3324      	adds	r3, #36	@ 0x24
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff feec 	bl	8005bf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e1c:	f002 f9ae 	bl	800817c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e20:	2301      	movs	r3, #1
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08e      	sub	sp, #56	@ 0x38
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10b      	bne.n	8005e5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	e7fd      	b.n	8005e58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10b      	bne.n	8005e7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	e7fd      	b.n	8005e76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <xQueueGenericCreateStatic+0x56>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <xQueueGenericCreateStatic+0x5a>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <xQueueGenericCreateStatic+0x5c>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10b      	bne.n	8005ea8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	623b      	str	r3, [r7, #32]
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	e7fd      	b.n	8005ea4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <xQueueGenericCreateStatic+0x84>
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <xQueueGenericCreateStatic+0x88>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <xQueueGenericCreateStatic+0x8a>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10b      	bne.n	8005ed6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	61fb      	str	r3, [r7, #28]
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	e7fd      	b.n	8005ed2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ed6:	2350      	movs	r3, #80	@ 0x50
 8005ed8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b50      	cmp	r3, #80	@ 0x50
 8005ede:	d00b      	beq.n	8005ef8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	61bb      	str	r3, [r7, #24]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00d      	beq.n	8005f1e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f0a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	4613      	mov	r3, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f805 	bl	8005f28 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3730      	adds	r7, #48	@ 0x30
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d103      	bne.n	8005f44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	e002      	b.n	8005f4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f56:	2101      	movs	r1, #1
 8005f58:	69b8      	ldr	r0, [r7, #24]
 8005f5a:	f7ff feff 	bl	8005d5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	78fa      	ldrb	r2, [r7, #3]
 8005f62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08e      	sub	sp, #56	@ 0x38
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10b      	bne.n	8005fa4 <xQueueGenericSend+0x34>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d103      	bne.n	8005fb2 <xQueueGenericSend+0x42>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <xQueueGenericSend+0x46>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <xQueueGenericSend+0x48>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10b      	bne.n	8005fd4 <xQueueGenericSend+0x64>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	e7fd      	b.n	8005fd0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d103      	bne.n	8005fe2 <xQueueGenericSend+0x72>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <xQueueGenericSend+0x76>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <xQueueGenericSend+0x78>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10b      	bne.n	8006004 <xQueueGenericSend+0x94>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	623b      	str	r3, [r7, #32]
}
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
 8006002:	e7fd      	b.n	8006000 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006004:	f001 f9c6 	bl	8007394 <xTaskGetSchedulerState>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <xQueueGenericSend+0xa4>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <xQueueGenericSend+0xa8>
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <xQueueGenericSend+0xaa>
 8006018:	2300      	movs	r3, #0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <xQueueGenericSend+0xc6>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	61fb      	str	r3, [r7, #28]
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	e7fd      	b.n	8006032 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006036:	f002 f86f 	bl	8008118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006042:	429a      	cmp	r2, r3
 8006044:	d302      	bcc.n	800604c <xQueueGenericSend+0xdc>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d129      	bne.n	80060a0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006052:	f000 fa0d 	bl	8006470 <prvCopyDataToQueue>
 8006056:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605c:	2b00      	cmp	r3, #0
 800605e:	d010      	beq.n	8006082 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	3324      	adds	r3, #36	@ 0x24
 8006064:	4618      	mov	r0, r3
 8006066:	f000 ffc9 	bl	8006ffc <xTaskRemoveFromEventList>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d013      	beq.n	8006098 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006070:	4b3f      	ldr	r3, [pc, #252]	@ (8006170 <xQueueGenericSend+0x200>)
 8006072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	e00a      	b.n	8006098 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006088:	4b39      	ldr	r3, [pc, #228]	@ (8006170 <xQueueGenericSend+0x200>)
 800608a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006098:	f002 f870 	bl	800817c <vPortExitCritical>
				return pdPASS;
 800609c:	2301      	movs	r3, #1
 800609e:	e063      	b.n	8006168 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060a6:	f002 f869 	bl	800817c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e05c      	b.n	8006168 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060b4:	f107 0314 	add.w	r3, r7, #20
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 f803 	bl	80070c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060be:	2301      	movs	r3, #1
 80060c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060c2:	f002 f85b 	bl	800817c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060c6:	f000 fd65 	bl	8006b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060ca:	f002 f825 	bl	8008118 <vPortEnterCritical>
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060d4:	b25b      	sxtb	r3, r3
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d103      	bne.n	80060e4 <xQueueGenericSend+0x174>
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060ea:	b25b      	sxtb	r3, r3
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d103      	bne.n	80060fa <xQueueGenericSend+0x18a>
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060fa:	f002 f83f 	bl	800817c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060fe:	1d3a      	adds	r2, r7, #4
 8006100:	f107 0314 	add.w	r3, r7, #20
 8006104:	4611      	mov	r1, r2
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fff2 	bl	80070f0 <xTaskCheckForTimeOut>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d124      	bne.n	800615c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006112:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006114:	f000 faa4 	bl	8006660 <prvIsQueueFull>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d018      	beq.n	8006150 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	3310      	adds	r3, #16
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	4611      	mov	r1, r2
 8006126:	4618      	mov	r0, r3
 8006128:	f000 ff16 	bl	8006f58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800612c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800612e:	f000 fa2f 	bl	8006590 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006132:	f000 fd3d 	bl	8006bb0 <xTaskResumeAll>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	f47f af7c 	bne.w	8006036 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800613e:	4b0c      	ldr	r3, [pc, #48]	@ (8006170 <xQueueGenericSend+0x200>)
 8006140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	e772      	b.n	8006036 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006152:	f000 fa1d 	bl	8006590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006156:	f000 fd2b 	bl	8006bb0 <xTaskResumeAll>
 800615a:	e76c      	b.n	8006036 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800615c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800615e:	f000 fa17 	bl	8006590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006162:	f000 fd25 	bl	8006bb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006166:	2300      	movs	r3, #0
		}
	}
}
 8006168:	4618      	mov	r0, r3
 800616a:	3738      	adds	r7, #56	@ 0x38
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	e000ed04 	.word	0xe000ed04

08006174 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08e      	sub	sp, #56	@ 0x38
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10b      	bne.n	80061a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800619e:	bf00      	nop
 80061a0:	bf00      	nop
 80061a2:	e7fd      	b.n	80061a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d103      	bne.n	80061b2 <xQueueGenericSendFromISR+0x3e>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <xQueueGenericSendFromISR+0x42>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <xQueueGenericSendFromISR+0x44>
 80061b6:	2300      	movs	r3, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10b      	bne.n	80061d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	623b      	str	r3, [r7, #32]
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	e7fd      	b.n	80061d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d103      	bne.n	80061e2 <xQueueGenericSendFromISR+0x6e>
 80061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <xQueueGenericSendFromISR+0x72>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <xQueueGenericSendFromISR+0x74>
 80061e6:	2300      	movs	r3, #0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10b      	bne.n	8006204 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	61fb      	str	r3, [r7, #28]
}
 80061fe:	bf00      	nop
 8006200:	bf00      	nop
 8006202:	e7fd      	b.n	8006200 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006204:	f002 f868 	bl	80082d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006208:	f3ef 8211 	mrs	r2, BASEPRI
 800620c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	61ba      	str	r2, [r7, #24]
 800621e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006220:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006222:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622c:	429a      	cmp	r2, r3
 800622e:	d302      	bcc.n	8006236 <xQueueGenericSendFromISR+0xc2>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d12c      	bne.n	8006290 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800623c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006246:	f000 f913 	bl	8006470 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800624a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006252:	d112      	bne.n	800627a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006258:	2b00      	cmp	r3, #0
 800625a:	d016      	beq.n	800628a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	3324      	adds	r3, #36	@ 0x24
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fecb 	bl	8006ffc <xTaskRemoveFromEventList>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00e      	beq.n	800628a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e007      	b.n	800628a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800627a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800627e:	3301      	adds	r3, #1
 8006280:	b2db      	uxtb	r3, r3
 8006282:	b25a      	sxtb	r2, r3
 8006284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800628a:	2301      	movs	r3, #1
 800628c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800628e:	e001      	b.n	8006294 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006290:	2300      	movs	r3, #0
 8006292:	637b      	str	r3, [r7, #52]	@ 0x34
 8006294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006296:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800629e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3738      	adds	r7, #56	@ 0x38
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08c      	sub	sp, #48	@ 0x30
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80062b8:	2300      	movs	r3, #0
 80062ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10b      	bne.n	80062de <xQueueReceive+0x32>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	623b      	str	r3, [r7, #32]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d103      	bne.n	80062ec <xQueueReceive+0x40>
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <xQueueReceive+0x44>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <xQueueReceive+0x46>
 80062f0:	2300      	movs	r3, #0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <xQueueReceive+0x62>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	61fb      	str	r3, [r7, #28]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800630e:	f001 f841 	bl	8007394 <xTaskGetSchedulerState>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <xQueueReceive+0x72>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <xQueueReceive+0x76>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <xQueueReceive+0x78>
 8006322:	2300      	movs	r3, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10b      	bne.n	8006340 <xQueueReceive+0x94>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	61bb      	str	r3, [r7, #24]
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	e7fd      	b.n	800633c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006340:	f001 feea 	bl	8008118 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006348:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01f      	beq.n	8006390 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006354:	f000 f8f6 	bl	8006544 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	1e5a      	subs	r2, r3, #1
 800635c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00f      	beq.n	8006388 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636a:	3310      	adds	r3, #16
 800636c:	4618      	mov	r0, r3
 800636e:	f000 fe45 	bl	8006ffc <xTaskRemoveFromEventList>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006378:	4b3c      	ldr	r3, [pc, #240]	@ (800646c <xQueueReceive+0x1c0>)
 800637a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006388:	f001 fef8 	bl	800817c <vPortExitCritical>
				return pdPASS;
 800638c:	2301      	movs	r3, #1
 800638e:	e069      	b.n	8006464 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d103      	bne.n	800639e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006396:	f001 fef1 	bl	800817c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800639a:	2300      	movs	r3, #0
 800639c:	e062      	b.n	8006464 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800639e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063a4:	f107 0310 	add.w	r3, r7, #16
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fe8b 	bl	80070c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063b2:	f001 fee3 	bl	800817c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063b6:	f000 fbed 	bl	8006b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063ba:	f001 fead 	bl	8008118 <vPortEnterCritical>
 80063be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063c4:	b25b      	sxtb	r3, r3
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d103      	bne.n	80063d4 <xQueueReceive+0x128>
 80063cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063da:	b25b      	sxtb	r3, r3
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d103      	bne.n	80063ea <xQueueReceive+0x13e>
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063ea:	f001 fec7 	bl	800817c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063ee:	1d3a      	adds	r2, r7, #4
 80063f0:	f107 0310 	add.w	r3, r7, #16
 80063f4:	4611      	mov	r1, r2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fe7a 	bl	80070f0 <xTaskCheckForTimeOut>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d123      	bne.n	800644a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006404:	f000 f916 	bl	8006634 <prvIsQueueEmpty>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d017      	beq.n	800643e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800640e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006410:	3324      	adds	r3, #36	@ 0x24
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	4611      	mov	r1, r2
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fd9e 	bl	8006f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800641c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800641e:	f000 f8b7 	bl	8006590 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006422:	f000 fbc5 	bl	8006bb0 <xTaskResumeAll>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d189      	bne.n	8006340 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800642c:	4b0f      	ldr	r3, [pc, #60]	@ (800646c <xQueueReceive+0x1c0>)
 800642e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	e780      	b.n	8006340 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800643e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006440:	f000 f8a6 	bl	8006590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006444:	f000 fbb4 	bl	8006bb0 <xTaskResumeAll>
 8006448:	e77a      	b.n	8006340 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800644a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800644c:	f000 f8a0 	bl	8006590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006450:	f000 fbae 	bl	8006bb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006456:	f000 f8ed 	bl	8006634 <prvIsQueueEmpty>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	f43f af6f 	beq.w	8006340 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006462:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006464:	4618      	mov	r0, r3
 8006466:	3730      	adds	r7, #48	@ 0x30
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	e000ed04 	.word	0xe000ed04

08006470 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006484:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10d      	bne.n	80064aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d14d      	bne.n	8006532 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 ff98 	bl	80073d0 <xTaskPriorityDisinherit>
 80064a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	605a      	str	r2, [r3, #4]
 80064a8:	e043      	b.n	8006532 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d119      	bne.n	80064e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6898      	ldr	r0, [r3, #8]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b8:	461a      	mov	r2, r3
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	f003 fa34 	bl	8009928 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c8:	441a      	add	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d32b      	bcc.n	8006532 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	609a      	str	r2, [r3, #8]
 80064e2:	e026      	b.n	8006532 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68d8      	ldr	r0, [r3, #12]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ec:	461a      	mov	r2, r3
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	f003 fa1a 	bl	8009928 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fc:	425b      	negs	r3, r3
 80064fe:	441a      	add	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d207      	bcs.n	8006520 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006518:	425b      	negs	r3, r3
 800651a:	441a      	add	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d105      	bne.n	8006532 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	3b01      	subs	r3, #1
 8006530:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800653a:	697b      	ldr	r3, [r7, #20]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d018      	beq.n	8006588 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655e:	441a      	add	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	429a      	cmp	r2, r3
 800656e:	d303      	bcc.n	8006578 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68d9      	ldr	r1, [r3, #12]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006580:	461a      	mov	r2, r3
 8006582:	6838      	ldr	r0, [r7, #0]
 8006584:	f003 f9d0 	bl	8009928 <memcpy>
	}
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006598:	f001 fdbe 	bl	8008118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065a4:	e011      	b.n	80065ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d012      	beq.n	80065d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3324      	adds	r3, #36	@ 0x24
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fd22 	bl	8006ffc <xTaskRemoveFromEventList>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065be:	f000 fdfb 	bl	80071b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	dce9      	bgt.n	80065a6 <prvUnlockQueue+0x16>
 80065d2:	e000      	b.n	80065d6 <prvUnlockQueue+0x46>
					break;
 80065d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	22ff      	movs	r2, #255	@ 0xff
 80065da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80065de:	f001 fdcd 	bl	800817c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065e2:	f001 fd99 	bl	8008118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065ee:	e011      	b.n	8006614 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d012      	beq.n	800661e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3310      	adds	r3, #16
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fcfd 	bl	8006ffc <xTaskRemoveFromEventList>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006608:	f000 fdd6 	bl	80071b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	3b01      	subs	r3, #1
 8006610:	b2db      	uxtb	r3, r3
 8006612:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006618:	2b00      	cmp	r3, #0
 800661a:	dce9      	bgt.n	80065f0 <prvUnlockQueue+0x60>
 800661c:	e000      	b.n	8006620 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800661e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	22ff      	movs	r2, #255	@ 0xff
 8006624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006628:	f001 fda8 	bl	800817c <vPortExitCritical>
}
 800662c:	bf00      	nop
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800663c:	f001 fd6c 	bl	8008118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006648:	2301      	movs	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	e001      	b.n	8006652 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006652:	f001 fd93 	bl	800817c <vPortExitCritical>

	return xReturn;
 8006656:	68fb      	ldr	r3, [r7, #12]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006668:	f001 fd56 	bl	8008118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006674:	429a      	cmp	r2, r3
 8006676:	d102      	bne.n	800667e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006678:	2301      	movs	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	e001      	b.n	8006682 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006682:	f001 fd7b 	bl	800817c <vPortExitCritical>

	return xReturn;
 8006686:	68fb      	ldr	r3, [r7, #12]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800669a:	2300      	movs	r3, #0
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	e014      	b.n	80066ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066a0:	4a0f      	ldr	r2, [pc, #60]	@ (80066e0 <vQueueAddToRegistry+0x50>)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10b      	bne.n	80066c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066ac:	490c      	ldr	r1, [pc, #48]	@ (80066e0 <vQueueAddToRegistry+0x50>)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066b6:	4a0a      	ldr	r2, [pc, #40]	@ (80066e0 <vQueueAddToRegistry+0x50>)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	4413      	add	r3, r2
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80066c2:	e006      	b.n	80066d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3301      	adds	r3, #1
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b07      	cmp	r3, #7
 80066ce:	d9e7      	bls.n	80066a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20008a10 	.word	0x20008a10

080066e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066f4:	f001 fd10 	bl	8008118 <vPortEnterCritical>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066fe:	b25b      	sxtb	r3, r3
 8006700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006704:	d103      	bne.n	800670e <vQueueWaitForMessageRestricted+0x2a>
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006714:	b25b      	sxtb	r3, r3
 8006716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671a:	d103      	bne.n	8006724 <vQueueWaitForMessageRestricted+0x40>
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006724:	f001 fd2a 	bl	800817c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672c:	2b00      	cmp	r3, #0
 800672e:	d106      	bne.n	800673e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	3324      	adds	r3, #36	@ 0x24
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fc33 	bl	8006fa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800673e:	6978      	ldr	r0, [r7, #20]
 8006740:	f7ff ff26 	bl	8006590 <prvUnlockQueue>
	}
 8006744:	bf00      	nop
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08e      	sub	sp, #56	@ 0x38
 8006750:	af04      	add	r7, sp, #16
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800675a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	623b      	str	r3, [r7, #32]
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <xTaskCreateStatic+0x4a>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	61fb      	str	r3, [r7, #28]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006796:	23a8      	movs	r3, #168	@ 0xa8
 8006798:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	2ba8      	cmp	r3, #168	@ 0xa8
 800679e:	d00b      	beq.n	80067b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	61bb      	str	r3, [r7, #24]
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01e      	beq.n	80067fc <xTaskCreateStatic+0xb0>
 80067be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01b      	beq.n	80067fc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067cc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067d6:	2300      	movs	r3, #0
 80067d8:	9303      	str	r3, [sp, #12]
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	9302      	str	r3, [sp, #8]
 80067de:	f107 0314 	add.w	r3, r7, #20
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f850 	bl	8006894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067f6:	f000 f8ed 	bl	80069d4 <prvAddNewTaskToReadyList>
 80067fa:	e001      	b.n	8006800 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006800:	697b      	ldr	r3, [r7, #20]
	}
 8006802:	4618      	mov	r0, r3
 8006804:	3728      	adds	r7, #40	@ 0x28
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800680a:	b580      	push	{r7, lr}
 800680c:	b08c      	sub	sp, #48	@ 0x30
 800680e:	af04      	add	r7, sp, #16
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	603b      	str	r3, [r7, #0]
 8006816:	4613      	mov	r3, r2
 8006818:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4618      	mov	r0, r3
 8006820:	f001 fd9c 	bl	800835c <pvPortMalloc>
 8006824:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00e      	beq.n	800684a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800682c:	20a8      	movs	r0, #168	@ 0xa8
 800682e:	f001 fd95 	bl	800835c <pvPortMalloc>
 8006832:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006840:	e005      	b.n	800684e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006842:	6978      	ldr	r0, [r7, #20]
 8006844:	f001 fe52 	bl	80084ec <vPortFree>
 8006848:	e001      	b.n	800684e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d017      	beq.n	8006884 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800685c:	88fa      	ldrh	r2, [r7, #6]
 800685e:	2300      	movs	r3, #0
 8006860:	9303      	str	r3, [sp, #12]
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	9302      	str	r3, [sp, #8]
 8006866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f80e 	bl	8006894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006878:	69f8      	ldr	r0, [r7, #28]
 800687a:	f000 f8ab 	bl	80069d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800687e:	2301      	movs	r3, #1
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e002      	b.n	800688a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006884:	f04f 33ff 	mov.w	r3, #4294967295
 8006888:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800688a:	69bb      	ldr	r3, [r7, #24]
	}
 800688c:	4618      	mov	r0, r3
 800688e:	3720      	adds	r7, #32
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80068a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	461a      	mov	r2, r3
 80068ac:	21a5      	movs	r1, #165	@ 0xa5
 80068ae:	f002 ffb1 	bl	8009814 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068bc:	3b01      	subs	r3, #1
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	f023 0307 	bic.w	r3, r3, #7
 80068ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00b      	beq.n	80068ee <prvInitialiseNewTask+0x5a>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	617b      	str	r3, [r7, #20]
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	e7fd      	b.n	80068ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	e012      	b.n	800691a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4413      	add	r3, r2
 80068fa:	7819      	ldrb	r1, [r3, #0]
 80068fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	4413      	add	r3, r2
 8006902:	3334      	adds	r3, #52	@ 0x34
 8006904:	460a      	mov	r2, r1
 8006906:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d006      	beq.n	8006922 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	3301      	adds	r3, #1
 8006918:	61fb      	str	r3, [r7, #28]
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2b0f      	cmp	r3, #15
 800691e:	d9e9      	bls.n	80068f4 <prvInitialiseNewTask+0x60>
 8006920:	e000      	b.n	8006924 <prvInitialiseNewTask+0x90>
		{
			break;
 8006922:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800692c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692e:	2b37      	cmp	r3, #55	@ 0x37
 8006930:	d901      	bls.n	8006936 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006932:	2337      	movs	r3, #55	@ 0x37
 8006934:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800693a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006940:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	2200      	movs	r2, #0
 8006946:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	3304      	adds	r3, #4
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff f971 	bl	8005c34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006954:	3318      	adds	r3, #24
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff f96c 	bl	8005c34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800695c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006960:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006964:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800696c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006970:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	2200      	movs	r2, #0
 8006976:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	2200      	movs	r2, #0
 800697e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	3354      	adds	r3, #84	@ 0x54
 8006986:	224c      	movs	r2, #76	@ 0x4c
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f002 ff42 	bl	8009814 <memset>
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	4a0d      	ldr	r2, [pc, #52]	@ (80069c8 <prvInitialiseNewTask+0x134>)
 8006994:	659a      	str	r2, [r3, #88]	@ 0x58
 8006996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006998:	4a0c      	ldr	r2, [pc, #48]	@ (80069cc <prvInitialiseNewTask+0x138>)
 800699a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800699c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699e:	4a0c      	ldr	r2, [pc, #48]	@ (80069d0 <prvInitialiseNewTask+0x13c>)
 80069a0:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	68f9      	ldr	r1, [r7, #12]
 80069a6:	69b8      	ldr	r0, [r7, #24]
 80069a8:	f001 fa88 	bl	8007ebc <pxPortInitialiseStack>
 80069ac:	4602      	mov	r2, r0
 80069ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80069b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069be:	bf00      	nop
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20009c9c 	.word	0x20009c9c
 80069cc:	20009d04 	.word	0x20009d04
 80069d0:	20009d6c 	.word	0x20009d6c

080069d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069dc:	f001 fb9c 	bl	8008118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006a98 <prvAddNewTaskToReadyList+0xc4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3301      	adds	r3, #1
 80069e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a98 <prvAddNewTaskToReadyList+0xc4>)
 80069e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069ea:	4b2c      	ldr	r3, [pc, #176]	@ (8006a9c <prvAddNewTaskToReadyList+0xc8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069f2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a9c <prvAddNewTaskToReadyList+0xc8>)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069f8:	4b27      	ldr	r3, [pc, #156]	@ (8006a98 <prvAddNewTaskToReadyList+0xc4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d110      	bne.n	8006a22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a00:	f000 fbfe 	bl	8007200 <prvInitialiseTaskLists>
 8006a04:	e00d      	b.n	8006a22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a06:	4b26      	ldr	r3, [pc, #152]	@ (8006aa0 <prvAddNewTaskToReadyList+0xcc>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a0e:	4b23      	ldr	r3, [pc, #140]	@ (8006a9c <prvAddNewTaskToReadyList+0xc8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d802      	bhi.n	8006a22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8006a9c <prvAddNewTaskToReadyList+0xc8>)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a22:	4b20      	ldr	r3, [pc, #128]	@ (8006aa4 <prvAddNewTaskToReadyList+0xd0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3301      	adds	r3, #1
 8006a28:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa4 <prvAddNewTaskToReadyList+0xd0>)
 8006a2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa4 <prvAddNewTaskToReadyList+0xd0>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a38:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa8 <prvAddNewTaskToReadyList+0xd4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d903      	bls.n	8006a48 <prvAddNewTaskToReadyList+0x74>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a44:	4a18      	ldr	r2, [pc, #96]	@ (8006aa8 <prvAddNewTaskToReadyList+0xd4>)
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4a15      	ldr	r2, [pc, #84]	@ (8006aac <prvAddNewTaskToReadyList+0xd8>)
 8006a56:	441a      	add	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4610      	mov	r0, r2
 8006a60:	f7ff f8f5 	bl	8005c4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a64:	f001 fb8a 	bl	800817c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a68:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa0 <prvAddNewTaskToReadyList+0xcc>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00e      	beq.n	8006a8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a70:	4b0a      	ldr	r3, [pc, #40]	@ (8006a9c <prvAddNewTaskToReadyList+0xc8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d207      	bcs.n	8006a8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab0 <prvAddNewTaskToReadyList+0xdc>)
 8006a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20008f24 	.word	0x20008f24
 8006a9c:	20008a50 	.word	0x20008a50
 8006aa0:	20008f30 	.word	0x20008f30
 8006aa4:	20008f40 	.word	0x20008f40
 8006aa8:	20008f2c 	.word	0x20008f2c
 8006aac:	20008a54 	.word	0x20008a54
 8006ab0:	e000ed04 	.word	0xe000ed04

08006ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08a      	sub	sp, #40	@ 0x28
 8006ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ac2:	463a      	mov	r2, r7
 8006ac4:	1d39      	adds	r1, r7, #4
 8006ac6:	f107 0308 	add.w	r3, r7, #8
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff f85e 	bl	8005b8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	9202      	str	r2, [sp, #8]
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	2300      	movs	r3, #0
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	460a      	mov	r2, r1
 8006ae2:	4924      	ldr	r1, [pc, #144]	@ (8006b74 <vTaskStartScheduler+0xc0>)
 8006ae4:	4824      	ldr	r0, [pc, #144]	@ (8006b78 <vTaskStartScheduler+0xc4>)
 8006ae6:	f7ff fe31 	bl	800674c <xTaskCreateStatic>
 8006aea:	4603      	mov	r3, r0
 8006aec:	4a23      	ldr	r2, [pc, #140]	@ (8006b7c <vTaskStartScheduler+0xc8>)
 8006aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006af0:	4b22      	ldr	r3, [pc, #136]	@ (8006b7c <vTaskStartScheduler+0xc8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006af8:	2301      	movs	r3, #1
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	e001      	b.n	8006b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d102      	bne.n	8006b0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b08:	f000 feb8 	bl	800787c <xTimerCreateTimerTask>
 8006b0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d11b      	bne.n	8006b4c <vTaskStartScheduler+0x98>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	613b      	str	r3, [r7, #16]
}
 8006b26:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b28:	4b15      	ldr	r3, [pc, #84]	@ (8006b80 <vTaskStartScheduler+0xcc>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3354      	adds	r3, #84	@ 0x54
 8006b2e:	4a15      	ldr	r2, [pc, #84]	@ (8006b84 <vTaskStartScheduler+0xd0>)
 8006b30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b32:	4b15      	ldr	r3, [pc, #84]	@ (8006b88 <vTaskStartScheduler+0xd4>)
 8006b34:	f04f 32ff 	mov.w	r2, #4294967295
 8006b38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b3a:	4b14      	ldr	r3, [pc, #80]	@ (8006b8c <vTaskStartScheduler+0xd8>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b40:	4b13      	ldr	r3, [pc, #76]	@ (8006b90 <vTaskStartScheduler+0xdc>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b46:	f001 fa43 	bl	8007fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b4a:	e00f      	b.n	8006b6c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b52:	d10b      	bne.n	8006b6c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	60fb      	str	r3, [r7, #12]
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	e7fd      	b.n	8006b68 <vTaskStartScheduler+0xb4>
}
 8006b6c:	bf00      	nop
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	08009c34 	.word	0x08009c34
 8006b78:	080071d1 	.word	0x080071d1
 8006b7c:	20008f48 	.word	0x20008f48
 8006b80:	20008a50 	.word	0x20008a50
 8006b84:	20000014 	.word	0x20000014
 8006b88:	20008f44 	.word	0x20008f44
 8006b8c:	20008f30 	.word	0x20008f30
 8006b90:	20008f28 	.word	0x20008f28

08006b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b98:	4b04      	ldr	r3, [pc, #16]	@ (8006bac <vTaskSuspendAll+0x18>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	4a03      	ldr	r2, [pc, #12]	@ (8006bac <vTaskSuspendAll+0x18>)
 8006ba0:	6013      	str	r3, [r2, #0]
}
 8006ba2:	bf00      	nop
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	20008f4c 	.word	0x20008f4c

08006bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bbe:	4b42      	ldr	r3, [pc, #264]	@ (8006cc8 <xTaskResumeAll+0x118>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10b      	bne.n	8006bde <xTaskResumeAll+0x2e>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	603b      	str	r3, [r7, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	e7fd      	b.n	8006bda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bde:	f001 fa9b 	bl	8008118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006be2:	4b39      	ldr	r3, [pc, #228]	@ (8006cc8 <xTaskResumeAll+0x118>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	4a37      	ldr	r2, [pc, #220]	@ (8006cc8 <xTaskResumeAll+0x118>)
 8006bea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bec:	4b36      	ldr	r3, [pc, #216]	@ (8006cc8 <xTaskResumeAll+0x118>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d162      	bne.n	8006cba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bf4:	4b35      	ldr	r3, [pc, #212]	@ (8006ccc <xTaskResumeAll+0x11c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d05e      	beq.n	8006cba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bfc:	e02f      	b.n	8006c5e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006bfe:	4b34      	ldr	r3, [pc, #208]	@ (8006cd0 <xTaskResumeAll+0x120>)
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3318      	adds	r3, #24
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff f87c 	bl	8005d08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff f877 	bl	8005d08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8006cd4 <xTaskResumeAll+0x124>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d903      	bls.n	8006c2e <xTaskResumeAll+0x7e>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006cd4 <xTaskResumeAll+0x124>)
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4a27      	ldr	r2, [pc, #156]	@ (8006cd8 <xTaskResumeAll+0x128>)
 8006c3c:	441a      	add	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4619      	mov	r1, r3
 8006c44:	4610      	mov	r0, r2
 8006c46:	f7ff f802 	bl	8005c4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4e:	4b23      	ldr	r3, [pc, #140]	@ (8006cdc <xTaskResumeAll+0x12c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d302      	bcc.n	8006c5e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006c58:	4b21      	ldr	r3, [pc, #132]	@ (8006ce0 <xTaskResumeAll+0x130>)
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd0 <xTaskResumeAll+0x120>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1cb      	bne.n	8006bfe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c6c:	f000 fb6c 	bl	8007348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c70:	4b1c      	ldr	r3, [pc, #112]	@ (8006ce4 <xTaskResumeAll+0x134>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d010      	beq.n	8006c9e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c7c:	f000 f846 	bl	8006d0c <xTaskIncrementTick>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006c86:	4b16      	ldr	r3, [pc, #88]	@ (8006ce0 <xTaskResumeAll+0x130>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1f1      	bne.n	8006c7c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006c98:	4b12      	ldr	r3, [pc, #72]	@ (8006ce4 <xTaskResumeAll+0x134>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c9e:	4b10      	ldr	r3, [pc, #64]	@ (8006ce0 <xTaskResumeAll+0x130>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d009      	beq.n	8006cba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006caa:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce8 <xTaskResumeAll+0x138>)
 8006cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cba:	f001 fa5f 	bl	800817c <vPortExitCritical>

	return xAlreadyYielded;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20008f4c 	.word	0x20008f4c
 8006ccc:	20008f24 	.word	0x20008f24
 8006cd0:	20008ee4 	.word	0x20008ee4
 8006cd4:	20008f2c 	.word	0x20008f2c
 8006cd8:	20008a54 	.word	0x20008a54
 8006cdc:	20008a50 	.word	0x20008a50
 8006ce0:	20008f38 	.word	0x20008f38
 8006ce4:	20008f34 	.word	0x20008f34
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cf2:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <xTaskGetTickCount+0x1c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006cf8:	687b      	ldr	r3, [r7, #4]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20008f28 	.word	0x20008f28

08006d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d16:	4b52      	ldr	r3, [pc, #328]	@ (8006e60 <xTaskIncrementTick+0x154>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f040 808f 	bne.w	8006e3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d20:	4b50      	ldr	r3, [pc, #320]	@ (8006e64 <xTaskIncrementTick+0x158>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d28:	4a4e      	ldr	r2, [pc, #312]	@ (8006e64 <xTaskIncrementTick+0x158>)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d121      	bne.n	8006d78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d34:	4b4c      	ldr	r3, [pc, #304]	@ (8006e68 <xTaskIncrementTick+0x15c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	603b      	str	r3, [r7, #0]
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	e7fd      	b.n	8006d52 <xTaskIncrementTick+0x46>
 8006d56:	4b44      	ldr	r3, [pc, #272]	@ (8006e68 <xTaskIncrementTick+0x15c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	4b43      	ldr	r3, [pc, #268]	@ (8006e6c <xTaskIncrementTick+0x160>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a41      	ldr	r2, [pc, #260]	@ (8006e68 <xTaskIncrementTick+0x15c>)
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	4a41      	ldr	r2, [pc, #260]	@ (8006e6c <xTaskIncrementTick+0x160>)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	4b41      	ldr	r3, [pc, #260]	@ (8006e70 <xTaskIncrementTick+0x164>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	4a3f      	ldr	r2, [pc, #252]	@ (8006e70 <xTaskIncrementTick+0x164>)
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	f000 fae8 	bl	8007348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d78:	4b3e      	ldr	r3, [pc, #248]	@ (8006e74 <xTaskIncrementTick+0x168>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d34e      	bcc.n	8006e20 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d82:	4b39      	ldr	r3, [pc, #228]	@ (8006e68 <xTaskIncrementTick+0x15c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <xTaskIncrementTick+0x84>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <xTaskIncrementTick+0x86>
 8006d90:	2300      	movs	r3, #0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d96:	4b37      	ldr	r3, [pc, #220]	@ (8006e74 <xTaskIncrementTick+0x168>)
 8006d98:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9c:	601a      	str	r2, [r3, #0]
					break;
 8006d9e:	e03f      	b.n	8006e20 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006da0:	4b31      	ldr	r3, [pc, #196]	@ (8006e68 <xTaskIncrementTick+0x15c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d203      	bcs.n	8006dc0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006db8:	4a2e      	ldr	r2, [pc, #184]	@ (8006e74 <xTaskIncrementTick+0x168>)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6013      	str	r3, [r2, #0]
						break;
 8006dbe:	e02f      	b.n	8006e20 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe ff9f 	bl	8005d08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	3318      	adds	r3, #24
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe ff96 	bl	8005d08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de0:	4b25      	ldr	r3, [pc, #148]	@ (8006e78 <xTaskIncrementTick+0x16c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d903      	bls.n	8006df0 <xTaskIncrementTick+0xe4>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	4a22      	ldr	r2, [pc, #136]	@ (8006e78 <xTaskIncrementTick+0x16c>)
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8006e7c <xTaskIncrementTick+0x170>)
 8006dfe:	441a      	add	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f7fe ff21 	bl	8005c4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e10:	4b1b      	ldr	r3, [pc, #108]	@ (8006e80 <xTaskIncrementTick+0x174>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d3b3      	bcc.n	8006d82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e1e:	e7b0      	b.n	8006d82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e20:	4b17      	ldr	r3, [pc, #92]	@ (8006e80 <xTaskIncrementTick+0x174>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e26:	4915      	ldr	r1, [pc, #84]	@ (8006e7c <xTaskIncrementTick+0x170>)
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d907      	bls.n	8006e48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	e004      	b.n	8006e48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e3e:	4b11      	ldr	r3, [pc, #68]	@ (8006e84 <xTaskIncrementTick+0x178>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3301      	adds	r3, #1
 8006e44:	4a0f      	ldr	r2, [pc, #60]	@ (8006e84 <xTaskIncrementTick+0x178>)
 8006e46:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e48:	4b0f      	ldr	r3, [pc, #60]	@ (8006e88 <xTaskIncrementTick+0x17c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8006e50:	2301      	movs	r3, #1
 8006e52:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e54:	697b      	ldr	r3, [r7, #20]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20008f4c 	.word	0x20008f4c
 8006e64:	20008f28 	.word	0x20008f28
 8006e68:	20008edc 	.word	0x20008edc
 8006e6c:	20008ee0 	.word	0x20008ee0
 8006e70:	20008f3c 	.word	0x20008f3c
 8006e74:	20008f44 	.word	0x20008f44
 8006e78:	20008f2c 	.word	0x20008f2c
 8006e7c:	20008a54 	.word	0x20008a54
 8006e80:	20008a50 	.word	0x20008a50
 8006e84:	20008f34 	.word	0x20008f34
 8006e88:	20008f38 	.word	0x20008f38

08006e8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e92:	4b2b      	ldr	r3, [pc, #172]	@ (8006f40 <vTaskSwitchContext+0xb4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8006f44 <vTaskSwitchContext+0xb8>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ea0:	e047      	b.n	8006f32 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006ea2:	4b28      	ldr	r3, [pc, #160]	@ (8006f44 <vTaskSwitchContext+0xb8>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ea8:	4b27      	ldr	r3, [pc, #156]	@ (8006f48 <vTaskSwitchContext+0xbc>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	e011      	b.n	8006ed4 <vTaskSwitchContext+0x48>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10b      	bne.n	8006ece <vTaskSwitchContext+0x42>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	607b      	str	r3, [r7, #4]
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	e7fd      	b.n	8006eca <vTaskSwitchContext+0x3e>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	491d      	ldr	r1, [pc, #116]	@ (8006f4c <vTaskSwitchContext+0xc0>)
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0e3      	beq.n	8006eb0 <vTaskSwitchContext+0x24>
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4a16      	ldr	r2, [pc, #88]	@ (8006f4c <vTaskSwitchContext+0xc0>)
 8006ef4:	4413      	add	r3, r2
 8006ef6:	60bb      	str	r3, [r7, #8]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	605a      	str	r2, [r3, #4]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d104      	bne.n	8006f18 <vTaskSwitchContext+0x8c>
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	605a      	str	r2, [r3, #4]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f50 <vTaskSwitchContext+0xc4>)
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	4a09      	ldr	r2, [pc, #36]	@ (8006f48 <vTaskSwitchContext+0xbc>)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f28:	4b09      	ldr	r3, [pc, #36]	@ (8006f50 <vTaskSwitchContext+0xc4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3354      	adds	r3, #84	@ 0x54
 8006f2e:	4a09      	ldr	r2, [pc, #36]	@ (8006f54 <vTaskSwitchContext+0xc8>)
 8006f30:	6013      	str	r3, [r2, #0]
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20008f4c 	.word	0x20008f4c
 8006f44:	20008f38 	.word	0x20008f38
 8006f48:	20008f2c 	.word	0x20008f2c
 8006f4c:	20008a54 	.word	0x20008a54
 8006f50:	20008a50 	.word	0x20008a50
 8006f54:	20000014 	.word	0x20000014

08006f58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	60fb      	str	r3, [r7, #12]
}
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
 8006f7e:	e7fd      	b.n	8006f7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f80:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <vTaskPlaceOnEventList+0x48>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3318      	adds	r3, #24
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7fe fe84 	bl	8005c96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f8e:	2101      	movs	r1, #1
 8006f90:	6838      	ldr	r0, [r7, #0]
 8006f92:	f000 fc1f 	bl	80077d4 <prvAddCurrentTaskToDelayedList>
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20008a50 	.word	0x20008a50

08006fa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10b      	bne.n	8006fce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	617b      	str	r3, [r7, #20]
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	e7fd      	b.n	8006fca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fce:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3318      	adds	r3, #24
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f7fe fe39 	bl	8005c4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	68b8      	ldr	r0, [r7, #8]
 8006fec:	f000 fbf2 	bl	80077d4 <prvAddCurrentTaskToDelayedList>
	}
 8006ff0:	bf00      	nop
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20008a50 	.word	0x20008a50

08006ffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10b      	bne.n	800702a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	60fb      	str	r3, [r7, #12]
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	e7fd      	b.n	8007026 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	3318      	adds	r3, #24
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fe6a 	bl	8005d08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007034:	4b1d      	ldr	r3, [pc, #116]	@ (80070ac <xTaskRemoveFromEventList+0xb0>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d11d      	bne.n	8007078 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	3304      	adds	r3, #4
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fe61 	bl	8005d08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704a:	4b19      	ldr	r3, [pc, #100]	@ (80070b0 <xTaskRemoveFromEventList+0xb4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d903      	bls.n	800705a <xTaskRemoveFromEventList+0x5e>
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007056:	4a16      	ldr	r2, [pc, #88]	@ (80070b0 <xTaskRemoveFromEventList+0xb4>)
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4a13      	ldr	r2, [pc, #76]	@ (80070b4 <xTaskRemoveFromEventList+0xb8>)
 8007068:	441a      	add	r2, r3
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	3304      	adds	r3, #4
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f7fe fdec 	bl	8005c4e <vListInsertEnd>
 8007076:	e005      	b.n	8007084 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	3318      	adds	r3, #24
 800707c:	4619      	mov	r1, r3
 800707e:	480e      	ldr	r0, [pc, #56]	@ (80070b8 <xTaskRemoveFromEventList+0xbc>)
 8007080:	f7fe fde5 	bl	8005c4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007088:	4b0c      	ldr	r3, [pc, #48]	@ (80070bc <xTaskRemoveFromEventList+0xc0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708e:	429a      	cmp	r2, r3
 8007090:	d905      	bls.n	800709e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007092:	2301      	movs	r3, #1
 8007094:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007096:	4b0a      	ldr	r3, [pc, #40]	@ (80070c0 <xTaskRemoveFromEventList+0xc4>)
 8007098:	2201      	movs	r2, #1
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	e001      	b.n	80070a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80070a2:	697b      	ldr	r3, [r7, #20]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20008f4c 	.word	0x20008f4c
 80070b0:	20008f2c 	.word	0x20008f2c
 80070b4:	20008a54 	.word	0x20008a54
 80070b8:	20008ee4 	.word	0x20008ee4
 80070bc:	20008a50 	.word	0x20008a50
 80070c0:	20008f38 	.word	0x20008f38

080070c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <vTaskInternalSetTimeOutState+0x24>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070d4:	4b05      	ldr	r3, [pc, #20]	@ (80070ec <vTaskInternalSetTimeOutState+0x28>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	605a      	str	r2, [r3, #4]
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	20008f3c 	.word	0x20008f3c
 80070ec:	20008f28 	.word	0x20008f28

080070f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	613b      	str	r3, [r7, #16]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10b      	bne.n	8007136 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	60fb      	str	r3, [r7, #12]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007136:	f000 ffef 	bl	8008118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800713a:	4b1d      	ldr	r3, [pc, #116]	@ (80071b0 <xTaskCheckForTimeOut+0xc0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	d102      	bne.n	800715a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007154:	2300      	movs	r3, #0
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	e023      	b.n	80071a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b15      	ldr	r3, [pc, #84]	@ (80071b4 <xTaskCheckForTimeOut+0xc4>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d007      	beq.n	8007176 <xTaskCheckForTimeOut+0x86>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	429a      	cmp	r2, r3
 800716e:	d302      	bcc.n	8007176 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007170:	2301      	movs	r3, #1
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	e015      	b.n	80071a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	429a      	cmp	r2, r3
 800717e:	d20b      	bcs.n	8007198 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	1ad2      	subs	r2, r2, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff ff99 	bl	80070c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007192:	2300      	movs	r3, #0
 8007194:	61fb      	str	r3, [r7, #28]
 8007196:	e004      	b.n	80071a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800719e:	2301      	movs	r3, #1
 80071a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071a2:	f000 ffeb 	bl	800817c <vPortExitCritical>

	return xReturn;
 80071a6:	69fb      	ldr	r3, [r7, #28]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	20008f28 	.word	0x20008f28
 80071b4:	20008f3c 	.word	0x20008f3c

080071b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071bc:	4b03      	ldr	r3, [pc, #12]	@ (80071cc <vTaskMissedYield+0x14>)
 80071be:	2201      	movs	r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
}
 80071c2:	bf00      	nop
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	20008f38 	.word	0x20008f38

080071d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071d8:	f000 f852 	bl	8007280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071dc:	4b06      	ldr	r3, [pc, #24]	@ (80071f8 <prvIdleTask+0x28>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d9f9      	bls.n	80071d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071e4:	4b05      	ldr	r3, [pc, #20]	@ (80071fc <prvIdleTask+0x2c>)
 80071e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071f4:	e7f0      	b.n	80071d8 <prvIdleTask+0x8>
 80071f6:	bf00      	nop
 80071f8:	20008a54 	.word	0x20008a54
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007206:	2300      	movs	r3, #0
 8007208:	607b      	str	r3, [r7, #4]
 800720a:	e00c      	b.n	8007226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4a12      	ldr	r2, [pc, #72]	@ (8007260 <prvInitialiseTaskLists+0x60>)
 8007218:	4413      	add	r3, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe fcea 	bl	8005bf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3301      	adds	r3, #1
 8007224:	607b      	str	r3, [r7, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b37      	cmp	r3, #55	@ 0x37
 800722a:	d9ef      	bls.n	800720c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800722c:	480d      	ldr	r0, [pc, #52]	@ (8007264 <prvInitialiseTaskLists+0x64>)
 800722e:	f7fe fce1 	bl	8005bf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007232:	480d      	ldr	r0, [pc, #52]	@ (8007268 <prvInitialiseTaskLists+0x68>)
 8007234:	f7fe fcde 	bl	8005bf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007238:	480c      	ldr	r0, [pc, #48]	@ (800726c <prvInitialiseTaskLists+0x6c>)
 800723a:	f7fe fcdb 	bl	8005bf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800723e:	480c      	ldr	r0, [pc, #48]	@ (8007270 <prvInitialiseTaskLists+0x70>)
 8007240:	f7fe fcd8 	bl	8005bf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007244:	480b      	ldr	r0, [pc, #44]	@ (8007274 <prvInitialiseTaskLists+0x74>)
 8007246:	f7fe fcd5 	bl	8005bf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800724a:	4b0b      	ldr	r3, [pc, #44]	@ (8007278 <prvInitialiseTaskLists+0x78>)
 800724c:	4a05      	ldr	r2, [pc, #20]	@ (8007264 <prvInitialiseTaskLists+0x64>)
 800724e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007250:	4b0a      	ldr	r3, [pc, #40]	@ (800727c <prvInitialiseTaskLists+0x7c>)
 8007252:	4a05      	ldr	r2, [pc, #20]	@ (8007268 <prvInitialiseTaskLists+0x68>)
 8007254:	601a      	str	r2, [r3, #0]
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20008a54 	.word	0x20008a54
 8007264:	20008eb4 	.word	0x20008eb4
 8007268:	20008ec8 	.word	0x20008ec8
 800726c:	20008ee4 	.word	0x20008ee4
 8007270:	20008ef8 	.word	0x20008ef8
 8007274:	20008f10 	.word	0x20008f10
 8007278:	20008edc 	.word	0x20008edc
 800727c:	20008ee0 	.word	0x20008ee0

08007280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007286:	e019      	b.n	80072bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007288:	f000 ff46 	bl	8008118 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800728c:	4b10      	ldr	r3, [pc, #64]	@ (80072d0 <prvCheckTasksWaitingTermination+0x50>)
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3304      	adds	r3, #4
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fd35 	bl	8005d08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800729e:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <prvCheckTasksWaitingTermination+0x54>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	4a0b      	ldr	r2, [pc, #44]	@ (80072d4 <prvCheckTasksWaitingTermination+0x54>)
 80072a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072a8:	4b0b      	ldr	r3, [pc, #44]	@ (80072d8 <prvCheckTasksWaitingTermination+0x58>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	4a0a      	ldr	r2, [pc, #40]	@ (80072d8 <prvCheckTasksWaitingTermination+0x58>)
 80072b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072b2:	f000 ff63 	bl	800817c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f810 	bl	80072dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072bc:	4b06      	ldr	r3, [pc, #24]	@ (80072d8 <prvCheckTasksWaitingTermination+0x58>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e1      	bne.n	8007288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20008ef8 	.word	0x20008ef8
 80072d4:	20008f24 	.word	0x20008f24
 80072d8:	20008f0c 	.word	0x20008f0c

080072dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3354      	adds	r3, #84	@ 0x54
 80072e8:	4618      	mov	r0, r3
 80072ea:	f002 fa9b 	bl	8009824 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d108      	bne.n	800730a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 f8f5 	bl	80084ec <vPortFree>
				vPortFree( pxTCB );
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f001 f8f2 	bl	80084ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007308:	e019      	b.n	800733e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007310:	2b01      	cmp	r3, #1
 8007312:	d103      	bne.n	800731c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 f8e9 	bl	80084ec <vPortFree>
	}
 800731a:	e010      	b.n	800733e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007322:	2b02      	cmp	r3, #2
 8007324:	d00b      	beq.n	800733e <prvDeleteTCB+0x62>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	60fb      	str	r3, [r7, #12]
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	e7fd      	b.n	800733a <prvDeleteTCB+0x5e>
	}
 800733e:	bf00      	nop
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800734e:	4b0f      	ldr	r3, [pc, #60]	@ (800738c <prvResetNextTaskUnblockTime+0x44>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <prvResetNextTaskUnblockTime+0x14>
 8007358:	2301      	movs	r3, #1
 800735a:	e000      	b.n	800735e <prvResetNextTaskUnblockTime+0x16>
 800735c:	2300      	movs	r3, #0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d004      	beq.n	800736c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007362:	4b0b      	ldr	r3, [pc, #44]	@ (8007390 <prvResetNextTaskUnblockTime+0x48>)
 8007364:	f04f 32ff 	mov.w	r2, #4294967295
 8007368:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800736a:	e008      	b.n	800737e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800736c:	4b07      	ldr	r3, [pc, #28]	@ (800738c <prvResetNextTaskUnblockTime+0x44>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	4a05      	ldr	r2, [pc, #20]	@ (8007390 <prvResetNextTaskUnblockTime+0x48>)
 800737c:	6013      	str	r3, [r2, #0]
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20008edc 	.word	0x20008edc
 8007390:	20008f44 	.word	0x20008f44

08007394 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800739a:	4b0b      	ldr	r3, [pc, #44]	@ (80073c8 <xTaskGetSchedulerState+0x34>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d102      	bne.n	80073a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073a2:	2301      	movs	r3, #1
 80073a4:	607b      	str	r3, [r7, #4]
 80073a6:	e008      	b.n	80073ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073a8:	4b08      	ldr	r3, [pc, #32]	@ (80073cc <xTaskGetSchedulerState+0x38>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073b0:	2302      	movs	r3, #2
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	e001      	b.n	80073ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073b6:	2300      	movs	r3, #0
 80073b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073ba:	687b      	ldr	r3, [r7, #4]
	}
 80073bc:	4618      	mov	r0, r3
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	20008f30 	.word	0x20008f30
 80073cc:	20008f4c 	.word	0x20008f4c

080073d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073dc:	2300      	movs	r3, #0
 80073de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d058      	beq.n	8007498 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073e6:	4b2f      	ldr	r3, [pc, #188]	@ (80074a4 <xTaskPriorityDisinherit+0xd4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d00b      	beq.n	8007408 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	60fb      	str	r3, [r7, #12]
}
 8007402:	bf00      	nop
 8007404:	bf00      	nop
 8007406:	e7fd      	b.n	8007404 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	60bb      	str	r3, [r7, #8]
}
 8007422:	bf00      	nop
 8007424:	bf00      	nop
 8007426:	e7fd      	b.n	8007424 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800742c:	1e5a      	subs	r2, r3, #1
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800743a:	429a      	cmp	r2, r3
 800743c:	d02c      	beq.n	8007498 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007442:	2b00      	cmp	r3, #0
 8007444:	d128      	bne.n	8007498 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3304      	adds	r3, #4
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe fc5c 	bl	8005d08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007468:	4b0f      	ldr	r3, [pc, #60]	@ (80074a8 <xTaskPriorityDisinherit+0xd8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d903      	bls.n	8007478 <xTaskPriorityDisinherit+0xa8>
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007474:	4a0c      	ldr	r2, [pc, #48]	@ (80074a8 <xTaskPriorityDisinherit+0xd8>)
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4a09      	ldr	r2, [pc, #36]	@ (80074ac <xTaskPriorityDisinherit+0xdc>)
 8007486:	441a      	add	r2, r3
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	3304      	adds	r3, #4
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f7fe fbdd 	bl	8005c4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007498:	697b      	ldr	r3, [r7, #20]
	}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20008a50 	.word	0x20008a50
 80074a8:	20008f2c 	.word	0x20008f2c
 80074ac:	20008a54 	.word	0x20008a54

080074b0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80074ba:	f000 fe2d 	bl	8008118 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80074be:	4b20      	ldr	r3, [pc, #128]	@ (8007540 <ulTaskNotifyTake+0x90>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d113      	bne.n	80074f2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80074ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007540 <ulTaskNotifyTake+0x90>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00b      	beq.n	80074f2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074da:	2101      	movs	r1, #1
 80074dc:	6838      	ldr	r0, [r7, #0]
 80074de:	f000 f979 	bl	80077d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80074e2:	4b18      	ldr	r3, [pc, #96]	@ (8007544 <ulTaskNotifyTake+0x94>)
 80074e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80074f2:	f000 fe43 	bl	800817c <vPortExitCritical>

		taskENTER_CRITICAL();
 80074f6:	f000 fe0f 	bl	8008118 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80074fa:	4b11      	ldr	r3, [pc, #68]	@ (8007540 <ulTaskNotifyTake+0x90>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007502:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00e      	beq.n	8007528 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d005      	beq.n	800751c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007510:	4b0b      	ldr	r3, [pc, #44]	@ (8007540 <ulTaskNotifyTake+0x90>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2200      	movs	r2, #0
 8007516:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800751a:	e005      	b.n	8007528 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800751c:	4b08      	ldr	r3, [pc, #32]	@ (8007540 <ulTaskNotifyTake+0x90>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	3a01      	subs	r2, #1
 8007524:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007528:	4b05      	ldr	r3, [pc, #20]	@ (8007540 <ulTaskNotifyTake+0x90>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8007532:	f000 fe23 	bl	800817c <vPortExitCritical>

		return ulReturn;
 8007536:	68fb      	ldr	r3, [r7, #12]
	}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	20008a50 	.word	0x20008a50
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08a      	sub	sp, #40	@ 0x28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007558:	2301      	movs	r3, #1
 800755a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10b      	bne.n	800757a <xTaskGenericNotify+0x32>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	61bb      	str	r3, [r7, #24]
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	e7fd      	b.n	8007576 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800757e:	f000 fdcb 	bl	8008118 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d004      	beq.n	8007592 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007598:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	2202      	movs	r2, #2
 800759e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d82e      	bhi.n	8007606 <xTaskGenericNotify+0xbe>
 80075a8:	a201      	add	r2, pc, #4	@ (adr r2, 80075b0 <xTaskGenericNotify+0x68>)
 80075aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ae:	bf00      	nop
 80075b0:	08007607 	.word	0x08007607
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	080075d7 	.word	0x080075d7
 80075bc:	080075e7 	.word	0x080075e7
 80075c0:	080075f1 	.word	0x080075f1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	431a      	orrs	r2, r3
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80075d4:	e017      	b.n	8007606 <xTaskGenericNotify+0xbe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80075e4:	e00f      	b.n	8007606 <xTaskGenericNotify+0xbe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80075ee:	e00a      	b.n	8007606 <xTaskGenericNotify+0xbe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80075f0:	7ffb      	ldrb	r3, [r7, #31]
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d004      	beq.n	8007600 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80075fe:	e001      	b.n	8007604 <xTaskGenericNotify+0xbc>
						xReturn = pdFAIL;
 8007600:	2300      	movs	r3, #0
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007604:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007606:	7ffb      	ldrb	r3, [r7, #31]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d13b      	bne.n	8007684 <xTaskGenericNotify+0x13c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	3304      	adds	r3, #4
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fb79 	bl	8005d08 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761a:	4b1e      	ldr	r3, [pc, #120]	@ (8007694 <xTaskGenericNotify+0x14c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d903      	bls.n	800762a <xTaskGenericNotify+0xe2>
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007626:	4a1b      	ldr	r2, [pc, #108]	@ (8007694 <xTaskGenericNotify+0x14c>)
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800762e:	4613      	mov	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4a18      	ldr	r2, [pc, #96]	@ (8007698 <xTaskGenericNotify+0x150>)
 8007638:	441a      	add	r2, r3
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	3304      	adds	r3, #4
 800763e:	4619      	mov	r1, r3
 8007640:	4610      	mov	r0, r2
 8007642:	f7fe fb04 	bl	8005c4e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <xTaskGenericNotify+0x11e>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	617b      	str	r3, [r7, #20]
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop
 8007664:	e7fd      	b.n	8007662 <xTaskGenericNotify+0x11a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766a:	4b0c      	ldr	r3, [pc, #48]	@ (800769c <xTaskGenericNotify+0x154>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007670:	429a      	cmp	r2, r3
 8007672:	d907      	bls.n	8007684 <xTaskGenericNotify+0x13c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007674:	4b0a      	ldr	r3, [pc, #40]	@ (80076a0 <xTaskGenericNotify+0x158>)
 8007676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007684:	f000 fd7a 	bl	800817c <vPortExitCritical>

		return xReturn;
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800768a:	4618      	mov	r0, r3
 800768c:	3728      	adds	r7, #40	@ 0x28
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20008f2c 	.word	0x20008f2c
 8007698:	20008a54 	.word	0x20008a54
 800769c:	20008a50 	.word	0x20008a50
 80076a0:	e000ed04 	.word	0xe000ed04

080076a4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08a      	sub	sp, #40	@ 0x28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10b      	bne.n	80076cc <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	61bb      	str	r3, [r7, #24]
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	e7fd      	b.n	80076c8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076cc:	f000 fe04 	bl	80082d8 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 80076d4:	f3ef 8211 	mrs	r2, BASEPRI
 80076d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	617a      	str	r2, [r7, #20]
 80076ea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80076ec:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076ee:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80076f6:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800770e:	7ffb      	ldrb	r3, [r7, #31]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d148      	bne.n	80077a6 <vTaskNotifyGiveFromISR+0x102>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	60fb      	str	r3, [r7, #12]
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	e7fd      	b.n	8007730 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007734:	4b21      	ldr	r3, [pc, #132]	@ (80077bc <vTaskNotifyGiveFromISR+0x118>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d11d      	bne.n	8007778 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	3304      	adds	r3, #4
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe fae1 	bl	8005d08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774a:	4b1d      	ldr	r3, [pc, #116]	@ (80077c0 <vTaskNotifyGiveFromISR+0x11c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d903      	bls.n	800775a <vTaskNotifyGiveFromISR+0xb6>
 8007752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007756:	4a1a      	ldr	r2, [pc, #104]	@ (80077c0 <vTaskNotifyGiveFromISR+0x11c>)
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4a17      	ldr	r2, [pc, #92]	@ (80077c4 <vTaskNotifyGiveFromISR+0x120>)
 8007768:	441a      	add	r2, r3
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f7fe fa6c 	bl	8005c4e <vListInsertEnd>
 8007776:	e005      	b.n	8007784 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	3318      	adds	r3, #24
 800777c:	4619      	mov	r1, r3
 800777e:	4812      	ldr	r0, [pc, #72]	@ (80077c8 <vTaskNotifyGiveFromISR+0x124>)
 8007780:	f7fe fa65 	bl	8005c4e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007788:	4b10      	ldr	r3, [pc, #64]	@ (80077cc <vTaskNotifyGiveFromISR+0x128>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778e:	429a      	cmp	r2, r3
 8007790:	d909      	bls.n	80077a6 <vTaskNotifyGiveFromISR+0x102>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2201      	movs	r2, #1
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	e002      	b.n	80077a6 <vTaskNotifyGiveFromISR+0x102>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80077a0:	4b0b      	ldr	r3, [pc, #44]	@ (80077d0 <vTaskNotifyGiveFromISR+0x12c>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f383 8811 	msr	BASEPRI, r3
}
 80077b0:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80077b2:	bf00      	nop
 80077b4:	3728      	adds	r7, #40	@ 0x28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20008f4c 	.word	0x20008f4c
 80077c0:	20008f2c 	.word	0x20008f2c
 80077c4:	20008a54 	.word	0x20008a54
 80077c8:	20008ee4 	.word	0x20008ee4
 80077cc:	20008a50 	.word	0x20008a50
 80077d0:	20008f38 	.word	0x20008f38

080077d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077de:	4b21      	ldr	r3, [pc, #132]	@ (8007864 <prvAddCurrentTaskToDelayedList+0x90>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077e4:	4b20      	ldr	r3, [pc, #128]	@ (8007868 <prvAddCurrentTaskToDelayedList+0x94>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3304      	adds	r3, #4
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fa8c 	bl	8005d08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d10a      	bne.n	800780e <prvAddCurrentTaskToDelayedList+0x3a>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d007      	beq.n	800780e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007868 <prvAddCurrentTaskToDelayedList+0x94>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3304      	adds	r3, #4
 8007804:	4619      	mov	r1, r3
 8007806:	4819      	ldr	r0, [pc, #100]	@ (800786c <prvAddCurrentTaskToDelayedList+0x98>)
 8007808:	f7fe fa21 	bl	8005c4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800780c:	e026      	b.n	800785c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4413      	add	r3, r2
 8007814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007816:	4b14      	ldr	r3, [pc, #80]	@ (8007868 <prvAddCurrentTaskToDelayedList+0x94>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	429a      	cmp	r2, r3
 8007824:	d209      	bcs.n	800783a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007826:	4b12      	ldr	r3, [pc, #72]	@ (8007870 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	4b0f      	ldr	r3, [pc, #60]	@ (8007868 <prvAddCurrentTaskToDelayedList+0x94>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3304      	adds	r3, #4
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f7fe fa2f 	bl	8005c96 <vListInsert>
}
 8007838:	e010      	b.n	800785c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800783a:	4b0e      	ldr	r3, [pc, #56]	@ (8007874 <prvAddCurrentTaskToDelayedList+0xa0>)
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4b0a      	ldr	r3, [pc, #40]	@ (8007868 <prvAddCurrentTaskToDelayedList+0x94>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f7fe fa25 	bl	8005c96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800784c:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	429a      	cmp	r2, r3
 8007854:	d202      	bcs.n	800785c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007856:	4a08      	ldr	r2, [pc, #32]	@ (8007878 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	6013      	str	r3, [r2, #0]
}
 800785c:	bf00      	nop
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20008f28 	.word	0x20008f28
 8007868:	20008a50 	.word	0x20008a50
 800786c:	20008f10 	.word	0x20008f10
 8007870:	20008ee0 	.word	0x20008ee0
 8007874:	20008edc 	.word	0x20008edc
 8007878:	20008f44 	.word	0x20008f44

0800787c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08a      	sub	sp, #40	@ 0x28
 8007880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007886:	f000 fad9 	bl	8007e3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800788a:	4b1d      	ldr	r3, [pc, #116]	@ (8007900 <xTimerCreateTimerTask+0x84>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d021      	beq.n	80078d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007896:	2300      	movs	r3, #0
 8007898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800789a:	1d3a      	adds	r2, r7, #4
 800789c:	f107 0108 	add.w	r1, r7, #8
 80078a0:	f107 030c 	add.w	r3, r7, #12
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe f98b 	bl	8005bc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	9202      	str	r2, [sp, #8]
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	2302      	movs	r3, #2
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	2300      	movs	r3, #0
 80078ba:	460a      	mov	r2, r1
 80078bc:	4911      	ldr	r1, [pc, #68]	@ (8007904 <xTimerCreateTimerTask+0x88>)
 80078be:	4812      	ldr	r0, [pc, #72]	@ (8007908 <xTimerCreateTimerTask+0x8c>)
 80078c0:	f7fe ff44 	bl	800674c <xTaskCreateStatic>
 80078c4:	4603      	mov	r3, r0
 80078c6:	4a11      	ldr	r2, [pc, #68]	@ (800790c <xTimerCreateTimerTask+0x90>)
 80078c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078ca:	4b10      	ldr	r3, [pc, #64]	@ (800790c <xTimerCreateTimerTask+0x90>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078d2:	2301      	movs	r3, #1
 80078d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10b      	bne.n	80078f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	613b      	str	r3, [r7, #16]
}
 80078ee:	bf00      	nop
 80078f0:	bf00      	nop
 80078f2:	e7fd      	b.n	80078f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078f4:	697b      	ldr	r3, [r7, #20]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20008f80 	.word	0x20008f80
 8007904:	08009c3c 	.word	0x08009c3c
 8007908:	08007a31 	.word	0x08007a31
 800790c:	20008f84 	.word	0x20008f84

08007910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08a      	sub	sp, #40	@ 0x28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800791e:	2300      	movs	r3, #0
 8007920:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10b      	bne.n	8007940 <xTimerGenericCommand+0x30>
	__asm volatile
 8007928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	623b      	str	r3, [r7, #32]
}
 800793a:	bf00      	nop
 800793c:	bf00      	nop
 800793e:	e7fd      	b.n	800793c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007940:	4b19      	ldr	r3, [pc, #100]	@ (80079a8 <xTimerGenericCommand+0x98>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d02a      	beq.n	800799e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b05      	cmp	r3, #5
 8007958:	dc18      	bgt.n	800798c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800795a:	f7ff fd1b 	bl	8007394 <xTaskGetSchedulerState>
 800795e:	4603      	mov	r3, r0
 8007960:	2b02      	cmp	r3, #2
 8007962:	d109      	bne.n	8007978 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007964:	4b10      	ldr	r3, [pc, #64]	@ (80079a8 <xTimerGenericCommand+0x98>)
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	f107 0110 	add.w	r1, r7, #16
 800796c:	2300      	movs	r3, #0
 800796e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007970:	f7fe fafe 	bl	8005f70 <xQueueGenericSend>
 8007974:	6278      	str	r0, [r7, #36]	@ 0x24
 8007976:	e012      	b.n	800799e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007978:	4b0b      	ldr	r3, [pc, #44]	@ (80079a8 <xTimerGenericCommand+0x98>)
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	f107 0110 	add.w	r1, r7, #16
 8007980:	2300      	movs	r3, #0
 8007982:	2200      	movs	r2, #0
 8007984:	f7fe faf4 	bl	8005f70 <xQueueGenericSend>
 8007988:	6278      	str	r0, [r7, #36]	@ 0x24
 800798a:	e008      	b.n	800799e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800798c:	4b06      	ldr	r3, [pc, #24]	@ (80079a8 <xTimerGenericCommand+0x98>)
 800798e:	6818      	ldr	r0, [r3, #0]
 8007990:	f107 0110 	add.w	r1, r7, #16
 8007994:	2300      	movs	r3, #0
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	f7fe fbec 	bl	8006174 <xQueueGenericSendFromISR>
 800799c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3728      	adds	r7, #40	@ 0x28
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20008f80 	.word	0x20008f80

080079ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af02      	add	r7, sp, #8
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079b6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a2c <prvProcessExpiredTimer+0x80>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	3304      	adds	r3, #4
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe f99f 	bl	8005d08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d123      	bne.n	8007a1a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	18d1      	adds	r1, r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	6978      	ldr	r0, [r7, #20]
 80079e0:	f000 f8cc 	bl	8007b7c <prvInsertTimerInActiveList>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d017      	beq.n	8007a1a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079ea:	2300      	movs	r3, #0
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	2300      	movs	r3, #0
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	2100      	movs	r1, #0
 80079f4:	6978      	ldr	r0, [r7, #20]
 80079f6:	f7ff ff8b 	bl	8007910 <xTimerGenericCommand>
 80079fa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	60fb      	str	r3, [r7, #12]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1e:	6978      	ldr	r0, [r7, #20]
 8007a20:	4798      	blx	r3
}
 8007a22:	bf00      	nop
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20008f78 	.word	0x20008f78

08007a30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a38:	f107 0308 	add.w	r3, r7, #8
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 f859 	bl	8007af4 <prvGetNextExpireTime>
 8007a42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4619      	mov	r1, r3
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 f805 	bl	8007a58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a4e:	f000 f8d7 	bl	8007c00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a52:	bf00      	nop
 8007a54:	e7f0      	b.n	8007a38 <prvTimerTask+0x8>
	...

08007a58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a62:	f7ff f897 	bl	8006b94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 f866 	bl	8007b3c <prvSampleTimeNow>
 8007a70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d130      	bne.n	8007ada <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10a      	bne.n	8007a94 <prvProcessTimerOrBlockTask+0x3c>
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d806      	bhi.n	8007a94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a86:	f7ff f893 	bl	8006bb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff ff8d 	bl	80079ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a92:	e024      	b.n	8007ade <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d008      	beq.n	8007aac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a9a:	4b13      	ldr	r3, [pc, #76]	@ (8007ae8 <prvProcessTimerOrBlockTask+0x90>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bf0c      	ite	eq
 8007aa4:	2301      	moveq	r3, #1
 8007aa6:	2300      	movne	r3, #0
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007aac:	4b0f      	ldr	r3, [pc, #60]	@ (8007aec <prvProcessTimerOrBlockTask+0x94>)
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	f7fe fe13 	bl	80066e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007abe:	f7ff f877 	bl	8006bb0 <xTaskResumeAll>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ac8:	4b09      	ldr	r3, [pc, #36]	@ (8007af0 <prvProcessTimerOrBlockTask+0x98>)
 8007aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	f3bf 8f6f 	isb	sy
}
 8007ad8:	e001      	b.n	8007ade <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ada:	f7ff f869 	bl	8006bb0 <xTaskResumeAll>
}
 8007ade:	bf00      	nop
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20008f7c 	.word	0x20008f7c
 8007aec:	20008f80 	.word	0x20008f80
 8007af0:	e000ed04 	.word	0xe000ed04

08007af4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007afc:	4b0e      	ldr	r3, [pc, #56]	@ (8007b38 <prvGetNextExpireTime+0x44>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	bf0c      	ite	eq
 8007b06:	2301      	moveq	r3, #1
 8007b08:	2300      	movne	r3, #0
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d105      	bne.n	8007b26 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b1a:	4b07      	ldr	r3, [pc, #28]	@ (8007b38 <prvGetNextExpireTime+0x44>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	e001      	b.n	8007b2a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	20008f78 	.word	0x20008f78

08007b3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b44:	f7ff f8d2 	bl	8006cec <xTaskGetTickCount>
 8007b48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b78 <prvSampleTimeNow+0x3c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d205      	bcs.n	8007b60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b54:	f000 f910 	bl	8007d78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	e002      	b.n	8007b66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b66:	4a04      	ldr	r2, [pc, #16]	@ (8007b78 <prvSampleTimeNow+0x3c>)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20008f88 	.word	0x20008f88

08007b7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d812      	bhi.n	8007bc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	1ad2      	subs	r2, r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d302      	bcc.n	8007bb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	e01b      	b.n	8007bee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bb6:	4b10      	ldr	r3, [pc, #64]	@ (8007bf8 <prvInsertTimerInActiveList+0x7c>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f7fe f868 	bl	8005c96 <vListInsert>
 8007bc6:	e012      	b.n	8007bee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d206      	bcs.n	8007bde <prvInsertTimerInActiveList+0x62>
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d302      	bcc.n	8007bde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	e007      	b.n	8007bee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bde:	4b07      	ldr	r3, [pc, #28]	@ (8007bfc <prvInsertTimerInActiveList+0x80>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3304      	adds	r3, #4
 8007be6:	4619      	mov	r1, r3
 8007be8:	4610      	mov	r0, r2
 8007bea:	f7fe f854 	bl	8005c96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bee:	697b      	ldr	r3, [r7, #20]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20008f7c 	.word	0x20008f7c
 8007bfc:	20008f78 	.word	0x20008f78

08007c00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08e      	sub	sp, #56	@ 0x38
 8007c04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c06:	e0a5      	b.n	8007d54 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da19      	bge.n	8007c42 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c0e:	1d3b      	adds	r3, r7, #4
 8007c10:	3304      	adds	r3, #4
 8007c12:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10b      	bne.n	8007c32 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	61fb      	str	r3, [r7, #28]
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	e7fd      	b.n	8007c2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c38:	6850      	ldr	r0, [r2, #4]
 8007c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c3c:	6892      	ldr	r2, [r2, #8]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f2c0 8085 	blt.w	8007d54 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d004      	beq.n	8007c60 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	3304      	adds	r3, #4
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe f854 	bl	8005d08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c60:	463b      	mov	r3, r7
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff ff6a 	bl	8007b3c <prvSampleTimeNow>
 8007c68:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b09      	cmp	r3, #9
 8007c6e:	d86c      	bhi.n	8007d4a <prvProcessReceivedCommands+0x14a>
 8007c70:	a201      	add	r2, pc, #4	@ (adr r2, 8007c78 <prvProcessReceivedCommands+0x78>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007ca1 	.word	0x08007ca1
 8007c7c:	08007ca1 	.word	0x08007ca1
 8007c80:	08007ca1 	.word	0x08007ca1
 8007c84:	08007d4b 	.word	0x08007d4b
 8007c88:	08007cff 	.word	0x08007cff
 8007c8c:	08007d39 	.word	0x08007d39
 8007c90:	08007ca1 	.word	0x08007ca1
 8007c94:	08007ca1 	.word	0x08007ca1
 8007c98:	08007d4b 	.word	0x08007d4b
 8007c9c:	08007cff 	.word	0x08007cff
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	18d1      	adds	r1, r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cae:	f7ff ff65 	bl	8007b7c <prvInsertTimerInActiveList>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d04a      	beq.n	8007d4e <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cbe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d142      	bne.n	8007d4e <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	441a      	add	r2, r3
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cda:	f7ff fe19 	bl	8007910 <xTimerGenericCommand>
 8007cde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d133      	bne.n	8007d4e <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	61bb      	str	r3, [r7, #24]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10b      	bne.n	8007d24 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8007d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	617b      	str	r3, [r7, #20]
}
 8007d1e:	bf00      	nop
 8007d20:	bf00      	nop
 8007d22:	e7fd      	b.n	8007d20 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2a:	18d1      	adds	r1, r2, r3
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d32:	f7ff ff23 	bl	8007b7c <prvInsertTimerInActiveList>
					break;
 8007d36:	e00d      	b.n	8007d54 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d107      	bne.n	8007d52 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8007d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d44:	f000 fbd2 	bl	80084ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d48:	e003      	b.n	8007d52 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8007d4a:	bf00      	nop
 8007d4c:	e002      	b.n	8007d54 <prvProcessReceivedCommands+0x154>
					break;
 8007d4e:	bf00      	nop
 8007d50:	e000      	b.n	8007d54 <prvProcessReceivedCommands+0x154>
					break;
 8007d52:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d54:	4b07      	ldr	r3, [pc, #28]	@ (8007d74 <prvProcessReceivedCommands+0x174>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	1d39      	adds	r1, r7, #4
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe faa5 	bl	80062ac <xQueueReceive>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f47f af4f 	bne.w	8007c08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007d6a:	bf00      	nop
 8007d6c:	bf00      	nop
 8007d6e:	3730      	adds	r7, #48	@ 0x30
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	20008f80 	.word	0x20008f80

08007d78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d7e:	e046      	b.n	8007e0e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d80:	4b2c      	ldr	r3, [pc, #176]	@ (8007e34 <prvSwitchTimerLists+0xbc>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8007e34 <prvSwitchTimerLists+0xbc>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fd ffb5 	bl	8005d08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d12f      	bne.n	8007e0e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4413      	add	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d90e      	bls.n	8007dde <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dcc:	4b19      	ldr	r3, [pc, #100]	@ (8007e34 <prvSwitchTimerLists+0xbc>)
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	f7fd ff5d 	bl	8005c96 <vListInsert>
 8007ddc:	e017      	b.n	8007e0e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dde:	2300      	movs	r3, #0
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	2300      	movs	r3, #0
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	2100      	movs	r1, #0
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7ff fd91 	bl	8007910 <xTimerGenericCommand>
 8007dee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10b      	bne.n	8007e0e <prvSwitchTimerLists+0x96>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	603b      	str	r3, [r7, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	bf00      	nop
 8007e0c:	e7fd      	b.n	8007e0a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e0e:	4b09      	ldr	r3, [pc, #36]	@ (8007e34 <prvSwitchTimerLists+0xbc>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1b3      	bne.n	8007d80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e18:	4b06      	ldr	r3, [pc, #24]	@ (8007e34 <prvSwitchTimerLists+0xbc>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e1e:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <prvSwitchTimerLists+0xc0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a04      	ldr	r2, [pc, #16]	@ (8007e34 <prvSwitchTimerLists+0xbc>)
 8007e24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e26:	4a04      	ldr	r2, [pc, #16]	@ (8007e38 <prvSwitchTimerLists+0xc0>)
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	6013      	str	r3, [r2, #0]
}
 8007e2c:	bf00      	nop
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20008f78 	.word	0x20008f78
 8007e38:	20008f7c 	.word	0x20008f7c

08007e3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e42:	f000 f969 	bl	8008118 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e46:	4b15      	ldr	r3, [pc, #84]	@ (8007e9c <prvCheckForValidListAndQueue+0x60>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d120      	bne.n	8007e90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e4e:	4814      	ldr	r0, [pc, #80]	@ (8007ea0 <prvCheckForValidListAndQueue+0x64>)
 8007e50:	f7fd fed0 	bl	8005bf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e54:	4813      	ldr	r0, [pc, #76]	@ (8007ea4 <prvCheckForValidListAndQueue+0x68>)
 8007e56:	f7fd fecd 	bl	8005bf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e5a:	4b13      	ldr	r3, [pc, #76]	@ (8007ea8 <prvCheckForValidListAndQueue+0x6c>)
 8007e5c:	4a10      	ldr	r2, [pc, #64]	@ (8007ea0 <prvCheckForValidListAndQueue+0x64>)
 8007e5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e60:	4b12      	ldr	r3, [pc, #72]	@ (8007eac <prvCheckForValidListAndQueue+0x70>)
 8007e62:	4a10      	ldr	r2, [pc, #64]	@ (8007ea4 <prvCheckForValidListAndQueue+0x68>)
 8007e64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e66:	2300      	movs	r3, #0
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	4b11      	ldr	r3, [pc, #68]	@ (8007eb0 <prvCheckForValidListAndQueue+0x74>)
 8007e6c:	4a11      	ldr	r2, [pc, #68]	@ (8007eb4 <prvCheckForValidListAndQueue+0x78>)
 8007e6e:	2110      	movs	r1, #16
 8007e70:	200a      	movs	r0, #10
 8007e72:	f7fd ffdd 	bl	8005e30 <xQueueGenericCreateStatic>
 8007e76:	4603      	mov	r3, r0
 8007e78:	4a08      	ldr	r2, [pc, #32]	@ (8007e9c <prvCheckForValidListAndQueue+0x60>)
 8007e7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e7c:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <prvCheckForValidListAndQueue+0x60>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d005      	beq.n	8007e90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e84:	4b05      	ldr	r3, [pc, #20]	@ (8007e9c <prvCheckForValidListAndQueue+0x60>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	490b      	ldr	r1, [pc, #44]	@ (8007eb8 <prvCheckForValidListAndQueue+0x7c>)
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fe fc00 	bl	8006690 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e90:	f000 f974 	bl	800817c <vPortExitCritical>
}
 8007e94:	bf00      	nop
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20008f80 	.word	0x20008f80
 8007ea0:	20008f50 	.word	0x20008f50
 8007ea4:	20008f64 	.word	0x20008f64
 8007ea8:	20008f78 	.word	0x20008f78
 8007eac:	20008f7c 	.word	0x20008f7c
 8007eb0:	2000902c 	.word	0x2000902c
 8007eb4:	20008f8c 	.word	0x20008f8c
 8007eb8:	08009c44 	.word	0x08009c44

08007ebc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3b04      	subs	r3, #4
 8007ecc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3b04      	subs	r3, #4
 8007eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f023 0201 	bic.w	r2, r3, #1
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3b04      	subs	r3, #4
 8007eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007eec:	4a0c      	ldr	r2, [pc, #48]	@ (8007f20 <pxPortInitialiseStack+0x64>)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3b14      	subs	r3, #20
 8007ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	3b04      	subs	r3, #4
 8007f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f06f 0202 	mvn.w	r2, #2
 8007f0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3b20      	subs	r3, #32
 8007f10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f12:	68fb      	ldr	r3, [r7, #12]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	08007f25 	.word	0x08007f25

08007f24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f2e:	4b13      	ldr	r3, [pc, #76]	@ (8007f7c <prvTaskExitError+0x58>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d00b      	beq.n	8007f50 <prvTaskExitError+0x2c>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60fb      	str	r3, [r7, #12]
}
 8007f4a:	bf00      	nop
 8007f4c:	bf00      	nop
 8007f4e:	e7fd      	b.n	8007f4c <prvTaskExitError+0x28>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	60bb      	str	r3, [r7, #8]
}
 8007f62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f64:	bf00      	nop
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0fc      	beq.n	8007f66 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	20000010 	.word	0x20000010

08007f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f80:	4b07      	ldr	r3, [pc, #28]	@ (8007fa0 <pxCurrentTCBConst2>)
 8007f82:	6819      	ldr	r1, [r3, #0]
 8007f84:	6808      	ldr	r0, [r1, #0]
 8007f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	f380 8809 	msr	PSP, r0
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8811 	msr	BASEPRI, r0
 8007f9a:	4770      	bx	lr
 8007f9c:	f3af 8000 	nop.w

08007fa0 <pxCurrentTCBConst2>:
 8007fa0:	20008a50 	.word	0x20008a50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop

08007fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fa8:	4808      	ldr	r0, [pc, #32]	@ (8007fcc <prvPortStartFirstTask+0x24>)
 8007faa:	6800      	ldr	r0, [r0, #0]
 8007fac:	6800      	ldr	r0, [r0, #0]
 8007fae:	f380 8808 	msr	MSP, r0
 8007fb2:	f04f 0000 	mov.w	r0, #0
 8007fb6:	f380 8814 	msr	CONTROL, r0
 8007fba:	b662      	cpsie	i
 8007fbc:	b661      	cpsie	f
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	df00      	svc	0
 8007fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fca:	bf00      	nop
 8007fcc:	e000ed08 	.word	0xe000ed08

08007fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fd6:	4b47      	ldr	r3, [pc, #284]	@ (80080f4 <xPortStartScheduler+0x124>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a47      	ldr	r2, [pc, #284]	@ (80080f8 <xPortStartScheduler+0x128>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d10b      	bne.n	8007ff8 <xPortStartScheduler+0x28>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	613b      	str	r3, [r7, #16]
}
 8007ff2:	bf00      	nop
 8007ff4:	bf00      	nop
 8007ff6:	e7fd      	b.n	8007ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80080f4 <xPortStartScheduler+0x124>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80080fc <xPortStartScheduler+0x12c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d10b      	bne.n	800801a <xPortStartScheduler+0x4a>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	60fb      	str	r3, [r7, #12]
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	e7fd      	b.n	8008016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800801a:	4b39      	ldr	r3, [pc, #228]	@ (8008100 <xPortStartScheduler+0x130>)
 800801c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	22ff      	movs	r2, #255	@ 0xff
 800802a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	b2db      	uxtb	r3, r3
 8008032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800803c:	b2da      	uxtb	r2, r3
 800803e:	4b31      	ldr	r3, [pc, #196]	@ (8008104 <xPortStartScheduler+0x134>)
 8008040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008042:	4b31      	ldr	r3, [pc, #196]	@ (8008108 <xPortStartScheduler+0x138>)
 8008044:	2207      	movs	r2, #7
 8008046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008048:	e009      	b.n	800805e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800804a:	4b2f      	ldr	r3, [pc, #188]	@ (8008108 <xPortStartScheduler+0x138>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3b01      	subs	r3, #1
 8008050:	4a2d      	ldr	r2, [pc, #180]	@ (8008108 <xPortStartScheduler+0x138>)
 8008052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	b2db      	uxtb	r3, r3
 800805c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	b2db      	uxtb	r3, r3
 8008062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008066:	2b80      	cmp	r3, #128	@ 0x80
 8008068:	d0ef      	beq.n	800804a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800806a:	4b27      	ldr	r3, [pc, #156]	@ (8008108 <xPortStartScheduler+0x138>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f1c3 0307 	rsb	r3, r3, #7
 8008072:	2b04      	cmp	r3, #4
 8008074:	d00b      	beq.n	800808e <xPortStartScheduler+0xbe>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	60bb      	str	r3, [r7, #8]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800808e:	4b1e      	ldr	r3, [pc, #120]	@ (8008108 <xPortStartScheduler+0x138>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	4a1c      	ldr	r2, [pc, #112]	@ (8008108 <xPortStartScheduler+0x138>)
 8008096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008098:	4b1b      	ldr	r3, [pc, #108]	@ (8008108 <xPortStartScheduler+0x138>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080a0:	4a19      	ldr	r2, [pc, #100]	@ (8008108 <xPortStartScheduler+0x138>)
 80080a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080ac:	4b17      	ldr	r3, [pc, #92]	@ (800810c <xPortStartScheduler+0x13c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a16      	ldr	r2, [pc, #88]	@ (800810c <xPortStartScheduler+0x13c>)
 80080b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080b8:	4b14      	ldr	r3, [pc, #80]	@ (800810c <xPortStartScheduler+0x13c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a13      	ldr	r2, [pc, #76]	@ (800810c <xPortStartScheduler+0x13c>)
 80080be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80080c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080c4:	f000 f8da 	bl	800827c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080c8:	4b11      	ldr	r3, [pc, #68]	@ (8008110 <xPortStartScheduler+0x140>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080ce:	f000 f8f9 	bl	80082c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080d2:	4b10      	ldr	r3, [pc, #64]	@ (8008114 <xPortStartScheduler+0x144>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008114 <xPortStartScheduler+0x144>)
 80080d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80080dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080de:	f7ff ff63 	bl	8007fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080e2:	f7fe fed3 	bl	8006e8c <vTaskSwitchContext>
	prvTaskExitError();
 80080e6:	f7ff ff1d 	bl	8007f24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	e000ed00 	.word	0xe000ed00
 80080f8:	410fc271 	.word	0x410fc271
 80080fc:	410fc270 	.word	0x410fc270
 8008100:	e000e400 	.word	0xe000e400
 8008104:	2000907c 	.word	0x2000907c
 8008108:	20009080 	.word	0x20009080
 800810c:	e000ed20 	.word	0xe000ed20
 8008110:	20000010 	.word	0x20000010
 8008114:	e000ef34 	.word	0xe000ef34

08008118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	607b      	str	r3, [r7, #4]
}
 8008130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008132:	4b10      	ldr	r3, [pc, #64]	@ (8008174 <vPortEnterCritical+0x5c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3301      	adds	r3, #1
 8008138:	4a0e      	ldr	r2, [pc, #56]	@ (8008174 <vPortEnterCritical+0x5c>)
 800813a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800813c:	4b0d      	ldr	r3, [pc, #52]	@ (8008174 <vPortEnterCritical+0x5c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d110      	bne.n	8008166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008144:	4b0c      	ldr	r3, [pc, #48]	@ (8008178 <vPortEnterCritical+0x60>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <vPortEnterCritical+0x4e>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	603b      	str	r3, [r7, #0]
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	e7fd      	b.n	8008162 <vPortEnterCritical+0x4a>
	}
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	20000010 	.word	0x20000010
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008182:	4b12      	ldr	r3, [pc, #72]	@ (80081cc <vPortExitCritical+0x50>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <vPortExitCritical+0x26>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	607b      	str	r3, [r7, #4]
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081a2:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <vPortExitCritical+0x50>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	4a08      	ldr	r2, [pc, #32]	@ (80081cc <vPortExitCritical+0x50>)
 80081aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081ac:	4b07      	ldr	r3, [pc, #28]	@ (80081cc <vPortExitCritical+0x50>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d105      	bne.n	80081c0 <vPortExitCritical+0x44>
 80081b4:	2300      	movs	r3, #0
 80081b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f383 8811 	msr	BASEPRI, r3
}
 80081be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	20000010 	.word	0x20000010

080081d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081d0:	f3ef 8009 	mrs	r0, PSP
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	4b15      	ldr	r3, [pc, #84]	@ (8008230 <pxCurrentTCBConst>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	f01e 0f10 	tst.w	lr, #16
 80081e0:	bf08      	it	eq
 80081e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ea:	6010      	str	r0, [r2, #0]
 80081ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081f4:	f380 8811 	msr	BASEPRI, r0
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f7fe fe44 	bl	8006e8c <vTaskSwitchContext>
 8008204:	f04f 0000 	mov.w	r0, #0
 8008208:	f380 8811 	msr	BASEPRI, r0
 800820c:	bc09      	pop	{r0, r3}
 800820e:	6819      	ldr	r1, [r3, #0]
 8008210:	6808      	ldr	r0, [r1, #0]
 8008212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008216:	f01e 0f10 	tst.w	lr, #16
 800821a:	bf08      	it	eq
 800821c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008220:	f380 8809 	msr	PSP, r0
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	f3af 8000 	nop.w

08008230 <pxCurrentTCBConst>:
 8008230:	20008a50 	.word	0x20008a50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop

08008238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	607b      	str	r3, [r7, #4]
}
 8008250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008252:	f7fe fd5b 	bl	8006d0c <xTaskIncrementTick>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800825c:	4b06      	ldr	r3, [pc, #24]	@ (8008278 <SysTick_Handler+0x40>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	2300      	movs	r3, #0
 8008266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f383 8811 	msr	BASEPRI, r3
}
 800826e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008270:	bf00      	nop
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008280:	4b0b      	ldr	r3, [pc, #44]	@ (80082b0 <vPortSetupTimerInterrupt+0x34>)
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008286:	4b0b      	ldr	r3, [pc, #44]	@ (80082b4 <vPortSetupTimerInterrupt+0x38>)
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800828c:	4b0a      	ldr	r3, [pc, #40]	@ (80082b8 <vPortSetupTimerInterrupt+0x3c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a0a      	ldr	r2, [pc, #40]	@ (80082bc <vPortSetupTimerInterrupt+0x40>)
 8008292:	fba2 2303 	umull	r2, r3, r2, r3
 8008296:	099b      	lsrs	r3, r3, #6
 8008298:	4a09      	ldr	r2, [pc, #36]	@ (80082c0 <vPortSetupTimerInterrupt+0x44>)
 800829a:	3b01      	subs	r3, #1
 800829c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800829e:	4b04      	ldr	r3, [pc, #16]	@ (80082b0 <vPortSetupTimerInterrupt+0x34>)
 80082a0:	2207      	movs	r2, #7
 80082a2:	601a      	str	r2, [r3, #0]
}
 80082a4:	bf00      	nop
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	e000e010 	.word	0xe000e010
 80082b4:	e000e018 	.word	0xe000e018
 80082b8:	20000004 	.word	0x20000004
 80082bc:	10624dd3 	.word	0x10624dd3
 80082c0:	e000e014 	.word	0xe000e014

080082c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80082d4 <vPortEnableVFP+0x10>
 80082c8:	6801      	ldr	r1, [r0, #0]
 80082ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80082ce:	6001      	str	r1, [r0, #0]
 80082d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082d2:	bf00      	nop
 80082d4:	e000ed88 	.word	0xe000ed88

080082d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082de:	f3ef 8305 	mrs	r3, IPSR
 80082e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b0f      	cmp	r3, #15
 80082e8:	d915      	bls.n	8008316 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082ea:	4a18      	ldr	r2, [pc, #96]	@ (800834c <vPortValidateInterruptPriority+0x74>)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082f4:	4b16      	ldr	r3, [pc, #88]	@ (8008350 <vPortValidateInterruptPriority+0x78>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	7afa      	ldrb	r2, [r7, #11]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d20b      	bcs.n	8008316 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	607b      	str	r3, [r7, #4]
}
 8008310:	bf00      	nop
 8008312:	bf00      	nop
 8008314:	e7fd      	b.n	8008312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008316:	4b0f      	ldr	r3, [pc, #60]	@ (8008354 <vPortValidateInterruptPriority+0x7c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800831e:	4b0e      	ldr	r3, [pc, #56]	@ (8008358 <vPortValidateInterruptPriority+0x80>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	429a      	cmp	r2, r3
 8008324:	d90b      	bls.n	800833e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	603b      	str	r3, [r7, #0]
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <vPortValidateInterruptPriority+0x62>
	}
 800833e:	bf00      	nop
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	e000e3f0 	.word	0xe000e3f0
 8008350:	2000907c 	.word	0x2000907c
 8008354:	e000ed0c 	.word	0xe000ed0c
 8008358:	20009080 	.word	0x20009080

0800835c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08a      	sub	sp, #40	@ 0x28
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008364:	2300      	movs	r3, #0
 8008366:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008368:	f7fe fc14 	bl	8006b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800836c:	4b5a      	ldr	r3, [pc, #360]	@ (80084d8 <pvPortMalloc+0x17c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008374:	f000 f916 	bl	80085a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008378:	4b58      	ldr	r3, [pc, #352]	@ (80084dc <pvPortMalloc+0x180>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4013      	ands	r3, r2
 8008380:	2b00      	cmp	r3, #0
 8008382:	f040 8090 	bne.w	80084a6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01e      	beq.n	80083ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800838c:	2208      	movs	r2, #8
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4413      	add	r3, r2
 8008392:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d015      	beq.n	80083ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f023 0307 	bic.w	r3, r3, #7
 80083a4:	3308      	adds	r3, #8
 80083a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00b      	beq.n	80083ca <pvPortMalloc+0x6e>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	617b      	str	r3, [r7, #20]
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	e7fd      	b.n	80083c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d06a      	beq.n	80084a6 <pvPortMalloc+0x14a>
 80083d0:	4b43      	ldr	r3, [pc, #268]	@ (80084e0 <pvPortMalloc+0x184>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d865      	bhi.n	80084a6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083da:	4b42      	ldr	r3, [pc, #264]	@ (80084e4 <pvPortMalloc+0x188>)
 80083dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083de:	4b41      	ldr	r3, [pc, #260]	@ (80084e4 <pvPortMalloc+0x188>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083e4:	e004      	b.n	80083f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d903      	bls.n	8008402 <pvPortMalloc+0xa6>
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f1      	bne.n	80083e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008402:	4b35      	ldr	r3, [pc, #212]	@ (80084d8 <pvPortMalloc+0x17c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008408:	429a      	cmp	r2, r3
 800840a:	d04c      	beq.n	80084a6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2208      	movs	r2, #8
 8008412:	4413      	add	r3, r2
 8008414:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	1ad2      	subs	r2, r2, r3
 8008426:	2308      	movs	r3, #8
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	429a      	cmp	r2, r3
 800842c:	d920      	bls.n	8008470 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800842e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4413      	add	r3, r2
 8008434:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	f003 0307 	and.w	r3, r3, #7
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <pvPortMalloc+0xfc>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	613b      	str	r3, [r7, #16]
}
 8008452:	bf00      	nop
 8008454:	bf00      	nop
 8008456:	e7fd      	b.n	8008454 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	1ad2      	subs	r2, r2, r3
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800846a:	69b8      	ldr	r0, [r7, #24]
 800846c:	f000 f8fc 	bl	8008668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008470:	4b1b      	ldr	r3, [pc, #108]	@ (80084e0 <pvPortMalloc+0x184>)
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	4a19      	ldr	r2, [pc, #100]	@ (80084e0 <pvPortMalloc+0x184>)
 800847c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800847e:	4b18      	ldr	r3, [pc, #96]	@ (80084e0 <pvPortMalloc+0x184>)
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4b19      	ldr	r3, [pc, #100]	@ (80084e8 <pvPortMalloc+0x18c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d203      	bcs.n	8008492 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800848a:	4b15      	ldr	r3, [pc, #84]	@ (80084e0 <pvPortMalloc+0x184>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a16      	ldr	r2, [pc, #88]	@ (80084e8 <pvPortMalloc+0x18c>)
 8008490:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	4b11      	ldr	r3, [pc, #68]	@ (80084dc <pvPortMalloc+0x180>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	431a      	orrs	r2, r3
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084a6:	f7fe fb83 	bl	8006bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00b      	beq.n	80084cc <pvPortMalloc+0x170>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	60fb      	str	r3, [r7, #12]
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <pvPortMalloc+0x16c>
	return pvReturn;
 80084cc:	69fb      	ldr	r3, [r7, #28]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3728      	adds	r7, #40	@ 0x28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20009c8c 	.word	0x20009c8c
 80084dc:	20009c98 	.word	0x20009c98
 80084e0:	20009c90 	.word	0x20009c90
 80084e4:	20009c84 	.word	0x20009c84
 80084e8:	20009c94 	.word	0x20009c94

080084ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d04a      	beq.n	8008594 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084fe:	2308      	movs	r3, #8
 8008500:	425b      	negs	r3, r3
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	4413      	add	r3, r2
 8008506:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	4b22      	ldr	r3, [pc, #136]	@ (800859c <vPortFree+0xb0>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4013      	ands	r3, r2
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10b      	bne.n	8008532 <vPortFree+0x46>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	60fb      	str	r3, [r7, #12]
}
 800852c:	bf00      	nop
 800852e:	bf00      	nop
 8008530:	e7fd      	b.n	800852e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00b      	beq.n	8008552 <vPortFree+0x66>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	60bb      	str	r3, [r7, #8]
}
 800854c:	bf00      	nop
 800854e:	bf00      	nop
 8008550:	e7fd      	b.n	800854e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	4b11      	ldr	r3, [pc, #68]	@ (800859c <vPortFree+0xb0>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4013      	ands	r3, r2
 800855c:	2b00      	cmp	r3, #0
 800855e:	d019      	beq.n	8008594 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d115      	bne.n	8008594 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	4b0b      	ldr	r3, [pc, #44]	@ (800859c <vPortFree+0xb0>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	43db      	mvns	r3, r3
 8008572:	401a      	ands	r2, r3
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008578:	f7fe fb0c 	bl	8006b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	4b07      	ldr	r3, [pc, #28]	@ (80085a0 <vPortFree+0xb4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4413      	add	r3, r2
 8008586:	4a06      	ldr	r2, [pc, #24]	@ (80085a0 <vPortFree+0xb4>)
 8008588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800858a:	6938      	ldr	r0, [r7, #16]
 800858c:	f000 f86c 	bl	8008668 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008590:	f7fe fb0e 	bl	8006bb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008594:	bf00      	nop
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	20009c98 	.word	0x20009c98
 80085a0:	20009c90 	.word	0x20009c90

080085a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80085ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085b0:	4b27      	ldr	r3, [pc, #156]	@ (8008650 <prvHeapInit+0xac>)
 80085b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00c      	beq.n	80085d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3307      	adds	r3, #7
 80085c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 0307 	bic.w	r3, r3, #7
 80085ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008650 <prvHeapInit+0xac>)
 80085d4:	4413      	add	r3, r2
 80085d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008654 <prvHeapInit+0xb0>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008654 <prvHeapInit+0xb0>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	4413      	add	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085f0:	2208      	movs	r2, #8
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	1a9b      	subs	r3, r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0307 	bic.w	r3, r3, #7
 80085fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4a15      	ldr	r2, [pc, #84]	@ (8008658 <prvHeapInit+0xb4>)
 8008604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008606:	4b14      	ldr	r3, [pc, #80]	@ (8008658 <prvHeapInit+0xb4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800860e:	4b12      	ldr	r3, [pc, #72]	@ (8008658 <prvHeapInit+0xb4>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	1ad2      	subs	r2, r2, r3
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008624:	4b0c      	ldr	r3, [pc, #48]	@ (8008658 <prvHeapInit+0xb4>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	4a0a      	ldr	r2, [pc, #40]	@ (800865c <prvHeapInit+0xb8>)
 8008632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	4a09      	ldr	r2, [pc, #36]	@ (8008660 <prvHeapInit+0xbc>)
 800863a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800863c:	4b09      	ldr	r3, [pc, #36]	@ (8008664 <prvHeapInit+0xc0>)
 800863e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008642:	601a      	str	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20009084 	.word	0x20009084
 8008654:	20009c84 	.word	0x20009c84
 8008658:	20009c8c 	.word	0x20009c8c
 800865c:	20009c94 	.word	0x20009c94
 8008660:	20009c90 	.word	0x20009c90
 8008664:	20009c98 	.word	0x20009c98

08008668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008670:	4b28      	ldr	r3, [pc, #160]	@ (8008714 <prvInsertBlockIntoFreeList+0xac>)
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e002      	b.n	800867c <prvInsertBlockIntoFreeList+0x14>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	429a      	cmp	r2, r3
 8008684:	d8f7      	bhi.n	8008676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	4413      	add	r3, r2
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	429a      	cmp	r2, r3
 8008696:	d108      	bne.n	80086aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	441a      	add	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	441a      	add	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d118      	bne.n	80086f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b15      	ldr	r3, [pc, #84]	@ (8008718 <prvInsertBlockIntoFreeList+0xb0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d00d      	beq.n	80086e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	441a      	add	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	e008      	b.n	80086f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008718 <prvInsertBlockIntoFreeList+0xb0>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	e003      	b.n	80086f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d002      	beq.n	8008706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	20009c84 	.word	0x20009c84
 8008718:	20009c8c 	.word	0x20009c8c

0800871c <arm_rfft_32_fast_init_f32>:
 800871c:	b150      	cbz	r0, 8008734 <arm_rfft_32_fast_init_f32+0x18>
 800871e:	b510      	push	{r4, lr}
 8008720:	2110      	movs	r1, #16
 8008722:	4604      	mov	r4, r0
 8008724:	f000 fd58 	bl	80091d8 <arm_cfft_init_f32>
 8008728:	b918      	cbnz	r0, 8008732 <arm_rfft_32_fast_init_f32+0x16>
 800872a:	4b04      	ldr	r3, [pc, #16]	@ (800873c <arm_rfft_32_fast_init_f32+0x20>)
 800872c:	6163      	str	r3, [r4, #20]
 800872e:	2220      	movs	r2, #32
 8008730:	8222      	strh	r2, [r4, #16]
 8008732:	bd10      	pop	{r4, pc}
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	08022748 	.word	0x08022748

08008740 <arm_rfft_64_fast_init_f32>:
 8008740:	b150      	cbz	r0, 8008758 <arm_rfft_64_fast_init_f32+0x18>
 8008742:	b510      	push	{r4, lr}
 8008744:	2120      	movs	r1, #32
 8008746:	4604      	mov	r4, r0
 8008748:	f000 fd46 	bl	80091d8 <arm_cfft_init_f32>
 800874c:	b918      	cbnz	r0, 8008756 <arm_rfft_64_fast_init_f32+0x16>
 800874e:	4b04      	ldr	r3, [pc, #16]	@ (8008760 <arm_rfft_64_fast_init_f32+0x20>)
 8008750:	6163      	str	r3, [r4, #20]
 8008752:	2240      	movs	r2, #64	@ 0x40
 8008754:	8222      	strh	r2, [r4, #16]
 8008756:	bd10      	pop	{r4, pc}
 8008758:	f04f 30ff 	mov.w	r0, #4294967295
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	08026fc8 	.word	0x08026fc8

08008764 <arm_rfft_128_fast_init_f32>:
 8008764:	b150      	cbz	r0, 800877c <arm_rfft_128_fast_init_f32+0x18>
 8008766:	b510      	push	{r4, lr}
 8008768:	2140      	movs	r1, #64	@ 0x40
 800876a:	4604      	mov	r4, r0
 800876c:	f000 fd34 	bl	80091d8 <arm_cfft_init_f32>
 8008770:	b918      	cbnz	r0, 800877a <arm_rfft_128_fast_init_f32+0x16>
 8008772:	4b04      	ldr	r3, [pc, #16]	@ (8008784 <arm_rfft_128_fast_init_f32+0x20>)
 8008774:	6163      	str	r3, [r4, #20]
 8008776:	2280      	movs	r2, #128	@ 0x80
 8008778:	8222      	strh	r2, [r4, #16]
 800877a:	bd10      	pop	{r4, pc}
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	08020148 	.word	0x08020148

08008788 <arm_rfft_256_fast_init_f32>:
 8008788:	b158      	cbz	r0, 80087a2 <arm_rfft_256_fast_init_f32+0x1a>
 800878a:	b510      	push	{r4, lr}
 800878c:	2180      	movs	r1, #128	@ 0x80
 800878e:	4604      	mov	r4, r0
 8008790:	f000 fd22 	bl	80091d8 <arm_cfft_init_f32>
 8008794:	b920      	cbnz	r0, 80087a0 <arm_rfft_256_fast_init_f32+0x18>
 8008796:	4b04      	ldr	r3, [pc, #16]	@ (80087a8 <arm_rfft_256_fast_init_f32+0x20>)
 8008798:	6163      	str	r3, [r4, #20]
 800879a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800879e:	8222      	strh	r2, [r4, #16]
 80087a0:	bd10      	pop	{r4, pc}
 80087a2:	f04f 30ff 	mov.w	r0, #4294967295
 80087a6:	4770      	bx	lr
 80087a8:	08022348 	.word	0x08022348

080087ac <arm_rfft_512_fast_init_f32>:
 80087ac:	b160      	cbz	r0, 80087c8 <arm_rfft_512_fast_init_f32+0x1c>
 80087ae:	b510      	push	{r4, lr}
 80087b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80087b4:	4604      	mov	r4, r0
 80087b6:	f000 fd0f 	bl	80091d8 <arm_cfft_init_f32>
 80087ba:	b920      	cbnz	r0, 80087c6 <arm_rfft_512_fast_init_f32+0x1a>
 80087bc:	4b04      	ldr	r3, [pc, #16]	@ (80087d0 <arm_rfft_512_fast_init_f32+0x24>)
 80087be:	6163      	str	r3, [r4, #20]
 80087c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087c4:	8222      	strh	r2, [r4, #16]
 80087c6:	bd10      	pop	{r4, pc}
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	080267c8 	.word	0x080267c8

080087d4 <arm_rfft_1024_fast_init_f32>:
 80087d4:	b160      	cbz	r0, 80087f0 <arm_rfft_1024_fast_init_f32+0x1c>
 80087d6:	b510      	push	{r4, lr}
 80087d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80087dc:	4604      	mov	r4, r0
 80087de:	f000 fcfb 	bl	80091d8 <arm_cfft_init_f32>
 80087e2:	b920      	cbnz	r0, 80087ee <arm_rfft_1024_fast_init_f32+0x1a>
 80087e4:	4b04      	ldr	r3, [pc, #16]	@ (80087f8 <arm_rfft_1024_fast_init_f32+0x24>)
 80087e6:	6163      	str	r3, [r4, #20]
 80087e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80087ec:	8222      	strh	r2, [r4, #16]
 80087ee:	bd10      	pop	{r4, pc}
 80087f0:	f04f 30ff 	mov.w	r0, #4294967295
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	0801f148 	.word	0x0801f148

080087fc <arm_rfft_2048_fast_init_f32>:
 80087fc:	b160      	cbz	r0, 8008818 <arm_rfft_2048_fast_init_f32+0x1c>
 80087fe:	b510      	push	{r4, lr}
 8008800:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008804:	4604      	mov	r4, r0
 8008806:	f000 fce7 	bl	80091d8 <arm_cfft_init_f32>
 800880a:	b920      	cbnz	r0, 8008816 <arm_rfft_2048_fast_init_f32+0x1a>
 800880c:	4b04      	ldr	r3, [pc, #16]	@ (8008820 <arm_rfft_2048_fast_init_f32+0x24>)
 800880e:	6163      	str	r3, [r4, #20]
 8008810:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008814:	8222      	strh	r2, [r4, #16]
 8008816:	bd10      	pop	{r4, pc}
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	08020348 	.word	0x08020348

08008824 <arm_rfft_4096_fast_init_f32>:
 8008824:	b160      	cbz	r0, 8008840 <arm_rfft_4096_fast_init_f32+0x1c>
 8008826:	b510      	push	{r4, lr}
 8008828:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800882c:	4604      	mov	r4, r0
 800882e:	f000 fcd3 	bl	80091d8 <arm_cfft_init_f32>
 8008832:	b920      	cbnz	r0, 800883e <arm_rfft_4096_fast_init_f32+0x1a>
 8008834:	4b04      	ldr	r3, [pc, #16]	@ (8008848 <arm_rfft_4096_fast_init_f32+0x24>)
 8008836:	6163      	str	r3, [r4, #20]
 8008838:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800883c:	8222      	strh	r2, [r4, #16]
 800883e:	bd10      	pop	{r4, pc}
 8008840:	f04f 30ff 	mov.w	r0, #4294967295
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	080227c8 	.word	0x080227c8

0800884c <arm_rfft_fast_init_f32>:
 800884c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008850:	d024      	beq.n	800889c <arm_rfft_fast_init_f32+0x50>
 8008852:	d807      	bhi.n	8008864 <arm_rfft_fast_init_f32+0x18>
 8008854:	2980      	cmp	r1, #128	@ 0x80
 8008856:	d01c      	beq.n	8008892 <arm_rfft_fast_init_f32+0x46>
 8008858:	d90c      	bls.n	8008874 <arm_rfft_fast_init_f32+0x28>
 800885a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800885e:	d11a      	bne.n	8008896 <arm_rfft_fast_init_f32+0x4a>
 8008860:	4b0f      	ldr	r3, [pc, #60]	@ (80088a0 <arm_rfft_fast_init_f32+0x54>)
 8008862:	4718      	bx	r3
 8008864:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8008868:	d011      	beq.n	800888e <arm_rfft_fast_init_f32+0x42>
 800886a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800886e:	d107      	bne.n	8008880 <arm_rfft_fast_init_f32+0x34>
 8008870:	4b0c      	ldr	r3, [pc, #48]	@ (80088a4 <arm_rfft_fast_init_f32+0x58>)
 8008872:	4718      	bx	r3
 8008874:	2920      	cmp	r1, #32
 8008876:	d008      	beq.n	800888a <arm_rfft_fast_init_f32+0x3e>
 8008878:	2940      	cmp	r1, #64	@ 0x40
 800887a:	d10c      	bne.n	8008896 <arm_rfft_fast_init_f32+0x4a>
 800887c:	4b0a      	ldr	r3, [pc, #40]	@ (80088a8 <arm_rfft_fast_init_f32+0x5c>)
 800887e:	e7f0      	b.n	8008862 <arm_rfft_fast_init_f32+0x16>
 8008880:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008884:	d107      	bne.n	8008896 <arm_rfft_fast_init_f32+0x4a>
 8008886:	4b09      	ldr	r3, [pc, #36]	@ (80088ac <arm_rfft_fast_init_f32+0x60>)
 8008888:	e7eb      	b.n	8008862 <arm_rfft_fast_init_f32+0x16>
 800888a:	4b09      	ldr	r3, [pc, #36]	@ (80088b0 <arm_rfft_fast_init_f32+0x64>)
 800888c:	e7e9      	b.n	8008862 <arm_rfft_fast_init_f32+0x16>
 800888e:	4b09      	ldr	r3, [pc, #36]	@ (80088b4 <arm_rfft_fast_init_f32+0x68>)
 8008890:	e7e7      	b.n	8008862 <arm_rfft_fast_init_f32+0x16>
 8008892:	4b09      	ldr	r3, [pc, #36]	@ (80088b8 <arm_rfft_fast_init_f32+0x6c>)
 8008894:	e7e5      	b.n	8008862 <arm_rfft_fast_init_f32+0x16>
 8008896:	f04f 30ff 	mov.w	r0, #4294967295
 800889a:	4770      	bx	lr
 800889c:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <arm_rfft_fast_init_f32+0x70>)
 800889e:	e7e0      	b.n	8008862 <arm_rfft_fast_init_f32+0x16>
 80088a0:	08008789 	.word	0x08008789
 80088a4:	08008825 	.word	0x08008825
 80088a8:	08008741 	.word	0x08008741
 80088ac:	080087d5 	.word	0x080087d5
 80088b0:	0800871d 	.word	0x0800871d
 80088b4:	080087fd 	.word	0x080087fd
 80088b8:	08008765 	.word	0x08008765
 80088bc:	080087ad 	.word	0x080087ad

080088c0 <stage_rfft_f32>:
 80088c0:	b410      	push	{r4}
 80088c2:	edd1 7a00 	vldr	s15, [r1]
 80088c6:	ed91 7a01 	vldr	s14, [r1, #4]
 80088ca:	8804      	ldrh	r4, [r0, #0]
 80088cc:	6940      	ldr	r0, [r0, #20]
 80088ce:	ee37 7a07 	vadd.f32	s14, s14, s14
 80088d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80088d6:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80088da:	ee77 6a87 	vadd.f32	s13, s15, s14
 80088de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80088e2:	3c01      	subs	r4, #1
 80088e4:	ee26 7a84 	vmul.f32	s14, s13, s8
 80088e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80088ec:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80088f0:	ed82 7a00 	vstr	s14, [r2]
 80088f4:	edc2 7a01 	vstr	s15, [r2, #4]
 80088f8:	3010      	adds	r0, #16
 80088fa:	3210      	adds	r2, #16
 80088fc:	3b08      	subs	r3, #8
 80088fe:	3110      	adds	r1, #16
 8008900:	ed11 5a02 	vldr	s10, [r1, #-8]
 8008904:	ed93 7a02 	vldr	s14, [r3, #8]
 8008908:	ed50 6a02 	vldr	s13, [r0, #-8]
 800890c:	edd3 4a03 	vldr	s9, [r3, #12]
 8008910:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008914:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008918:	ee77 5a45 	vsub.f32	s11, s14, s10
 800891c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008920:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008924:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008928:	ee66 5a25 	vmul.f32	s11, s12, s11
 800892c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008930:	ee37 7a23 	vadd.f32	s14, s14, s7
 8008934:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008938:	ee26 6a05 	vmul.f32	s12, s12, s10
 800893c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008940:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008944:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008948:	ee27 7a04 	vmul.f32	s14, s14, s8
 800894c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008950:	3c01      	subs	r4, #1
 8008952:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008956:	ed42 7a01 	vstr	s15, [r2, #-4]
 800895a:	f1a3 0308 	sub.w	r3, r3, #8
 800895e:	f101 0108 	add.w	r1, r1, #8
 8008962:	f100 0008 	add.w	r0, r0, #8
 8008966:	f102 0208 	add.w	r2, r2, #8
 800896a:	d1c9      	bne.n	8008900 <stage_rfft_f32+0x40>
 800896c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop

08008974 <merge_rfft_f32>:
 8008974:	b410      	push	{r4}
 8008976:	edd1 7a00 	vldr	s15, [r1]
 800897a:	edd1 6a01 	vldr	s13, [r1, #4]
 800897e:	8804      	ldrh	r4, [r0, #0]
 8008980:	6940      	ldr	r0, [r0, #20]
 8008982:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008986:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800898a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800898e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008992:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008996:	3c01      	subs	r4, #1
 8008998:	ed82 7a00 	vstr	s14, [r2]
 800899c:	edc2 7a01 	vstr	s15, [r2, #4]
 80089a0:	b3dc      	cbz	r4, 8008a1a <merge_rfft_f32+0xa6>
 80089a2:	00e3      	lsls	r3, r4, #3
 80089a4:	3b08      	subs	r3, #8
 80089a6:	440b      	add	r3, r1
 80089a8:	3010      	adds	r0, #16
 80089aa:	3210      	adds	r2, #16
 80089ac:	3110      	adds	r1, #16
 80089ae:	ed11 5a02 	vldr	s10, [r1, #-8]
 80089b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80089b6:	ed50 6a02 	vldr	s13, [r0, #-8]
 80089ba:	edd3 4a03 	vldr	s9, [r3, #12]
 80089be:	ed51 7a01 	vldr	s15, [r1, #-4]
 80089c2:	ed10 6a01 	vldr	s12, [r0, #-4]
 80089c6:	ee75 5a47 	vsub.f32	s11, s10, s14
 80089ca:	ee37 7a05 	vadd.f32	s14, s14, s10
 80089ce:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80089d2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80089d6:	ee66 5a25 	vmul.f32	s11, s12, s11
 80089da:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80089de:	ee37 7a63 	vsub.f32	s14, s14, s7
 80089e2:	ee66 6a85 	vmul.f32	s13, s13, s10
 80089e6:	ee26 6a05 	vmul.f32	s12, s12, s10
 80089ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80089ee:	ee37 7a46 	vsub.f32	s14, s14, s12
 80089f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80089fa:	ee67 7a84 	vmul.f32	s15, s15, s8
 80089fe:	3c01      	subs	r4, #1
 8008a00:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008a04:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008a08:	f1a3 0308 	sub.w	r3, r3, #8
 8008a0c:	f101 0108 	add.w	r1, r1, #8
 8008a10:	f100 0008 	add.w	r0, r0, #8
 8008a14:	f102 0208 	add.w	r2, r2, #8
 8008a18:	d1c9      	bne.n	80089ae <merge_rfft_f32+0x3a>
 8008a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <arm_rfft_fast_f32>:
 8008a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a24:	461c      	mov	r4, r3
 8008a26:	4605      	mov	r5, r0
 8008a28:	4616      	mov	r6, r2
 8008a2a:	b14b      	cbz	r3, 8008a40 <arm_rfft_fast_f32+0x20>
 8008a2c:	f7ff ffa2 	bl	8008974 <merge_rfft_f32>
 8008a30:	4622      	mov	r2, r4
 8008a32:	4631      	mov	r1, r6
 8008a34:	4628      	mov	r0, r5
 8008a36:	2301      	movs	r3, #1
 8008a38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3c:	f000 bb34 	b.w	80090a8 <arm_cfft_f32>
 8008a40:	460f      	mov	r7, r1
 8008a42:	461a      	mov	r2, r3
 8008a44:	2301      	movs	r3, #1
 8008a46:	f000 fb2f 	bl	80090a8 <arm_cfft_f32>
 8008a4a:	4632      	mov	r2, r6
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	4628      	mov	r0, r5
 8008a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a54:	f7ff bf34 	b.w	80088c0 <stage_rfft_f32>

08008a58 <arm_cfft_radix8by2_f32>:
 8008a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5c:	ed2d 8b08 	vpush	{d8-d11}
 8008a60:	f8b0 c000 	ldrh.w	ip, [r0]
 8008a64:	6842      	ldr	r2, [r0, #4]
 8008a66:	4607      	mov	r7, r0
 8008a68:	4608      	mov	r0, r1
 8008a6a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8008a6e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8008a72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008a76:	b082      	sub	sp, #8
 8008a78:	f000 80b0 	beq.w	8008bdc <arm_cfft_radix8by2_f32+0x184>
 8008a7c:	008c      	lsls	r4, r1, #2
 8008a7e:	3410      	adds	r4, #16
 8008a80:	f100 0310 	add.w	r3, r0, #16
 8008a84:	1906      	adds	r6, r0, r4
 8008a86:	3210      	adds	r2, #16
 8008a88:	4444      	add	r4, r8
 8008a8a:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8008a8e:	f108 0510 	add.w	r5, r8, #16
 8008a92:	ed15 2a04 	vldr	s4, [r5, #-16]
 8008a96:	ed55 2a03 	vldr	s5, [r5, #-12]
 8008a9a:	ed54 4a04 	vldr	s9, [r4, #-16]
 8008a9e:	ed14 4a03 	vldr	s8, [r4, #-12]
 8008aa2:	ed14 6a02 	vldr	s12, [r4, #-8]
 8008aa6:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008aaa:	ed53 3a04 	vldr	s7, [r3, #-16]
 8008aae:	ed15 0a02 	vldr	s0, [r5, #-8]
 8008ab2:	ed55 0a01 	vldr	s1, [r5, #-4]
 8008ab6:	ed56 6a04 	vldr	s13, [r6, #-16]
 8008aba:	ed16 3a03 	vldr	s6, [r6, #-12]
 8008abe:	ed13 7a03 	vldr	s14, [r3, #-12]
 8008ac2:	ed13 5a02 	vldr	s10, [r3, #-8]
 8008ac6:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008aca:	ed16 1a02 	vldr	s2, [r6, #-8]
 8008ace:	ed56 1a01 	vldr	s3, [r6, #-4]
 8008ad2:	ee73 ba82 	vadd.f32	s23, s7, s4
 8008ad6:	ee37 ba22 	vadd.f32	s22, s14, s5
 8008ada:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8008ade:	ee33 9a04 	vadd.f32	s18, s6, s8
 8008ae2:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8008ae6:	ee75 aa00 	vadd.f32	s21, s10, s0
 8008aea:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8008aee:	ee71 8a06 	vadd.f32	s17, s2, s12
 8008af2:	ed43 ba04 	vstr	s23, [r3, #-16]
 8008af6:	ed03 ba03 	vstr	s22, [r3, #-12]
 8008afa:	ed43 aa02 	vstr	s21, [r3, #-8]
 8008afe:	ed03 aa01 	vstr	s20, [r3, #-4]
 8008b02:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008b06:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008b0a:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008b0e:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008b12:	ee37 7a62 	vsub.f32	s14, s14, s5
 8008b16:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8008b1a:	ee34 4a43 	vsub.f32	s8, s8, s6
 8008b1e:	ed52 6a03 	vldr	s13, [r2, #-12]
 8008b22:	ed12 3a04 	vldr	s6, [r2, #-16]
 8008b26:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8008b2a:	ee27 8a26 	vmul.f32	s16, s14, s13
 8008b2e:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8008b32:	ee23 2a83 	vmul.f32	s4, s7, s6
 8008b36:	ee64 4a83 	vmul.f32	s9, s9, s6
 8008b3a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8008b3e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8008b42:	ee64 6a26 	vmul.f32	s13, s8, s13
 8008b46:	ee24 4a03 	vmul.f32	s8, s8, s6
 8008b4a:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008b4e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008b52:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8008b56:	ee32 3a08 	vadd.f32	s6, s4, s16
 8008b5a:	ed05 7a03 	vstr	s14, [r5, #-12]
 8008b5e:	ed05 3a04 	vstr	s6, [r5, #-16]
 8008b62:	ed04 4a04 	vstr	s8, [r4, #-16]
 8008b66:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008b6a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008b6e:	ee76 6a41 	vsub.f32	s13, s12, s2
 8008b72:	ee35 5a40 	vsub.f32	s10, s10, s0
 8008b76:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8008b7a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008b7e:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008b82:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008b86:	ee66 4a87 	vmul.f32	s9, s13, s14
 8008b8a:	ee25 4a25 	vmul.f32	s8, s10, s11
 8008b8e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008b92:	ee25 5a07 	vmul.f32	s10, s10, s14
 8008b96:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008b9a:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008b9e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008ba2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008ba6:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008baa:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8008bae:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008bb2:	3310      	adds	r3, #16
 8008bb4:	4563      	cmp	r3, ip
 8008bb6:	ed45 5a02 	vstr	s11, [r5, #-8]
 8008bba:	f106 0610 	add.w	r6, r6, #16
 8008bbe:	ed45 7a01 	vstr	s15, [r5, #-4]
 8008bc2:	f102 0210 	add.w	r2, r2, #16
 8008bc6:	ed04 6a02 	vstr	s12, [r4, #-8]
 8008bca:	ed04 7a01 	vstr	s14, [r4, #-4]
 8008bce:	f105 0510 	add.w	r5, r5, #16
 8008bd2:	f104 0410 	add.w	r4, r4, #16
 8008bd6:	f47f af5c 	bne.w	8008a92 <arm_cfft_radix8by2_f32+0x3a>
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	b289      	uxth	r1, r1
 8008bde:	2302      	movs	r3, #2
 8008be0:	9101      	str	r1, [sp, #4]
 8008be2:	f000 fb4b 	bl	800927c <arm_radix8_butterfly_f32>
 8008be6:	9901      	ldr	r1, [sp, #4]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	4640      	mov	r0, r8
 8008bec:	2302      	movs	r3, #2
 8008bee:	b002      	add	sp, #8
 8008bf0:	ecbd 8b08 	vpop	{d8-d11}
 8008bf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf8:	f000 bb40 	b.w	800927c <arm_radix8_butterfly_f32>

08008bfc <arm_cfft_radix8by4_f32>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	ed2d 8b0a 	vpush	{d8-d12}
 8008c04:	8803      	ldrh	r3, [r0, #0]
 8008c06:	6842      	ldr	r2, [r0, #4]
 8008c08:	b08d      	sub	sp, #52	@ 0x34
 8008c0a:	085b      	lsrs	r3, r3, #1
 8008c0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c0e:	4608      	mov	r0, r1
 8008c10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c14:	edd1 5a00 	vldr	s11, [r1]
 8008c18:	edd0 7a00 	vldr	s15, [r0]
 8008c1c:	edd1 3a01 	vldr	s7, [r1, #4]
 8008c20:	ed90 5a01 	vldr	s10, [r0, #4]
 8008c24:	9108      	str	r1, [sp, #32]
 8008c26:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8008c2a:	ed96 7a00 	vldr	s14, [r6]
 8008c2e:	ed96 4a01 	vldr	s8, [r6, #4]
 8008c32:	9607      	str	r6, [sp, #28]
 8008c34:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8008c38:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8008c3c:	edd8 4a00 	vldr	s9, [r8]
 8008c40:	ed98 3a01 	vldr	s6, [r8, #4]
 8008c44:	ee77 6a06 	vadd.f32	s13, s14, s12
 8008c48:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008c4c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008c50:	4604      	mov	r4, r0
 8008c52:	edc0 6a00 	vstr	s13, [r0]
 8008c56:	edd6 5a01 	vldr	s11, [r6, #4]
 8008c5a:	edd8 2a01 	vldr	s5, [r8, #4]
 8008c5e:	ee75 6a23 	vadd.f32	s13, s10, s7
 8008c62:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008c66:	ee36 6a47 	vsub.f32	s12, s12, s14
 8008c6a:	ee74 3a27 	vadd.f32	s7, s8, s15
 8008c6e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8008c72:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008c76:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8008c7a:	3408      	adds	r4, #8
 8008c7c:	ee35 4a47 	vsub.f32	s8, s10, s14
 8008c80:	460d      	mov	r5, r1
 8008c82:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008c86:	4637      	mov	r7, r6
 8008c88:	9402      	str	r4, [sp, #8]
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	3508      	adds	r5, #8
 8008c90:	0859      	lsrs	r1, r3, #1
 8008c92:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c94:	9706      	str	r7, [sp, #24]
 8008c96:	9505      	str	r5, [sp, #20]
 8008c98:	f102 0708 	add.w	r7, r2, #8
 8008c9c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8008ca0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008ca4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8008ca8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8008cac:	ee77 7a83 	vadd.f32	s15, s15, s6
 8008cb0:	ee34 5a24 	vadd.f32	s10, s8, s9
 8008cb4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008cb8:	3902      	subs	r1, #2
 8008cba:	4645      	mov	r5, r8
 8008cbc:	9701      	str	r7, [sp, #4]
 8008cbe:	f102 0c18 	add.w	ip, r2, #24
 8008cc2:	f102 0710 	add.w	r7, r2, #16
 8008cc6:	3508      	adds	r5, #8
 8008cc8:	0849      	lsrs	r1, r1, #1
 8008cca:	edc0 5a01 	vstr	s11, [r0, #4]
 8008cce:	9703      	str	r7, [sp, #12]
 8008cd0:	edc6 3a00 	vstr	s7, [r6]
 8008cd4:	ed86 5a01 	vstr	s10, [r6, #4]
 8008cd8:	f8cd c000 	str.w	ip, [sp]
 8008cdc:	ed84 6a00 	vstr	s12, [r4]
 8008ce0:	edc4 6a01 	vstr	s13, [r4, #4]
 8008ce4:	9504      	str	r5, [sp, #16]
 8008ce6:	edc8 7a00 	vstr	s15, [r8]
 8008cea:	ed88 7a01 	vstr	s14, [r8, #4]
 8008cee:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008cf0:	f000 8138 	beq.w	8008f64 <arm_cfft_radix8by4_f32+0x368>
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	3b0c      	subs	r3, #12
 8008cf8:	f1a6 0c0c 	sub.w	ip, r6, #12
 8008cfc:	f106 0510 	add.w	r5, r6, #16
 8008d00:	4626      	mov	r6, r4
 8008d02:	46bb      	mov	fp, r7
 8008d04:	f102 0a20 	add.w	sl, r2, #32
 8008d08:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 8008d0c:	f106 0710 	add.w	r7, r6, #16
 8008d10:	4443      	add	r3, r8
 8008d12:	f100 0e10 	add.w	lr, r0, #16
 8008d16:	3c0c      	subs	r4, #12
 8008d18:	f1a8 060c 	sub.w	r6, r8, #12
 8008d1c:	f108 0210 	add.w	r2, r8, #16
 8008d20:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8008d24:	ed57 5a02 	vldr	s11, [r7, #-8]
 8008d28:	ed55 7a02 	vldr	s15, [r5, #-8]
 8008d2c:	ed52 1a02 	vldr	s3, [r2, #-8]
 8008d30:	ed57 6a01 	vldr	s13, [r7, #-4]
 8008d34:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8008d38:	ed12 1a01 	vldr	s2, [r2, #-4]
 8008d3c:	ed15 8a01 	vldr	s16, [r5, #-4]
 8008d40:	ee35 4a25 	vadd.f32	s8, s10, s11
 8008d44:	ee30 6a26 	vadd.f32	s12, s0, s13
 8008d48:	ee37 7a84 	vadd.f32	s14, s15, s8
 8008d4c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008d50:	ee37 7a21 	vadd.f32	s14, s14, s3
 8008d54:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008d58:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8008d5c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8008d60:	ed52 6a01 	vldr	s13, [r2, #-4]
 8008d64:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008d68:	ee78 aa25 	vadd.f32	s21, s16, s11
 8008d6c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008d70:	ee70 3a67 	vsub.f32	s7, s0, s15
 8008d74:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8008d78:	ed96 7a02 	vldr	s14, [r6, #8]
 8008d7c:	ed9c 2a02 	vldr	s4, [ip, #8]
 8008d80:	ed94 ba02 	vldr	s22, [r4, #8]
 8008d84:	edd3 9a02 	vldr	s19, [r3, #8]
 8008d88:	edd6 2a01 	vldr	s5, [r6, #4]
 8008d8c:	ed9c 9a01 	vldr	s18, [ip, #4]
 8008d90:	ed93 5a01 	vldr	s10, [r3, #4]
 8008d94:	edd4 0a01 	vldr	s1, [r4, #4]
 8008d98:	ee72 6a07 	vadd.f32	s13, s4, s14
 8008d9c:	ee32 2a47 	vsub.f32	s4, s4, s14
 8008da0:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8008da4:	ee79 4a22 	vadd.f32	s9, s18, s5
 8008da8:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8008dac:	ee79 2a62 	vsub.f32	s5, s18, s5
 8008db0:	ed8c 7a02 	vstr	s14, [ip, #8]
 8008db4:	ed94 7a01 	vldr	s14, [r4, #4]
 8008db8:	edd3 8a01 	vldr	s17, [r3, #4]
 8008dbc:	ee34 7a87 	vadd.f32	s14, s9, s14
 8008dc0:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8008dc4:	ee37 7a28 	vadd.f32	s14, s14, s17
 8008dc8:	ee32 9a60 	vsub.f32	s18, s4, s1
 8008dcc:	ed8c 7a01 	vstr	s14, [ip, #4]
 8008dd0:	ed1b 7a01 	vldr	s14, [fp, #-4]
 8008dd4:	ed1b aa02 	vldr	s20, [fp, #-8]
 8008dd8:	ee73 8a22 	vadd.f32	s17, s6, s5
 8008ddc:	ee39 9a05 	vadd.f32	s18, s18, s10
 8008de0:	ee7a aac1 	vsub.f32	s21, s21, s2
 8008de4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8008de8:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8008dec:	ee69 ba07 	vmul.f32	s23, s18, s14
 8008df0:	ee6a aa87 	vmul.f32	s21, s21, s14
 8008df4:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8008df8:	ee63 ca87 	vmul.f32	s25, s7, s14
 8008dfc:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8008e00:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8008e04:	ee68 8a87 	vmul.f32	s17, s17, s14
 8008e08:	ee73 3aea 	vsub.f32	s7, s7, s21
 8008e0c:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008e10:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8008e14:	ee3b aaca 	vsub.f32	s20, s23, s20
 8008e18:	ee34 4a67 	vsub.f32	s8, s8, s15
 8008e1c:	ee76 6acb 	vsub.f32	s13, s13, s22
 8008e20:	ee36 6a48 	vsub.f32	s12, s12, s16
 8008e24:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8008e28:	ed05 7a02 	vstr	s14, [r5, #-8]
 8008e2c:	ed45 3a01 	vstr	s7, [r5, #-4]
 8008e30:	edc4 8a01 	vstr	s17, [r4, #4]
 8008e34:	ed84 aa02 	vstr	s20, [r4, #8]
 8008e38:	ed5a 3a04 	vldr	s7, [sl, #-16]
 8008e3c:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8008e40:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8008e44:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8008e48:	ee34 4a61 	vsub.f32	s8, s8, s3
 8008e4c:	ee36 6a41 	vsub.f32	s12, s12, s2
 8008e50:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8008e54:	ee66 9a26 	vmul.f32	s19, s12, s13
 8008e58:	ee24 9a23 	vmul.f32	s18, s8, s7
 8008e5c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8008e60:	ee24 4a26 	vmul.f32	s8, s8, s13
 8008e64:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008e68:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8008e6c:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8008e70:	ee36 6a44 	vsub.f32	s12, s12, s8
 8008e74:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008e78:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8008e7c:	ee79 3a29 	vadd.f32	s7, s18, s19
 8008e80:	ee75 6a60 	vsub.f32	s13, s10, s1
 8008e84:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8008e88:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008e8c:	ed47 3a02 	vstr	s7, [r7, #-8]
 8008e90:	ed07 6a01 	vstr	s12, [r7, #-4]
 8008e94:	ed86 7a01 	vstr	s14, [r6, #4]
 8008e98:	ed86 4a02 	vstr	s8, [r6, #8]
 8008e9c:	ee35 6a81 	vadd.f32	s12, s11, s2
 8008ea0:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8008ea4:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 8008ea8:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 8008eac:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008eb0:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8008eb4:	ee67 2a26 	vmul.f32	s5, s14, s13
 8008eb8:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8008ebc:	ee26 5a25 	vmul.f32	s10, s12, s11
 8008ec0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008ec4:	ee26 6a26 	vmul.f32	s12, s12, s13
 8008ec8:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008ecc:	ee63 6a26 	vmul.f32	s13, s6, s13
 8008ed0:	ee23 3a25 	vmul.f32	s6, s6, s11
 8008ed4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008ed8:	ee75 5a24 	vadd.f32	s11, s10, s9
 8008edc:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8008ee0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008ee4:	3901      	subs	r1, #1
 8008ee6:	ed42 5a02 	vstr	s11, [r2, #-8]
 8008eea:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008eee:	f10e 0e08 	add.w	lr, lr, #8
 8008ef2:	ed83 3a02 	vstr	s6, [r3, #8]
 8008ef6:	ed83 7a01 	vstr	s14, [r3, #4]
 8008efa:	f1ac 0c08 	sub.w	ip, ip, #8
 8008efe:	f10b 0b08 	add.w	fp, fp, #8
 8008f02:	f105 0508 	add.w	r5, r5, #8
 8008f06:	f1a4 0408 	sub.w	r4, r4, #8
 8008f0a:	f10a 0a10 	add.w	sl, sl, #16
 8008f0e:	f107 0708 	add.w	r7, r7, #8
 8008f12:	f1a6 0608 	sub.w	r6, r6, #8
 8008f16:	f109 0918 	add.w	r9, r9, #24
 8008f1a:	f102 0208 	add.w	r2, r2, #8
 8008f1e:	f1a3 0308 	sub.w	r3, r3, #8
 8008f22:	f47f aefd 	bne.w	8008d20 <arm_cfft_radix8by4_f32+0x124>
 8008f26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f28:	9902      	ldr	r1, [sp, #8]
 8008f2a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008f2e:	9102      	str	r1, [sp, #8]
 8008f30:	9901      	ldr	r1, [sp, #4]
 8008f32:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008f36:	9101      	str	r1, [sp, #4]
 8008f38:	9906      	ldr	r1, [sp, #24]
 8008f3a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008f3e:	9106      	str	r1, [sp, #24]
 8008f40:	9903      	ldr	r1, [sp, #12]
 8008f42:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8008f46:	9103      	str	r1, [sp, #12]
 8008f48:	9905      	ldr	r1, [sp, #20]
 8008f4a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008f4e:	9105      	str	r1, [sp, #20]
 8008f50:	9904      	ldr	r1, [sp, #16]
 8008f52:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8008f56:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008f5a:	9204      	str	r2, [sp, #16]
 8008f5c:	9a00      	ldr	r2, [sp, #0]
 8008f5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	9902      	ldr	r1, [sp, #8]
 8008f66:	9d05      	ldr	r5, [sp, #20]
 8008f68:	ed91 4a00 	vldr	s8, [r1]
 8008f6c:	edd5 6a00 	vldr	s13, [r5]
 8008f70:	9b06      	ldr	r3, [sp, #24]
 8008f72:	9c04      	ldr	r4, [sp, #16]
 8008f74:	edd3 7a00 	vldr	s15, [r3]
 8008f78:	ed94 3a00 	vldr	s6, [r4]
 8008f7c:	edd5 4a01 	vldr	s9, [r5, #4]
 8008f80:	edd1 3a01 	vldr	s7, [r1, #4]
 8008f84:	ed94 2a01 	vldr	s4, [r4, #4]
 8008f88:	ed93 7a01 	vldr	s14, [r3, #4]
 8008f8c:	9a01      	ldr	r2, [sp, #4]
 8008f8e:	ee34 6a26 	vadd.f32	s12, s8, s13
 8008f92:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8008f96:	ee37 5a86 	vadd.f32	s10, s15, s12
 8008f9a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008f9e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008fa2:	ee74 6a66 	vsub.f32	s13, s8, s13
 8008fa6:	ed81 5a00 	vstr	s10, [r1]
 8008faa:	ed93 5a01 	vldr	s10, [r3, #4]
 8008fae:	edd4 4a01 	vldr	s9, [r4, #4]
 8008fb2:	ee35 5a85 	vadd.f32	s10, s11, s10
 8008fb6:	ee37 4a26 	vadd.f32	s8, s14, s13
 8008fba:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008fbe:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8008fc2:	ed81 5a01 	vstr	s10, [r1, #4]
 8008fc6:	edd2 1a00 	vldr	s3, [r2]
 8008fca:	edd2 2a01 	vldr	s5, [r2, #4]
 8008fce:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8008fd2:	ee34 5a83 	vadd.f32	s10, s9, s6
 8008fd6:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008fda:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008fde:	ee64 4a21 	vmul.f32	s9, s8, s3
 8008fe2:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008fe6:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008fea:	ee25 5a21 	vmul.f32	s10, s10, s3
 8008fee:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8008ff2:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008ff6:	edc3 2a00 	vstr	s5, [r3]
 8008ffa:	ed83 5a01 	vstr	s10, [r3, #4]
 8008ffe:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009002:	9b03      	ldr	r3, [sp, #12]
 8009004:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009008:	ed93 4a01 	vldr	s8, [r3, #4]
 800900c:	ed93 5a00 	vldr	s10, [r3]
 8009010:	9b00      	ldr	r3, [sp, #0]
 8009012:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8009016:	ee66 4a05 	vmul.f32	s9, s12, s10
 800901a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800901e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009022:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009026:	ee35 6a46 	vsub.f32	s12, s10, s12
 800902a:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800902e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009032:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009036:	ed85 6a01 	vstr	s12, [r5, #4]
 800903a:	edc5 5a00 	vstr	s11, [r5]
 800903e:	edd3 5a01 	vldr	s11, [r3, #4]
 8009042:	edd3 6a00 	vldr	s13, [r3]
 8009046:	ee37 7a02 	vadd.f32	s14, s14, s4
 800904a:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800904e:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009052:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009056:	ee27 7a25 	vmul.f32	s14, s14, s11
 800905a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800905e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009062:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009066:	ed84 7a01 	vstr	s14, [r4, #4]
 800906a:	edc4 7a00 	vstr	s15, [r4]
 800906e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009070:	9100      	str	r1, [sp, #0]
 8009072:	6862      	ldr	r2, [r4, #4]
 8009074:	2304      	movs	r3, #4
 8009076:	f000 f901 	bl	800927c <arm_radix8_butterfly_f32>
 800907a:	9807      	ldr	r0, [sp, #28]
 800907c:	9900      	ldr	r1, [sp, #0]
 800907e:	6862      	ldr	r2, [r4, #4]
 8009080:	2304      	movs	r3, #4
 8009082:	f000 f8fb 	bl	800927c <arm_radix8_butterfly_f32>
 8009086:	9808      	ldr	r0, [sp, #32]
 8009088:	9900      	ldr	r1, [sp, #0]
 800908a:	6862      	ldr	r2, [r4, #4]
 800908c:	2304      	movs	r3, #4
 800908e:	f000 f8f5 	bl	800927c <arm_radix8_butterfly_f32>
 8009092:	9900      	ldr	r1, [sp, #0]
 8009094:	6862      	ldr	r2, [r4, #4]
 8009096:	4640      	mov	r0, r8
 8009098:	2304      	movs	r3, #4
 800909a:	b00d      	add	sp, #52	@ 0x34
 800909c:	ecbd 8b0a 	vpop	{d8-d12}
 80090a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	f000 b8ea 	b.w	800927c <arm_radix8_butterfly_f32>

080090a8 <arm_cfft_f32>:
 80090a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ac:	2a01      	cmp	r2, #1
 80090ae:	8805      	ldrh	r5, [r0, #0]
 80090b0:	4607      	mov	r7, r0
 80090b2:	4690      	mov	r8, r2
 80090b4:	460c      	mov	r4, r1
 80090b6:	4699      	mov	r9, r3
 80090b8:	d05c      	beq.n	8009174 <arm_cfft_f32+0xcc>
 80090ba:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80090be:	d054      	beq.n	800916a <arm_cfft_f32+0xc2>
 80090c0:	d810      	bhi.n	80090e4 <arm_cfft_f32+0x3c>
 80090c2:	2d40      	cmp	r5, #64	@ 0x40
 80090c4:	d015      	beq.n	80090f2 <arm_cfft_f32+0x4a>
 80090c6:	d94c      	bls.n	8009162 <arm_cfft_f32+0xba>
 80090c8:	2d80      	cmp	r5, #128	@ 0x80
 80090ca:	d103      	bne.n	80090d4 <arm_cfft_f32+0x2c>
 80090cc:	4621      	mov	r1, r4
 80090ce:	4638      	mov	r0, r7
 80090d0:	f7ff fcc2 	bl	8008a58 <arm_cfft_radix8by2_f32>
 80090d4:	f1b9 0f00 	cmp.w	r9, #0
 80090d8:	d114      	bne.n	8009104 <arm_cfft_f32+0x5c>
 80090da:	f1b8 0f01 	cmp.w	r8, #1
 80090de:	d019      	beq.n	8009114 <arm_cfft_f32+0x6c>
 80090e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090e4:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80090e8:	d03f      	beq.n	800916a <arm_cfft_f32+0xc2>
 80090ea:	d933      	bls.n	8009154 <arm_cfft_f32+0xac>
 80090ec:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80090f0:	d1f0      	bne.n	80090d4 <arm_cfft_f32+0x2c>
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	2301      	movs	r3, #1
 80090f6:	4629      	mov	r1, r5
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 f8bf 	bl	800927c <arm_radix8_butterfly_f32>
 80090fe:	f1b9 0f00 	cmp.w	r9, #0
 8009102:	d0ea      	beq.n	80090da <arm_cfft_f32+0x32>
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	89b9      	ldrh	r1, [r7, #12]
 8009108:	4620      	mov	r0, r4
 800910a:	f000 f845 	bl	8009198 <arm_bitreversal_32>
 800910e:	f1b8 0f01 	cmp.w	r8, #1
 8009112:	d1e5      	bne.n	80090e0 <arm_cfft_f32+0x38>
 8009114:	ee07 5a90 	vmov	s15, r5
 8009118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009120:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009124:	2d00      	cmp	r5, #0
 8009126:	d0db      	beq.n	80090e0 <arm_cfft_f32+0x38>
 8009128:	f104 0108 	add.w	r1, r4, #8
 800912c:	2300      	movs	r3, #0
 800912e:	3301      	adds	r3, #1
 8009130:	429d      	cmp	r5, r3
 8009132:	f101 0108 	add.w	r1, r1, #8
 8009136:	ed11 7a04 	vldr	s14, [r1, #-16]
 800913a:	ed51 7a03 	vldr	s15, [r1, #-12]
 800913e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009142:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009146:	ed01 7a04 	vstr	s14, [r1, #-16]
 800914a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800914e:	d1ee      	bne.n	800912e <arm_cfft_f32+0x86>
 8009150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009154:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009158:	d0cb      	beq.n	80090f2 <arm_cfft_f32+0x4a>
 800915a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800915e:	d0b5      	beq.n	80090cc <arm_cfft_f32+0x24>
 8009160:	e7b8      	b.n	80090d4 <arm_cfft_f32+0x2c>
 8009162:	2d10      	cmp	r5, #16
 8009164:	d0b2      	beq.n	80090cc <arm_cfft_f32+0x24>
 8009166:	2d20      	cmp	r5, #32
 8009168:	d1b4      	bne.n	80090d4 <arm_cfft_f32+0x2c>
 800916a:	4621      	mov	r1, r4
 800916c:	4638      	mov	r0, r7
 800916e:	f7ff fd45 	bl	8008bfc <arm_cfft_radix8by4_f32>
 8009172:	e7af      	b.n	80090d4 <arm_cfft_f32+0x2c>
 8009174:	b16d      	cbz	r5, 8009192 <arm_cfft_f32+0xea>
 8009176:	310c      	adds	r1, #12
 8009178:	2600      	movs	r6, #0
 800917a:	ed51 7a02 	vldr	s15, [r1, #-8]
 800917e:	3601      	adds	r6, #1
 8009180:	eef1 7a67 	vneg.f32	s15, s15
 8009184:	42b5      	cmp	r5, r6
 8009186:	ed41 7a02 	vstr	s15, [r1, #-8]
 800918a:	f101 0108 	add.w	r1, r1, #8
 800918e:	d1f4      	bne.n	800917a <arm_cfft_f32+0xd2>
 8009190:	e793      	b.n	80090ba <arm_cfft_f32+0x12>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0a4      	beq.n	80090e0 <arm_cfft_f32+0x38>
 8009196:	e7b5      	b.n	8009104 <arm_cfft_f32+0x5c>

08009198 <arm_bitreversal_32>:
 8009198:	b1e9      	cbz	r1, 80091d6 <arm_bitreversal_32+0x3e>
 800919a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919c:	2500      	movs	r5, #0
 800919e:	f102 0e02 	add.w	lr, r2, #2
 80091a2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80091a6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80091aa:	08a4      	lsrs	r4, r4, #2
 80091ac:	089b      	lsrs	r3, r3, #2
 80091ae:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80091b2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80091b6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80091ba:	00a6      	lsls	r6, r4, #2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80091c2:	3304      	adds	r3, #4
 80091c4:	1d34      	adds	r4, r6, #4
 80091c6:	3502      	adds	r5, #2
 80091c8:	58c6      	ldr	r6, [r0, r3]
 80091ca:	5907      	ldr	r7, [r0, r4]
 80091cc:	50c7      	str	r7, [r0, r3]
 80091ce:	428d      	cmp	r5, r1
 80091d0:	5106      	str	r6, [r0, r4]
 80091d2:	d3e6      	bcc.n	80091a2 <arm_bitreversal_32+0xa>
 80091d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091d6:	4770      	bx	lr

080091d8 <arm_cfft_init_f32>:
 80091d8:	4603      	mov	r3, r0
 80091da:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80091de:	f04f 0000 	mov.w	r0, #0
 80091e2:	b410      	push	{r4}
 80091e4:	8019      	strh	r1, [r3, #0]
 80091e6:	6058      	str	r0, [r3, #4]
 80091e8:	d033      	beq.n	8009252 <arm_cfft_init_f32+0x7a>
 80091ea:	d918      	bls.n	800921e <arm_cfft_init_f32+0x46>
 80091ec:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80091f0:	d027      	beq.n	8009242 <arm_cfft_init_f32+0x6a>
 80091f2:	d90c      	bls.n	800920e <arm_cfft_init_f32+0x36>
 80091f4:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80091f8:	d11e      	bne.n	8009238 <arm_cfft_init_f32+0x60>
 80091fa:	4a17      	ldr	r2, [pc, #92]	@ (8009258 <arm_cfft_init_f32+0x80>)
 80091fc:	8994      	ldrh	r4, [r2, #12]
 80091fe:	819c      	strh	r4, [r3, #12]
 8009200:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8009204:	e9c3 2101 	strd	r2, r1, [r3, #4]
 8009208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009212:	d018      	beq.n	8009246 <arm_cfft_init_f32+0x6e>
 8009214:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009218:	d10e      	bne.n	8009238 <arm_cfft_init_f32+0x60>
 800921a:	4a10      	ldr	r2, [pc, #64]	@ (800925c <arm_cfft_init_f32+0x84>)
 800921c:	e7ee      	b.n	80091fc <arm_cfft_init_f32+0x24>
 800921e:	2940      	cmp	r1, #64	@ 0x40
 8009220:	d013      	beq.n	800924a <arm_cfft_init_f32+0x72>
 8009222:	d903      	bls.n	800922c <arm_cfft_init_f32+0x54>
 8009224:	2980      	cmp	r1, #128	@ 0x80
 8009226:	d107      	bne.n	8009238 <arm_cfft_init_f32+0x60>
 8009228:	4a0d      	ldr	r2, [pc, #52]	@ (8009260 <arm_cfft_init_f32+0x88>)
 800922a:	e7e7      	b.n	80091fc <arm_cfft_init_f32+0x24>
 800922c:	2910      	cmp	r1, #16
 800922e:	d00e      	beq.n	800924e <arm_cfft_init_f32+0x76>
 8009230:	2920      	cmp	r1, #32
 8009232:	d101      	bne.n	8009238 <arm_cfft_init_f32+0x60>
 8009234:	4a0b      	ldr	r2, [pc, #44]	@ (8009264 <arm_cfft_init_f32+0x8c>)
 8009236:	e7e1      	b.n	80091fc <arm_cfft_init_f32+0x24>
 8009238:	f04f 30ff 	mov.w	r0, #4294967295
 800923c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	4a09      	ldr	r2, [pc, #36]	@ (8009268 <arm_cfft_init_f32+0x90>)
 8009244:	e7da      	b.n	80091fc <arm_cfft_init_f32+0x24>
 8009246:	4a09      	ldr	r2, [pc, #36]	@ (800926c <arm_cfft_init_f32+0x94>)
 8009248:	e7d8      	b.n	80091fc <arm_cfft_init_f32+0x24>
 800924a:	4a09      	ldr	r2, [pc, #36]	@ (8009270 <arm_cfft_init_f32+0x98>)
 800924c:	e7d6      	b.n	80091fc <arm_cfft_init_f32+0x24>
 800924e:	4a09      	ldr	r2, [pc, #36]	@ (8009274 <arm_cfft_init_f32+0x9c>)
 8009250:	e7d4      	b.n	80091fc <arm_cfft_init_f32+0x24>
 8009252:	4a09      	ldr	r2, [pc, #36]	@ (8009278 <arm_cfft_init_f32+0xa0>)
 8009254:	e7d2      	b.n	80091fc <arm_cfft_init_f32+0x24>
 8009256:	bf00      	nop
 8009258:	08027128 	.word	0x08027128
 800925c:	080270c8 	.word	0x080270c8
 8009260:	080270d8 	.word	0x080270d8
 8009264:	08027118 	.word	0x08027118
 8009268:	080270f8 	.word	0x080270f8
 800926c:	08027138 	.word	0x08027138
 8009270:	08027148 	.word	0x08027148
 8009274:	080270e8 	.word	0x080270e8
 8009278:	08027108 	.word	0x08027108

0800927c <arm_radix8_butterfly_f32>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	ed2d 8b10 	vpush	{d8-d15}
 8009284:	b093      	sub	sp, #76	@ 0x4c
 8009286:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800928a:	4603      	mov	r3, r0
 800928c:	3304      	adds	r3, #4
 800928e:	ed9f bac0 	vldr	s22, [pc, #768]	@ 8009590 <arm_radix8_butterfly_f32+0x314>
 8009292:	9010      	str	r0, [sp, #64]	@ 0x40
 8009294:	468b      	mov	fp, r1
 8009296:	9311      	str	r3, [sp, #68]	@ 0x44
 8009298:	4689      	mov	r9, r1
 800929a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800929c:	ea4f 05db 	mov.w	r5, fp, lsr #3
 80092a0:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80092a4:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 80092a8:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 80092ac:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80092b0:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 80092b4:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 80092b8:	9100      	str	r1, [sp, #0]
 80092ba:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80092be:	f108 0004 	add.w	r0, r8, #4
 80092c2:	f10e 0104 	add.w	r1, lr, #4
 80092c6:	462e      	mov	r6, r5
 80092c8:	4420      	add	r0, r4
 80092ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092ce:	4421      	add	r1, r4
 80092d0:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 80092d4:	960d      	str	r6, [sp, #52]	@ 0x34
 80092d6:	9402      	str	r4, [sp, #8]
 80092d8:	012c      	lsls	r4, r5, #4
 80092da:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 80092de:	9403      	str	r4, [sp, #12]
 80092e0:	00ec      	lsls	r4, r5, #3
 80092e2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80092e4:	9404      	str	r4, [sp, #16]
 80092e6:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 80092ea:	9405      	str	r4, [sp, #20]
 80092ec:	016c      	lsls	r4, r5, #5
 80092ee:	9401      	str	r4, [sp, #4]
 80092f0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80092f2:	9c00      	ldr	r4, [sp, #0]
 80092f4:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 80092f8:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80092fc:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009300:	f04f 0c00 	mov.w	ip, #0
 8009304:	edd6 6a00 	vldr	s13, [r6]
 8009308:	edd7 1a00 	vldr	s3, [r7]
 800930c:	ed15 aa01 	vldr	s20, [r5, #-4]
 8009310:	edd2 5a00 	vldr	s11, [r2]
 8009314:	ed51 9a01 	vldr	s19, [r1, #-4]
 8009318:	ed94 6a00 	vldr	s12, [r4]
 800931c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8009320:	ed93 3a00 	vldr	s6, [r3]
 8009324:	ee39 0a86 	vadd.f32	s0, s19, s12
 8009328:	ee33 2a21 	vadd.f32	s4, s6, s3
 800932c:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009330:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8009334:	ee35 7a02 	vadd.f32	s14, s10, s4
 8009338:	ee34 4a80 	vadd.f32	s8, s9, s0
 800933c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009340:	ee74 6a07 	vadd.f32	s13, s8, s14
 8009344:	ee34 4a47 	vsub.f32	s8, s8, s14
 8009348:	ed45 6a01 	vstr	s13, [r5, #-4]
 800934c:	ed82 4a00 	vstr	s8, [r2]
 8009350:	edd0 6a00 	vldr	s13, [r0]
 8009354:	ed96 9a01 	vldr	s18, [r6, #4]
 8009358:	edd3 2a01 	vldr	s5, [r3, #4]
 800935c:	edd7 8a01 	vldr	s17, [r7, #4]
 8009360:	edd5 0a00 	vldr	s1, [r5]
 8009364:	edd2 3a01 	vldr	s7, [r2, #4]
 8009368:	ed94 8a01 	vldr	s16, [r4, #4]
 800936c:	ed91 7a00 	vldr	s14, [r1]
 8009370:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009374:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8009378:	ee72 aae8 	vsub.f32	s21, s5, s17
 800937c:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8009380:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8009384:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009388:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800938c:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8009390:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8009394:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8009398:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800939c:	ee77 0a08 	vadd.f32	s1, s14, s16
 80093a0:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80093a4:	ee37 7a48 	vsub.f32	s14, s14, s16
 80093a8:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80093ac:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80093b0:	ee76 6a89 	vadd.f32	s13, s13, s18
 80093b4:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80093b8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80093bc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80093c0:	ee35 5a42 	vsub.f32	s10, s10, s4
 80093c4:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80093c8:	ee33 2a20 	vadd.f32	s4, s6, s1
 80093cc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80093d0:	ee33 3a60 	vsub.f32	s6, s6, s1
 80093d4:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80093d8:	ee77 0a01 	vadd.f32	s1, s14, s2
 80093dc:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80093e0:	ee37 7a41 	vsub.f32	s14, s14, s2
 80093e4:	ee73 1a84 	vadd.f32	s3, s7, s8
 80093e8:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80093ec:	ee76 3a27 	vadd.f32	s7, s12, s15
 80093f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80093f4:	ee32 8a00 	vadd.f32	s16, s4, s0
 80093f8:	ee33 1a45 	vsub.f32	s2, s6, s10
 80093fc:	ee32 2a40 	vsub.f32	s4, s4, s0
 8009400:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009404:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8009408:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800940c:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009410:	ee34 6a67 	vsub.f32	s12, s8, s15
 8009414:	ee75 4a87 	vadd.f32	s9, s11, s14
 8009418:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800941c:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8009420:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009424:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8009428:	44dc      	add	ip, fp
 800942a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800942e:	45e1      	cmp	r9, ip
 8009430:	ed85 8a00 	vstr	s16, [r5]
 8009434:	ed82 2a01 	vstr	s4, [r2, #4]
 8009438:	4455      	add	r5, sl
 800943a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800943e:	4452      	add	r2, sl
 8009440:	edc4 6a00 	vstr	s13, [r4]
 8009444:	ed81 1a00 	vstr	s2, [r1]
 8009448:	ed84 5a01 	vstr	s10, [r4, #4]
 800944c:	4451      	add	r1, sl
 800944e:	ed00 3a01 	vstr	s6, [r0, #-4]
 8009452:	4454      	add	r4, sl
 8009454:	edc7 2a00 	vstr	s5, [r7]
 8009458:	edc6 4a00 	vstr	s9, [r6]
 800945c:	ed83 7a00 	vstr	s14, [r3]
 8009460:	edc0 5a00 	vstr	s11, [r0]
 8009464:	edc7 3a01 	vstr	s7, [r7, #4]
 8009468:	4450      	add	r0, sl
 800946a:	ed86 6a01 	vstr	s12, [r6, #4]
 800946e:	4457      	add	r7, sl
 8009470:	edc3 7a01 	vstr	s15, [r3, #4]
 8009474:	4456      	add	r6, sl
 8009476:	4453      	add	r3, sl
 8009478:	f63f af44 	bhi.w	8009304 <arm_radix8_butterfly_f32+0x88>
 800947c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800947e:	2b07      	cmp	r3, #7
 8009480:	f240 81c3 	bls.w	800980a <arm_radix8_butterfly_f32+0x58e>
 8009484:	9805      	ldr	r0, [sp, #20]
 8009486:	9a01      	ldr	r2, [sp, #4]
 8009488:	9b03      	ldr	r3, [sp, #12]
 800948a:	9d04      	ldr	r5, [sp, #16]
 800948c:	9902      	ldr	r1, [sp, #8]
 800948e:	f100 0c08 	add.w	ip, r0, #8
 8009492:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009494:	3208      	adds	r2, #8
 8009496:	1882      	adds	r2, r0, r2
 8009498:	3308      	adds	r3, #8
 800949a:	920a      	str	r2, [sp, #40]	@ 0x28
 800949c:	4602      	mov	r2, r0
 800949e:	18d3      	adds	r3, r2, r3
 80094a0:	3108      	adds	r1, #8
 80094a2:	3508      	adds	r5, #8
 80094a4:	1851      	adds	r1, r2, r1
 80094a6:	9307      	str	r3, [sp, #28]
 80094a8:	4613      	mov	r3, r2
 80094aa:	442a      	add	r2, r5
 80094ac:	9206      	str	r2, [sp, #24]
 80094ae:	461a      	mov	r2, r3
 80094b0:	4462      	add	r2, ip
 80094b2:	f10e 0e0c 	add.w	lr, lr, #12
 80094b6:	9205      	str	r2, [sp, #20]
 80094b8:	461a      	mov	r2, r3
 80094ba:	4472      	add	r2, lr
 80094bc:	f108 0808 	add.w	r8, r8, #8
 80094c0:	330c      	adds	r3, #12
 80094c2:	4440      	add	r0, r8
 80094c4:	f04f 0e00 	mov.w	lr, #0
 80094c8:	9203      	str	r2, [sp, #12]
 80094ca:	9304      	str	r3, [sp, #16]
 80094cc:	465a      	mov	r2, fp
 80094ce:	464b      	mov	r3, r9
 80094d0:	46f3      	mov	fp, lr
 80094d2:	46d1      	mov	r9, sl
 80094d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80094d6:	9108      	str	r1, [sp, #32]
 80094d8:	f04f 0801 	mov.w	r8, #1
 80094dc:	469a      	mov	sl, r3
 80094de:	4696      	mov	lr, r2
 80094e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094e2:	449b      	add	fp, r3
 80094e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80094ea:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 80094ee:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 80094f2:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 80094f6:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 80094fa:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 80094fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8009500:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 8009504:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 8009508:	920b      	str	r2, [sp, #44]	@ 0x2c
 800950a:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 800950e:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 8009512:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 8009516:	9202      	str	r2, [sp, #8]
 8009518:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	edd3 da01 	vldr	s27, [r3, #4]
 8009524:	9b01      	ldr	r3, [sp, #4]
 8009526:	edd0 7a00 	vldr	s15, [r0]
 800952a:	ed93 da01 	vldr	s26, [r3, #4]
 800952e:	9b02      	ldr	r3, [sp, #8]
 8009530:	edcd 7a02 	vstr	s15, [sp, #8]
 8009534:	ed93 ca01 	vldr	s24, [r3, #4]
 8009538:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800953a:	eddc ca01 	vldr	s25, [ip, #4]
 800953e:	edd3 7a00 	vldr	s15, [r3]
 8009542:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009544:	edcd 7a01 	vstr	s15, [sp, #4]
 8009548:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800954c:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8009550:	9200      	str	r2, [sp, #0]
 8009552:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 8009556:	edd3 7a00 	vldr	s15, [r3]
 800955a:	ed92 fa01 	vldr	s30, [r2, #4]
 800955e:	9a00      	ldr	r2, [sp, #0]
 8009560:	edd1 ea01 	vldr	s29, [r1, #4]
 8009564:	ed92 ea01 	vldr	s28, [r2, #4]
 8009568:	edd7 ba00 	vldr	s23, [r7]
 800956c:	edd6 aa00 	vldr	s21, [r6]
 8009570:	ed95 aa00 	vldr	s20, [r5]
 8009574:	edd4 9a00 	vldr	s19, [r4]
 8009578:	edcd 7a00 	vstr	s15, [sp]
 800957c:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8009580:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8009584:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8009588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800958c:	46c4      	mov	ip, r8
 800958e:	e001      	b.n	8009594 <arm_radix8_butterfly_f32+0x318>
 8009590:	3f3504f3 	.word	0x3f3504f3
 8009594:	ed91 6a00 	vldr	s12, [r1]
 8009598:	ed93 5a00 	vldr	s10, [r3]
 800959c:	edd0 fa00 	vldr	s31, [r0]
 80095a0:	edd4 7a00 	vldr	s15, [r4]
 80095a4:	ed95 7a00 	vldr	s14, [r5]
 80095a8:	ed56 3a01 	vldr	s7, [r6, #-4]
 80095ac:	ed17 3a01 	vldr	s6, [r7, #-4]
 80095b0:	ed92 2a00 	vldr	s4, [r2]
 80095b4:	ed96 0a00 	vldr	s0, [r6]
 80095b8:	ee33 8a85 	vadd.f32	s16, s7, s10
 80095bc:	ee32 1a06 	vadd.f32	s2, s4, s12
 80095c0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 80095c4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80095c8:	ee78 1a04 	vadd.f32	s3, s16, s8
 80095cc:	ee71 6a24 	vadd.f32	s13, s2, s9
 80095d0:	ee32 2a46 	vsub.f32	s4, s4, s12
 80095d4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80095d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095dc:	ed06 6a01 	vstr	s12, [r6, #-4]
 80095e0:	edd4 8a01 	vldr	s17, [r4, #4]
 80095e4:	ed92 9a01 	vldr	s18, [r2, #4]
 80095e8:	edd7 0a00 	vldr	s1, [r7]
 80095ec:	edd1 2a01 	vldr	s5, [r1, #4]
 80095f0:	ed95 7a01 	vldr	s14, [r5, #4]
 80095f4:	ed93 6a01 	vldr	s12, [r3, #4]
 80095f8:	edd0 5a01 	vldr	s11, [r0, #4]
 80095fc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009600:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8009604:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009608:	ee78 fac7 	vsub.f32	s31, s17, s14
 800960c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009610:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009614:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009618:	ee79 2a22 	vadd.f32	s5, s18, s5
 800961c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009620:	ee72 7a67 	vsub.f32	s15, s4, s15
 8009624:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009628:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800962c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009630:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8009634:	ee32 1a08 	vadd.f32	s2, s4, s16
 8009638:	ee72 fa87 	vadd.f32	s31, s5, s14
 800963c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8009640:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8009644:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009648:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800964c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8009650:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009654:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8009658:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800965c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009660:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009664:	ee74 0a22 	vadd.f32	s1, s8, s5
 8009668:	ee36 0a28 	vadd.f32	s0, s12, s17
 800966c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009670:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009674:	ee32 4a64 	vsub.f32	s8, s4, s9
 8009678:	ee73 8a09 	vadd.f32	s17, s6, s18
 800967c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8009680:	ee33 9a49 	vsub.f32	s18, s6, s18
 8009684:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8009688:	ee35 3a85 	vadd.f32	s6, s11, s10
 800968c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8009690:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8009694:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009698:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800969c:	ee30 7a68 	vsub.f32	s14, s0, s17
 80096a0:	ee35 8a03 	vadd.f32	s16, s10, s6
 80096a4:	ee38 0a80 	vadd.f32	s0, s17, s0
 80096a8:	ee73 3a82 	vadd.f32	s7, s7, s4
 80096ac:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80096b0:	ed9d 2a00 	vldr	s4, [sp]
 80096b4:	eddd 1a01 	vldr	s3, [sp, #4]
 80096b8:	ee35 5a43 	vsub.f32	s10, s10, s6
 80096bc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80096c0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80096c4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80096c8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80096cc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80096d0:	ee76 5a49 	vsub.f32	s11, s12, s18
 80096d4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80096d8:	ee39 6a06 	vadd.f32	s12, s18, s12
 80096dc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80096e0:	ee21 4a84 	vmul.f32	s8, s3, s8
 80096e4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80096e8:	ee22 7a07 	vmul.f32	s14, s4, s14
 80096ec:	ee22 2a08 	vmul.f32	s4, s4, s16
 80096f0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80096f4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80096f8:	ee31 1a09 	vadd.f32	s2, s2, s18
 80096fc:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8009700:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8009704:	ee74 0a60 	vsub.f32	s1, s8, s1
 8009708:	ee37 7a48 	vsub.f32	s14, s14, s16
 800970c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8009710:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8009714:	ee72 1a21 	vadd.f32	s3, s4, s3
 8009718:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800971c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8009720:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8009724:	ee38 8a04 	vadd.f32	s16, s16, s8
 8009728:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800972c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8009730:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8009734:	eddd 5a02 	vldr	s11, [sp, #8]
 8009738:	edc6 fa00 	vstr	s31, [r6]
 800973c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8009740:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8009744:	ee30 0a45 	vsub.f32	s0, s0, s10
 8009748:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800974c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8009750:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8009754:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8009758:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800975c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8009760:	ee74 4a89 	vadd.f32	s9, s9, s18
 8009764:	ee34 3a43 	vsub.f32	s6, s8, s6
 8009768:	ee78 8a85 	vadd.f32	s17, s17, s10
 800976c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009770:	44f4      	add	ip, lr
 8009772:	45e2      	cmp	sl, ip
 8009774:	edc3 3a00 	vstr	s7, [r3]
 8009778:	edc3 6a01 	vstr	s13, [r3, #4]
 800977c:	444e      	add	r6, r9
 800977e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8009782:	edc7 0a00 	vstr	s1, [r7]
 8009786:	444b      	add	r3, r9
 8009788:	ed80 2a00 	vstr	s4, [r0]
 800978c:	edc0 2a01 	vstr	s5, [r0, #4]
 8009790:	444f      	add	r7, r9
 8009792:	edc2 1a00 	vstr	s3, [r2]
 8009796:	ed82 7a01 	vstr	s14, [r2, #4]
 800979a:	4448      	add	r0, r9
 800979c:	ed85 8a00 	vstr	s16, [r5]
 80097a0:	ed85 0a01 	vstr	s0, [r5, #4]
 80097a4:	444a      	add	r2, r9
 80097a6:	edc1 4a00 	vstr	s9, [r1]
 80097aa:	444d      	add	r5, r9
 80097ac:	ed81 3a01 	vstr	s6, [r1, #4]
 80097b0:	edc4 8a00 	vstr	s17, [r4]
 80097b4:	ed84 6a01 	vstr	s12, [r4, #4]
 80097b8:	4449      	add	r1, r9
 80097ba:	444c      	add	r4, r9
 80097bc:	f63f aeea 	bhi.w	8009594 <arm_radix8_butterfly_f32+0x318>
 80097c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097c2:	3308      	adds	r3, #8
 80097c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80097c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097c8:	3308      	adds	r3, #8
 80097ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80097cc:	9b08      	ldr	r3, [sp, #32]
 80097ce:	3308      	adds	r3, #8
 80097d0:	9308      	str	r3, [sp, #32]
 80097d2:	9b07      	ldr	r3, [sp, #28]
 80097d4:	3308      	adds	r3, #8
 80097d6:	9307      	str	r3, [sp, #28]
 80097d8:	9b06      	ldr	r3, [sp, #24]
 80097da:	3308      	adds	r3, #8
 80097dc:	9306      	str	r3, [sp, #24]
 80097de:	9b05      	ldr	r3, [sp, #20]
 80097e0:	3308      	adds	r3, #8
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	9b04      	ldr	r3, [sp, #16]
 80097e6:	3308      	adds	r3, #8
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	3308      	adds	r3, #8
 80097ee:	9303      	str	r3, [sp, #12]
 80097f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097f2:	f108 0801 	add.w	r8, r8, #1
 80097f6:	4543      	cmp	r3, r8
 80097f8:	f47f ae72 	bne.w	80094e0 <arm_radix8_butterfly_f32+0x264>
 80097fc:	469b      	mov	fp, r3
 80097fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	b29b      	uxth	r3, r3
 8009804:	46d1      	mov	r9, sl
 8009806:	930e      	str	r3, [sp, #56]	@ 0x38
 8009808:	e547      	b.n	800929a <arm_radix8_butterfly_f32+0x1e>
 800980a:	b013      	add	sp, #76	@ 0x4c
 800980c:	ecbd 8b10 	vpop	{d8-d15}
 8009810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009814 <memset>:
 8009814:	4402      	add	r2, r0
 8009816:	4603      	mov	r3, r0
 8009818:	4293      	cmp	r3, r2
 800981a:	d100      	bne.n	800981e <memset+0xa>
 800981c:	4770      	bx	lr
 800981e:	f803 1b01 	strb.w	r1, [r3], #1
 8009822:	e7f9      	b.n	8009818 <memset+0x4>

08009824 <_reclaim_reent>:
 8009824:	4b29      	ldr	r3, [pc, #164]	@ (80098cc <_reclaim_reent+0xa8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4283      	cmp	r3, r0
 800982a:	b570      	push	{r4, r5, r6, lr}
 800982c:	4604      	mov	r4, r0
 800982e:	d04b      	beq.n	80098c8 <_reclaim_reent+0xa4>
 8009830:	69c3      	ldr	r3, [r0, #28]
 8009832:	b1ab      	cbz	r3, 8009860 <_reclaim_reent+0x3c>
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	b16b      	cbz	r3, 8009854 <_reclaim_reent+0x30>
 8009838:	2500      	movs	r5, #0
 800983a:	69e3      	ldr	r3, [r4, #28]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	5959      	ldr	r1, [r3, r5]
 8009840:	2900      	cmp	r1, #0
 8009842:	d13b      	bne.n	80098bc <_reclaim_reent+0x98>
 8009844:	3504      	adds	r5, #4
 8009846:	2d80      	cmp	r5, #128	@ 0x80
 8009848:	d1f7      	bne.n	800983a <_reclaim_reent+0x16>
 800984a:	69e3      	ldr	r3, [r4, #28]
 800984c:	4620      	mov	r0, r4
 800984e:	68d9      	ldr	r1, [r3, #12]
 8009850:	f000 f878 	bl	8009944 <_free_r>
 8009854:	69e3      	ldr	r3, [r4, #28]
 8009856:	6819      	ldr	r1, [r3, #0]
 8009858:	b111      	cbz	r1, 8009860 <_reclaim_reent+0x3c>
 800985a:	4620      	mov	r0, r4
 800985c:	f000 f872 	bl	8009944 <_free_r>
 8009860:	6961      	ldr	r1, [r4, #20]
 8009862:	b111      	cbz	r1, 800986a <_reclaim_reent+0x46>
 8009864:	4620      	mov	r0, r4
 8009866:	f000 f86d 	bl	8009944 <_free_r>
 800986a:	69e1      	ldr	r1, [r4, #28]
 800986c:	b111      	cbz	r1, 8009874 <_reclaim_reent+0x50>
 800986e:	4620      	mov	r0, r4
 8009870:	f000 f868 	bl	8009944 <_free_r>
 8009874:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009876:	b111      	cbz	r1, 800987e <_reclaim_reent+0x5a>
 8009878:	4620      	mov	r0, r4
 800987a:	f000 f863 	bl	8009944 <_free_r>
 800987e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009880:	b111      	cbz	r1, 8009888 <_reclaim_reent+0x64>
 8009882:	4620      	mov	r0, r4
 8009884:	f000 f85e 	bl	8009944 <_free_r>
 8009888:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800988a:	b111      	cbz	r1, 8009892 <_reclaim_reent+0x6e>
 800988c:	4620      	mov	r0, r4
 800988e:	f000 f859 	bl	8009944 <_free_r>
 8009892:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009894:	b111      	cbz	r1, 800989c <_reclaim_reent+0x78>
 8009896:	4620      	mov	r0, r4
 8009898:	f000 f854 	bl	8009944 <_free_r>
 800989c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800989e:	b111      	cbz	r1, 80098a6 <_reclaim_reent+0x82>
 80098a0:	4620      	mov	r0, r4
 80098a2:	f000 f84f 	bl	8009944 <_free_r>
 80098a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80098a8:	b111      	cbz	r1, 80098b0 <_reclaim_reent+0x8c>
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 f84a 	bl	8009944 <_free_r>
 80098b0:	6a23      	ldr	r3, [r4, #32]
 80098b2:	b14b      	cbz	r3, 80098c8 <_reclaim_reent+0xa4>
 80098b4:	4620      	mov	r0, r4
 80098b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098ba:	4718      	bx	r3
 80098bc:	680e      	ldr	r6, [r1, #0]
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 f840 	bl	8009944 <_free_r>
 80098c4:	4631      	mov	r1, r6
 80098c6:	e7bb      	b.n	8009840 <_reclaim_reent+0x1c>
 80098c8:	bd70      	pop	{r4, r5, r6, pc}
 80098ca:	bf00      	nop
 80098cc:	20000014 	.word	0x20000014

080098d0 <__errno>:
 80098d0:	4b01      	ldr	r3, [pc, #4]	@ (80098d8 <__errno+0x8>)
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	20000014 	.word	0x20000014

080098dc <__libc_init_array>:
 80098dc:	b570      	push	{r4, r5, r6, lr}
 80098de:	4d0d      	ldr	r5, [pc, #52]	@ (8009914 <__libc_init_array+0x38>)
 80098e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009918 <__libc_init_array+0x3c>)
 80098e2:	1b64      	subs	r4, r4, r5
 80098e4:	10a4      	asrs	r4, r4, #2
 80098e6:	2600      	movs	r6, #0
 80098e8:	42a6      	cmp	r6, r4
 80098ea:	d109      	bne.n	8009900 <__libc_init_array+0x24>
 80098ec:	4d0b      	ldr	r5, [pc, #44]	@ (800991c <__libc_init_array+0x40>)
 80098ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009920 <__libc_init_array+0x44>)
 80098f0:	f000 f984 	bl	8009bfc <_init>
 80098f4:	1b64      	subs	r4, r4, r5
 80098f6:	10a4      	asrs	r4, r4, #2
 80098f8:	2600      	movs	r6, #0
 80098fa:	42a6      	cmp	r6, r4
 80098fc:	d105      	bne.n	800990a <__libc_init_array+0x2e>
 80098fe:	bd70      	pop	{r4, r5, r6, pc}
 8009900:	f855 3b04 	ldr.w	r3, [r5], #4
 8009904:	4798      	blx	r3
 8009906:	3601      	adds	r6, #1
 8009908:	e7ee      	b.n	80098e8 <__libc_init_array+0xc>
 800990a:	f855 3b04 	ldr.w	r3, [r5], #4
 800990e:	4798      	blx	r3
 8009910:	3601      	adds	r6, #1
 8009912:	e7f2      	b.n	80098fa <__libc_init_array+0x1e>
 8009914:	08027158 	.word	0x08027158
 8009918:	08027158 	.word	0x08027158
 800991c:	08027158 	.word	0x08027158
 8009920:	0802715c 	.word	0x0802715c

08009924 <__retarget_lock_acquire_recursive>:
 8009924:	4770      	bx	lr

08009926 <__retarget_lock_release_recursive>:
 8009926:	4770      	bx	lr

08009928 <memcpy>:
 8009928:	440a      	add	r2, r1
 800992a:	4291      	cmp	r1, r2
 800992c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009930:	d100      	bne.n	8009934 <memcpy+0xc>
 8009932:	4770      	bx	lr
 8009934:	b510      	push	{r4, lr}
 8009936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800993a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800993e:	4291      	cmp	r1, r2
 8009940:	d1f9      	bne.n	8009936 <memcpy+0xe>
 8009942:	bd10      	pop	{r4, pc}

08009944 <_free_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	4605      	mov	r5, r0
 8009948:	2900      	cmp	r1, #0
 800994a:	d041      	beq.n	80099d0 <_free_r+0x8c>
 800994c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009950:	1f0c      	subs	r4, r1, #4
 8009952:	2b00      	cmp	r3, #0
 8009954:	bfb8      	it	lt
 8009956:	18e4      	addlt	r4, r4, r3
 8009958:	f000 f83e 	bl	80099d8 <__malloc_lock>
 800995c:	4a1d      	ldr	r2, [pc, #116]	@ (80099d4 <_free_r+0x90>)
 800995e:	6813      	ldr	r3, [r2, #0]
 8009960:	b933      	cbnz	r3, 8009970 <_free_r+0x2c>
 8009962:	6063      	str	r3, [r4, #4]
 8009964:	6014      	str	r4, [r2, #0]
 8009966:	4628      	mov	r0, r5
 8009968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800996c:	f000 b83a 	b.w	80099e4 <__malloc_unlock>
 8009970:	42a3      	cmp	r3, r4
 8009972:	d908      	bls.n	8009986 <_free_r+0x42>
 8009974:	6820      	ldr	r0, [r4, #0]
 8009976:	1821      	adds	r1, r4, r0
 8009978:	428b      	cmp	r3, r1
 800997a:	bf01      	itttt	eq
 800997c:	6819      	ldreq	r1, [r3, #0]
 800997e:	685b      	ldreq	r3, [r3, #4]
 8009980:	1809      	addeq	r1, r1, r0
 8009982:	6021      	streq	r1, [r4, #0]
 8009984:	e7ed      	b.n	8009962 <_free_r+0x1e>
 8009986:	461a      	mov	r2, r3
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	b10b      	cbz	r3, 8009990 <_free_r+0x4c>
 800998c:	42a3      	cmp	r3, r4
 800998e:	d9fa      	bls.n	8009986 <_free_r+0x42>
 8009990:	6811      	ldr	r1, [r2, #0]
 8009992:	1850      	adds	r0, r2, r1
 8009994:	42a0      	cmp	r0, r4
 8009996:	d10b      	bne.n	80099b0 <_free_r+0x6c>
 8009998:	6820      	ldr	r0, [r4, #0]
 800999a:	4401      	add	r1, r0
 800999c:	1850      	adds	r0, r2, r1
 800999e:	4283      	cmp	r3, r0
 80099a0:	6011      	str	r1, [r2, #0]
 80099a2:	d1e0      	bne.n	8009966 <_free_r+0x22>
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	6053      	str	r3, [r2, #4]
 80099aa:	4408      	add	r0, r1
 80099ac:	6010      	str	r0, [r2, #0]
 80099ae:	e7da      	b.n	8009966 <_free_r+0x22>
 80099b0:	d902      	bls.n	80099b8 <_free_r+0x74>
 80099b2:	230c      	movs	r3, #12
 80099b4:	602b      	str	r3, [r5, #0]
 80099b6:	e7d6      	b.n	8009966 <_free_r+0x22>
 80099b8:	6820      	ldr	r0, [r4, #0]
 80099ba:	1821      	adds	r1, r4, r0
 80099bc:	428b      	cmp	r3, r1
 80099be:	bf04      	itt	eq
 80099c0:	6819      	ldreq	r1, [r3, #0]
 80099c2:	685b      	ldreq	r3, [r3, #4]
 80099c4:	6063      	str	r3, [r4, #4]
 80099c6:	bf04      	itt	eq
 80099c8:	1809      	addeq	r1, r1, r0
 80099ca:	6021      	streq	r1, [r4, #0]
 80099cc:	6054      	str	r4, [r2, #4]
 80099ce:	e7ca      	b.n	8009966 <_free_r+0x22>
 80099d0:	bd38      	pop	{r3, r4, r5, pc}
 80099d2:	bf00      	nop
 80099d4:	20009dd8 	.word	0x20009dd8

080099d8 <__malloc_lock>:
 80099d8:	4801      	ldr	r0, [pc, #4]	@ (80099e0 <__malloc_lock+0x8>)
 80099da:	f7ff bfa3 	b.w	8009924 <__retarget_lock_acquire_recursive>
 80099de:	bf00      	nop
 80099e0:	20009dd4 	.word	0x20009dd4

080099e4 <__malloc_unlock>:
 80099e4:	4801      	ldr	r0, [pc, #4]	@ (80099ec <__malloc_unlock+0x8>)
 80099e6:	f7ff bf9e 	b.w	8009926 <__retarget_lock_release_recursive>
 80099ea:	bf00      	nop
 80099ec:	20009dd4 	.word	0x20009dd4

080099f0 <sqrt>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	ed2d 8b02 	vpush	{d8}
 80099f6:	ec55 4b10 	vmov	r4, r5, d0
 80099fa:	f000 f825 	bl	8009a48 <__ieee754_sqrt>
 80099fe:	4622      	mov	r2, r4
 8009a00:	462b      	mov	r3, r5
 8009a02:	4620      	mov	r0, r4
 8009a04:	4629      	mov	r1, r5
 8009a06:	eeb0 8a40 	vmov.f32	s16, s0
 8009a0a:	eef0 8a60 	vmov.f32	s17, s1
 8009a0e:	f7f7 f83d 	bl	8000a8c <__aeabi_dcmpun>
 8009a12:	b990      	cbnz	r0, 8009a3a <sqrt+0x4a>
 8009a14:	2200      	movs	r2, #0
 8009a16:	2300      	movs	r3, #0
 8009a18:	4620      	mov	r0, r4
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	f7f7 f80e 	bl	8000a3c <__aeabi_dcmplt>
 8009a20:	b158      	cbz	r0, 8009a3a <sqrt+0x4a>
 8009a22:	f7ff ff55 	bl	80098d0 <__errno>
 8009a26:	2321      	movs	r3, #33	@ 0x21
 8009a28:	6003      	str	r3, [r0, #0]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4610      	mov	r0, r2
 8009a30:	4619      	mov	r1, r3
 8009a32:	f7f6 febb 	bl	80007ac <__aeabi_ddiv>
 8009a36:	ec41 0b18 	vmov	d8, r0, r1
 8009a3a:	eeb0 0a48 	vmov.f32	s0, s16
 8009a3e:	eef0 0a68 	vmov.f32	s1, s17
 8009a42:	ecbd 8b02 	vpop	{d8}
 8009a46:	bd38      	pop	{r3, r4, r5, pc}

08009a48 <__ieee754_sqrt>:
 8009a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	4a68      	ldr	r2, [pc, #416]	@ (8009bf0 <__ieee754_sqrt+0x1a8>)
 8009a4e:	ec55 4b10 	vmov	r4, r5, d0
 8009a52:	43aa      	bics	r2, r5
 8009a54:	462b      	mov	r3, r5
 8009a56:	4621      	mov	r1, r4
 8009a58:	d110      	bne.n	8009a7c <__ieee754_sqrt+0x34>
 8009a5a:	4622      	mov	r2, r4
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fd7a 	bl	8000558 <__aeabi_dmul>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4620      	mov	r0, r4
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f7f6 fbbe 	bl	80001ec <__adddf3>
 8009a70:	4604      	mov	r4, r0
 8009a72:	460d      	mov	r5, r1
 8009a74:	ec45 4b10 	vmov	d0, r4, r5
 8009a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7c:	2d00      	cmp	r5, #0
 8009a7e:	dc0e      	bgt.n	8009a9e <__ieee754_sqrt+0x56>
 8009a80:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009a84:	4322      	orrs	r2, r4
 8009a86:	d0f5      	beq.n	8009a74 <__ieee754_sqrt+0x2c>
 8009a88:	b19d      	cbz	r5, 8009ab2 <__ieee754_sqrt+0x6a>
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	4629      	mov	r1, r5
 8009a90:	f7f6 fbaa 	bl	80001e8 <__aeabi_dsub>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	f7f6 fe88 	bl	80007ac <__aeabi_ddiv>
 8009a9c:	e7e8      	b.n	8009a70 <__ieee754_sqrt+0x28>
 8009a9e:	152a      	asrs	r2, r5, #20
 8009aa0:	d115      	bne.n	8009ace <__ieee754_sqrt+0x86>
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	e009      	b.n	8009aba <__ieee754_sqrt+0x72>
 8009aa6:	0acb      	lsrs	r3, r1, #11
 8009aa8:	3a15      	subs	r2, #21
 8009aaa:	0549      	lsls	r1, r1, #21
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0fa      	beq.n	8009aa6 <__ieee754_sqrt+0x5e>
 8009ab0:	e7f7      	b.n	8009aa2 <__ieee754_sqrt+0x5a>
 8009ab2:	462a      	mov	r2, r5
 8009ab4:	e7fa      	b.n	8009aac <__ieee754_sqrt+0x64>
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	3001      	adds	r0, #1
 8009aba:	02dc      	lsls	r4, r3, #11
 8009abc:	d5fb      	bpl.n	8009ab6 <__ieee754_sqrt+0x6e>
 8009abe:	1e44      	subs	r4, r0, #1
 8009ac0:	1b12      	subs	r2, r2, r4
 8009ac2:	f1c0 0420 	rsb	r4, r0, #32
 8009ac6:	fa21 f404 	lsr.w	r4, r1, r4
 8009aca:	4323      	orrs	r3, r4
 8009acc:	4081      	lsls	r1, r0
 8009ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ad2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ada:	07d2      	lsls	r2, r2, #31
 8009adc:	bf5c      	itt	pl
 8009ade:	005b      	lslpl	r3, r3, #1
 8009ae0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ae8:	bf58      	it	pl
 8009aea:	0049      	lslpl	r1, r1, #1
 8009aec:	2600      	movs	r6, #0
 8009aee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009af2:	106d      	asrs	r5, r5, #1
 8009af4:	0049      	lsls	r1, r1, #1
 8009af6:	2016      	movs	r0, #22
 8009af8:	4632      	mov	r2, r6
 8009afa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009afe:	1917      	adds	r7, r2, r4
 8009b00:	429f      	cmp	r7, r3
 8009b02:	bfde      	ittt	le
 8009b04:	193a      	addle	r2, r7, r4
 8009b06:	1bdb      	suble	r3, r3, r7
 8009b08:	1936      	addle	r6, r6, r4
 8009b0a:	0fcf      	lsrs	r7, r1, #31
 8009b0c:	3801      	subs	r0, #1
 8009b0e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009b12:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009b1a:	d1f0      	bne.n	8009afe <__ieee754_sqrt+0xb6>
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	2720      	movs	r7, #32
 8009b20:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009b24:	429a      	cmp	r2, r3
 8009b26:	eb00 0e0c 	add.w	lr, r0, ip
 8009b2a:	db02      	blt.n	8009b32 <__ieee754_sqrt+0xea>
 8009b2c:	d113      	bne.n	8009b56 <__ieee754_sqrt+0x10e>
 8009b2e:	458e      	cmp	lr, r1
 8009b30:	d811      	bhi.n	8009b56 <__ieee754_sqrt+0x10e>
 8009b32:	f1be 0f00 	cmp.w	lr, #0
 8009b36:	eb0e 000c 	add.w	r0, lr, ip
 8009b3a:	da42      	bge.n	8009bc2 <__ieee754_sqrt+0x17a>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	db40      	blt.n	8009bc2 <__ieee754_sqrt+0x17a>
 8009b40:	f102 0801 	add.w	r8, r2, #1
 8009b44:	1a9b      	subs	r3, r3, r2
 8009b46:	458e      	cmp	lr, r1
 8009b48:	bf88      	it	hi
 8009b4a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009b4e:	eba1 010e 	sub.w	r1, r1, lr
 8009b52:	4464      	add	r4, ip
 8009b54:	4642      	mov	r2, r8
 8009b56:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009b5a:	3f01      	subs	r7, #1
 8009b5c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009b60:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b64:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009b68:	d1dc      	bne.n	8009b24 <__ieee754_sqrt+0xdc>
 8009b6a:	4319      	orrs	r1, r3
 8009b6c:	d01b      	beq.n	8009ba6 <__ieee754_sqrt+0x15e>
 8009b6e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009bf4 <__ieee754_sqrt+0x1ac>
 8009b72:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009bf8 <__ieee754_sqrt+0x1b0>
 8009b76:	e9da 0100 	ldrd	r0, r1, [sl]
 8009b7a:	e9db 2300 	ldrd	r2, r3, [fp]
 8009b7e:	f7f6 fb33 	bl	80001e8 <__aeabi_dsub>
 8009b82:	e9da 8900 	ldrd	r8, r9, [sl]
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	f7f6 ff5f 	bl	8000a50 <__aeabi_dcmple>
 8009b92:	b140      	cbz	r0, 8009ba6 <__ieee754_sqrt+0x15e>
 8009b94:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009b98:	e9da 0100 	ldrd	r0, r1, [sl]
 8009b9c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009ba0:	d111      	bne.n	8009bc6 <__ieee754_sqrt+0x17e>
 8009ba2:	3601      	adds	r6, #1
 8009ba4:	463c      	mov	r4, r7
 8009ba6:	1072      	asrs	r2, r6, #1
 8009ba8:	0863      	lsrs	r3, r4, #1
 8009baa:	07f1      	lsls	r1, r6, #31
 8009bac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009bb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009bb4:	bf48      	it	mi
 8009bb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009bba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	e756      	b.n	8009a70 <__ieee754_sqrt+0x28>
 8009bc2:	4690      	mov	r8, r2
 8009bc4:	e7be      	b.n	8009b44 <__ieee754_sqrt+0xfc>
 8009bc6:	f7f6 fb11 	bl	80001ec <__adddf3>
 8009bca:	e9da 8900 	ldrd	r8, r9, [sl]
 8009bce:	4602      	mov	r2, r0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4640      	mov	r0, r8
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	f7f6 ff31 	bl	8000a3c <__aeabi_dcmplt>
 8009bda:	b120      	cbz	r0, 8009be6 <__ieee754_sqrt+0x19e>
 8009bdc:	1ca0      	adds	r0, r4, #2
 8009bde:	bf08      	it	eq
 8009be0:	3601      	addeq	r6, #1
 8009be2:	3402      	adds	r4, #2
 8009be4:	e7df      	b.n	8009ba6 <__ieee754_sqrt+0x15e>
 8009be6:	1c63      	adds	r3, r4, #1
 8009be8:	f023 0401 	bic.w	r4, r3, #1
 8009bec:	e7db      	b.n	8009ba6 <__ieee754_sqrt+0x15e>
 8009bee:	bf00      	nop
 8009bf0:	7ff00000 	.word	0x7ff00000
 8009bf4:	20000070 	.word	0x20000070
 8009bf8:	20000068 	.word	0x20000068

08009bfc <_init>:
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	bf00      	nop
 8009c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c02:	bc08      	pop	{r3}
 8009c04:	469e      	mov	lr, r3
 8009c06:	4770      	bx	lr

08009c08 <_fini>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	bf00      	nop
 8009c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0e:	bc08      	pop	{r3}
 8009c10:	469e      	mov	lr, r3
 8009c12:	4770      	bx	lr
