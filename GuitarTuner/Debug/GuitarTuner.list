
GuitarTuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d510  08008f3c  08008f3c  00009f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802644c  0802644c  00028064  2**0
                  CONTENTS
  4 .ARM          00000000  0802644c  0802644c  00028064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802644c  0802644c  00028064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802644c  0802644c  0002744c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026450  08026450  00027450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08026454  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00028064  2**0
                  CONTENTS
 10 .bss          00007d60  20000064  20000064  00028064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20007dc4  20007dc4  00028064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00028064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029994  00000000  00000000  00028094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004aea  00000000  00000000  00051a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d0  00000000  00000000  00056518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118b  00000000  00000000  00057ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000407c  00000000  00000000  00058e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f48b  00000000  00000000  0005ceef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0188  00000000  00000000  0007c37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0015c502  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065bc  00000000  00000000  0015c5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00162b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002fbb  00000000  00000000  00162be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000d0  00000000  00000000  00165b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f24 	.word	0x08008f24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08008f24 	.word	0x08008f24

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fcfa 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f836 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f9c2 	bl	8000574 <MX_GPIO_Init>
  MX_DMA_Init();
 80001f0:	f000 f9a2 	bl	8000538 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 f970 	bl	80004d8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001f8:	f000 f890 	bl	800031c <MX_ADC1_Init>
  MX_TIM6_Init();
 80001fc:	f000 f900 	bl	8000400 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000200:	f000 f934 	bl	800046c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_LENGTH);
 8000204:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000208:	480c      	ldr	r0, [pc, #48]	@ (800023c <main+0x5c>)
 800020a:	f007 fdbf 	bl	8007d8c <arm_rfft_fast_init_f32>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800020e:	f004 fe49 	bl	8004ea4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DMATask */
  DMATaskHandle = osThreadNew(StartDMATask, NULL, &DMATask_attributes);
 8000212:	4a0b      	ldr	r2, [pc, #44]	@ (8000240 <main+0x60>)
 8000214:	2100      	movs	r1, #0
 8000216:	480b      	ldr	r0, [pc, #44]	@ (8000244 <main+0x64>)
 8000218:	f004 feac 	bl	8004f74 <osThreadNew>
 800021c:	4603      	mov	r3, r0
 800021e:	4a0a      	ldr	r2, [pc, #40]	@ (8000248 <main+0x68>)
 8000220:	6013      	str	r3, [r2, #0]

  /* creation of fftTask */
  fftTaskHandle = osThreadNew(StartfftTaskTask, NULL, &fftTask_attributes);
 8000222:	4a0a      	ldr	r2, [pc, #40]	@ (800024c <main+0x6c>)
 8000224:	2100      	movs	r1, #0
 8000226:	480a      	ldr	r0, [pc, #40]	@ (8000250 <main+0x70>)
 8000228:	f004 fea4 	bl	8004f74 <osThreadNew>
 800022c:	4603      	mov	r3, r0
 800022e:	4a09      	ldr	r2, [pc, #36]	@ (8000254 <main+0x74>)
 8000230:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000232:	f004 fe6b 	bl	8004f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000236:	bf00      	nop
 8000238:	e7fd      	b.n	8000236 <main+0x56>
 800023a:	bf00      	nop
 800023c:	2000623c 	.word	0x2000623c
 8000240:	08008f64 	.word	0x08008f64
 8000244:	08000681 	.word	0x08000681
 8000248:	20000234 	.word	0x20000234
 800024c:	08008f88 	.word	0x08008f88
 8000250:	0800079d 	.word	0x0800079d
 8000254:	20000238 	.word	0x20000238

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b0a6      	sub	sp, #152	@ 0x98
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000262:	2228      	movs	r2, #40	@ 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f008 fd74 	bl	8008d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2258      	movs	r2, #88	@ 0x58
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f008 fd66 	bl	8008d54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000288:	2302      	movs	r3, #2
 800028a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000290:	2310      	movs	r3, #16
 8000292:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 f944 	bl	8002544 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c2:	f000 faa3 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ca:	2302      	movs	r3, #2
 80002cc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002e0:	2102      	movs	r1, #2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 f982 	bl	80035ec <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ee:	f000 fa8d 	bl	800080c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80002f2:	2382      	movs	r3, #130	@ 0x82
 80002f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4618      	mov	r0, r3
 8000304:	f003 fbc4 	bl	8003a90 <HAL_RCCEx_PeriphCLKConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800030e:	f000 fa7d 	bl	800080c <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3798      	adds	r7, #152	@ 0x98
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08a      	sub	sp, #40	@ 0x28
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000322:	f107 031c 	add.w	r3, r7, #28
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
 800033c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800033e:	4b2f      	ldr	r3, [pc, #188]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000340:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000344:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000346:	4b2d      	ldr	r3, [pc, #180]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000348:	2200      	movs	r2, #0
 800034a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800034c:	4b2b      	ldr	r3, [pc, #172]	@ (80003fc <MX_ADC1_Init+0xe0>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000352:	4b2a      	ldr	r3, [pc, #168]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000358:	4b28      	ldr	r3, [pc, #160]	@ (80003fc <MX_ADC1_Init+0xe0>)
 800035a:	2200      	movs	r2, #0
 800035c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035e:	4b27      	ldr	r3, [pc, #156]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000360:	2200      	movs	r2, #0
 8000362:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000366:	4b25      	ldr	r3, [pc, #148]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800036c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800036e:	4b23      	ldr	r3, [pc, #140]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000370:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8000374:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000376:	4b21      	ldr	r3, [pc, #132]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800037c:	4b1f      	ldr	r3, [pc, #124]	@ (80003fc <MX_ADC1_Init+0xe0>)
 800037e:	2201      	movs	r2, #1
 8000380:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000382:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000384:	2201      	movs	r2, #1
 8000386:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800038a:	4b1c      	ldr	r3, [pc, #112]	@ (80003fc <MX_ADC1_Init+0xe0>)
 800038c:	2204      	movs	r2, #4
 800038e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000390:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000392:	2200      	movs	r2, #0
 8000394:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000396:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000398:	2200      	movs	r2, #0
 800039a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800039c:	4817      	ldr	r0, [pc, #92]	@ (80003fc <MX_ADC1_Init+0xe0>)
 800039e:	f000 fc5d 	bl	8000c5c <HAL_ADC_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80003a8:	f000 fa30 	bl	800080c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003b0:	f107 031c 	add.w	r3, r7, #28
 80003b4:	4619      	mov	r1, r3
 80003b6:	4811      	ldr	r0, [pc, #68]	@ (80003fc <MX_ADC1_Init+0xe0>)
 80003b8:	f001 fa50 	bl	800185c <HAL_ADCEx_MultiModeConfigChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80003c2:	f000 fa23 	bl	800080c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ce:	2300      	movs	r3, #0
 80003d0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4806      	ldr	r0, [pc, #24]	@ (80003fc <MX_ADC1_Init+0xe0>)
 80003e4:	f000 ff50 	bl	8001288 <HAL_ADC_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80003ee:	f000 fa0d 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	3728      	adds	r7, #40	@ 0x28
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000080 	.word	0x20000080

08000400 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000412:	4a15      	ldr	r2, [pc, #84]	@ (8000468 <MX_TIM6_Init+0x68>)
 8000414:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000418:	2247      	movs	r2, #71	@ 0x47
 800041a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <MX_TIM6_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 195-1;
 8000422:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000424:	22c2      	movs	r2, #194	@ 0xc2
 8000426:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000428:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_TIM6_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800042e:	480d      	ldr	r0, [pc, #52]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000430:	f003 fd4c 	bl	8003ecc <HAL_TIM_Base_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800043a:	f000 f9e7 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800043e:	2320      	movs	r3, #32
 8000440:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	4619      	mov	r1, r3
 800044a:	4806      	ldr	r0, [pc, #24]	@ (8000464 <MX_TIM6_Init+0x64>)
 800044c:	f004 f842 	bl	80044d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000456:	f000 f9d9 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000114 	.word	0x20000114
 8000468:	40001000 	.word	0x40001000

0800046c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800047c:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <MX_TIM7_Init+0x64>)
 800047e:	4a15      	ldr	r2, [pc, #84]	@ (80004d4 <MX_TIM7_Init+0x68>)
 8000480:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 8000482:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <MX_TIM7_Init+0x64>)
 8000484:	2201      	movs	r2, #1
 8000486:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000488:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <MX_TIM7_Init+0x64>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 36-1;
 800048e:	4b10      	ldr	r3, [pc, #64]	@ (80004d0 <MX_TIM7_Init+0x64>)
 8000490:	2223      	movs	r2, #35	@ 0x23
 8000492:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000494:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <MX_TIM7_Init+0x64>)
 8000496:	2200      	movs	r2, #0
 8000498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800049a:	480d      	ldr	r0, [pc, #52]	@ (80004d0 <MX_TIM7_Init+0x64>)
 800049c:	f003 fd16 	bl	8003ecc <HAL_TIM_Base_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80004a6:	f000 f9b1 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004aa:	2300      	movs	r3, #0
 80004ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4619      	mov	r1, r3
 80004b6:	4806      	ldr	r0, [pc, #24]	@ (80004d0 <MX_TIM7_Init+0x64>)
 80004b8:	f004 f80c 	bl	80044d4 <HAL_TIMEx_MasterConfigSynchronization>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80004c2:	f000 f9a3 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000160 	.word	0x20000160
 80004d4:	40001400 	.word	0x40001400

080004d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004dc:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004de:	4a15      	ldr	r2, [pc, #84]	@ (8000534 <MX_USART2_UART_Init+0x5c>)
 80004e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004e2:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004e4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80004e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ea:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004fe:	220c      	movs	r2, #12
 8000500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000502:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000508:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800050e:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800051a:	4805      	ldr	r0, [pc, #20]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 800051c:	f004 f884 	bl	8004628 <HAL_UART_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000526:	f000 f971 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200001ac 	.word	0x200001ac
 8000534:	40004400 	.word	0x40004400

08000538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <MX_DMA_Init+0x38>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a0b      	ldr	r2, [pc, #44]	@ (8000570 <MX_DMA_Init+0x38>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_DMA_Init+0x38>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2105      	movs	r1, #5
 800055a:	200b      	movs	r0, #11
 800055c:	f001 fc58 	bl	8001e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000560:	200b      	movs	r0, #11
 8000562:	f001 fc71 	bl	8001e48 <HAL_NVIC_EnableIRQ>

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	@ 0x28
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b2b      	ldr	r3, [pc, #172]	@ (8000638 <MX_GPIO_Init+0xc4>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a2a      	ldr	r2, [pc, #168]	@ (8000638 <MX_GPIO_Init+0xc4>)
 8000590:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <MX_GPIO_Init+0xc4>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a24      	ldr	r2, [pc, #144]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a1e      	ldr	r2, [pc, #120]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a18      	ldr	r2, [pc, #96]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trace0_Pin|Trace1_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2160      	movs	r1, #96	@ 0x60
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f2:	f001 ff75 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005fc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	480b      	ldr	r0, [pc, #44]	@ (800063c <MX_GPIO_Init+0xc8>)
 800060e:	f001 fddd 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Trace0_Pin Trace1_Pin */
  GPIO_InitStruct.Pin = Trace0_Pin|Trace1_Pin;
 8000612:	2360      	movs	r3, #96	@ 0x60
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062c:	f001 fdce 	bl	80021cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	@ 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	48000800 	.word	0x48000800

08000640 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Notify the task that the transmission is complete. */
	vTaskNotifyGiveFromISR( DMATaskHandle, pdFALSE );
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fac6 	bl	8006be0 <vTaskNotifyGiveFromISR>
	//HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000234 	.word	0x20000234

08000660 <HAL_ADC_ConvCpltCallback>:
void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Notify the task that the transmission is complete. */
	vTaskNotifyGiveFromISR( DMATaskHandle, pdFALSE );
 8000668:	4b04      	ldr	r3, [pc, #16]	@ (800067c <HAL_ADC_ConvCpltCallback+0x1c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 fab6 	bl	8006be0 <vTaskNotifyGiveFromISR>
	//HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000234 	.word	0x20000234

08000680 <StartDMATask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDMATask */
void StartDMATask(void *argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  static bool sampled_first_half = true;

  uint32_t DMAnotificationValue;

  HAL_ADC_Start_DMA(&hadc1, buffer_adc, ADC_BUFFER_LENGTH);
 8000688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068c:	493b      	ldr	r1, [pc, #236]	@ (800077c <StartDMATask+0xfc>)
 800068e:	483c      	ldr	r0, [pc, #240]	@ (8000780 <StartDMATask+0x100>)
 8000690:	f000 fcde 	bl	8001050 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim6);
 8000694:	483b      	ldr	r0, [pc, #236]	@ (8000784 <StartDMATask+0x104>)
 8000696:	f003 fc71 	bl	8003f7c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 800069a:	483b      	ldr	r0, [pc, #236]	@ (8000788 <StartDMATask+0x108>)
 800069c:	f003 fc6e 	bl	8003f7c <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	  DMAnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	2001      	movs	r0, #1
 80006a6:	f006 f9a1 	bl	80069ec <ulTaskNotifyTake>
 80006aa:	60f8      	str	r0, [r7, #12]

	  if(DMAnotificationValue == 1)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d15d      	bne.n	800076e <StartDMATask+0xee>
	  {
		  HAL_GPIO_WritePin(GPIOA, Trace0_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2120      	movs	r1, #32
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f001 ff11 	bl	80024e0 <HAL_GPIO_WritePin>
		  //prima volta che arrivo qui ma mi sembra un marginal gain dato che
		  //tutte le altre volte che viene qua deve eseguirla. Una FSM, per
		  //quanto elegante sembra un overkill e mi sembra renda il codice più
		  //complesso da leggere e manutenere. Da implementare qualora le
		  //elaborazioni da fare qui risultino più complesse
		  memcpy(fft_buffer, &fft_buffer[PARK_BUFFER_LENGTH], sizeof(float)*PARK_BUFFER_LENGTH);
 80006be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006c2:	4932      	ldr	r1, [pc, #200]	@ (800078c <StartDMATask+0x10c>)
 80006c4:	4832      	ldr	r0, [pc, #200]	@ (8000790 <StartDMATask+0x110>)
 80006c6:	f008 fbc9 	bl	8008e5c <memcpy>

		  if(sampled_first_half)
 80006ca:	4b32      	ldr	r3, [pc, #200]	@ (8000794 <StartDMATask+0x114>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01a      	beq.n	8000708 <StartDMATask+0x88>
		  {
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	e012      	b.n	80006fe <StartDMATask+0x7e>
				  fft_buffer[PARK_BUFFER_LENGTH+i] = (float)buffer_adc[i];
 80006d8:	4a28      	ldr	r2, [pc, #160]	@ (800077c <StartDMATask+0xfc>)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80006e6:	ee07 2a90 	vmov	s15, r2
 80006ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ee:	4a28      	ldr	r2, [pc, #160]	@ (8000790 <StartDMATask+0x110>)
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	edc3 7a00 	vstr	s15, [r3]
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	3301      	adds	r3, #1
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000704:	dbe8      	blt.n	80006d8 <StartDMATask+0x58>
 8000706:	e01b      	b.n	8000740 <StartDMATask+0xc0>
		  }
		  else
		  {
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	e014      	b.n	8000738 <StartDMATask+0xb8>
				  fft_buffer[PARK_BUFFER_LENGTH+i] = (float)buffer_adc[PARK_BUFFER_LENGTH+i];
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000714:	4a19      	ldr	r2, [pc, #100]	@ (800077c <StartDMATask+0xfc>)
 8000716:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000720:	ee07 2a90 	vmov	s15, r2
 8000724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000728:	4a19      	ldr	r2, [pc, #100]	@ (8000790 <StartDMATask+0x110>)
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	edc3 7a00 	vstr	s15, [r3]
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	3301      	adds	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800073e:	dbe6      	blt.n	800070e <StartDMATask+0x8e>
		  }

		  //punto al prossimo inizio del blocco da 1024 elementi in buffer adc
		  sampled_first_half = !sampled_first_half;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <StartDMATask+0x114>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf14      	ite	ne
 8000748:	2301      	movne	r3, #1
 800074a:	2300      	moveq	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f083 0301 	eor.w	r3, r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <StartDMATask+0x114>)
 800075c:	701a      	strb	r2, [r3, #0]

		  xTaskNotifyGive(fftTaskHandle);
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <StartDMATask+0x118>)
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	2300      	movs	r3, #0
 8000764:	2202      	movs	r2, #2
 8000766:	2100      	movs	r1, #0
 8000768:	f006 f98c 	bl	8006a84 <xTaskGenericNotify>
 800076c:	e798      	b.n	80006a0 <StartDMATask+0x20>
	  }
	  else
		  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 800076e:	2140      	movs	r1, #64	@ 0x40
 8000770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000774:	f001 fecc 	bl	8002510 <HAL_GPIO_TogglePin>
	  DMAnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000778:	e792      	b.n	80006a0 <StartDMATask+0x20>
 800077a:	bf00      	nop
 800077c:	2000023c 	.word	0x2000023c
 8000780:	20000080 	.word	0x20000080
 8000784:	20000114 	.word	0x20000114
 8000788:	20000160 	.word	0x20000160
 800078c:	2000323c 	.word	0x2000323c
 8000790:	2000223c 	.word	0x2000223c
 8000794:	20000000 	.word	0x20000000
 8000798:	20000238 	.word	0x20000238

0800079c <StartfftTaskTask>:
#define INITIALIZATION		0U
#define FIRST_HALF			1U
#define SECOND_HALF			2U

void StartfftTaskTask(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartfftTaskTask */
  uint32_t fftnotificationValue;
  /* Infinite loop */
  for(;;)
  {
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295
 80007a8:	2001      	movs	r0, #1
 80007aa:	f006 f91f 	bl	80069ec <ulTaskNotifyTake>
 80007ae:	60f8      	str	r0, [r7, #12]

	  if(fftnotificationValue == 1)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d10c      	bne.n	80007d0 <StartfftTaskTask+0x34>
	  {
		  HAL_GPIO_WritePin(GPIOA, Trace0_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007be:	f001 fe8f 	bl	80024e0 <HAL_GPIO_WritePin>

		  //eseguire la fft
		  arm_rfft_fast_f32(&fftHandler, fft_buffer, fft_buffer_result, 0);
 80007c2:	2300      	movs	r3, #0
 80007c4:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <StartfftTaskTask+0x40>)
 80007c6:	4906      	ldr	r1, [pc, #24]	@ (80007e0 <StartfftTaskTask+0x44>)
 80007c8:	4806      	ldr	r0, [pc, #24]	@ (80007e4 <StartfftTaskTask+0x48>)
 80007ca:	f007 fbc9 	bl	8007f60 <arm_rfft_fast_f32>
 80007ce:	e7e9      	b.n	80007a4 <StartfftTaskTask+0x8>
	  }
	  else
		  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 80007d0:	2140      	movs	r1, #64	@ 0x40
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d6:	f001 fe9b 	bl	8002510 <HAL_GPIO_TogglePin>
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80007da:	e7e3      	b.n	80007a4 <StartfftTaskTask+0x8>
 80007dc:	2000423c 	.word	0x2000423c
 80007e0:	2000223c 	.word	0x2000223c
 80007e4:	2000623c 	.word	0x2000623c

080007e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d101      	bne.n	80007fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fa:	f000 fa05 	bl	8000c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40012c00 	.word	0x40012c00

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <Error_Handler+0x8>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <HAL_MspInit+0x4c>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	4a10      	ldr	r2, [pc, #64]	@ (8000864 <HAL_MspInit+0x4c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6193      	str	r3, [r2, #24]
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <HAL_MspInit+0x4c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <HAL_MspInit+0x4c>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <HAL_MspInit+0x4c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	210f      	movs	r1, #15
 8000852:	f06f 0001 	mvn.w	r0, #1
 8000856:	f001 fadb 	bl	8001e10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000888:	d14c      	bne.n	8000924 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800088a:	4b28      	ldr	r3, [pc, #160]	@ (800092c <HAL_ADC_MspInit+0xc4>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a27      	ldr	r2, [pc, #156]	@ (800092c <HAL_ADC_MspInit+0xc4>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <HAL_ADC_MspInit+0xc4>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <HAL_ADC_MspInit+0xc4>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a21      	ldr	r2, [pc, #132]	@ (800092c <HAL_ADC_MspInit+0xc4>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <HAL_ADC_MspInit+0xc4>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ba:	2301      	movs	r3, #1
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008be:	2303      	movs	r3, #3
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d0:	f001 fc7c 	bl	80021cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <HAL_ADC_MspInit+0xc8>)
 80008d6:	4a17      	ldr	r2, [pc, #92]	@ (8000934 <HAL_ADC_MspInit+0xcc>)
 80008d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <HAL_ADC_MspInit+0xc8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <HAL_ADC_MspInit+0xc8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <HAL_ADC_MspInit+0xc8>)
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <HAL_ADC_MspInit+0xc8>)
 80008ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_ADC_MspInit+0xc8>)
 80008f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <HAL_ADC_MspInit+0xc8>)
 80008fe:	2220      	movs	r2, #32
 8000900:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <HAL_ADC_MspInit+0xc8>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000908:	4809      	ldr	r0, [pc, #36]	@ (8000930 <HAL_ADC_MspInit+0xc8>)
 800090a:	f001 faab 	bl	8001e64 <HAL_DMA_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000914:	f7ff ff7a 	bl	800080c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <HAL_ADC_MspInit+0xc8>)
 800091c:	639a      	str	r2, [r3, #56]	@ 0x38
 800091e:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <HAL_ADC_MspInit+0xc8>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	200000d0 	.word	0x200000d0
 8000934:	40020008 	.word	0x40020008

08000938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a13      	ldr	r2, [pc, #76]	@ (8000994 <HAL_TIM_Base_MspInit+0x5c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10c      	bne.n	8000964 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <HAL_TIM_Base_MspInit+0x60>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <HAL_TIM_Base_MspInit+0x60>)
 8000950:	f043 0310 	orr.w	r3, r3, #16
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_TIM_Base_MspInit+0x60>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f003 0310 	and.w	r3, r3, #16
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000962:	e010      	b.n	8000986 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0c      	ldr	r2, [pc, #48]	@ (800099c <HAL_TIM_Base_MspInit+0x64>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d10b      	bne.n	8000986 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <HAL_TIM_Base_MspInit+0x60>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a09      	ldr	r2, [pc, #36]	@ (8000998 <HAL_TIM_Base_MspInit+0x60>)
 8000974:	f043 0320 	orr.w	r3, r3, #32
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <HAL_TIM_Base_MspInit+0x60>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 0320 	and.w	r3, r3, #32
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40001000 	.word	0x40001000
 8000998:	40021000 	.word	0x40021000
 800099c:	40001400 	.word	0x40001400

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <HAL_UART_MspInit+0x7c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d128      	bne.n	8000a14 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <HAL_UART_MspInit+0x80>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a16      	ldr	r2, [pc, #88]	@ (8000a20 <HAL_UART_MspInit+0x80>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <HAL_UART_MspInit+0x80>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <HAL_UART_MspInit+0x80>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a10      	ldr	r2, [pc, #64]	@ (8000a20 <HAL_UART_MspInit+0x80>)
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e4:	6153      	str	r3, [r2, #20]
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HAL_UART_MspInit+0x80>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009f2:	230c      	movs	r3, #12
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a02:	2307      	movs	r3, #7
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a10:	f001 fbdc 	bl	80021cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	@ 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	@ 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a34:	4b2e      	ldr	r3, [pc, #184]	@ (8000af0 <HAL_InitTick+0xcc>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a2d      	ldr	r2, [pc, #180]	@ (8000af0 <HAL_InitTick+0xcc>)
 8000a3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <HAL_InitTick+0xcc>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a4c:	f107 020c 	add.w	r2, r7, #12
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 ffe8 	bl	8003a2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a5c:	f002 ffc4 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
 8000a60:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a64:	4a23      	ldr	r2, [pc, #140]	@ (8000af4 <HAL_InitTick+0xd0>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	0c9b      	lsrs	r3, r3, #18
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a70:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <HAL_InitTick+0xd4>)
 8000a72:	4a22      	ldr	r2, [pc, #136]	@ (8000afc <HAL_InitTick+0xd8>)
 8000a74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a76:	4b20      	ldr	r3, [pc, #128]	@ (8000af8 <HAL_InitTick+0xd4>)
 8000a78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000af8 <HAL_InitTick+0xd4>)
 8000a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <HAL_InitTick+0xd4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <HAL_InitTick+0xd4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <HAL_InitTick+0xd4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a96:	4818      	ldr	r0, [pc, #96]	@ (8000af8 <HAL_InitTick+0xd4>)
 8000a98:	f003 fa18 	bl	8003ecc <HAL_TIM_Base_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d11b      	bne.n	8000ae2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000aaa:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <HAL_InitTick+0xd4>)
 8000aac:	f003 face 	bl	800404c <HAL_TIM_Base_Start_IT>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d111      	bne.n	8000ae2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000abe:	2019      	movs	r0, #25
 8000ac0:	f001 f9c2 	bl	8001e48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b0f      	cmp	r3, #15
 8000ac8:	d808      	bhi.n	8000adc <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000aca:	2200      	movs	r2, #0
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	2019      	movs	r0, #25
 8000ad0:	f001 f99e 	bl	8001e10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <HAL_InitTick+0xdc>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	e002      	b.n	8000ae2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3730      	adds	r7, #48	@ 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	431bde83 	.word	0x431bde83
 8000af8:	20006254 	.word	0x20006254
 8000afc:	40012c00 	.word	0x40012c00
 8000b00:	20000008 	.word	0x20000008

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <NMI_Handler+0x4>

08000b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <DMA1_Channel1_IRQHandler+0x10>)
 8000b42:	f001 fa35 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000d0 	.word	0x200000d0

08000b50 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b56:	f003 fae9 	bl	800412c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20006254 	.word	0x20006254

08000b64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	@ (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff ffea 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	@ (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f008 f92b 	bl	8008e10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fb11 	bl	80001e0 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000bcc:	08026454 	.word	0x08026454
  ldr r2, =_sbss
 8000bd0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000bd4:	20007dc4 	.word	0x20007dc4

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <HAL_Init+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	@ (8000c04 <HAL_Init+0x28>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f001 f904 	bl	8001dfa <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f7ff ff16 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe0e 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2000000c 	.word	0x2000000c
 8000c2c:	200062a0 	.word	0x200062a0

08000c30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c34:	4b03      	ldr	r3, [pc, #12]	@ (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200062a0 	.word	0x200062a0

08000c48 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09a      	sub	sp, #104	@ 0x68
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e1e3      	b.n	8001044 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d176      	bne.n	8000d7c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d152      	bne.n	8000d3c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fdd9 	bl	8000868 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d13b      	bne.n	8000d3c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f000 ff85 	bl	8001bd4 <ADC_Disable>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d12f      	bne.n	8000d3c <HAL_ADC_Init+0xe0>
 8000cdc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12b      	bne.n	8000d3c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cec:	f023 0302 	bic.w	r3, r3, #2
 8000cf0:	f043 0202 	orr.w	r2, r3, #2
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000d06:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000d16:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d18:	4b92      	ldr	r3, [pc, #584]	@ (8000f64 <HAL_ADC_Init+0x308>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a92      	ldr	r2, [pc, #584]	@ (8000f68 <HAL_ADC_Init+0x30c>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	0c9a      	lsrs	r2, r3, #18
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d2e:	e002      	b.n	8000d36 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f9      	bne.n	8000d30 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d007      	beq.n	8000d5a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d58:	d110      	bne.n	8000d7c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	f023 0312 	bic.w	r3, r3, #18
 8000d62:	f043 0210 	orr.w	r2, r3, #16
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	f043 0201 	orr.w	r2, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f040 8150 	bne.w	800102a <HAL_ADC_Init+0x3ce>
 8000d8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 814b 	bne.w	800102a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8143 	bne.w	800102a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000dac:	f043 0202 	orr.w	r2, r3, #2
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dbc:	d004      	beq.n	8000dc8 <HAL_ADC_Init+0x16c>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8000f6c <HAL_ADC_Init+0x310>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d101      	bne.n	8000dcc <HAL_ADC_Init+0x170>
 8000dc8:	4b69      	ldr	r3, [pc, #420]	@ (8000f70 <HAL_ADC_Init+0x314>)
 8000dca:	e000      	b.n	8000dce <HAL_ADC_Init+0x172>
 8000dcc:	4b69      	ldr	r3, [pc, #420]	@ (8000f74 <HAL_ADC_Init+0x318>)
 8000dce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dd8:	d102      	bne.n	8000de0 <HAL_ADC_Init+0x184>
 8000dda:	4b64      	ldr	r3, [pc, #400]	@ (8000f6c <HAL_ADC_Init+0x310>)
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e01a      	b.n	8000e16 <HAL_ADC_Init+0x1ba>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a61      	ldr	r2, [pc, #388]	@ (8000f6c <HAL_ADC_Init+0x310>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d103      	bne.n	8000df2 <HAL_ADC_Init+0x196>
 8000dea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e011      	b.n	8000e16 <HAL_ADC_Init+0x1ba>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a60      	ldr	r2, [pc, #384]	@ (8000f78 <HAL_ADC_Init+0x31c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d102      	bne.n	8000e02 <HAL_ADC_Init+0x1a6>
 8000dfc:	4b5f      	ldr	r3, [pc, #380]	@ (8000f7c <HAL_ADC_Init+0x320>)
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e009      	b.n	8000e16 <HAL_ADC_Init+0x1ba>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a5d      	ldr	r2, [pc, #372]	@ (8000f7c <HAL_ADC_Init+0x320>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d102      	bne.n	8000e12 <HAL_ADC_Init+0x1b6>
 8000e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8000f78 <HAL_ADC_Init+0x31c>)
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e001      	b.n	8000e16 <HAL_ADC_Init+0x1ba>
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d108      	bne.n	8000e36 <HAL_ADC_Init+0x1da>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d101      	bne.n	8000e36 <HAL_ADC_Init+0x1da>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e36:	2300      	movs	r3, #0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d11c      	bne.n	8000e76 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d010      	beq.n	8000e64 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d107      	bne.n	8000e5e <HAL_ADC_Init+0x202>
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <HAL_ADC_Init+0x202>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <HAL_ADC_Init+0x204>
 8000e5e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d108      	bne.n	8000e76 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	431a      	orrs	r2, r3
 8000e72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e74:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7e5b      	ldrb	r3, [r3, #25]
 8000e7a:	035b      	lsls	r3, r3, #13
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000e80:	2a01      	cmp	r2, #1
 8000e82:	d002      	beq.n	8000e8a <HAL_ADC_Init+0x22e>
 8000e84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e88:	e000      	b.n	8000e8c <HAL_ADC_Init+0x230>
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d11b      	bne.n	8000ee2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7e5b      	ldrb	r3, [r3, #25]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d109      	bne.n	8000ec6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	045a      	lsls	r2, r3, #17
 8000eba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec2:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ec4:	e00d      	b.n	8000ee2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000ece:	f043 0220 	orr.w	r2, r3, #32
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eda:	f043 0201 	orr.w	r2, r3, #1
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d054      	beq.n	8000f94 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a22      	ldr	r2, [pc, #136]	@ (8000f78 <HAL_ADC_Init+0x31c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d004      	beq.n	8000efe <HAL_ADC_Init+0x2a2>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a20      	ldr	r2, [pc, #128]	@ (8000f7c <HAL_ADC_Init+0x320>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d140      	bne.n	8000f80 <HAL_ADC_Init+0x324>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f02:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000f06:	d02a      	beq.n	8000f5e <HAL_ADC_Init+0x302>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f10:	d022      	beq.n	8000f58 <HAL_ADC_Init+0x2fc>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f16:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000f1a:	d01a      	beq.n	8000f52 <HAL_ADC_Init+0x2f6>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f20:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000f24:	d012      	beq.n	8000f4c <HAL_ADC_Init+0x2f0>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000f2e:	d00a      	beq.n	8000f46 <HAL_ADC_Init+0x2ea>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f34:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000f38:	d002      	beq.n	8000f40 <HAL_ADC_Init+0x2e4>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f3e:	e023      	b.n	8000f88 <HAL_ADC_Init+0x32c>
 8000f40:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f44:	e020      	b.n	8000f88 <HAL_ADC_Init+0x32c>
 8000f46:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000f4a:	e01d      	b.n	8000f88 <HAL_ADC_Init+0x32c>
 8000f4c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000f50:	e01a      	b.n	8000f88 <HAL_ADC_Init+0x32c>
 8000f52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f56:	e017      	b.n	8000f88 <HAL_ADC_Init+0x32c>
 8000f58:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000f5c:	e014      	b.n	8000f88 <HAL_ADC_Init+0x32c>
 8000f5e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000f62:	e011      	b.n	8000f88 <HAL_ADC_Init+0x32c>
 8000f64:	20000004 	.word	0x20000004
 8000f68:	431bde83 	.word	0x431bde83
 8000f6c:	50000100 	.word	0x50000100
 8000f70:	50000300 	.word	0x50000300
 8000f74:	50000700 	.word	0x50000700
 8000f78:	50000400 	.word	0x50000400
 8000f7c:	50000500 	.word	0x50000500
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f90:	4313      	orrs	r3, r2
 8000f92:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d114      	bne.n	8000fcc <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fb0:	f023 0302 	bic.w	r3, r3, #2
 8000fb4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7e1b      	ldrb	r3, [r3, #24]
 8000fba:	039a      	lsls	r2, r3, #14
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <HAL_ADC_Init+0x3f0>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d10c      	bne.n	8001002 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f023 010f 	bic.w	r1, r3, #15
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001000:	e007      	b.n	8001012 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 020f 	bic.w	r2, r2, #15
 8001010:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	f023 0303 	bic.w	r3, r3, #3
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	641a      	str	r2, [r3, #64]	@ 0x40
 8001028:	e00a      	b.n	8001040 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	f023 0312 	bic.w	r3, r3, #18
 8001032:	f043 0210 	orr.w	r2, r3, #16
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800103a:	2301      	movs	r3, #1
 800103c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001040:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001044:	4618      	mov	r0, r3
 8001046:	3768      	adds	r7, #104	@ 0x68
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	fff0c007 	.word	0xfff0c007

08001050 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	2b00      	cmp	r3, #0
 800106c:	f040 80f7 	bne.w	800125e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_ADC_Start_DMA+0x2e>
 800107a:	2302      	movs	r3, #2
 800107c:	e0f2      	b.n	8001264 <HAL_ADC_Start_DMA+0x214>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800108e:	d004      	beq.n	800109a <HAL_ADC_Start_DMA+0x4a>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a75      	ldr	r2, [pc, #468]	@ (800126c <HAL_ADC_Start_DMA+0x21c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d109      	bne.n	80010ae <HAL_ADC_Start_DMA+0x5e>
 800109a:	4b75      	ldr	r3, [pc, #468]	@ (8001270 <HAL_ADC_Start_DMA+0x220>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf0c      	ite	eq
 80010a6:	2301      	moveq	r3, #1
 80010a8:	2300      	movne	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	e008      	b.n	80010c0 <HAL_ADC_Start_DMA+0x70>
 80010ae:	4b71      	ldr	r3, [pc, #452]	@ (8001274 <HAL_ADC_Start_DMA+0x224>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf0c      	ite	eq
 80010ba:	2301      	moveq	r3, #1
 80010bc:	2300      	movne	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80c5 	beq.w	8001250 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f000 fd20 	bl	8001b0c <ADC_Enable>
 80010cc:	4603      	mov	r3, r0
 80010ce:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 80b7 	bne.w	8001246 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010f4:	d004      	beq.n	8001100 <HAL_ADC_Start_DMA+0xb0>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a5c      	ldr	r2, [pc, #368]	@ (800126c <HAL_ADC_Start_DMA+0x21c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d106      	bne.n	800110e <HAL_ADC_Start_DMA+0xbe>
 8001100:	4b5b      	ldr	r3, [pc, #364]	@ (8001270 <HAL_ADC_Start_DMA+0x220>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	2b00      	cmp	r3, #0
 800110a:	d010      	beq.n	800112e <HAL_ADC_Start_DMA+0xde>
 800110c:	e005      	b.n	800111a <HAL_ADC_Start_DMA+0xca>
 800110e:	4b59      	ldr	r3, [pc, #356]	@ (8001274 <HAL_ADC_Start_DMA+0x224>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 031f 	and.w	r3, r3, #31
 8001116:	2b00      	cmp	r3, #0
 8001118:	d009      	beq.n	800112e <HAL_ADC_Start_DMA+0xde>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001122:	d004      	beq.n	800112e <HAL_ADC_Start_DMA+0xde>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a53      	ldr	r2, [pc, #332]	@ (8001278 <HAL_ADC_Start_DMA+0x228>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d115      	bne.n	800115a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d036      	beq.n	80011b6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001150:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001158:	e02d      	b.n	80011b6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800116e:	d004      	beq.n	800117a <HAL_ADC_Start_DMA+0x12a>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a3d      	ldr	r2, [pc, #244]	@ (800126c <HAL_ADC_Start_DMA+0x21c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d10a      	bne.n	8001190 <HAL_ADC_Start_DMA+0x140>
 800117a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf14      	ite	ne
 8001188:	2301      	movne	r3, #1
 800118a:	2300      	moveq	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	e008      	b.n	80011a2 <HAL_ADC_Start_DMA+0x152>
 8001190:	4b39      	ldr	r3, [pc, #228]	@ (8001278 <HAL_ADC_Start_DMA+0x228>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011c2:	d106      	bne.n	80011d2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c8:	f023 0206 	bic.w	r2, r3, #6
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80011d0:	e002      	b.n	80011d8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e4:	4a25      	ldr	r2, [pc, #148]	@ (800127c <HAL_ADC_Start_DMA+0x22c>)
 80011e6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ec:	4a24      	ldr	r2, [pc, #144]	@ (8001280 <HAL_ADC_Start_DMA+0x230>)
 80011ee:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f4:	4a23      	ldr	r2, [pc, #140]	@ (8001284 <HAL_ADC_Start_DMA+0x234>)
 80011f6:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	221c      	movs	r2, #28
 80011fe:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0210 	orr.w	r2, r2, #16
 800120e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3340      	adds	r3, #64	@ 0x40
 800122a:	4619      	mov	r1, r3
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f000 fe5f 	bl	8001ef2 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0204 	orr.w	r2, r2, #4
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	e00d      	b.n	8001262 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800124e:	e008      	b.n	8001262 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800125c:	e001      	b.n	8001262 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800125e:	2302      	movs	r3, #2
 8001260:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001262:	7dfb      	ldrb	r3, [r7, #23]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	50000100 	.word	0x50000100
 8001270:	50000300 	.word	0x50000300
 8001274:	50000700 	.word	0x50000700
 8001278:	50000400 	.word	0x50000400
 800127c:	08001a41 	.word	0x08001a41
 8001280:	08001abb 	.word	0x08001abb
 8001284:	08001ad7 	.word	0x08001ad7

08001288 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001288:	b480      	push	{r7}
 800128a:	b09b      	sub	sp, #108	@ 0x6c
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x22>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e2c8      	b.n	800183c <HAL_ADC_ConfigChannel+0x5b4>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f040 82ac 	bne.w	800181a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d81c      	bhi.n	8001304 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	461a      	mov	r2, r3
 80012de:	231f      	movs	r3, #31
 80012e0:	4093      	lsls	r3, r2
 80012e2:	43db      	mvns	r3, r3
 80012e4:	4019      	ands	r1, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa00 f203 	lsl.w	r2, r0, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	631a      	str	r2, [r3, #48]	@ 0x30
 8001302:	e063      	b.n	80013cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b09      	cmp	r3, #9
 800130a:	d81e      	bhi.n	800134a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3b1e      	subs	r3, #30
 8001320:	221f      	movs	r2, #31
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	4019      	ands	r1, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	3b1e      	subs	r3, #30
 800133c:	fa00 f203 	lsl.w	r2, r0, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	635a      	str	r2, [r3, #52]	@ 0x34
 8001348:	e040      	b.n	80013cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b0e      	cmp	r3, #14
 8001350:	d81e      	bhi.n	8001390 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	3b3c      	subs	r3, #60	@ 0x3c
 8001366:	221f      	movs	r2, #31
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	4019      	ands	r1, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	3b3c      	subs	r3, #60	@ 0x3c
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	639a      	str	r2, [r3, #56]	@ 0x38
 800138e:	e01d      	b.n	80013cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	3b5a      	subs	r3, #90	@ 0x5a
 80013a4:	221f      	movs	r2, #31
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	4019      	ands	r1, r3
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	3b5a      	subs	r3, #90	@ 0x5a
 80013c0:	fa00 f203 	lsl.w	r2, r0, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 80e5 	bne.w	80015a6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d91c      	bls.n	800141e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6999      	ldr	r1, [r3, #24]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	3b1e      	subs	r3, #30
 80013f6:	2207      	movs	r2, #7
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	4019      	ands	r1, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	6898      	ldr	r0, [r3, #8]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	3b1e      	subs	r3, #30
 8001410:	fa00 f203 	lsl.w	r2, r0, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	e019      	b.n	8001452 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6959      	ldr	r1, [r3, #20]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	2207      	movs	r2, #7
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	4019      	ands	r1, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	6898      	ldr	r0, [r3, #8]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	fa00 f203 	lsl.w	r2, r0, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	3b01      	subs	r3, #1
 8001470:	2b03      	cmp	r3, #3
 8001472:	d84f      	bhi.n	8001514 <HAL_ADC_ConfigChannel+0x28c>
 8001474:	a201      	add	r2, pc, #4	@ (adr r2, 800147c <HAL_ADC_ConfigChannel+0x1f4>)
 8001476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147a:	bf00      	nop
 800147c:	0800148d 	.word	0x0800148d
 8001480:	080014af 	.word	0x080014af
 8001484:	080014d1 	.word	0x080014d1
 8001488:	080014f3 	.word	0x080014f3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001492:	4b99      	ldr	r3, [pc, #612]	@ (80016f8 <HAL_ADC_ConfigChannel+0x470>)
 8001494:	4013      	ands	r3, r2
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	0691      	lsls	r1, r2, #26
 800149c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800149e:	430a      	orrs	r2, r1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014aa:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014ac:	e07b      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80014b4:	4b90      	ldr	r3, [pc, #576]	@ (80016f8 <HAL_ADC_ConfigChannel+0x470>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	0691      	lsls	r1, r2, #26
 80014be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014c0:	430a      	orrs	r2, r1
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014cc:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014ce:	e06a      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80014d6:	4b88      	ldr	r3, [pc, #544]	@ (80016f8 <HAL_ADC_ConfigChannel+0x470>)
 80014d8:	4013      	ands	r3, r2
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	0691      	lsls	r1, r2, #26
 80014e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014e2:	430a      	orrs	r2, r1
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014ee:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014f0:	e059      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80014f8:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <HAL_ADC_ConfigChannel+0x470>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	0691      	lsls	r1, r2, #26
 8001502:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001504:	430a      	orrs	r2, r1
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001510:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001512:	e048      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	069b      	lsls	r3, r3, #26
 8001524:	429a      	cmp	r2, r3
 8001526:	d107      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001536:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800153e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	069b      	lsls	r3, r3, #26
 8001548:	429a      	cmp	r2, r3
 800154a:	d107      	bne.n	800155c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800155a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001562:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	069b      	lsls	r3, r3, #26
 800156c:	429a      	cmp	r2, r3
 800156e:	d107      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800157e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001586:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	069b      	lsls	r3, r3, #26
 8001590:	429a      	cmp	r2, r3
 8001592:	d107      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80015a2:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80015a4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d108      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x33e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x33e>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x340>
 80015c6:	2300      	movs	r3, #0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f040 8131 	bne.w	8001830 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d00f      	beq.n	80015f6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43da      	mvns	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	400a      	ands	r2, r1
 80015f0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80015f4:	e049      	b.n	800168a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2201      	movs	r2, #1
 8001604:	409a      	lsls	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b09      	cmp	r3, #9
 8001616:	d91c      	bls.n	8001652 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6999      	ldr	r1, [r3, #24]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	3b1b      	subs	r3, #27
 800162a:	2207      	movs	r2, #7
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	4019      	ands	r1, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	6898      	ldr	r0, [r3, #8]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	3b1b      	subs	r3, #27
 8001644:	fa00 f203 	lsl.w	r2, r0, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	619a      	str	r2, [r3, #24]
 8001650:	e01b      	b.n	800168a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6959      	ldr	r1, [r3, #20]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	2207      	movs	r2, #7
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	4019      	ands	r1, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	6898      	ldr	r0, [r3, #8]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	fa00 f203 	lsl.w	r2, r0, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001692:	d004      	beq.n	800169e <HAL_ADC_ConfigChannel+0x416>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <HAL_ADC_ConfigChannel+0x474>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x41a>
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_ADC_ConfigChannel+0x478>)
 80016a0:	e000      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x41c>
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <HAL_ADC_ConfigChannel+0x47c>)
 80016a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d105      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d015      	beq.n	80016e6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016be:	2b11      	cmp	r3, #17
 80016c0:	d105      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	f040 80ac 	bne.w	8001830 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80016d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f040 80a5 	bne.w	8001830 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016ee:	d10b      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x480>
 80016f0:	4b02      	ldr	r3, [pc, #8]	@ (80016fc <HAL_ADC_ConfigChannel+0x474>)
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e023      	b.n	800173e <HAL_ADC_ConfigChannel+0x4b6>
 80016f6:	bf00      	nop
 80016f8:	83fff000 	.word	0x83fff000
 80016fc:	50000100 	.word	0x50000100
 8001700:	50000300 	.word	0x50000300
 8001704:	50000700 	.word	0x50000700
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a4e      	ldr	r2, [pc, #312]	@ (8001848 <HAL_ADC_ConfigChannel+0x5c0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d103      	bne.n	800171a <HAL_ADC_ConfigChannel+0x492>
 8001712:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e011      	b.n	800173e <HAL_ADC_ConfigChannel+0x4b6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a4b      	ldr	r2, [pc, #300]	@ (800184c <HAL_ADC_ConfigChannel+0x5c4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d102      	bne.n	800172a <HAL_ADC_ConfigChannel+0x4a2>
 8001724:	4b4a      	ldr	r3, [pc, #296]	@ (8001850 <HAL_ADC_ConfigChannel+0x5c8>)
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	e009      	b.n	800173e <HAL_ADC_ConfigChannel+0x4b6>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a48      	ldr	r2, [pc, #288]	@ (8001850 <HAL_ADC_ConfigChannel+0x5c8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d102      	bne.n	800173a <HAL_ADC_ConfigChannel+0x4b2>
 8001734:	4b45      	ldr	r3, [pc, #276]	@ (800184c <HAL_ADC_ConfigChannel+0x5c4>)
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e001      	b.n	800173e <HAL_ADC_ConfigChannel+0x4b6>
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d108      	bne.n	800175e <HAL_ADC_ConfigChannel+0x4d6>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_ADC_ConfigChannel+0x4d6>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_ADC_ConfigChannel+0x4d8>
 800175e:	2300      	movs	r3, #0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d150      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001764:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001766:	2b00      	cmp	r3, #0
 8001768:	d010      	beq.n	800178c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x4fe>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x4fe>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_ADC_ConfigChannel+0x500>
 8001786:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001788:	2b00      	cmp	r3, #0
 800178a:	d13c      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b10      	cmp	r3, #16
 8001792:	d11d      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x548>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800179c:	d118      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800179e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017a8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <HAL_ADC_ConfigChannel+0x5cc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001858 <HAL_ADC_ConfigChannel+0x5d0>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	0c9a      	lsrs	r2, r3, #18
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ce:	e02e      	b.n	800182e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b11      	cmp	r3, #17
 80017d6:	d10b      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x568>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017e0:	d106      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80017e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80017ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ee:	e01e      	b.n	800182e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b12      	cmp	r3, #18
 80017f6:	d11a      	bne.n	800182e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80017f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001800:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001802:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001804:	e013      	b.n	800182e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f043 0220 	orr.w	r2, r3, #32
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001818:	e00a      	b.n	8001830 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f043 0220 	orr.w	r2, r3, #32
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800182c:	e000      	b.n	8001830 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800182e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001838:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800183c:	4618      	mov	r0, r3
 800183e:	376c      	adds	r7, #108	@ 0x6c
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	50000100 	.word	0x50000100
 800184c:	50000400 	.word	0x50000400
 8001850:	50000500 	.word	0x50000500
 8001854:	20000004 	.word	0x20000004
 8001858:	431bde83 	.word	0x431bde83

0800185c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800185c:	b480      	push	{r7}
 800185e:	b099      	sub	sp, #100	@ 0x64
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001874:	d102      	bne.n	800187c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001876:	4b6d      	ldr	r3, [pc, #436]	@ (8001a2c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	e01a      	b.n	80018b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6a      	ldr	r2, [pc, #424]	@ (8001a2c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d103      	bne.n	800188e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001886:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	e011      	b.n	80018b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a67      	ldr	r2, [pc, #412]	@ (8001a30 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d102      	bne.n	800189e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001898:	4b66      	ldr	r3, [pc, #408]	@ (8001a34 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	e009      	b.n	80018b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a64      	ldr	r2, [pc, #400]	@ (8001a34 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d102      	bne.n	80018ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80018a8:	4b61      	ldr	r3, [pc, #388]	@ (8001a30 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	e001      	b.n	80018b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0b0      	b.n	8001a1e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e0a9      	b.n	8001a1e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f040 808d 	bne.w	80019fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 8086 	bne.w	80019fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018f8:	d004      	beq.n	8001904 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a4b      	ldr	r2, [pc, #300]	@ (8001a2c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001904:	4b4c      	ldr	r3, [pc, #304]	@ (8001a38 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001906:	e000      	b.n	800190a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001908:	4b4c      	ldr	r3, [pc, #304]	@ (8001a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800190a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d040      	beq.n	8001996 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001914:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001926:	035b      	lsls	r3, r3, #13
 8001928:	430b      	orrs	r3, r1
 800192a:	431a      	orrs	r2, r3
 800192c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800192e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001950:	2300      	movs	r3, #0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d15c      	bne.n	8001a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001972:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001974:	2b00      	cmp	r3, #0
 8001976:	d14b      	bne.n	8001a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001980:	f023 030f 	bic.w	r3, r3, #15
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	6811      	ldr	r1, [r2, #0]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	6892      	ldr	r2, [r2, #8]
 800198c:	430a      	orrs	r2, r1
 800198e:	431a      	orrs	r2, r3
 8001990:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001992:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001994:	e03c      	b.n	8001a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800199e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019a0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d108      	bne.n	80019c2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80019c2:	2300      	movs	r3, #0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d123      	bne.n	8001a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d107      	bne.n	80019e4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80019e4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d112      	bne.n	8001a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80019ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80019f2:	f023 030f 	bic.w	r3, r3, #15
 80019f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80019f8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019fa:	e009      	b.n	8001a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	f043 0220 	orr.w	r2, r3, #32
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001a0e:	e000      	b.n	8001a12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a10:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3764      	adds	r7, #100	@ 0x64
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	50000100 	.word	0x50000100
 8001a30:	50000400 	.word	0x50000400
 8001a34:	50000500 	.word	0x50000500
 8001a38:	50000300 	.word	0x50000300
 8001a3c:	50000700 	.word	0x50000700

08001a40 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d126      	bne.n	8001aa8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d115      	bne.n	8001aa0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d111      	bne.n	8001aa0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d105      	bne.n	8001aa0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f7fe fddd 	bl	8000660 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001aa6:	e004      	b.n	8001ab2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7fe fdb9 	bl	8000640 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af4:	f043 0204 	orr.w	r2, r3, #4
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7ff f8a3 	bl	8000c48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <ADC_Enable+0x2c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <ADC_Enable+0x2c>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <ADC_Enable+0x2e>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d143      	bne.n	8001bc6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	4b22      	ldr	r3, [pc, #136]	@ (8001bd0 <ADC_Enable+0xc4>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00d      	beq.n	8001b68 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	f043 0210 	orr.w	r2, r3, #16
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e02f      	b.n	8001bc8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001b78:	f7ff f85a 	bl	8000c30 <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b7e:	e01b      	b.n	8001bb8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b80:	f7ff f856 	bl	8000c30 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d914      	bls.n	8001bb8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d00d      	beq.n	8001bb8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	f043 0210 	orr.w	r2, r3, #16
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e007      	b.n	8001bc8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d1dc      	bne.n	8001b80 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	8000003f 	.word	0x8000003f

08001bd4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d108      	bne.n	8001c00 <ADC_Disable+0x2c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <ADC_Disable+0x2c>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <ADC_Disable+0x2e>
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d047      	beq.n	8001c96 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 030d 	and.w	r3, r3, #13
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d10f      	bne.n	8001c34 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0202 	orr.w	r2, r2, #2
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2203      	movs	r2, #3
 8001c2a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001c2c:	f7ff f800 	bl	8000c30 <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c32:	e029      	b.n	8001c88 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	f043 0210 	orr.w	r2, r3, #16
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e023      	b.n	8001c98 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c50:	f7fe ffee 	bl	8000c30 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d914      	bls.n	8001c88 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10d      	bne.n	8001c88 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	f043 0210 	orr.w	r2, r3, #16
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e007      	b.n	8001c98 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d0dc      	beq.n	8001c50 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4907      	ldr	r1, [pc, #28]	@ (8001d3c <__NVIC_EnableIRQ+0x38>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	@ (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	@ (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	@ 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff4c 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e22:	f7ff ff61 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	6978      	ldr	r0, [r7, #20]
 8001e2e:	f7ff ffb1 	bl	8001d94 <NVIC_EncodePriority>
 8001e32:	4602      	mov	r2, r0
 8001e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff80 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff54 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e037      	b.n	8001eea <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e90:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001e94:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f941 	bl	8002154 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_DMA_Start_IT+0x20>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e04a      	b.n	8001fa8 <HAL_DMA_Start_IT+0xb6>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d13a      	bne.n	8001f9a <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f8d4 	bl	80020f6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 020e 	orr.w	r2, r2, #14
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e00f      	b.n	8001f88 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 020a 	orr.w	r2, r2, #10
 8001f76:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0204 	bic.w	r2, r2, #4
 8001f86:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e005      	b.n	8001fa6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	2204      	movs	r2, #4
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d024      	beq.n	8002022 <HAL_DMA_IRQHandler+0x72>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01f      	beq.n	8002022 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	2104      	movs	r1, #4
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d06a      	beq.n	80020ee <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002020:	e065      	b.n	80020ee <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	2202      	movs	r2, #2
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d02c      	beq.n	800208c <HAL_DMA_IRQHandler+0xdc>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d027      	beq.n	800208c <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10b      	bne.n	8002062 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 020a 	bic.w	r2, r2, #10
 8002058:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206a:	2102      	movs	r1, #2
 800206c:	fa01 f202 	lsl.w	r2, r1, r2
 8002070:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207e:	2b00      	cmp	r3, #0
 8002080:	d035      	beq.n	80020ee <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800208a:	e030      	b.n	80020ee <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	2208      	movs	r2, #8
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d028      	beq.n	80020ee <HAL_DMA_IRQHandler+0x13e>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d023      	beq.n	80020ee <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 020e 	bic.w	r2, r2, #14
 80020b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
    }
  }
}
 80020ec:	e7ff      	b.n	80020ee <HAL_DMA_IRQHandler+0x13e>
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210c:	2101      	movs	r1, #1
 800210e:	fa01 f202 	lsl.w	r2, r1, r2
 8002112:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b10      	cmp	r3, #16
 8002122:	d108      	bne.n	8002136 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002134:	e007      	b.n	8002146 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	60da      	str	r2, [r3, #12]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <DMA_CalcBaseAndBitshift+0x60>)
 8002164:	429a      	cmp	r2, r3
 8002166:	d80f      	bhi.n	8002188 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002170:	4413      	add	r3, r2
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <DMA_CalcBaseAndBitshift+0x68>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	009a      	lsls	r2, r3, #2
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a0f      	ldr	r2, [pc, #60]	@ (80021c0 <DMA_CalcBaseAndBitshift+0x6c>)
 8002184:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002186:	e00e      	b.n	80021a6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <DMA_CalcBaseAndBitshift+0x70>)
 8002190:	4413      	add	r3, r2
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <DMA_CalcBaseAndBitshift+0x68>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	009a      	lsls	r2, r3, #2
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a09      	ldr	r2, [pc, #36]	@ (80021c8 <DMA_CalcBaseAndBitshift+0x74>)
 80021a4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40020407 	.word	0x40020407
 80021b8:	bffdfff8 	.word	0xbffdfff8
 80021bc:	cccccccd 	.word	0xcccccccd
 80021c0:	40020000 	.word	0x40020000
 80021c4:	bffdfbf8 	.word	0xbffdfbf8
 80021c8:	40020400 	.word	0x40020400

080021cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021da:	e160      	b.n	800249e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8152 	beq.w	8002498 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d005      	beq.n	800220c <HAL_GPIO_Init+0x40>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d130      	bne.n	800226e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002242:	2201      	movs	r2, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 0201 	and.w	r2, r3, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b03      	cmp	r3, #3
 8002278:	d017      	beq.n	80022aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d123      	bne.n	80022fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	6939      	ldr	r1, [r7, #16]
 80022fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80ac 	beq.w	8002498 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002340:	4b5e      	ldr	r3, [pc, #376]	@ (80024bc <HAL_GPIO_Init+0x2f0>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a5d      	ldr	r2, [pc, #372]	@ (80024bc <HAL_GPIO_Init+0x2f0>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b5b      	ldr	r3, [pc, #364]	@ (80024bc <HAL_GPIO_Init+0x2f0>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002358:	4a59      	ldr	r2, [pc, #356]	@ (80024c0 <HAL_GPIO_Init+0x2f4>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002382:	d025      	beq.n	80023d0 <HAL_GPIO_Init+0x204>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a4f      	ldr	r2, [pc, #316]	@ (80024c4 <HAL_GPIO_Init+0x2f8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d01f      	beq.n	80023cc <HAL_GPIO_Init+0x200>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a4e      	ldr	r2, [pc, #312]	@ (80024c8 <HAL_GPIO_Init+0x2fc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d019      	beq.n	80023c8 <HAL_GPIO_Init+0x1fc>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a4d      	ldr	r2, [pc, #308]	@ (80024cc <HAL_GPIO_Init+0x300>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <HAL_GPIO_Init+0x1f8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a4c      	ldr	r2, [pc, #304]	@ (80024d0 <HAL_GPIO_Init+0x304>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00d      	beq.n	80023c0 <HAL_GPIO_Init+0x1f4>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a4b      	ldr	r2, [pc, #300]	@ (80024d4 <HAL_GPIO_Init+0x308>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d007      	beq.n	80023bc <HAL_GPIO_Init+0x1f0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a4a      	ldr	r2, [pc, #296]	@ (80024d8 <HAL_GPIO_Init+0x30c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_GPIO_Init+0x1ec>
 80023b4:	2306      	movs	r3, #6
 80023b6:	e00c      	b.n	80023d2 <HAL_GPIO_Init+0x206>
 80023b8:	2307      	movs	r3, #7
 80023ba:	e00a      	b.n	80023d2 <HAL_GPIO_Init+0x206>
 80023bc:	2305      	movs	r3, #5
 80023be:	e008      	b.n	80023d2 <HAL_GPIO_Init+0x206>
 80023c0:	2304      	movs	r3, #4
 80023c2:	e006      	b.n	80023d2 <HAL_GPIO_Init+0x206>
 80023c4:	2303      	movs	r3, #3
 80023c6:	e004      	b.n	80023d2 <HAL_GPIO_Init+0x206>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0x206>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <HAL_GPIO_Init+0x206>
 80023d0:	2300      	movs	r3, #0
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	f002 0203 	and.w	r2, r2, #3
 80023d8:	0092      	lsls	r2, r2, #2
 80023da:	4093      	lsls	r3, r2
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023e2:	4937      	ldr	r1, [pc, #220]	@ (80024c0 <HAL_GPIO_Init+0x2f4>)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f0:	4b3a      	ldr	r3, [pc, #232]	@ (80024dc <HAL_GPIO_Init+0x310>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002414:	4a31      	ldr	r2, [pc, #196]	@ (80024dc <HAL_GPIO_Init+0x310>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800241a:	4b30      	ldr	r3, [pc, #192]	@ (80024dc <HAL_GPIO_Init+0x310>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800243e:	4a27      	ldr	r2, [pc, #156]	@ (80024dc <HAL_GPIO_Init+0x310>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002444:	4b25      	ldr	r3, [pc, #148]	@ (80024dc <HAL_GPIO_Init+0x310>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002468:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <HAL_GPIO_Init+0x310>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <HAL_GPIO_Init+0x310>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002492:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <HAL_GPIO_Init+0x310>)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f47f ae97 	bne.w	80021dc <HAL_GPIO_Init+0x10>
  }
}
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010000 	.word	0x40010000
 80024c4:	48000400 	.word	0x48000400
 80024c8:	48000800 	.word	0x48000800
 80024cc:	48000c00 	.word	0x48000c00
 80024d0:	48001000 	.word	0x48001000
 80024d4:	48001400 	.word	0x48001400
 80024d8:	48001800 	.word	0x48001800
 80024dc:	40010400 	.word	0x40010400

080024e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024fc:	e002      	b.n	8002504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4013      	ands	r3, r2
 8002528:	041a      	lsls	r2, r3, #16
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43d9      	mvns	r1, r3
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	400b      	ands	r3, r1
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800254a:	af00      	add	r7, sp, #0
 800254c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002550:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002554:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002556:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f001 b83a 	b.w	80035de <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800256e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 816f 	beq.w	800285e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002580:	4bb5      	ldr	r3, [pc, #724]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b04      	cmp	r3, #4
 800258a:	d00c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800258c:	4bb2      	ldr	r3, [pc, #712]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d15c      	bne.n	8002652 <HAL_RCC_OscConfig+0x10e>
 8002598:	4baf      	ldr	r3, [pc, #700]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a4:	d155      	bne.n	8002652 <HAL_RCC_OscConfig+0x10e>
 80025a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025aa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <HAL_RCC_OscConfig+0x94>
 80025d2:	4ba1      	ldr	r3, [pc, #644]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	e015      	b.n	8002604 <HAL_RCC_OscConfig+0xc0>
 80025d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025dc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80025ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025f0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80025f4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002600:	4b95      	ldr	r3, [pc, #596]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002608:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800260c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002610:	fa92 f2a2 	rbit	r2, r2
 8002614:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002618:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800261c:	fab2 f282 	clz	r2, r2
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f042 0220 	orr.w	r2, r2, #32
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	f002 021f 	and.w	r2, r2, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f202 	lsl.w	r2, r1, r2
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8111 	beq.w	800285c <HAL_RCC_OscConfig+0x318>
 800263a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800263e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f040 8108 	bne.w	800285c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	f000 bfc6 	b.w	80035de <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002656:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x12e>
 8002664:	4b7c      	ldr	r3, [pc, #496]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a7b      	ldr	r2, [pc, #492]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 800266a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	e036      	b.n	80026e0 <HAL_RCC_OscConfig+0x19c>
 8002672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002676:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x158>
 8002682:	4b75      	ldr	r3, [pc, #468]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a74      	ldr	r2, [pc, #464]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 8002688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b72      	ldr	r3, [pc, #456]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a71      	ldr	r2, [pc, #452]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 8002694:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e021      	b.n	80026e0 <HAL_RCC_OscConfig+0x19c>
 800269c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x184>
 80026ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a69      	ldr	r2, [pc, #420]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b67      	ldr	r3, [pc, #412]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a66      	ldr	r2, [pc, #408]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0x19c>
 80026c8:	4b63      	ldr	r3, [pc, #396]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a62      	ldr	r2, [pc, #392]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b60      	ldr	r3, [pc, #384]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026de:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d059      	beq.n	80027a4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fa9e 	bl	8000c30 <HAL_GetTick>
 80026f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026fa:	f7fe fa99 	bl	8000c30 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	@ 0x64
 8002708:	d902      	bls.n	8002710 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	f000 bf67 	b.w	80035de <HAL_RCC_OscConfig+0x109a>
 8002710:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002714:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002724:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d102      	bne.n	8002742 <HAL_RCC_OscConfig+0x1fe>
 800273c:	4b46      	ldr	r3, [pc, #280]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x22a>
 8002742:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002746:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002756:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800275a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800275e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800276a:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002772:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002776:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800277a:	fa92 f2a2 	rbit	r2, r2
 800277e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002782:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002786:	fab2 f282 	clz	r2, r2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f042 0220 	orr.w	r2, r2, #32
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f002 021f 	and.w	r2, r2, #31
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0ab      	beq.n	80026fa <HAL_RCC_OscConfig+0x1b6>
 80027a2:	e05c      	b.n	800285e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fa44 	bl	8000c30 <HAL_GetTick>
 80027a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ae:	f7fe fa3f 	bl	8000c30 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	@ 0x64
 80027bc:	d902      	bls.n	80027c4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	f000 bf0d 	b.w	80035de <HAL_RCC_OscConfig+0x109a>
 80027c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027c8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80027d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <HAL_RCC_OscConfig+0x2b2>
 80027f0:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	e015      	b.n	8002822 <HAL_RCC_OscConfig+0x2de>
 80027f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027fa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800280a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800280e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002812:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800281e:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <HAL_RCC_OscConfig+0x314>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002826:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800282a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800282e:	fa92 f2a2 	rbit	r2, r2
 8002832:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002836:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800283a:	fab2 f282 	clz	r2, r2
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f042 0220 	orr.w	r2, r2, #32
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	f002 021f 	and.w	r2, r2, #31
 800284a:	2101      	movs	r1, #1
 800284c:	fa01 f202 	lsl.w	r2, r1, r2
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ab      	bne.n	80027ae <HAL_RCC_OscConfig+0x26a>
 8002856:	e002      	b.n	800285e <HAL_RCC_OscConfig+0x31a>
 8002858:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002862:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 817f 	beq.w	8002b72 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002874:	4ba7      	ldr	r3, [pc, #668]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00c      	beq.n	800289a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002880:	4ba4      	ldr	r3, [pc, #656]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d173      	bne.n	8002974 <HAL_RCC_OscConfig+0x430>
 800288c:	4ba1      	ldr	r3, [pc, #644]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002898:	d16c      	bne.n	8002974 <HAL_RCC_OscConfig+0x430>
 800289a:	2302      	movs	r3, #2
 800289c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80028ac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_OscConfig+0x386>
 80028c4:	4b93      	ldr	r3, [pc, #588]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	e013      	b.n	80028f2 <HAL_RCC_OscConfig+0x3ae>
 80028ca:	2302      	movs	r3, #2
 80028cc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80028dc:	2302      	movs	r3, #2
 80028de:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80028e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80028ee:	4b89      	ldr	r3, [pc, #548]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	2202      	movs	r2, #2
 80028f4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80028f8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80028fc:	fa92 f2a2 	rbit	r2, r2
 8002900:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002904:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002908:	fab2 f282 	clz	r2, r2
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	f042 0220 	orr.w	r2, r2, #32
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	f002 021f 	and.w	r2, r2, #31
 8002918:	2101      	movs	r1, #1
 800291a:	fa01 f202 	lsl.w	r2, r1, r2
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCC_OscConfig+0x3f6>
 8002924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002928:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d002      	beq.n	800293a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f000 be52 	b.w	80035de <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293a:	4b76      	ldr	r3, [pc, #472]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002942:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002946:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	21f8      	movs	r1, #248	@ 0xf8
 8002950:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002958:	fa91 f1a1 	rbit	r1, r1
 800295c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002960:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002964:	fab1 f181 	clz	r1, r1
 8002968:	b2c9      	uxtb	r1, r1
 800296a:	408b      	lsls	r3, r1
 800296c:	4969      	ldr	r1, [pc, #420]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	e0fe      	b.n	8002b72 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002978:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8088 	beq.w	8002a96 <HAL_RCC_OscConfig+0x552>
 8002986:	2301      	movs	r3, #1
 8002988:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002998:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029a6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	461a      	mov	r2, r3
 80029ae:	2301      	movs	r3, #1
 80029b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe f93d 	bl	8000c30 <HAL_GetTick>
 80029b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029bc:	f7fe f938 	bl	8000c30 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d902      	bls.n	80029d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	f000 be06 	b.w	80035de <HAL_RCC_OscConfig+0x109a>
 80029d2:	2302      	movs	r3, #2
 80029d4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80029e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d102      	bne.n	8002a02 <HAL_RCC_OscConfig+0x4be>
 80029fc:	4b45      	ldr	r3, [pc, #276]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	e013      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e6>
 8002a02:	2302      	movs	r3, #2
 8002a04:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002a14:	2302      	movs	r3, #2
 8002a16:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a1a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a26:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002a30:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002a34:	fa92 f2a2 	rbit	r2, r2
 8002a38:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002a3c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f042 0220 	orr.w	r2, r2, #32
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	f002 021f 	and.w	r2, r2, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0af      	beq.n	80029bc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	21f8      	movs	r1, #248	@ 0xf8
 8002a72:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002a7a:	fa91 f1a1 	rbit	r1, r1
 8002a7e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002a82:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a86:	fab1 f181 	clz	r1, r1
 8002a8a:	b2c9      	uxtb	r1, r1
 8002a8c:	408b      	lsls	r3, r1
 8002a8e:	4921      	ldr	r1, [pc, #132]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
 8002a94:	e06d      	b.n	8002b72 <HAL_RCC_OscConfig+0x62e>
 8002a96:	2301      	movs	r3, #1
 8002a98:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002aa8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aac:	fab3 f383 	clz	r3, r3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ab6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	461a      	mov	r2, r3
 8002abe:	2300      	movs	r3, #0
 8002ac0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe f8b5 	bl	8000c30 <HAL_GetTick>
 8002ac6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002acc:	f7fe f8b0 	bl	8000c30 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d902      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	f000 bd7e 	b.w	80035de <HAL_RCC_OscConfig+0x109a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002af4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af8:	fab3 f383 	clz	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCC_OscConfig+0x5d4>
 8002b0c:	4b01      	ldr	r3, [pc, #4]	@ (8002b14 <HAL_RCC_OscConfig+0x5d0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	e016      	b.n	8002b40 <HAL_RCC_OscConfig+0x5fc>
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b30:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b3c:	4bbf      	ldr	r3, [pc, #764]	@ (8002e3c <HAL_RCC_OscConfig+0x8f8>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	2202      	movs	r2, #2
 8002b42:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002b46:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002b4a:	fa92 f2a2 	rbit	r2, r2
 8002b4e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002b52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002b56:	fab2 f282 	clz	r2, r2
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f042 0220 	orr.w	r2, r2, #32
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f002 021f 	and.w	r2, r2, #31
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ac      	bne.n	8002acc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8113 	beq.w	8002dae <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d07c      	beq.n	8002c92 <HAL_RCC_OscConfig+0x74e>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002baa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4ba2      	ldr	r3, [pc, #648]	@ (8002e40 <HAL_RCC_OscConfig+0x8fc>)
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc2:	f7fe f835 	bl	8000c30 <HAL_GetTick>
 8002bc6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7fe f830 	bl	8000c30 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d902      	bls.n	8002be2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	f000 bcfe 	b.w	80035de <HAL_RCC_OscConfig+0x109a>
 8002be2:	2302      	movs	r3, #2
 8002be4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bec:	fa93 f2a3 	rbit	r2, r3
 8002bf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c02:	2202      	movs	r2, #2
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	fa93 f2a3 	rbit	r2, r3
 8002c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c26:	2202      	movs	r2, #2
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	4b7e      	ldr	r3, [pc, #504]	@ (8002e3c <HAL_RCC_OscConfig+0x8f8>)
 8002c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c4e:	2102      	movs	r1, #2
 8002c50:	6019      	str	r1, [r3, #0]
 8002c52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c56:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	fa93 f1a3 	rbit	r1, r3
 8002c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c64:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c68:	6019      	str	r1, [r3, #0]
  return result;
 8002c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	2101      	movs	r1, #1
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d09d      	beq.n	8002bcc <HAL_RCC_OscConfig+0x688>
 8002c90:	e08d      	b.n	8002dae <HAL_RCC_OscConfig+0x86a>
 8002c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f2a3 	rbit	r2, r3
 8002cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cb4:	601a      	str	r2, [r3, #0]
  return result;
 8002cb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cbe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b5d      	ldr	r3, [pc, #372]	@ (8002e40 <HAL_RCC_OscConfig+0x8fc>)
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7fd ffac 	bl	8000c30 <HAL_GetTick>
 8002cd8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cde:	f7fd ffa7 	bl	8000c30 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	f000 bc75 	b.w	80035de <HAL_RCC_OscConfig+0x109a>
 8002cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d04:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	fa93 f2a3 	rbit	r2, r3
 8002d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d20:	2202      	movs	r2, #2
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	fa93 f2a3 	rbit	r2, r3
 8002d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d40:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d44:	2202      	movs	r2, #2
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d4c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d5e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	4b36      	ldr	r3, [pc, #216]	@ (8002e3c <HAL_RCC_OscConfig+0x8f8>)
 8002d62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d68:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	6019      	str	r1, [r3, #0]
 8002d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d74:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	fa93 f1a3 	rbit	r1, r3
 8002d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d82:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d86:	6019      	str	r1, [r3, #0]
  return result;
 8002d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d8c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d197      	bne.n	8002cde <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 81a5 	beq.w	800310e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dca:	4b1c      	ldr	r3, [pc, #112]	@ (8002e3c <HAL_RCC_OscConfig+0x8f8>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <HAL_RCC_OscConfig+0x8f8>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	4a18      	ldr	r2, [pc, #96]	@ (8002e3c <HAL_RCC_OscConfig+0x8f8>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	61d3      	str	r3, [r2, #28]
 8002de2:	4b16      	ldr	r3, [pc, #88]	@ (8002e3c <HAL_RCC_OscConfig+0x8f8>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002dea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dfc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e04:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <HAL_RCC_OscConfig+0x900>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d121      	bne.n	8002e54 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e10:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <HAL_RCC_OscConfig+0x900>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0b      	ldr	r2, [pc, #44]	@ (8002e44 <HAL_RCC_OscConfig+0x900>)
 8002e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e1a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1c:	f7fd ff08 	bl	8000c30 <HAL_GetTick>
 8002e20:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	e010      	b.n	8002e48 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e26:	f7fd ff03 	bl	8000c30 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	@ 0x64
 8002e34:	d908      	bls.n	8002e48 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e3d1      	b.n	80035de <HAL_RCC_OscConfig+0x109a>
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	10908120 	.word	0x10908120
 8002e44:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	4b8d      	ldr	r3, [pc, #564]	@ (8003080 <HAL_RCC_OscConfig+0xb3c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0e8      	beq.n	8002e26 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x92e>
 8002e64:	4b87      	ldr	r3, [pc, #540]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4a86      	ldr	r2, [pc, #536]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6213      	str	r3, [r2, #32]
 8002e70:	e035      	b.n	8002ede <HAL_RCC_OscConfig+0x99a>
 8002e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x958>
 8002e82:	4b80      	ldr	r3, [pc, #512]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4a7f      	ldr	r2, [pc, #508]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	6213      	str	r3, [r2, #32]
 8002e8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a7c      	ldr	r2, [pc, #496]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002e94:	f023 0304 	bic.w	r3, r3, #4
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	e020      	b.n	8002ede <HAL_RCC_OscConfig+0x99a>
 8002e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x982>
 8002eac:	4b75      	ldr	r3, [pc, #468]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a74      	ldr	r2, [pc, #464]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	4b72      	ldr	r3, [pc, #456]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a71      	ldr	r2, [pc, #452]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	e00b      	b.n	8002ede <HAL_RCC_OscConfig+0x99a>
 8002ec6:	4b6f      	ldr	r3, [pc, #444]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a6e      	ldr	r2, [pc, #440]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6213      	str	r3, [r2, #32]
 8002ed2:	4b6c      	ldr	r3, [pc, #432]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a6b      	ldr	r2, [pc, #428]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8081 	beq.w	8002ff2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7fd fe9e 	bl	8000c30 <HAL_GetTick>
 8002ef4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fd fe99 	bl	8000c30 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e365      	b.n	80035de <HAL_RCC_OscConfig+0x109a>
 8002f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f16:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f22:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f3e:	2202      	movs	r2, #2
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f46:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	fa93 f2a3 	rbit	r2, r3
 8002f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f54:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f58:	601a      	str	r2, [r3, #0]
  return result;
 8002f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f043 0302 	orr.w	r3, r3, #2
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d102      	bne.n	8002f7e <HAL_RCC_OscConfig+0xa3a>
 8002f78:	4b42      	ldr	r3, [pc, #264]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	e013      	b.n	8002fa6 <HAL_RCC_OscConfig+0xa62>
 8002f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f82:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f86:	2202      	movs	r2, #2
 8002f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f8e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f9c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	4b38      	ldr	r3, [pc, #224]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002faa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002fae:	2102      	movs	r1, #2
 8002fb0:	6011      	str	r1, [r2, #0]
 8002fb2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fb6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	fa92 f1a2 	rbit	r1, r2
 8002fc0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fc4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002fc8:	6011      	str	r1, [r2, #0]
  return result;
 8002fca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fce:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	fab2 f282 	clz	r2, r2
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	f002 021f 	and.w	r2, r2, #31
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d084      	beq.n	8002efa <HAL_RCC_OscConfig+0x9b6>
 8002ff0:	e083      	b.n	80030fa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fd fe1d 	bl	8000c30 <HAL_GetTick>
 8002ff6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fd fe18 	bl	8000c30 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e2e4      	b.n	80035de <HAL_RCC_OscConfig+0x109a>
 8003014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003018:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800301c:	2202      	movs	r2, #2
 800301e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003024:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	fa93 f2a3 	rbit	r2, r3
 800302e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003032:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003040:	2202      	movs	r2, #2
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003048:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	fa93 f2a3 	rbit	r2, r3
 8003052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003056:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800305a:	601a      	str	r2, [r3, #0]
  return result;
 800305c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003060:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003064:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d106      	bne.n	8003088 <HAL_RCC_OscConfig+0xb44>
 800307a:	4b02      	ldr	r3, [pc, #8]	@ (8003084 <HAL_RCC_OscConfig+0xb40>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	e017      	b.n	80030b0 <HAL_RCC_OscConfig+0xb6c>
 8003080:	40007000 	.word	0x40007000
 8003084:	40021000 	.word	0x40021000
 8003088:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800308c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003090:	2202      	movs	r2, #2
 8003092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003098:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	fa93 f2a3 	rbit	r2, r3
 80030a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	4bb3      	ldr	r3, [pc, #716]	@ (800337c <HAL_RCC_OscConfig+0xe38>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030b8:	2102      	movs	r1, #2
 80030ba:	6011      	str	r1, [r2, #0]
 80030bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030c0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	fa92 f1a2 	rbit	r1, r2
 80030ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030ce:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80030d2:	6011      	str	r1, [r2, #0]
  return result;
 80030d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030d8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	fab2 f282 	clz	r2, r2
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f002 021f 	and.w	r2, r2, #31
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d180      	bne.n	8002ffc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030fa:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d105      	bne.n	800310e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003102:	4b9e      	ldr	r3, [pc, #632]	@ (800337c <HAL_RCC_OscConfig+0xe38>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4a9d      	ldr	r2, [pc, #628]	@ (800337c <HAL_RCC_OscConfig+0xe38>)
 8003108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800310c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800310e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003112:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 825e 	beq.w	80035dc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003120:	4b96      	ldr	r3, [pc, #600]	@ (800337c <HAL_RCC_OscConfig+0xe38>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	f000 821f 	beq.w	800356c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003132:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b02      	cmp	r3, #2
 800313c:	f040 8170 	bne.w	8003420 <HAL_RCC_OscConfig+0xedc>
 8003140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003144:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003148:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800314c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003152:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f2a3 	rbit	r2, r3
 800315c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003160:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003164:	601a      	str	r2, [r3, #0]
  return result;
 8003166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800316a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800316e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800317a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	461a      	mov	r2, r3
 8003182:	2300      	movs	r3, #0
 8003184:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7fd fd53 	bl	8000c30 <HAL_GetTick>
 800318a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318e:	e009      	b.n	80031a4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003190:	f7fd fd4e 	bl	8000c30 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e21c      	b.n	80035de <HAL_RCC_OscConfig+0x109a>
 80031a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f2a3 	rbit	r2, r3
 80031c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031c8:	601a      	str	r2, [r3, #0]
  return result;
 80031ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d102      	bne.n	80031ee <HAL_RCC_OscConfig+0xcaa>
 80031e8:	4b64      	ldr	r3, [pc, #400]	@ (800337c <HAL_RCC_OscConfig+0xe38>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	e027      	b.n	800323e <HAL_RCC_OscConfig+0xcfa>
 80031ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80031f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003200:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fa93 f2a3 	rbit	r2, r3
 800320a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800320e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003218:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800321c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003226:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f2a3 	rbit	r2, r3
 8003230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003234:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	4b50      	ldr	r3, [pc, #320]	@ (800337c <HAL_RCC_OscConfig+0xe38>)
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003242:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003246:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800324a:	6011      	str	r1, [r2, #0]
 800324c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003250:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	fa92 f1a2 	rbit	r1, r2
 800325a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800325e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003262:	6011      	str	r1, [r2, #0]
  return result;
 8003264:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003268:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	fab2 f282 	clz	r2, r2
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	f042 0220 	orr.w	r2, r2, #32
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	f002 021f 	and.w	r2, r2, #31
 800327e:	2101      	movs	r1, #1
 8003280:	fa01 f202 	lsl.w	r2, r1, r2
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d182      	bne.n	8003190 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328a:	4b3c      	ldr	r3, [pc, #240]	@ (800337c <HAL_RCC_OscConfig+0xe38>)
 800328c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328e:	f023 020f 	bic.w	r2, r3, #15
 8003292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003296:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329e:	4937      	ldr	r1, [pc, #220]	@ (800337c <HAL_RCC_OscConfig+0xe38>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80032a4:	4b35      	ldr	r3, [pc, #212]	@ (800337c <HAL_RCC_OscConfig+0xe38>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80032ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a19      	ldr	r1, [r3, #32]
 80032b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	430b      	orrs	r3, r1
 80032c6:	492d      	ldr	r1, [pc, #180]	@ (800337c <HAL_RCC_OscConfig+0xe38>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
 80032cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80032d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032de:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	fa93 f2a3 	rbit	r2, r3
 80032e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032f0:	601a      	str	r2, [r3, #0]
  return result;
 80032f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032fa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003306:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	461a      	mov	r2, r3
 800330e:	2301      	movs	r3, #1
 8003310:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fd fc8d 	bl	8000c30 <HAL_GetTick>
 8003316:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800331a:	e009      	b.n	8003330 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331c:	f7fd fc88 	bl	8000c30 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e156      	b.n	80035de <HAL_RCC_OscConfig+0x109a>
 8003330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003334:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003338:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800333c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003342:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fa93 f2a3 	rbit	r2, r3
 800334c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003350:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003354:	601a      	str	r2, [r3, #0]
  return result;
 8003356:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800335a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800335e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <HAL_RCC_OscConfig+0xe3c>
 8003374:	4b01      	ldr	r3, [pc, #4]	@ (800337c <HAL_RCC_OscConfig+0xe38>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	e02a      	b.n	80033d0 <HAL_RCC_OscConfig+0xe8c>
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003384:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003388:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800338c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003392:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fa93 f2a3 	rbit	r2, r3
 800339c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80033ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	fa93 f2a3 	rbit	r2, r3
 80033c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	4b86      	ldr	r3, [pc, #536]	@ (80035e8 <HAL_RCC_OscConfig+0x10a4>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033dc:	6011      	str	r1, [r2, #0]
 80033de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033e2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	fa92 f1a2 	rbit	r1, r2
 80033ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033f0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80033f4:	6011      	str	r1, [r2, #0]
  return result;
 80033f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033fa:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	fab2 f282 	clz	r2, r2
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	f042 0220 	orr.w	r2, r2, #32
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	f002 021f 	and.w	r2, r2, #31
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f202 	lsl.w	r2, r1, r2
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	f43f af7f 	beq.w	800331c <HAL_RCC_OscConfig+0xdd8>
 800341e:	e0dd      	b.n	80035dc <HAL_RCC_OscConfig+0x1098>
 8003420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003424:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800342c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003432:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	fa93 f2a3 	rbit	r2, r3
 800343c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003440:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003444:	601a      	str	r2, [r3, #0]
  return result;
 8003446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800344a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800344e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800345a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	461a      	mov	r2, r3
 8003462:	2300      	movs	r3, #0
 8003464:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fd fbe3 	bl	8000c30 <HAL_GetTick>
 800346a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346e:	e009      	b.n	8003484 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003470:	f7fd fbde 	bl	8000c30 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0ac      	b.n	80035de <HAL_RCC_OscConfig+0x109a>
 8003484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003488:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800348c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003496:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	fa93 f2a3 	rbit	r2, r3
 80034a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034a8:	601a      	str	r2, [r3, #0]
  return result;
 80034aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d102      	bne.n	80034ce <HAL_RCC_OscConfig+0xf8a>
 80034c8:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_RCC_OscConfig+0x10a4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	e027      	b.n	800351e <HAL_RCC_OscConfig+0xfda>
 80034ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034d2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80034d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034e0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ee:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80034fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003506:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	fa93 f2a3 	rbit	r2, r3
 8003510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003514:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	4b33      	ldr	r3, [pc, #204]	@ (80035e8 <HAL_RCC_OscConfig+0x10a4>)
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003522:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003526:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800352a:	6011      	str	r1, [r2, #0]
 800352c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003530:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	fa92 f1a2 	rbit	r1, r2
 800353a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800353e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003542:	6011      	str	r1, [r2, #0]
  return result;
 8003544:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003548:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800354c:	6812      	ldr	r2, [r2, #0]
 800354e:	fab2 f282 	clz	r2, r2
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	f042 0220 	orr.w	r2, r2, #32
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	f002 021f 	and.w	r2, r2, #31
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f202 	lsl.w	r2, r1, r2
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d182      	bne.n	8003470 <HAL_RCC_OscConfig+0xf2c>
 800356a:	e037      	b.n	80035dc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800356c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003570:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e02e      	b.n	80035de <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003580:	4b19      	ldr	r3, [pc, #100]	@ (80035e8 <HAL_RCC_OscConfig+0x10a4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003588:	4b17      	ldr	r3, [pc, #92]	@ (80035e8 <HAL_RCC_OscConfig+0x10a4>)
 800358a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003590:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003594:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800359c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d117      	bne.n	80035d8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035ac:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035bc:	429a      	cmp	r2, r3
 80035be:	d10b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80035c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000

080035ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b09e      	sub	sp, #120	@ 0x78
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e162      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003604:	4b90      	ldr	r3, [pc, #576]	@ (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d910      	bls.n	8003634 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b8d      	ldr	r3, [pc, #564]	@ (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0207 	bic.w	r2, r3, #7
 800361a:	498b      	ldr	r1, [pc, #556]	@ (8003848 <HAL_RCC_ClockConfig+0x25c>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b89      	ldr	r3, [pc, #548]	@ (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e14a      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b82      	ldr	r3, [pc, #520]	@ (800384c <HAL_RCC_ClockConfig+0x260>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	497f      	ldr	r1, [pc, #508]	@ (800384c <HAL_RCC_ClockConfig+0x260>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80dc 	beq.w	8003818 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d13c      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xf6>
 8003668:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800366c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d102      	bne.n	8003692 <HAL_RCC_ClockConfig+0xa6>
 800368c:	4b6f      	ldr	r3, [pc, #444]	@ (800384c <HAL_RCC_ClockConfig+0x260>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	e00f      	b.n	80036b2 <HAL_RCC_ClockConfig+0xc6>
 8003692:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003696:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	667b      	str	r3, [r7, #100]	@ 0x64
 80036a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80036a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036ae:	4b67      	ldr	r3, [pc, #412]	@ (800384c <HAL_RCC_ClockConfig+0x260>)
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036ba:	fa92 f2a2 	rbit	r2, r2
 80036be:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80036c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036c2:	fab2 f282 	clz	r2, r2
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	f042 0220 	orr.w	r2, r2, #32
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	f002 021f 	and.w	r2, r2, #31
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f202 	lsl.w	r2, r1, r2
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d17b      	bne.n	80037d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0f3      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d13c      	bne.n	8003764 <HAL_RCC_ClockConfig+0x178>
 80036ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d102      	bne.n	8003714 <HAL_RCC_ClockConfig+0x128>
 800370e:	4b4f      	ldr	r3, [pc, #316]	@ (800384c <HAL_RCC_ClockConfig+0x260>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	e00f      	b.n	8003734 <HAL_RCC_ClockConfig+0x148>
 8003714:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003718:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	647b      	str	r3, [r7, #68]	@ 0x44
 8003722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003726:	643b      	str	r3, [r7, #64]	@ 0x40
 8003728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003730:	4b46      	ldr	r3, [pc, #280]	@ (800384c <HAL_RCC_ClockConfig+0x260>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003738:	63ba      	str	r2, [r7, #56]	@ 0x38
 800373a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800373c:	fa92 f2a2 	rbit	r2, r2
 8003740:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003742:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003744:	fab2 f282 	clz	r2, r2
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f042 0220 	orr.w	r2, r2, #32
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f002 021f 	and.w	r2, r2, #31
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f202 	lsl.w	r2, r1, r2
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d13a      	bne.n	80037d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0b2      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
 8003764:	2302      	movs	r3, #2
 8003766:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d102      	bne.n	800378c <HAL_RCC_ClockConfig+0x1a0>
 8003786:	4b31      	ldr	r3, [pc, #196]	@ (800384c <HAL_RCC_ClockConfig+0x260>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	e00d      	b.n	80037a8 <HAL_RCC_ClockConfig+0x1bc>
 800378c:	2302      	movs	r3, #2
 800378e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
 8003798:	2302      	movs	r3, #2
 800379a:	623b      	str	r3, [r7, #32]
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	4b29      	ldr	r3, [pc, #164]	@ (800384c <HAL_RCC_ClockConfig+0x260>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	2202      	movs	r2, #2
 80037aa:	61ba      	str	r2, [r7, #24]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	fa92 f2a2 	rbit	r2, r2
 80037b2:	617a      	str	r2, [r7, #20]
  return result;
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	fab2 f282 	clz	r2, r2
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f042 0220 	orr.w	r2, r2, #32
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	f002 021f 	and.w	r2, r2, #31
 80037c6:	2101      	movs	r1, #1
 80037c8:	fa01 f202 	lsl.w	r2, r1, r2
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e079      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d6:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <HAL_RCC_ClockConfig+0x260>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	491a      	ldr	r1, [pc, #104]	@ (800384c <HAL_RCC_ClockConfig+0x260>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e8:	f7fd fa22 	bl	8000c30 <HAL_GetTick>
 80037ec:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f0:	f7fd fa1e 	bl	8000c30 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e061      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	4b11      	ldr	r3, [pc, #68]	@ (800384c <HAL_RCC_ClockConfig+0x260>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 020c 	and.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	429a      	cmp	r2, r3
 8003816:	d1eb      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_RCC_ClockConfig+0x25c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d214      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 0207 	bic.w	r2, r3, #7
 800382e:	4906      	ldr	r1, [pc, #24]	@ (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b04      	ldr	r3, [pc, #16]	@ (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e040      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
 8003848:	40022000 	.word	0x40022000
 800384c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385c:	4b1d      	ldr	r3, [pc, #116]	@ (80038d4 <HAL_RCC_ClockConfig+0x2e8>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	491a      	ldr	r1, [pc, #104]	@ (80038d4 <HAL_RCC_ClockConfig+0x2e8>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <HAL_RCC_ClockConfig+0x2e8>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4912      	ldr	r1, [pc, #72]	@ (80038d4 <HAL_RCC_ClockConfig+0x2e8>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800388e:	f000 f829 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8003892:	4601      	mov	r1, r0
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <HAL_RCC_ClockConfig+0x2e8>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800389c:	22f0      	movs	r2, #240	@ 0xf0
 800389e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	fa92 f2a2 	rbit	r2, r2
 80038a6:	60fa      	str	r2, [r7, #12]
  return result;
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	fab2 f282 	clz	r2, r2
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	40d3      	lsrs	r3, r2
 80038b2:	4a09      	ldr	r2, [pc, #36]	@ (80038d8 <HAL_RCC_ClockConfig+0x2ec>)
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	fa21 f303 	lsr.w	r3, r1, r3
 80038ba:	4a08      	ldr	r2, [pc, #32]	@ (80038dc <HAL_RCC_ClockConfig+0x2f0>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038be:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <HAL_RCC_ClockConfig+0x2f4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd f8ae 	bl	8000a24 <HAL_InitTick>
  
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3778      	adds	r7, #120	@ 0x78
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	08008fac 	.word	0x08008fac
 80038dc:	20000004 	.word	0x20000004
 80038e0:	20000008 	.word	0x20000008

080038e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80038fe:	4b1f      	ldr	r3, [pc, #124]	@ (800397c <HAL_RCC_GetSysClockFreq+0x98>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b04      	cmp	r3, #4
 800390c:	d002      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0x30>
 800390e:	2b08      	cmp	r3, #8
 8003910:	d003      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x36>
 8003912:	e029      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003914:	4b1a      	ldr	r3, [pc, #104]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003916:	613b      	str	r3, [r7, #16]
      break;
 8003918:	e029      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	0c9b      	lsrs	r3, r3, #18
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	4a18      	ldr	r2, [pc, #96]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003924:	5cd3      	ldrb	r3, [r2, r3]
 8003926:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003928:	4b14      	ldr	r3, [pc, #80]	@ (800397c <HAL_RCC_GetSysClockFreq+0x98>)
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	4a15      	ldr	r2, [pc, #84]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003940:	4a0f      	ldr	r2, [pc, #60]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	fbb2 f2f3 	udiv	r2, r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	fb02 f303 	mul.w	r3, r2, r3
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e007      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003952:	4a0b      	ldr	r2, [pc, #44]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	fbb2 f2f3 	udiv	r2, r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	613b      	str	r3, [r7, #16]
      break;
 8003966:	e002      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003968:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x9c>)
 800396a:	613b      	str	r3, [r7, #16]
      break;
 800396c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396e:	693b      	ldr	r3, [r7, #16]
}
 8003970:	4618      	mov	r0, r3
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	08008fc4 	.word	0x08008fc4
 8003988:	08008fd4 	.word	0x08008fd4

0800398c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000004 	.word	0x20000004

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039aa:	f7ff ffef 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039ae:	4601      	mov	r1, r0
 80039b0:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039b8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	fa92 f2a2 	rbit	r2, r2
 80039c4:	603a      	str	r2, [r7, #0]
  return result;
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	fab2 f282 	clz	r2, r2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	40d3      	lsrs	r3, r2
 80039d0:	4a04      	ldr	r2, [pc, #16]	@ (80039e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	08008fbc 	.word	0x08008fbc

080039e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039ee:	f7ff ffcd 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039f2:	4601      	mov	r1, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80039fc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	fa92 f2a2 	rbit	r2, r2
 8003a08:	603a      	str	r2, [r7, #0]
  return result;
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	fab2 f282 	clz	r2, r2
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	40d3      	lsrs	r3, r2
 8003a14:	4a04      	ldr	r2, [pc, #16]	@ (8003a28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a16:	5cd3      	ldrb	r3, [r2, r3]
 8003a18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08008fbc 	.word	0x08008fbc

08003a2c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	220f      	movs	r2, #15
 8003a3a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a3c:	4b12      	ldr	r3, [pc, #72]	@ (8003a88 <HAL_RCC_GetClockConfig+0x5c>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0203 	and.w	r2, r3, #3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003a48:	4b0f      	ldr	r3, [pc, #60]	@ (8003a88 <HAL_RCC_GetClockConfig+0x5c>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003a54:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <HAL_RCC_GetClockConfig+0x5c>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a60:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <HAL_RCC_GetClockConfig+0x5c>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003a6e:	4b07      	ldr	r3, [pc, #28]	@ (8003a8c <HAL_RCC_GetClockConfig+0x60>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0207 	and.w	r2, r3, #7
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	601a      	str	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40022000 	.word	0x40022000

08003a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b092      	sub	sp, #72	@ 0x48
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80d4 	beq.w	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab4:	4b4e      	ldr	r3, [pc, #312]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10e      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	61d3      	str	r3, [r2, #28]
 8003acc:	4b48      	ldr	r3, [pc, #288]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b45      	ldr	r3, [pc, #276]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d118      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aea:	4b42      	ldr	r3, [pc, #264]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a41      	ldr	r2, [pc, #260]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af6:	f7fd f89b 	bl	8000c30 <HAL_GetTick>
 8003afa:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	e008      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afe:	f7fd f897 	bl	8000c30 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b64      	cmp	r3, #100	@ 0x64
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1d6      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	4b38      	ldr	r3, [pc, #224]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b1c:	4b34      	ldr	r3, [pc, #208]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8084 	beq.w	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d07c      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b4a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b26      	ldr	r3, [pc, #152]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	461a      	mov	r2, r3
 8003b66:	2301      	movs	r3, #1
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b8e:	4a18      	ldr	r2, [pc, #96]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b92:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d04b      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fd f847 	bl	8000c30 <HAL_GetTick>
 8003ba2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fd f843 	bl	8000c30 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e180      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc8:	2302      	movs	r3, #2
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	fa93 f3a3 	rbit	r3, r3
 8003bd2:	61fb      	str	r3, [r7, #28]
  return result;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d108      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003bea:	4b01      	ldr	r3, [pc, #4]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	e00d      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	10908100 	.word	0x10908100
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	4b9a      	ldr	r3, [pc, #616]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	613a      	str	r2, [r7, #16]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	fa92 f2a2 	rbit	r2, r2
 8003c16:	60fa      	str	r2, [r7, #12]
  return result;
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	fab2 f282 	clz	r2, r2
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	f002 021f 	and.w	r2, r2, #31
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0b7      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c36:	4b8f      	ldr	r3, [pc, #572]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	498c      	ldr	r1, [pc, #560]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c48:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d105      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c50:	4b88      	ldr	r3, [pc, #544]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	4a87      	ldr	r2, [pc, #540]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c68:	4b82      	ldr	r3, [pc, #520]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6c:	f023 0203 	bic.w	r2, r3, #3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	497f      	ldr	r1, [pc, #508]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c86:	4b7b      	ldr	r3, [pc, #492]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4978      	ldr	r1, [pc, #480]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ca4:	4b73      	ldr	r3, [pc, #460]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	4970      	ldr	r1, [pc, #448]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cc2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	f023 0210 	bic.w	r2, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	4969      	ldr	r1, [pc, #420]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ce0:	4b64      	ldr	r3, [pc, #400]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cec:	4961      	ldr	r1, [pc, #388]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	f023 0220 	bic.w	r2, r3, #32
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	495a      	ldr	r1, [pc, #360]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d1c:	4b55      	ldr	r3, [pc, #340]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d20:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	4952      	ldr	r1, [pc, #328]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	494b      	ldr	r1, [pc, #300]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d58:	4b46      	ldr	r3, [pc, #280]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	4943      	ldr	r1, [pc, #268]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d76:	4b3f      	ldr	r3, [pc, #252]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	493c      	ldr	r1, [pc, #240]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d94:	4b37      	ldr	r3, [pc, #220]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	4934      	ldr	r1, [pc, #208]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003db2:	4b30      	ldr	r3, [pc, #192]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	492d      	ldr	r1, [pc, #180]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dd0:	4b28      	ldr	r3, [pc, #160]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ddc:	4925      	ldr	r1, [pc, #148]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003dee:	4b21      	ldr	r3, [pc, #132]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	491e      	ldr	r1, [pc, #120]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003e0c:	4b19      	ldr	r3, [pc, #100]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	4916      	ldr	r1, [pc, #88]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003e2a:	4b12      	ldr	r3, [pc, #72]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e36:	490f      	ldr	r1, [pc, #60]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e48:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e54:	4907      	ldr	r1, [pc, #28]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00c      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003e66:	4b03      	ldr	r3, [pc, #12]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	e002      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e7a:	4913      	ldr	r1, [pc, #76]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e98:	490b      	ldr	r1, [pc, #44]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003eaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb6:	4904      	ldr	r1, [pc, #16]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3748      	adds	r7, #72	@ 0x48
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000

08003ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e049      	b.n	8003f72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fc fd20 	bl	8000938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f000 fa38 	bl	8004380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d001      	beq.n	8003f94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e047      	b.n	8004024 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a23      	ldr	r2, [pc, #140]	@ (8004030 <HAL_TIM_Base_Start+0xb4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01d      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fae:	d018      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8004034 <HAL_TIM_Base_Start+0xb8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004038 <HAL_TIM_Base_Start+0xbc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800403c <HAL_TIM_Base_Start+0xc0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004040 <HAL_TIM_Base_Start+0xc4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	@ (8004044 <HAL_TIM_Base_Start+0xc8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d115      	bne.n	800400e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	4b17      	ldr	r3, [pc, #92]	@ (8004048 <HAL_TIM_Base_Start+0xcc>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b06      	cmp	r3, #6
 8003ff2:	d015      	beq.n	8004020 <HAL_TIM_Base_Start+0xa4>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ffa:	d011      	beq.n	8004020 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400c:	e008      	b.n	8004020 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e000      	b.n	8004022 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004020:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40000400 	.word	0x40000400
 8004038:	40000800 	.word	0x40000800
 800403c:	40013400 	.word	0x40013400
 8004040:	40014000 	.word	0x40014000
 8004044:	40015000 	.word	0x40015000
 8004048:	00010007 	.word	0x00010007

0800404c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d001      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e04f      	b.n	8004104 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a23      	ldr	r2, [pc, #140]	@ (8004110 <HAL_TIM_Base_Start_IT+0xc4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01d      	beq.n	80040c2 <HAL_TIM_Base_Start_IT+0x76>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408e:	d018      	beq.n	80040c2 <HAL_TIM_Base_Start_IT+0x76>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1f      	ldr	r2, [pc, #124]	@ (8004114 <HAL_TIM_Base_Start_IT+0xc8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <HAL_TIM_Base_Start_IT+0x76>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1e      	ldr	r2, [pc, #120]	@ (8004118 <HAL_TIM_Base_Start_IT+0xcc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00e      	beq.n	80040c2 <HAL_TIM_Base_Start_IT+0x76>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1c      	ldr	r2, [pc, #112]	@ (800411c <HAL_TIM_Base_Start_IT+0xd0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d009      	beq.n	80040c2 <HAL_TIM_Base_Start_IT+0x76>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004120 <HAL_TIM_Base_Start_IT+0xd4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_TIM_Base_Start_IT+0x76>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a19      	ldr	r2, [pc, #100]	@ (8004124 <HAL_TIM_Base_Start_IT+0xd8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d115      	bne.n	80040ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	4b17      	ldr	r3, [pc, #92]	@ (8004128 <HAL_TIM_Base_Start_IT+0xdc>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b06      	cmp	r3, #6
 80040d2:	d015      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0xb4>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040da:	d011      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ec:	e008      	b.n	8004100 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0201 	orr.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e000      	b.n	8004102 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004100:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40013400 	.word	0x40013400
 8004120:	40014000 	.word	0x40014000
 8004124:	40015000 	.word	0x40015000
 8004128:	00010007 	.word	0x00010007

0800412c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d020      	beq.n	8004190 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01b      	beq.n	8004190 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0202 	mvn.w	r2, #2
 8004160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f8e4 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 800417c:	e005      	b.n	800418a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f8d6 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f8e7 	bl	8004358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d020      	beq.n	80041dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01b      	beq.n	80041dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0204 	mvn.w	r2, #4
 80041ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f8be 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 80041c8:	e005      	b.n	80041d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f8b0 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f8c1 	bl	8004358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d020      	beq.n	8004228 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01b      	beq.n	8004228 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0208 	mvn.w	r2, #8
 80041f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2204      	movs	r2, #4
 80041fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f898 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 8004214:	e005      	b.n	8004222 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f88a 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f89b 	bl	8004358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d020      	beq.n	8004274 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01b      	beq.n	8004274 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0210 	mvn.w	r2, #16
 8004244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2208      	movs	r2, #8
 800424a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f872 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f864 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f875 	bl	8004358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00c      	beq.n	8004298 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0201 	mvn.w	r2, #1
 8004290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fc faa8 	bl	80007e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00c      	beq.n	80042bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f9a2 	bl	8004600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00c      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f99a 	bl	8004614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00c      	beq.n	8004304 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f834 	bl	800436c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00c      	beq.n	8004328 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0220 	mvn.w	r2, #32
 8004320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f962 	bl	80045ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a48      	ldr	r2, [pc, #288]	@ (80044b4 <TIM_Base_SetConfig+0x134>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d013      	beq.n	80043c0 <TIM_Base_SetConfig+0x40>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439e:	d00f      	beq.n	80043c0 <TIM_Base_SetConfig+0x40>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a45      	ldr	r2, [pc, #276]	@ (80044b8 <TIM_Base_SetConfig+0x138>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00b      	beq.n	80043c0 <TIM_Base_SetConfig+0x40>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a44      	ldr	r2, [pc, #272]	@ (80044bc <TIM_Base_SetConfig+0x13c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d007      	beq.n	80043c0 <TIM_Base_SetConfig+0x40>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a43      	ldr	r2, [pc, #268]	@ (80044c0 <TIM_Base_SetConfig+0x140>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_Base_SetConfig+0x40>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a42      	ldr	r2, [pc, #264]	@ (80044c4 <TIM_Base_SetConfig+0x144>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d108      	bne.n	80043d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a37      	ldr	r2, [pc, #220]	@ (80044b4 <TIM_Base_SetConfig+0x134>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01f      	beq.n	800441a <TIM_Base_SetConfig+0x9a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e0:	d01b      	beq.n	800441a <TIM_Base_SetConfig+0x9a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a34      	ldr	r2, [pc, #208]	@ (80044b8 <TIM_Base_SetConfig+0x138>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d017      	beq.n	800441a <TIM_Base_SetConfig+0x9a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a33      	ldr	r2, [pc, #204]	@ (80044bc <TIM_Base_SetConfig+0x13c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <TIM_Base_SetConfig+0x9a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a32      	ldr	r2, [pc, #200]	@ (80044c0 <TIM_Base_SetConfig+0x140>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00f      	beq.n	800441a <TIM_Base_SetConfig+0x9a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a32      	ldr	r2, [pc, #200]	@ (80044c8 <TIM_Base_SetConfig+0x148>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00b      	beq.n	800441a <TIM_Base_SetConfig+0x9a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a31      	ldr	r2, [pc, #196]	@ (80044cc <TIM_Base_SetConfig+0x14c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d007      	beq.n	800441a <TIM_Base_SetConfig+0x9a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a30      	ldr	r2, [pc, #192]	@ (80044d0 <TIM_Base_SetConfig+0x150>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <TIM_Base_SetConfig+0x9a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a2b      	ldr	r2, [pc, #172]	@ (80044c4 <TIM_Base_SetConfig+0x144>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d108      	bne.n	800442c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a18      	ldr	r2, [pc, #96]	@ (80044b4 <TIM_Base_SetConfig+0x134>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <TIM_Base_SetConfig+0x100>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <TIM_Base_SetConfig+0x140>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00f      	beq.n	8004480 <TIM_Base_SetConfig+0x100>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a19      	ldr	r2, [pc, #100]	@ (80044c8 <TIM_Base_SetConfig+0x148>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00b      	beq.n	8004480 <TIM_Base_SetConfig+0x100>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a18      	ldr	r2, [pc, #96]	@ (80044cc <TIM_Base_SetConfig+0x14c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d007      	beq.n	8004480 <TIM_Base_SetConfig+0x100>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a17      	ldr	r2, [pc, #92]	@ (80044d0 <TIM_Base_SetConfig+0x150>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_Base_SetConfig+0x100>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a12      	ldr	r2, [pc, #72]	@ (80044c4 <TIM_Base_SetConfig+0x144>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d103      	bne.n	8004488 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b01      	cmp	r3, #1
 8004498:	d105      	bne.n	80044a6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f023 0201 	bic.w	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	611a      	str	r2, [r3, #16]
  }
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800
 80044c0:	40013400 	.word	0x40013400
 80044c4:	40015000 	.word	0x40015000
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40014400 	.word	0x40014400
 80044d0:	40014800 	.word	0x40014800

080044d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e06d      	b.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a30      	ldr	r2, [pc, #192]	@ (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d009      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2f      	ldr	r2, [pc, #188]	@ (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a2d      	ldr	r2, [pc, #180]	@ (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d108      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004530:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1e      	ldr	r2, [pc, #120]	@ (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d01d      	beq.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004568:	d018      	beq.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1c      	ldr	r2, [pc, #112]	@ (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1a      	ldr	r2, [pc, #104]	@ (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a15      	ldr	r2, [pc, #84]	@ (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a16      	ldr	r2, [pc, #88]	@ (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a11      	ldr	r2, [pc, #68]	@ (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d10c      	bne.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	40013400 	.word	0x40013400
 80045dc:	40015000 	.word	0x40015000
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40014000 	.word	0x40014000

080045ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e040      	b.n	80046bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fc f9a8 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2224      	movs	r2, #36	@ 0x24
 8004654:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0201 	bic.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f9fc 	bl	8004a6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f825 	bl	80046c4 <UART_SetConfig>
 800467a:	4603      	mov	r3, r0
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e01b      	b.n	80046bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fa7b 	bl	8004bb0 <UART_CheckIdleState>
 80046ba:	4603      	mov	r3, r0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b92      	ldr	r3, [pc, #584]	@ (8004938 <UART_SetConfig+0x274>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	6979      	ldr	r1, [r7, #20]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	430a      	orrs	r2, r1
 8004734:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a80      	ldr	r2, [pc, #512]	@ (800493c <UART_SetConfig+0x278>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d120      	bne.n	8004782 <UART_SetConfig+0xbe>
 8004740:	4b7f      	ldr	r3, [pc, #508]	@ (8004940 <UART_SetConfig+0x27c>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	2b03      	cmp	r3, #3
 800474a:	d817      	bhi.n	800477c <UART_SetConfig+0xb8>
 800474c:	a201      	add	r2, pc, #4	@ (adr r2, 8004754 <UART_SetConfig+0x90>)
 800474e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004752:	bf00      	nop
 8004754:	08004765 	.word	0x08004765
 8004758:	08004771 	.word	0x08004771
 800475c:	08004777 	.word	0x08004777
 8004760:	0800476b 	.word	0x0800476b
 8004764:	2301      	movs	r3, #1
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e0b5      	b.n	80048d6 <UART_SetConfig+0x212>
 800476a:	2302      	movs	r3, #2
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e0b2      	b.n	80048d6 <UART_SetConfig+0x212>
 8004770:	2304      	movs	r3, #4
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e0af      	b.n	80048d6 <UART_SetConfig+0x212>
 8004776:	2308      	movs	r3, #8
 8004778:	77fb      	strb	r3, [r7, #31]
 800477a:	e0ac      	b.n	80048d6 <UART_SetConfig+0x212>
 800477c:	2310      	movs	r3, #16
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e0a9      	b.n	80048d6 <UART_SetConfig+0x212>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6f      	ldr	r2, [pc, #444]	@ (8004944 <UART_SetConfig+0x280>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d124      	bne.n	80047d6 <UART_SetConfig+0x112>
 800478c:	4b6c      	ldr	r3, [pc, #432]	@ (8004940 <UART_SetConfig+0x27c>)
 800478e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004790:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004794:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004798:	d011      	beq.n	80047be <UART_SetConfig+0xfa>
 800479a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800479e:	d817      	bhi.n	80047d0 <UART_SetConfig+0x10c>
 80047a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047a4:	d011      	beq.n	80047ca <UART_SetConfig+0x106>
 80047a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047aa:	d811      	bhi.n	80047d0 <UART_SetConfig+0x10c>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <UART_SetConfig+0xf4>
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b4:	d006      	beq.n	80047c4 <UART_SetConfig+0x100>
 80047b6:	e00b      	b.n	80047d0 <UART_SetConfig+0x10c>
 80047b8:	2300      	movs	r3, #0
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e08b      	b.n	80048d6 <UART_SetConfig+0x212>
 80047be:	2302      	movs	r3, #2
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e088      	b.n	80048d6 <UART_SetConfig+0x212>
 80047c4:	2304      	movs	r3, #4
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e085      	b.n	80048d6 <UART_SetConfig+0x212>
 80047ca:	2308      	movs	r3, #8
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e082      	b.n	80048d6 <UART_SetConfig+0x212>
 80047d0:	2310      	movs	r3, #16
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e07f      	b.n	80048d6 <UART_SetConfig+0x212>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a5b      	ldr	r2, [pc, #364]	@ (8004948 <UART_SetConfig+0x284>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d124      	bne.n	800482a <UART_SetConfig+0x166>
 80047e0:	4b57      	ldr	r3, [pc, #348]	@ (8004940 <UART_SetConfig+0x27c>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80047e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047ec:	d011      	beq.n	8004812 <UART_SetConfig+0x14e>
 80047ee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047f2:	d817      	bhi.n	8004824 <UART_SetConfig+0x160>
 80047f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047f8:	d011      	beq.n	800481e <UART_SetConfig+0x15a>
 80047fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047fe:	d811      	bhi.n	8004824 <UART_SetConfig+0x160>
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <UART_SetConfig+0x148>
 8004804:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004808:	d006      	beq.n	8004818 <UART_SetConfig+0x154>
 800480a:	e00b      	b.n	8004824 <UART_SetConfig+0x160>
 800480c:	2300      	movs	r3, #0
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e061      	b.n	80048d6 <UART_SetConfig+0x212>
 8004812:	2302      	movs	r3, #2
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e05e      	b.n	80048d6 <UART_SetConfig+0x212>
 8004818:	2304      	movs	r3, #4
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e05b      	b.n	80048d6 <UART_SetConfig+0x212>
 800481e:	2308      	movs	r3, #8
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e058      	b.n	80048d6 <UART_SetConfig+0x212>
 8004824:	2310      	movs	r3, #16
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e055      	b.n	80048d6 <UART_SetConfig+0x212>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a47      	ldr	r2, [pc, #284]	@ (800494c <UART_SetConfig+0x288>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d124      	bne.n	800487e <UART_SetConfig+0x1ba>
 8004834:	4b42      	ldr	r3, [pc, #264]	@ (8004940 <UART_SetConfig+0x27c>)
 8004836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004838:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800483c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004840:	d011      	beq.n	8004866 <UART_SetConfig+0x1a2>
 8004842:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004846:	d817      	bhi.n	8004878 <UART_SetConfig+0x1b4>
 8004848:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800484c:	d011      	beq.n	8004872 <UART_SetConfig+0x1ae>
 800484e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004852:	d811      	bhi.n	8004878 <UART_SetConfig+0x1b4>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <UART_SetConfig+0x19c>
 8004858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800485c:	d006      	beq.n	800486c <UART_SetConfig+0x1a8>
 800485e:	e00b      	b.n	8004878 <UART_SetConfig+0x1b4>
 8004860:	2300      	movs	r3, #0
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e037      	b.n	80048d6 <UART_SetConfig+0x212>
 8004866:	2302      	movs	r3, #2
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e034      	b.n	80048d6 <UART_SetConfig+0x212>
 800486c:	2304      	movs	r3, #4
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e031      	b.n	80048d6 <UART_SetConfig+0x212>
 8004872:	2308      	movs	r3, #8
 8004874:	77fb      	strb	r3, [r7, #31]
 8004876:	e02e      	b.n	80048d6 <UART_SetConfig+0x212>
 8004878:	2310      	movs	r3, #16
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e02b      	b.n	80048d6 <UART_SetConfig+0x212>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a33      	ldr	r2, [pc, #204]	@ (8004950 <UART_SetConfig+0x28c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d124      	bne.n	80048d2 <UART_SetConfig+0x20e>
 8004888:	4b2d      	ldr	r3, [pc, #180]	@ (8004940 <UART_SetConfig+0x27c>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004890:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004894:	d011      	beq.n	80048ba <UART_SetConfig+0x1f6>
 8004896:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800489a:	d817      	bhi.n	80048cc <UART_SetConfig+0x208>
 800489c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048a0:	d011      	beq.n	80048c6 <UART_SetConfig+0x202>
 80048a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048a6:	d811      	bhi.n	80048cc <UART_SetConfig+0x208>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <UART_SetConfig+0x1f0>
 80048ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048b0:	d006      	beq.n	80048c0 <UART_SetConfig+0x1fc>
 80048b2:	e00b      	b.n	80048cc <UART_SetConfig+0x208>
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e00d      	b.n	80048d6 <UART_SetConfig+0x212>
 80048ba:	2302      	movs	r3, #2
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e00a      	b.n	80048d6 <UART_SetConfig+0x212>
 80048c0:	2304      	movs	r3, #4
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e007      	b.n	80048d6 <UART_SetConfig+0x212>
 80048c6:	2308      	movs	r3, #8
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e004      	b.n	80048d6 <UART_SetConfig+0x212>
 80048cc:	2310      	movs	r3, #16
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e001      	b.n	80048d6 <UART_SetConfig+0x212>
 80048d2:	2310      	movs	r3, #16
 80048d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048de:	d16b      	bne.n	80049b8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80048e0:	7ffb      	ldrb	r3, [r7, #31]
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d838      	bhi.n	8004958 <UART_SetConfig+0x294>
 80048e6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <UART_SetConfig+0x228>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004959 	.word	0x08004959
 80048fc:	08004927 	.word	0x08004927
 8004900:	08004959 	.word	0x08004959
 8004904:	08004959 	.word	0x08004959
 8004908:	08004959 	.word	0x08004959
 800490c:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7ff f848 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 8004914:	61b8      	str	r0, [r7, #24]
        break;
 8004916:	e024      	b.n	8004962 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7ff f866 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
 800491c:	61b8      	str	r0, [r7, #24]
        break;
 800491e:	e020      	b.n	8004962 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <UART_SetConfig+0x290>)
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e01d      	b.n	8004962 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe ffdd 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 800492a:	61b8      	str	r0, [r7, #24]
        break;
 800492c:	e019      	b.n	8004962 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004932:	61bb      	str	r3, [r7, #24]
        break;
 8004934:	e015      	b.n	8004962 <UART_SetConfig+0x29e>
 8004936:	bf00      	nop
 8004938:	efff69f3 	.word	0xefff69f3
 800493c:	40013800 	.word	0x40013800
 8004940:	40021000 	.word	0x40021000
 8004944:	40004400 	.word	0x40004400
 8004948:	40004800 	.word	0x40004800
 800494c:	40004c00 	.word	0x40004c00
 8004950:	40005000 	.word	0x40005000
 8004954:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	77bb      	strb	r3, [r7, #30]
        break;
 8004960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d073      	beq.n	8004a50 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	005a      	lsls	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	441a      	add	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b0f      	cmp	r3, #15
 8004982:	d916      	bls.n	80049b2 <UART_SetConfig+0x2ee>
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800498a:	d212      	bcs.n	80049b2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f023 030f 	bic.w	r3, r3, #15
 8004994:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	085b      	lsrs	r3, r3, #1
 800499a:	b29b      	uxth	r3, r3
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	89fb      	ldrh	r3, [r7, #14]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	89fa      	ldrh	r2, [r7, #14]
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	e04e      	b.n	8004a50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	77bb      	strb	r3, [r7, #30]
 80049b6:	e04b      	b.n	8004a50 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049b8:	7ffb      	ldrb	r3, [r7, #31]
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d827      	bhi.n	8004a0e <UART_SetConfig+0x34a>
 80049be:	a201      	add	r2, pc, #4	@ (adr r2, 80049c4 <UART_SetConfig+0x300>)
 80049c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c4:	080049e9 	.word	0x080049e9
 80049c8:	080049f1 	.word	0x080049f1
 80049cc:	080049f9 	.word	0x080049f9
 80049d0:	08004a0f 	.word	0x08004a0f
 80049d4:	080049ff 	.word	0x080049ff
 80049d8:	08004a0f 	.word	0x08004a0f
 80049dc:	08004a0f 	.word	0x08004a0f
 80049e0:	08004a0f 	.word	0x08004a0f
 80049e4:	08004a07 	.word	0x08004a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e8:	f7fe ffdc 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 80049ec:	61b8      	str	r0, [r7, #24]
        break;
 80049ee:	e013      	b.n	8004a18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049f0:	f7fe fffa 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
 80049f4:	61b8      	str	r0, [r7, #24]
        break;
 80049f6:	e00f      	b.n	8004a18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a68 <UART_SetConfig+0x3a4>)
 80049fa:	61bb      	str	r3, [r7, #24]
        break;
 80049fc:	e00c      	b.n	8004a18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049fe:	f7fe ff71 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8004a02:	61b8      	str	r0, [r7, #24]
        break;
 8004a04:	e008      	b.n	8004a18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a0a:	61bb      	str	r3, [r7, #24]
        break;
 8004a0c:	e004      	b.n	8004a18 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	77bb      	strb	r3, [r7, #30]
        break;
 8004a16:	bf00      	nop
    }

    if (pclk != 0U)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d018      	beq.n	8004a50 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	085a      	lsrs	r2, r3, #1
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	441a      	add	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b0f      	cmp	r3, #15
 8004a36:	d909      	bls.n	8004a4c <UART_SetConfig+0x388>
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a3e:	d205      	bcs.n	8004a4c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e001      	b.n	8004a50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	007a1200 	.word	0x007a1200

08004a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01a      	beq.n	8004b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6a:	d10a      	bne.n	8004b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b098      	sub	sp, #96	@ 0x60
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bc0:	f7fc f836 	bl	8000c30 <HAL_GetTick>
 8004bc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d12e      	bne.n	8004c32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f88c 	bl	8004d00 <UART_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d021      	beq.n	8004c32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e6      	bne.n	8004bee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e062      	b.n	8004cf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d149      	bne.n	8004cd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f856 	bl	8004d00 <UART_WaitOnFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d03c      	beq.n	8004cd4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	623b      	str	r3, [r7, #32]
   return(result);
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e6      	bne.n	8004c5a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3308      	adds	r3, #8
 8004c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	e853 3f00 	ldrex	r3, [r3]
 8004c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cac:	61fa      	str	r2, [r7, #28]
 8004cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	69b9      	ldr	r1, [r7, #24]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e5      	bne.n	8004c8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e011      	b.n	8004cf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3758      	adds	r7, #88	@ 0x58
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d10:	e04f      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d04b      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1a:	f7fb ff89 	bl	8000c30 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e04e      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d037      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b80      	cmp	r3, #128	@ 0x80
 8004d46:	d034      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b40      	cmp	r3, #64	@ 0x40
 8004d4c:	d031      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d110      	bne.n	8004d7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2208      	movs	r2, #8
 8004d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f838 	bl	8004dda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e029      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d8c:	d111      	bne.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f81e 	bl	8004dda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e00f      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	bf0c      	ite	eq
 8004dc2:	2301      	moveq	r3, #1
 8004dc4:	2300      	movne	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d0a0      	beq.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b095      	sub	sp, #84	@ 0x54
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e6      	bne.n	8004de2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d118      	bne.n	8004e82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f023 0310 	bic.w	r3, r3, #16
 8004e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6979      	ldr	r1, [r7, #20]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e6      	bne.n	8004e50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e96:	bf00      	nop
 8004e98:	3754      	adds	r7, #84	@ 0x54
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eaa:	f3ef 8305 	mrs	r3, IPSR
 8004eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10f      	bne.n	8004ed6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eba:	607b      	str	r3, [r7, #4]
  return(result);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <osKernelInitialize+0x32>
 8004ec2:	4b11      	ldr	r3, [pc, #68]	@ (8004f08 <osKernelInitialize+0x64>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d109      	bne.n	8004ede <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eca:	f3ef 8311 	mrs	r3, BASEPRI
 8004ece:	603b      	str	r3, [r7, #0]
  return(result);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004ed6:	f06f 0305 	mvn.w	r3, #5
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e00c      	b.n	8004ef8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ede:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <osKernelInitialize+0x64>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d105      	bne.n	8004ef2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004ee6:	4b08      	ldr	r3, [pc, #32]	@ (8004f08 <osKernelInitialize+0x64>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e002      	b.n	8004ef8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	200062a4 	.word	0x200062a4

08004f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f12:	f3ef 8305 	mrs	r3, IPSR
 8004f16:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f22:	607b      	str	r3, [r7, #4]
  return(result);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <osKernelStart+0x32>
 8004f2a:	4b11      	ldr	r3, [pc, #68]	@ (8004f70 <osKernelStart+0x64>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d109      	bne.n	8004f46 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f32:	f3ef 8311 	mrs	r3, BASEPRI
 8004f36:	603b      	str	r3, [r7, #0]
  return(result);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004f3e:	f06f 0305 	mvn.w	r3, #5
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e00e      	b.n	8004f64 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f46:	4b0a      	ldr	r3, [pc, #40]	@ (8004f70 <osKernelStart+0x64>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004f4e:	4b08      	ldr	r3, [pc, #32]	@ (8004f70 <osKernelStart+0x64>)
 8004f50:	2202      	movs	r2, #2
 8004f52:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004f54:	f001 f84c 	bl	8005ff0 <vTaskStartScheduler>
      stat = osOK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e002      	b.n	8004f64 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f64:	68fb      	ldr	r3, [r7, #12]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	200062a4 	.word	0x200062a4

08004f74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b092      	sub	sp, #72	@ 0x48
 8004f78:	af04      	add	r7, sp, #16
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f84:	f3ef 8305 	mrs	r3, IPSR
 8004f88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f040 8094 	bne.w	80050ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f92:	f3ef 8310 	mrs	r3, PRIMASK
 8004f96:	623b      	str	r3, [r7, #32]
  return(result);
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f040 808d 	bne.w	80050ba <osThreadNew+0x146>
 8004fa0:	4b48      	ldr	r3, [pc, #288]	@ (80050c4 <osThreadNew+0x150>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d106      	bne.n	8004fb6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fac:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 8082 	bne.w	80050ba <osThreadNew+0x146>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d07e      	beq.n	80050ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004fbc:	2380      	movs	r3, #128	@ 0x80
 8004fbe:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004fc0:	2318      	movs	r3, #24
 8004fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004fc8:	f107 031b 	add.w	r3, r7, #27
 8004fcc:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8004fce:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d045      	beq.n	8005066 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <osThreadNew+0x74>
        name = attr->name;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <osThreadNew+0x9a>
 8004ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffe:	2b38      	cmp	r3, #56	@ 0x38
 8005000:	d805      	bhi.n	800500e <osThreadNew+0x9a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <osThreadNew+0x9e>
        return (NULL);
 800500e:	2300      	movs	r3, #0
 8005010:	e054      	b.n	80050bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00e      	beq.n	8005048 <osThreadNew+0xd4>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005030:	d90a      	bls.n	8005048 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005036:	2b00      	cmp	r3, #0
 8005038:	d006      	beq.n	8005048 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <osThreadNew+0xd4>
        mem = 1;
 8005042:	2301      	movs	r3, #1
 8005044:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005046:	e010      	b.n	800506a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10c      	bne.n	800506a <osThreadNew+0xf6>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d108      	bne.n	800506a <osThreadNew+0xf6>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d104      	bne.n	800506a <osThreadNew+0xf6>
          mem = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005064:	e001      	b.n	800506a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	2b01      	cmp	r3, #1
 800506e:	d110      	bne.n	8005092 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005078:	9202      	str	r2, [sp, #8]
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005084:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fdfe 	bl	8005c88 <xTaskCreateStatic>
 800508c:	4603      	mov	r3, r0
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e013      	b.n	80050ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005094:	2b00      	cmp	r3, #0
 8005096:	d110      	bne.n	80050ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	b29a      	uxth	r2, r3
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fe4b 	bl	8005d46 <xTaskCreate>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d001      	beq.n	80050ba <osThreadNew+0x146>
          hTask = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050ba:	697b      	ldr	r3, [r7, #20]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3738      	adds	r7, #56	@ 0x38
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	200062a4 	.word	0x200062a4

080050c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a07      	ldr	r2, [pc, #28]	@ (80050f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80050d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4a06      	ldr	r2, [pc, #24]	@ (80050f8 <vApplicationGetIdleTaskMemory+0x30>)
 80050de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2280      	movs	r2, #128	@ 0x80
 80050e4:	601a      	str	r2, [r3, #0]
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	200062a8 	.word	0x200062a8
 80050f8:	20006350 	.word	0x20006350

080050fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a07      	ldr	r2, [pc, #28]	@ (8005128 <vApplicationGetTimerTaskMemory+0x2c>)
 800510c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	4a06      	ldr	r2, [pc, #24]	@ (800512c <vApplicationGetTimerTaskMemory+0x30>)
 8005112:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800511a:	601a      	str	r2, [r3, #0]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	20006550 	.word	0x20006550
 800512c:	200065f8 	.word	0x200065f8

08005130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f103 0208 	add.w	r2, r3, #8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f04f 32ff 	mov.w	r2, #4294967295
 8005148:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f103 0208 	add.w	r2, r3, #8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f103 0208 	add.w	r2, r3, #8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800518a:	b480      	push	{r7}
 800518c:	b085      	sub	sp, #20
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	601a      	str	r2, [r3, #0]
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e8:	d103      	bne.n	80051f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e00c      	b.n	800520c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3308      	adds	r3, #8
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e002      	b.n	8005200 <vListInsert+0x2e>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	d2f6      	bcs.n	80051fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6892      	ldr	r2, [r2, #8]
 800525a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6852      	ldr	r2, [r2, #4]
 8005264:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d103      	bne.n	8005278 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	1e5a      	subs	r2, r3, #1
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10b      	bne.n	80052c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052be:	bf00      	nop
 80052c0:	bf00      	nop
 80052c2:	e7fd      	b.n	80052c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052c4:	f002 f9c8 	bl	8007658 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d0:	68f9      	ldr	r1, [r7, #12]
 80052d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	441a      	add	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f4:	3b01      	subs	r3, #1
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	441a      	add	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	22ff      	movs	r2, #255	@ 0xff
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	22ff      	movs	r2, #255	@ 0xff
 8005310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d114      	bne.n	8005344 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01a      	beq.n	8005358 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3310      	adds	r3, #16
 8005326:	4618      	mov	r0, r3
 8005328:	f001 f906 	bl	8006538 <xTaskRemoveFromEventList>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d012      	beq.n	8005358 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005332:	4b0d      	ldr	r3, [pc, #52]	@ (8005368 <xQueueGenericReset+0xd0>)
 8005334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	e009      	b.n	8005358 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3310      	adds	r3, #16
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff fef1 	bl	8005130 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3324      	adds	r3, #36	@ 0x24
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff feec 	bl	8005130 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005358:	f002 f9b0 	bl	80076bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800535c:	2301      	movs	r3, #1
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	@ 0x38
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005392:	bf00      	nop
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10b      	bne.n	80053b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	e7fd      	b.n	80053b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <xQueueGenericCreateStatic+0x56>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <xQueueGenericCreateStatic+0x5a>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <xQueueGenericCreateStatic+0x5c>
 80053c6:	2300      	movs	r3, #0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	623b      	str	r3, [r7, #32]
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <xQueueGenericCreateStatic+0x84>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <xQueueGenericCreateStatic+0x88>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <xQueueGenericCreateStatic+0x8a>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	61fb      	str	r3, [r7, #28]
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	e7fd      	b.n	800540e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005412:	2350      	movs	r3, #80	@ 0x50
 8005414:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b50      	cmp	r3, #80	@ 0x50
 800541a:	d00b      	beq.n	8005434 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	61bb      	str	r3, [r7, #24]
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800543e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005446:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800544a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	4613      	mov	r3, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f805 	bl	8005464 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800545a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800545c:	4618      	mov	r0, r3
 800545e:	3730      	adds	r7, #48	@ 0x30
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d103      	bne.n	8005480 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e002      	b.n	8005486 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005492:	2101      	movs	r1, #1
 8005494:	69b8      	ldr	r0, [r7, #24]
 8005496:	f7ff feff 	bl	8005298 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08e      	sub	sp, #56	@ 0x38
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054ba:	2300      	movs	r3, #0
 80054bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10b      	bne.n	80054e0 <xQueueGenericSend+0x34>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <xQueueGenericSend+0x42>
 80054e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <xQueueGenericSend+0x46>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <xQueueGenericSend+0x48>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10b      	bne.n	8005510 <xQueueGenericSend+0x64>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800550a:	bf00      	nop
 800550c:	bf00      	nop
 800550e:	e7fd      	b.n	800550c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b02      	cmp	r3, #2
 8005514:	d103      	bne.n	800551e <xQueueGenericSend+0x72>
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <xQueueGenericSend+0x76>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <xQueueGenericSend+0x78>
 8005522:	2300      	movs	r3, #0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10b      	bne.n	8005540 <xQueueGenericSend+0x94>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	623b      	str	r3, [r7, #32]
}
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	e7fd      	b.n	800553c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005540:	f001 f9c6 	bl	80068d0 <xTaskGetSchedulerState>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d102      	bne.n	8005550 <xQueueGenericSend+0xa4>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <xQueueGenericSend+0xa8>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <xQueueGenericSend+0xaa>
 8005554:	2300      	movs	r3, #0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <xQueueGenericSend+0xc6>
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	61fb      	str	r3, [r7, #28]
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	e7fd      	b.n	800556e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005572:	f002 f871 	bl	8007658 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557e:	429a      	cmp	r2, r3
 8005580:	d302      	bcc.n	8005588 <xQueueGenericSend+0xdc>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d129      	bne.n	80055dc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800558e:	f000 fa0d 	bl	80059ac <prvCopyDataToQueue>
 8005592:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559e:	3324      	adds	r3, #36	@ 0x24
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 ffc9 	bl	8006538 <xTaskRemoveFromEventList>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d013      	beq.n	80055d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055ac:	4b3f      	ldr	r3, [pc, #252]	@ (80056ac <xQueueGenericSend+0x200>)
 80055ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	e00a      	b.n	80055d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055c4:	4b39      	ldr	r3, [pc, #228]	@ (80056ac <xQueueGenericSend+0x200>)
 80055c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055d4:	f002 f872 	bl	80076bc <vPortExitCritical>
				return pdPASS;
 80055d8:	2301      	movs	r3, #1
 80055da:	e063      	b.n	80056a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055e2:	f002 f86b 	bl	80076bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e05c      	b.n	80056a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d106      	bne.n	80055fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055f0:	f107 0314 	add.w	r3, r7, #20
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 f803 	bl	8006600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055fa:	2301      	movs	r3, #1
 80055fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055fe:	f002 f85d 	bl	80076bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005602:	f000 fd65 	bl	80060d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005606:	f002 f827 	bl	8007658 <vPortEnterCritical>
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005610:	b25b      	sxtb	r3, r3
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005616:	d103      	bne.n	8005620 <xQueueGenericSend+0x174>
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005626:	b25b      	sxtb	r3, r3
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d103      	bne.n	8005636 <xQueueGenericSend+0x18a>
 800562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005636:	f002 f841 	bl	80076bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800563a:	1d3a      	adds	r2, r7, #4
 800563c:	f107 0314 	add.w	r3, r7, #20
 8005640:	4611      	mov	r1, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fff2 	bl	800662c <xTaskCheckForTimeOut>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d124      	bne.n	8005698 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800564e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005650:	f000 faa4 	bl	8005b9c <prvIsQueueFull>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d018      	beq.n	800568c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	3310      	adds	r3, #16
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f000 ff16 	bl	8006494 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800566a:	f000 fa2f 	bl	8005acc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800566e:	f000 fd3d 	bl	80060ec <xTaskResumeAll>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	f47f af7c 	bne.w	8005572 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800567a:	4b0c      	ldr	r3, [pc, #48]	@ (80056ac <xQueueGenericSend+0x200>)
 800567c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	e772      	b.n	8005572 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800568c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800568e:	f000 fa1d 	bl	8005acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005692:	f000 fd2b 	bl	80060ec <xTaskResumeAll>
 8005696:	e76c      	b.n	8005572 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800569a:	f000 fa17 	bl	8005acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800569e:	f000 fd25 	bl	80060ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056a2:	2300      	movs	r3, #0
		}
	}
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3738      	adds	r7, #56	@ 0x38
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08e      	sub	sp, #56	@ 0x38
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10b      	bne.n	80056e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056da:	bf00      	nop
 80056dc:	bf00      	nop
 80056de:	e7fd      	b.n	80056dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <xQueueGenericSendFromISR+0x3e>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <xQueueGenericSendFromISR+0x42>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <xQueueGenericSendFromISR+0x44>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	623b      	str	r3, [r7, #32]
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d103      	bne.n	800571e <xQueueGenericSendFromISR+0x6e>
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <xQueueGenericSendFromISR+0x72>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <xQueueGenericSendFromISR+0x74>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	61fb      	str	r3, [r7, #28]
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005740:	f002 f86a 	bl	8007818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005744:	f3ef 8211 	mrs	r2, BASEPRI
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	61ba      	str	r2, [r7, #24]
 800575a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800575c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800575e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005768:	429a      	cmp	r2, r3
 800576a:	d302      	bcc.n	8005772 <xQueueGenericSendFromISR+0xc2>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d12c      	bne.n	80057cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005782:	f000 f913 	bl	80059ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005786:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d112      	bne.n	80057b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d016      	beq.n	80057c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	3324      	adds	r3, #36	@ 0x24
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fecb 	bl	8006538 <xTaskRemoveFromEventList>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00e      	beq.n	80057c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00b      	beq.n	80057c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	e007      	b.n	80057c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057ba:	3301      	adds	r3, #1
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	b25a      	sxtb	r2, r3
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80057c6:	2301      	movs	r3, #1
 80057c8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80057ca:	e001      	b.n	80057d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3738      	adds	r7, #56	@ 0x38
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	@ 0x30
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10b      	bne.n	800581a <xQueueReceive+0x32>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	623b      	str	r3, [r7, #32]
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	e7fd      	b.n	8005816 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d103      	bne.n	8005828 <xQueueReceive+0x40>
 8005820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <xQueueReceive+0x44>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <xQueueReceive+0x46>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <xQueueReceive+0x62>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	61fb      	str	r3, [r7, #28]
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	e7fd      	b.n	8005846 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800584a:	f001 f841 	bl	80068d0 <xTaskGetSchedulerState>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <xQueueReceive+0x72>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <xQueueReceive+0x76>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <xQueueReceive+0x78>
 800585e:	2300      	movs	r3, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xQueueReceive+0x94>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	61bb      	str	r3, [r7, #24]
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800587c:	f001 feec 	bl	8007658 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005884:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01f      	beq.n	80058cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005890:	f000 f8f6 	bl	8005a80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	1e5a      	subs	r2, r3, #1
 8005898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00f      	beq.n	80058c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a6:	3310      	adds	r3, #16
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fe45 	bl	8006538 <xTaskRemoveFromEventList>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058b4:	4b3c      	ldr	r3, [pc, #240]	@ (80059a8 <xQueueReceive+0x1c0>)
 80058b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058c4:	f001 fefa 	bl	80076bc <vPortExitCritical>
				return pdPASS;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e069      	b.n	80059a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058d2:	f001 fef3 	bl	80076bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e062      	b.n	80059a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d106      	bne.n	80058ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058e0:	f107 0310 	add.w	r3, r7, #16
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fe8b 	bl	8006600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058ea:	2301      	movs	r3, #1
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058ee:	f001 fee5 	bl	80076bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058f2:	f000 fbed 	bl	80060d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058f6:	f001 feaf 	bl	8007658 <vPortEnterCritical>
 80058fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005900:	b25b      	sxtb	r3, r3
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d103      	bne.n	8005910 <xQueueReceive+0x128>
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005912:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005916:	b25b      	sxtb	r3, r3
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d103      	bne.n	8005926 <xQueueReceive+0x13e>
 800591e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005926:	f001 fec9 	bl	80076bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800592a:	1d3a      	adds	r2, r7, #4
 800592c:	f107 0310 	add.w	r3, r7, #16
 8005930:	4611      	mov	r1, r2
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fe7a 	bl	800662c <xTaskCheckForTimeOut>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d123      	bne.n	8005986 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800593e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005940:	f000 f916 	bl	8005b70 <prvIsQueueEmpty>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d017      	beq.n	800597a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800594a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594c:	3324      	adds	r3, #36	@ 0x24
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fd9e 	bl	8006494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800595a:	f000 f8b7 	bl	8005acc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800595e:	f000 fbc5 	bl	80060ec <xTaskResumeAll>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d189      	bne.n	800587c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005968:	4b0f      	ldr	r3, [pc, #60]	@ (80059a8 <xQueueReceive+0x1c0>)
 800596a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	e780      	b.n	800587c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800597a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800597c:	f000 f8a6 	bl	8005acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005980:	f000 fbb4 	bl	80060ec <xTaskResumeAll>
 8005984:	e77a      	b.n	800587c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005988:	f000 f8a0 	bl	8005acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800598c:	f000 fbae 	bl	80060ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005992:	f000 f8ed 	bl	8005b70 <prvIsQueueEmpty>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	f43f af6f 	beq.w	800587c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800599e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3730      	adds	r7, #48	@ 0x30
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	e000ed04 	.word	0xe000ed04

080059ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d14d      	bne.n	8005a6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 ff98 	bl	800690c <xTaskPriorityDisinherit>
 80059dc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	e043      	b.n	8005a6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d119      	bne.n	8005a20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6898      	ldr	r0, [r3, #8]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	461a      	mov	r2, r3
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	f003 fa30 	bl	8008e5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a04:	441a      	add	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d32b      	bcc.n	8005a6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	609a      	str	r2, [r3, #8]
 8005a1e:	e026      	b.n	8005a6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	68d8      	ldr	r0, [r3, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a28:	461a      	mov	r2, r3
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	f003 fa16 	bl	8008e5c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a38:	425b      	negs	r3, r3
 8005a3a:	441a      	add	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d207      	bcs.n	8005a5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a54:	425b      	negs	r3, r3
 8005a56:	441a      	add	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d105      	bne.n	8005a6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a76:	697b      	ldr	r3, [r7, #20]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d018      	beq.n	8005ac4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	441a      	add	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d303      	bcc.n	8005ab4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68d9      	ldr	r1, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abc:	461a      	mov	r2, r3
 8005abe:	6838      	ldr	r0, [r7, #0]
 8005ac0:	f003 f9cc 	bl	8008e5c <memcpy>
	}
}
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ad4:	f001 fdc0 	bl	8007658 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ade:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ae0:	e011      	b.n	8005b06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d012      	beq.n	8005b10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3324      	adds	r3, #36	@ 0x24
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fd22 	bl	8006538 <xTaskRemoveFromEventList>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005afa:	f000 fdfb 	bl	80066f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	dce9      	bgt.n	8005ae2 <prvUnlockQueue+0x16>
 8005b0e:	e000      	b.n	8005b12 <prvUnlockQueue+0x46>
					break;
 8005b10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	22ff      	movs	r2, #255	@ 0xff
 8005b16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b1a:	f001 fdcf 	bl	80076bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b1e:	f001 fd9b 	bl	8007658 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b2a:	e011      	b.n	8005b50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d012      	beq.n	8005b5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3310      	adds	r3, #16
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fcfd 	bl	8006538 <xTaskRemoveFromEventList>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b44:	f000 fdd6 	bl	80066f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dce9      	bgt.n	8005b2c <prvUnlockQueue+0x60>
 8005b58:	e000      	b.n	8005b5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	22ff      	movs	r2, #255	@ 0xff
 8005b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b64:	f001 fdaa 	bl	80076bc <vPortExitCritical>
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b78:	f001 fd6e 	bl	8007658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b84:	2301      	movs	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	e001      	b.n	8005b8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b8e:	f001 fd95 	bl	80076bc <vPortExitCritical>

	return xReturn;
 8005b92:	68fb      	ldr	r3, [r7, #12]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ba4:	f001 fd58 	bl	8007658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d102      	bne.n	8005bba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	e001      	b.n	8005bbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bbe:	f001 fd7d 	bl	80076bc <vPortExitCritical>

	return xReturn;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	e014      	b.n	8005c06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8005c1c <vQueueAddToRegistry+0x50>)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10b      	bne.n	8005c00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005be8:	490c      	ldr	r1, [pc, #48]	@ (8005c1c <vQueueAddToRegistry+0x50>)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8005c1c <vQueueAddToRegistry+0x50>)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bfe:	e006      	b.n	8005c0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3301      	adds	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b07      	cmp	r3, #7
 8005c0a:	d9e7      	bls.n	8005bdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c0c:	bf00      	nop
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	200069f8 	.word	0x200069f8

08005c20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c30:	f001 fd12 	bl	8007658 <vPortEnterCritical>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c3a:	b25b      	sxtb	r3, r3
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d103      	bne.n	8005c4a <vQueueWaitForMessageRestricted+0x2a>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d103      	bne.n	8005c60 <vQueueWaitForMessageRestricted+0x40>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c60:	f001 fd2c 	bl	80076bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d106      	bne.n	8005c7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	3324      	adds	r3, #36	@ 0x24
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fc33 	bl	80064e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c7a:	6978      	ldr	r0, [r7, #20]
 8005c7c:	f7ff ff26 	bl	8005acc <prvUnlockQueue>
	}
 8005c80:	bf00      	nop
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08e      	sub	sp, #56	@ 0x38
 8005c8c:	af04      	add	r7, sp, #16
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	623b      	str	r3, [r7, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10b      	bne.n	8005cd2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	61fb      	str	r3, [r7, #28]
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	e7fd      	b.n	8005cce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cd2:	23a8      	movs	r3, #168	@ 0xa8
 8005cd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2ba8      	cmp	r3, #168	@ 0xa8
 8005cda:	d00b      	beq.n	8005cf4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	61bb      	str	r3, [r7, #24]
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	e7fd      	b.n	8005cf0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d01e      	beq.n	8005d38 <xTaskCreateStatic+0xb0>
 8005cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01b      	beq.n	8005d38 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d08:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d12:	2300      	movs	r3, #0
 8005d14:	9303      	str	r3, [sp, #12]
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	9302      	str	r3, [sp, #8]
 8005d1a:	f107 0314 	add.w	r3, r7, #20
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f850 	bl	8005dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d32:	f000 f8ed 	bl	8005f10 <prvAddNewTaskToReadyList>
 8005d36:	e001      	b.n	8005d3c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d3c:	697b      	ldr	r3, [r7, #20]
	}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3728      	adds	r7, #40	@ 0x28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b08c      	sub	sp, #48	@ 0x30
 8005d4a:	af04      	add	r7, sp, #16
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 fd9e 	bl	800789c <pvPortMalloc>
 8005d60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00e      	beq.n	8005d86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005d68:	20a8      	movs	r0, #168	@ 0xa8
 8005d6a:	f001 fd97 	bl	800789c <pvPortMalloc>
 8005d6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d7c:	e005      	b.n	8005d8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d7e:	6978      	ldr	r0, [r7, #20]
 8005d80:	f001 fe54 	bl	8007a2c <vPortFree>
 8005d84:	e001      	b.n	8005d8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d017      	beq.n	8005dc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d98:	88fa      	ldrh	r2, [r7, #6]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9303      	str	r3, [sp, #12]
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	9302      	str	r3, [sp, #8]
 8005da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f80e 	bl	8005dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005db4:	69f8      	ldr	r0, [r7, #28]
 8005db6:	f000 f8ab 	bl	8005f10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	e002      	b.n	8005dc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
	}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	461a      	mov	r2, r3
 8005de8:	21a5      	movs	r1, #165	@ 0xa5
 8005dea:	f002 ffb3 	bl	8008d54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f023 0307 	bic.w	r3, r3, #7
 8005e06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	617b      	str	r3, [r7, #20]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	e012      	b.n	8005e56 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	7819      	ldrb	r1, [r3, #0]
 8005e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3334      	adds	r3, #52	@ 0x34
 8005e40:	460a      	mov	r2, r1
 8005e42:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d006      	beq.n	8005e5e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	3301      	adds	r3, #1
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	2b0f      	cmp	r3, #15
 8005e5a:	d9e9      	bls.n	8005e30 <prvInitialiseNewTask+0x60>
 8005e5c:	e000      	b.n	8005e60 <prvInitialiseNewTask+0x90>
		{
			break;
 8005e5e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6a:	2b37      	cmp	r3, #55	@ 0x37
 8005e6c:	d901      	bls.n	8005e72 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e6e:	2337      	movs	r3, #55	@ 0x37
 8005e70:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e76:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e7c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e80:	2200      	movs	r2, #0
 8005e82:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	3304      	adds	r3, #4
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff f971 	bl	8005170 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	3318      	adds	r3, #24
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff f96c 	bl	8005170 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	3354      	adds	r3, #84	@ 0x54
 8005ec2:	224c      	movs	r2, #76	@ 0x4c
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f002 ff44 	bl	8008d54 <memset>
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	4a0d      	ldr	r2, [pc, #52]	@ (8005f04 <prvInitialiseNewTask+0x134>)
 8005ed0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8005f08 <prvInitialiseNewTask+0x138>)
 8005ed6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eda:	4a0c      	ldr	r2, [pc, #48]	@ (8005f0c <prvInitialiseNewTask+0x13c>)
 8005edc:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	68f9      	ldr	r1, [r7, #12]
 8005ee2:	69b8      	ldr	r0, [r7, #24]
 8005ee4:	f001 fa88 	bl	80073f8 <pxPortInitialiseStack>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ef8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005efa:	bf00      	nop
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20007c84 	.word	0x20007c84
 8005f08:	20007cec 	.word	0x20007cec
 8005f0c:	20007d54 	.word	0x20007d54

08005f10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f18:	f001 fb9e 	bl	8007658 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005fd4 <prvAddNewTaskToReadyList+0xc4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3301      	adds	r3, #1
 8005f22:	4a2c      	ldr	r2, [pc, #176]	@ (8005fd4 <prvAddNewTaskToReadyList+0xc4>)
 8005f24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f26:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd8 <prvAddNewTaskToReadyList+0xc8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d109      	bne.n	8005f42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8005fd8 <prvAddNewTaskToReadyList+0xc8>)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f34:	4b27      	ldr	r3, [pc, #156]	@ (8005fd4 <prvAddNewTaskToReadyList+0xc4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d110      	bne.n	8005f5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f3c:	f000 fbfe 	bl	800673c <prvInitialiseTaskLists>
 8005f40:	e00d      	b.n	8005f5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f42:	4b26      	ldr	r3, [pc, #152]	@ (8005fdc <prvAddNewTaskToReadyList+0xcc>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f4a:	4b23      	ldr	r3, [pc, #140]	@ (8005fd8 <prvAddNewTaskToReadyList+0xc8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d802      	bhi.n	8005f5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f58:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd8 <prvAddNewTaskToReadyList+0xc8>)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f5e:	4b20      	ldr	r3, [pc, #128]	@ (8005fe0 <prvAddNewTaskToReadyList+0xd0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	4a1e      	ldr	r2, [pc, #120]	@ (8005fe0 <prvAddNewTaskToReadyList+0xd0>)
 8005f66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f68:	4b1d      	ldr	r3, [pc, #116]	@ (8005fe0 <prvAddNewTaskToReadyList+0xd0>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f74:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe4 <prvAddNewTaskToReadyList+0xd4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d903      	bls.n	8005f84 <prvAddNewTaskToReadyList+0x74>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	4a18      	ldr	r2, [pc, #96]	@ (8005fe4 <prvAddNewTaskToReadyList+0xd4>)
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4a15      	ldr	r2, [pc, #84]	@ (8005fe8 <prvAddNewTaskToReadyList+0xd8>)
 8005f92:	441a      	add	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	f7ff f8f5 	bl	800518a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fa0:	f001 fb8c 	bl	80076bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8005fdc <prvAddNewTaskToReadyList+0xcc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00e      	beq.n	8005fca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fac:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd8 <prvAddNewTaskToReadyList+0xc8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d207      	bcs.n	8005fca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fba:	4b0c      	ldr	r3, [pc, #48]	@ (8005fec <prvAddNewTaskToReadyList+0xdc>)
 8005fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20006f0c 	.word	0x20006f0c
 8005fd8:	20006a38 	.word	0x20006a38
 8005fdc:	20006f18 	.word	0x20006f18
 8005fe0:	20006f28 	.word	0x20006f28
 8005fe4:	20006f14 	.word	0x20006f14
 8005fe8:	20006a3c 	.word	0x20006a3c
 8005fec:	e000ed04 	.word	0xe000ed04

08005ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	@ 0x28
 8005ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ffe:	463a      	mov	r2, r7
 8006000:	1d39      	adds	r1, r7, #4
 8006002:	f107 0308 	add.w	r3, r7, #8
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff f85e 	bl	80050c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	9202      	str	r2, [sp, #8]
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	2300      	movs	r3, #0
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	2300      	movs	r3, #0
 800601c:	460a      	mov	r2, r1
 800601e:	4924      	ldr	r1, [pc, #144]	@ (80060b0 <vTaskStartScheduler+0xc0>)
 8006020:	4824      	ldr	r0, [pc, #144]	@ (80060b4 <vTaskStartScheduler+0xc4>)
 8006022:	f7ff fe31 	bl	8005c88 <xTaskCreateStatic>
 8006026:	4603      	mov	r3, r0
 8006028:	4a23      	ldr	r2, [pc, #140]	@ (80060b8 <vTaskStartScheduler+0xc8>)
 800602a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800602c:	4b22      	ldr	r3, [pc, #136]	@ (80060b8 <vTaskStartScheduler+0xc8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006034:	2301      	movs	r3, #1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e001      	b.n	800603e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d102      	bne.n	800604a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006044:	f000 feb8 	bl	8006db8 <xTimerCreateTimerTask>
 8006048:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d11b      	bne.n	8006088 <vTaskStartScheduler+0x98>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	613b      	str	r3, [r7, #16]
}
 8006062:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006064:	4b15      	ldr	r3, [pc, #84]	@ (80060bc <vTaskStartScheduler+0xcc>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3354      	adds	r3, #84	@ 0x54
 800606a:	4a15      	ldr	r2, [pc, #84]	@ (80060c0 <vTaskStartScheduler+0xd0>)
 800606c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800606e:	4b15      	ldr	r3, [pc, #84]	@ (80060c4 <vTaskStartScheduler+0xd4>)
 8006070:	f04f 32ff 	mov.w	r2, #4294967295
 8006074:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006076:	4b14      	ldr	r3, [pc, #80]	@ (80060c8 <vTaskStartScheduler+0xd8>)
 8006078:	2201      	movs	r2, #1
 800607a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800607c:	4b13      	ldr	r3, [pc, #76]	@ (80060cc <vTaskStartScheduler+0xdc>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006082:	f001 fa45 	bl	8007510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006086:	e00f      	b.n	80060a8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d10b      	bne.n	80060a8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <vTaskStartScheduler+0xb4>
}
 80060a8:	bf00      	nop
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	08008f4c 	.word	0x08008f4c
 80060b4:	0800670d 	.word	0x0800670d
 80060b8:	20006f30 	.word	0x20006f30
 80060bc:	20006a38 	.word	0x20006a38
 80060c0:	20000014 	.word	0x20000014
 80060c4:	20006f2c 	.word	0x20006f2c
 80060c8:	20006f18 	.word	0x20006f18
 80060cc:	20006f10 	.word	0x20006f10

080060d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80060d4:	4b04      	ldr	r3, [pc, #16]	@ (80060e8 <vTaskSuspendAll+0x18>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3301      	adds	r3, #1
 80060da:	4a03      	ldr	r2, [pc, #12]	@ (80060e8 <vTaskSuspendAll+0x18>)
 80060dc:	6013      	str	r3, [r2, #0]
}
 80060de:	bf00      	nop
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	20006f34 	.word	0x20006f34

080060ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060fa:	4b42      	ldr	r3, [pc, #264]	@ (8006204 <xTaskResumeAll+0x118>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10b      	bne.n	800611a <xTaskResumeAll+0x2e>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	603b      	str	r3, [r7, #0]
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	e7fd      	b.n	8006116 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800611a:	f001 fa9d 	bl	8007658 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800611e:	4b39      	ldr	r3, [pc, #228]	@ (8006204 <xTaskResumeAll+0x118>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3b01      	subs	r3, #1
 8006124:	4a37      	ldr	r2, [pc, #220]	@ (8006204 <xTaskResumeAll+0x118>)
 8006126:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006128:	4b36      	ldr	r3, [pc, #216]	@ (8006204 <xTaskResumeAll+0x118>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d162      	bne.n	80061f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006130:	4b35      	ldr	r3, [pc, #212]	@ (8006208 <xTaskResumeAll+0x11c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d05e      	beq.n	80061f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006138:	e02f      	b.n	800619a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800613a:	4b34      	ldr	r3, [pc, #208]	@ (800620c <xTaskResumeAll+0x120>)
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3318      	adds	r3, #24
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff f87c 	bl	8005244 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3304      	adds	r3, #4
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff f877 	bl	8005244 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615a:	4b2d      	ldr	r3, [pc, #180]	@ (8006210 <xTaskResumeAll+0x124>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d903      	bls.n	800616a <xTaskResumeAll+0x7e>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006166:	4a2a      	ldr	r2, [pc, #168]	@ (8006210 <xTaskResumeAll+0x124>)
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4a27      	ldr	r2, [pc, #156]	@ (8006214 <xTaskResumeAll+0x128>)
 8006178:	441a      	add	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3304      	adds	r3, #4
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f7ff f802 	bl	800518a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618a:	4b23      	ldr	r3, [pc, #140]	@ (8006218 <xTaskResumeAll+0x12c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	429a      	cmp	r2, r3
 8006192:	d302      	bcc.n	800619a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006194:	4b21      	ldr	r3, [pc, #132]	@ (800621c <xTaskResumeAll+0x130>)
 8006196:	2201      	movs	r2, #1
 8006198:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800619a:	4b1c      	ldr	r3, [pc, #112]	@ (800620c <xTaskResumeAll+0x120>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1cb      	bne.n	800613a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061a8:	f000 fb6c 	bl	8006884 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80061ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006220 <xTaskResumeAll+0x134>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d010      	beq.n	80061da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061b8:	f000 f846 	bl	8006248 <xTaskIncrementTick>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80061c2:	4b16      	ldr	r3, [pc, #88]	@ (800621c <xTaskResumeAll+0x130>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f1      	bne.n	80061b8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80061d4:	4b12      	ldr	r3, [pc, #72]	@ (8006220 <xTaskResumeAll+0x134>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061da:	4b10      	ldr	r3, [pc, #64]	@ (800621c <xTaskResumeAll+0x130>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d009      	beq.n	80061f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061e2:	2301      	movs	r3, #1
 80061e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006224 <xTaskResumeAll+0x138>)
 80061e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061f6:	f001 fa61 	bl	80076bc <vPortExitCritical>

	return xAlreadyYielded;
 80061fa:	68bb      	ldr	r3, [r7, #8]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20006f34 	.word	0x20006f34
 8006208:	20006f0c 	.word	0x20006f0c
 800620c:	20006ecc 	.word	0x20006ecc
 8006210:	20006f14 	.word	0x20006f14
 8006214:	20006a3c 	.word	0x20006a3c
 8006218:	20006a38 	.word	0x20006a38
 800621c:	20006f20 	.word	0x20006f20
 8006220:	20006f1c 	.word	0x20006f1c
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800622e:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <xTaskGetTickCount+0x1c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006234:	687b      	ldr	r3, [r7, #4]
}
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20006f10 	.word	0x20006f10

08006248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006252:	4b52      	ldr	r3, [pc, #328]	@ (800639c <xTaskIncrementTick+0x154>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	f040 808f 	bne.w	800637a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800625c:	4b50      	ldr	r3, [pc, #320]	@ (80063a0 <xTaskIncrementTick+0x158>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3301      	adds	r3, #1
 8006262:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006264:	4a4e      	ldr	r2, [pc, #312]	@ (80063a0 <xTaskIncrementTick+0x158>)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d121      	bne.n	80062b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006270:	4b4c      	ldr	r3, [pc, #304]	@ (80063a4 <xTaskIncrementTick+0x15c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00b      	beq.n	8006292 <xTaskIncrementTick+0x4a>
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	603b      	str	r3, [r7, #0]
}
 800628c:	bf00      	nop
 800628e:	bf00      	nop
 8006290:	e7fd      	b.n	800628e <xTaskIncrementTick+0x46>
 8006292:	4b44      	ldr	r3, [pc, #272]	@ (80063a4 <xTaskIncrementTick+0x15c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	4b43      	ldr	r3, [pc, #268]	@ (80063a8 <xTaskIncrementTick+0x160>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a41      	ldr	r2, [pc, #260]	@ (80063a4 <xTaskIncrementTick+0x15c>)
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	4a41      	ldr	r2, [pc, #260]	@ (80063a8 <xTaskIncrementTick+0x160>)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	4b41      	ldr	r3, [pc, #260]	@ (80063ac <xTaskIncrementTick+0x164>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3301      	adds	r3, #1
 80062ac:	4a3f      	ldr	r2, [pc, #252]	@ (80063ac <xTaskIncrementTick+0x164>)
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	f000 fae8 	bl	8006884 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062b4:	4b3e      	ldr	r3, [pc, #248]	@ (80063b0 <xTaskIncrementTick+0x168>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d34e      	bcc.n	800635c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062be:	4b39      	ldr	r3, [pc, #228]	@ (80063a4 <xTaskIncrementTick+0x15c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <xTaskIncrementTick+0x84>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e000      	b.n	80062ce <xTaskIncrementTick+0x86>
 80062cc:	2300      	movs	r3, #0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d2:	4b37      	ldr	r3, [pc, #220]	@ (80063b0 <xTaskIncrementTick+0x168>)
 80062d4:	f04f 32ff 	mov.w	r2, #4294967295
 80062d8:	601a      	str	r2, [r3, #0]
					break;
 80062da:	e03f      	b.n	800635c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062dc:	4b31      	ldr	r3, [pc, #196]	@ (80063a4 <xTaskIncrementTick+0x15c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d203      	bcs.n	80062fc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062f4:	4a2e      	ldr	r2, [pc, #184]	@ (80063b0 <xTaskIncrementTick+0x168>)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6013      	str	r3, [r2, #0]
						break;
 80062fa:	e02f      	b.n	800635c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	3304      	adds	r3, #4
 8006300:	4618      	mov	r0, r3
 8006302:	f7fe ff9f 	bl	8005244 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d004      	beq.n	8006318 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	3318      	adds	r3, #24
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe ff96 	bl	8005244 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800631c:	4b25      	ldr	r3, [pc, #148]	@ (80063b4 <xTaskIncrementTick+0x16c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d903      	bls.n	800632c <xTaskIncrementTick+0xe4>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	4a22      	ldr	r2, [pc, #136]	@ (80063b4 <xTaskIncrementTick+0x16c>)
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4a1f      	ldr	r2, [pc, #124]	@ (80063b8 <xTaskIncrementTick+0x170>)
 800633a:	441a      	add	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f7fe ff21 	bl	800518a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800634c:	4b1b      	ldr	r3, [pc, #108]	@ (80063bc <xTaskIncrementTick+0x174>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006352:	429a      	cmp	r2, r3
 8006354:	d3b3      	bcc.n	80062be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006356:	2301      	movs	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800635a:	e7b0      	b.n	80062be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800635c:	4b17      	ldr	r3, [pc, #92]	@ (80063bc <xTaskIncrementTick+0x174>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006362:	4915      	ldr	r1, [pc, #84]	@ (80063b8 <xTaskIncrementTick+0x170>)
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d907      	bls.n	8006384 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006374:	2301      	movs	r3, #1
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e004      	b.n	8006384 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800637a:	4b11      	ldr	r3, [pc, #68]	@ (80063c0 <xTaskIncrementTick+0x178>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3301      	adds	r3, #1
 8006380:	4a0f      	ldr	r2, [pc, #60]	@ (80063c0 <xTaskIncrementTick+0x178>)
 8006382:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006384:	4b0f      	ldr	r3, [pc, #60]	@ (80063c4 <xTaskIncrementTick+0x17c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800638c:	2301      	movs	r3, #1
 800638e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006390:	697b      	ldr	r3, [r7, #20]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20006f34 	.word	0x20006f34
 80063a0:	20006f10 	.word	0x20006f10
 80063a4:	20006ec4 	.word	0x20006ec4
 80063a8:	20006ec8 	.word	0x20006ec8
 80063ac:	20006f24 	.word	0x20006f24
 80063b0:	20006f2c 	.word	0x20006f2c
 80063b4:	20006f14 	.word	0x20006f14
 80063b8:	20006a3c 	.word	0x20006a3c
 80063bc:	20006a38 	.word	0x20006a38
 80063c0:	20006f1c 	.word	0x20006f1c
 80063c4:	20006f20 	.word	0x20006f20

080063c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063ce:	4b2b      	ldr	r3, [pc, #172]	@ (800647c <vTaskSwitchContext+0xb4>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063d6:	4b2a      	ldr	r3, [pc, #168]	@ (8006480 <vTaskSwitchContext+0xb8>)
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063dc:	e047      	b.n	800646e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80063de:	4b28      	ldr	r3, [pc, #160]	@ (8006480 <vTaskSwitchContext+0xb8>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80063e4:	4b27      	ldr	r3, [pc, #156]	@ (8006484 <vTaskSwitchContext+0xbc>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	e011      	b.n	8006410 <vTaskSwitchContext+0x48>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <vTaskSwitchContext+0x42>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	607b      	str	r3, [r7, #4]
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop
 8006408:	e7fd      	b.n	8006406 <vTaskSwitchContext+0x3e>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3b01      	subs	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	491d      	ldr	r1, [pc, #116]	@ (8006488 <vTaskSwitchContext+0xc0>)
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0e3      	beq.n	80063ec <vTaskSwitchContext+0x24>
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4a16      	ldr	r2, [pc, #88]	@ (8006488 <vTaskSwitchContext+0xc0>)
 8006430:	4413      	add	r3, r2
 8006432:	60bb      	str	r3, [r7, #8]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	605a      	str	r2, [r3, #4]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	3308      	adds	r3, #8
 8006446:	429a      	cmp	r2, r3
 8006448:	d104      	bne.n	8006454 <vTaskSwitchContext+0x8c>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	605a      	str	r2, [r3, #4]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	4a0c      	ldr	r2, [pc, #48]	@ (800648c <vTaskSwitchContext+0xc4>)
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	4a09      	ldr	r2, [pc, #36]	@ (8006484 <vTaskSwitchContext+0xbc>)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006464:	4b09      	ldr	r3, [pc, #36]	@ (800648c <vTaskSwitchContext+0xc4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3354      	adds	r3, #84	@ 0x54
 800646a:	4a09      	ldr	r2, [pc, #36]	@ (8006490 <vTaskSwitchContext+0xc8>)
 800646c:	6013      	str	r3, [r2, #0]
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20006f34 	.word	0x20006f34
 8006480:	20006f20 	.word	0x20006f20
 8006484:	20006f14 	.word	0x20006f14
 8006488:	20006a3c 	.word	0x20006a3c
 800648c:	20006a38 	.word	0x20006a38
 8006490:	20000014 	.word	0x20000014

08006494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10b      	bne.n	80064bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	60fb      	str	r3, [r7, #12]
}
 80064b6:	bf00      	nop
 80064b8:	bf00      	nop
 80064ba:	e7fd      	b.n	80064b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064bc:	4b07      	ldr	r3, [pc, #28]	@ (80064dc <vTaskPlaceOnEventList+0x48>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3318      	adds	r3, #24
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7fe fe84 	bl	80051d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064ca:	2101      	movs	r1, #1
 80064cc:	6838      	ldr	r0, [r7, #0]
 80064ce:	f000 fc1f 	bl	8006d10 <prvAddCurrentTaskToDelayedList>
}
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20006a38 	.word	0x20006a38

080064e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10b      	bne.n	800650a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	617b      	str	r3, [r7, #20]
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop
 8006508:	e7fd      	b.n	8006506 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800650a:	4b0a      	ldr	r3, [pc, #40]	@ (8006534 <vTaskPlaceOnEventListRestricted+0x54>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3318      	adds	r3, #24
 8006510:	4619      	mov	r1, r3
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7fe fe39 	bl	800518a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800651e:	f04f 33ff 	mov.w	r3, #4294967295
 8006522:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	68b8      	ldr	r0, [r7, #8]
 8006528:	f000 fbf2 	bl	8006d10 <prvAddCurrentTaskToDelayedList>
	}
 800652c:	bf00      	nop
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20006a38 	.word	0x20006a38

08006538 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10b      	bne.n	8006566 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	60fb      	str	r3, [r7, #12]
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	e7fd      	b.n	8006562 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	3318      	adds	r3, #24
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe fe6a 	bl	8005244 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006570:	4b1d      	ldr	r3, [pc, #116]	@ (80065e8 <xTaskRemoveFromEventList+0xb0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d11d      	bne.n	80065b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	3304      	adds	r3, #4
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe fe61 	bl	8005244 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006586:	4b19      	ldr	r3, [pc, #100]	@ (80065ec <xTaskRemoveFromEventList+0xb4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d903      	bls.n	8006596 <xTaskRemoveFromEventList+0x5e>
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	4a16      	ldr	r2, [pc, #88]	@ (80065ec <xTaskRemoveFromEventList+0xb4>)
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4a13      	ldr	r2, [pc, #76]	@ (80065f0 <xTaskRemoveFromEventList+0xb8>)
 80065a4:	441a      	add	r2, r3
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f7fe fdec 	bl	800518a <vListInsertEnd>
 80065b2:	e005      	b.n	80065c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	3318      	adds	r3, #24
 80065b8:	4619      	mov	r1, r3
 80065ba:	480e      	ldr	r0, [pc, #56]	@ (80065f4 <xTaskRemoveFromEventList+0xbc>)
 80065bc:	f7fe fde5 	bl	800518a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c4:	4b0c      	ldr	r3, [pc, #48]	@ (80065f8 <xTaskRemoveFromEventList+0xc0>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d905      	bls.n	80065da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065ce:	2301      	movs	r3, #1
 80065d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065d2:	4b0a      	ldr	r3, [pc, #40]	@ (80065fc <xTaskRemoveFromEventList+0xc4>)
 80065d4:	2201      	movs	r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e001      	b.n	80065de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80065de:	697b      	ldr	r3, [r7, #20]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20006f34 	.word	0x20006f34
 80065ec:	20006f14 	.word	0x20006f14
 80065f0:	20006a3c 	.word	0x20006a3c
 80065f4:	20006ecc 	.word	0x20006ecc
 80065f8:	20006a38 	.word	0x20006a38
 80065fc:	20006f20 	.word	0x20006f20

08006600 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006608:	4b06      	ldr	r3, [pc, #24]	@ (8006624 <vTaskInternalSetTimeOutState+0x24>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006610:	4b05      	ldr	r3, [pc, #20]	@ (8006628 <vTaskInternalSetTimeOutState+0x28>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	605a      	str	r2, [r3, #4]
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	20006f24 	.word	0x20006f24
 8006628:	20006f10 	.word	0x20006f10

0800662c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10b      	bne.n	8006654 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	613b      	str	r3, [r7, #16]
}
 800664e:	bf00      	nop
 8006650:	bf00      	nop
 8006652:	e7fd      	b.n	8006650 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	60fb      	str	r3, [r7, #12]
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006672:	f000 fff1 	bl	8007658 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006676:	4b1d      	ldr	r3, [pc, #116]	@ (80066ec <xTaskCheckForTimeOut+0xc0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668e:	d102      	bne.n	8006696 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006690:	2300      	movs	r3, #0
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	e023      	b.n	80066de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b15      	ldr	r3, [pc, #84]	@ (80066f0 <xTaskCheckForTimeOut+0xc4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d007      	beq.n	80066b2 <xTaskCheckForTimeOut+0x86>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d302      	bcc.n	80066b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	61fb      	str	r3, [r7, #28]
 80066b0:	e015      	b.n	80066de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d20b      	bcs.n	80066d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	1ad2      	subs	r2, r2, r3
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff ff99 	bl	8006600 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61fb      	str	r3, [r7, #28]
 80066d2:	e004      	b.n	80066de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066de:	f000 ffed 	bl	80076bc <vPortExitCritical>

	return xReturn;
 80066e2:	69fb      	ldr	r3, [r7, #28]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3720      	adds	r7, #32
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	20006f10 	.word	0x20006f10
 80066f0:	20006f24 	.word	0x20006f24

080066f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066f8:	4b03      	ldr	r3, [pc, #12]	@ (8006708 <vTaskMissedYield+0x14>)
 80066fa:	2201      	movs	r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
}
 80066fe:	bf00      	nop
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	20006f20 	.word	0x20006f20

0800670c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006714:	f000 f852 	bl	80067bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006718:	4b06      	ldr	r3, [pc, #24]	@ (8006734 <prvIdleTask+0x28>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d9f9      	bls.n	8006714 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006720:	4b05      	ldr	r3, [pc, #20]	@ (8006738 <prvIdleTask+0x2c>)
 8006722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006730:	e7f0      	b.n	8006714 <prvIdleTask+0x8>
 8006732:	bf00      	nop
 8006734:	20006a3c 	.word	0x20006a3c
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006742:	2300      	movs	r3, #0
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	e00c      	b.n	8006762 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4a12      	ldr	r2, [pc, #72]	@ (800679c <prvInitialiseTaskLists+0x60>)
 8006754:	4413      	add	r3, r2
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe fcea 	bl	8005130 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3301      	adds	r3, #1
 8006760:	607b      	str	r3, [r7, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b37      	cmp	r3, #55	@ 0x37
 8006766:	d9ef      	bls.n	8006748 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006768:	480d      	ldr	r0, [pc, #52]	@ (80067a0 <prvInitialiseTaskLists+0x64>)
 800676a:	f7fe fce1 	bl	8005130 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800676e:	480d      	ldr	r0, [pc, #52]	@ (80067a4 <prvInitialiseTaskLists+0x68>)
 8006770:	f7fe fcde 	bl	8005130 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006774:	480c      	ldr	r0, [pc, #48]	@ (80067a8 <prvInitialiseTaskLists+0x6c>)
 8006776:	f7fe fcdb 	bl	8005130 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800677a:	480c      	ldr	r0, [pc, #48]	@ (80067ac <prvInitialiseTaskLists+0x70>)
 800677c:	f7fe fcd8 	bl	8005130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006780:	480b      	ldr	r0, [pc, #44]	@ (80067b0 <prvInitialiseTaskLists+0x74>)
 8006782:	f7fe fcd5 	bl	8005130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006786:	4b0b      	ldr	r3, [pc, #44]	@ (80067b4 <prvInitialiseTaskLists+0x78>)
 8006788:	4a05      	ldr	r2, [pc, #20]	@ (80067a0 <prvInitialiseTaskLists+0x64>)
 800678a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800678c:	4b0a      	ldr	r3, [pc, #40]	@ (80067b8 <prvInitialiseTaskLists+0x7c>)
 800678e:	4a05      	ldr	r2, [pc, #20]	@ (80067a4 <prvInitialiseTaskLists+0x68>)
 8006790:	601a      	str	r2, [r3, #0]
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20006a3c 	.word	0x20006a3c
 80067a0:	20006e9c 	.word	0x20006e9c
 80067a4:	20006eb0 	.word	0x20006eb0
 80067a8:	20006ecc 	.word	0x20006ecc
 80067ac:	20006ee0 	.word	0x20006ee0
 80067b0:	20006ef8 	.word	0x20006ef8
 80067b4:	20006ec4 	.word	0x20006ec4
 80067b8:	20006ec8 	.word	0x20006ec8

080067bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067c2:	e019      	b.n	80067f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067c4:	f000 ff48 	bl	8007658 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80067c8:	4b10      	ldr	r3, [pc, #64]	@ (800680c <prvCheckTasksWaitingTermination+0x50>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fe fd35 	bl	8005244 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067da:	4b0d      	ldr	r3, [pc, #52]	@ (8006810 <prvCheckTasksWaitingTermination+0x54>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3b01      	subs	r3, #1
 80067e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006810 <prvCheckTasksWaitingTermination+0x54>)
 80067e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006814 <prvCheckTasksWaitingTermination+0x58>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006814 <prvCheckTasksWaitingTermination+0x58>)
 80067ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067ee:	f000 ff65 	bl	80076bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f810 	bl	8006818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067f8:	4b06      	ldr	r3, [pc, #24]	@ (8006814 <prvCheckTasksWaitingTermination+0x58>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e1      	bne.n	80067c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20006ee0 	.word	0x20006ee0
 8006810:	20006f0c 	.word	0x20006f0c
 8006814:	20006ef4 	.word	0x20006ef4

08006818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3354      	adds	r3, #84	@ 0x54
 8006824:	4618      	mov	r0, r3
 8006826:	f002 fa9d 	bl	8008d64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006830:	2b00      	cmp	r3, #0
 8006832:	d108      	bne.n	8006846 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006838:	4618      	mov	r0, r3
 800683a:	f001 f8f7 	bl	8007a2c <vPortFree>
				vPortFree( pxTCB );
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 f8f4 	bl	8007a2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006844:	e019      	b.n	800687a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800684c:	2b01      	cmp	r3, #1
 800684e:	d103      	bne.n	8006858 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 f8eb 	bl	8007a2c <vPortFree>
	}
 8006856:	e010      	b.n	800687a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800685e:	2b02      	cmp	r3, #2
 8006860:	d00b      	beq.n	800687a <prvDeleteTCB+0x62>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	60fb      	str	r3, [r7, #12]
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop
 8006878:	e7fd      	b.n	8006876 <prvDeleteTCB+0x5e>
	}
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800688a:	4b0f      	ldr	r3, [pc, #60]	@ (80068c8 <prvResetNextTaskUnblockTime+0x44>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <prvResetNextTaskUnblockTime+0x14>
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <prvResetNextTaskUnblockTime+0x16>
 8006898:	2300      	movs	r3, #0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800689e:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <prvResetNextTaskUnblockTime+0x48>)
 80068a0:	f04f 32ff 	mov.w	r2, #4294967295
 80068a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068a6:	e008      	b.n	80068ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068a8:	4b07      	ldr	r3, [pc, #28]	@ (80068c8 <prvResetNextTaskUnblockTime+0x44>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4a05      	ldr	r2, [pc, #20]	@ (80068cc <prvResetNextTaskUnblockTime+0x48>)
 80068b8:	6013      	str	r3, [r2, #0]
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	20006ec4 	.word	0x20006ec4
 80068cc:	20006f2c 	.word	0x20006f2c

080068d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <xTaskGetSchedulerState+0x34>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068de:	2301      	movs	r3, #1
 80068e0:	607b      	str	r3, [r7, #4]
 80068e2:	e008      	b.n	80068f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068e4:	4b08      	ldr	r3, [pc, #32]	@ (8006908 <xTaskGetSchedulerState+0x38>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d102      	bne.n	80068f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068ec:	2302      	movs	r3, #2
 80068ee:	607b      	str	r3, [r7, #4]
 80068f0:	e001      	b.n	80068f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068f2:	2300      	movs	r3, #0
 80068f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068f6:	687b      	ldr	r3, [r7, #4]
	}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	20006f18 	.word	0x20006f18
 8006908:	20006f34 	.word	0x20006f34

0800690c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d058      	beq.n	80069d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006922:	4b2f      	ldr	r3, [pc, #188]	@ (80069e0 <xTaskPriorityDisinherit+0xd4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	429a      	cmp	r2, r3
 800692a:	d00b      	beq.n	8006944 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	60fb      	str	r3, [r7, #12]
}
 800693e:	bf00      	nop
 8006940:	bf00      	nop
 8006942:	e7fd      	b.n	8006940 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10b      	bne.n	8006964 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	60bb      	str	r3, [r7, #8]
}
 800695e:	bf00      	nop
 8006960:	bf00      	nop
 8006962:	e7fd      	b.n	8006960 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006968:	1e5a      	subs	r2, r3, #1
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006976:	429a      	cmp	r2, r3
 8006978:	d02c      	beq.n	80069d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800697e:	2b00      	cmp	r3, #0
 8006980:	d128      	bne.n	80069d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	3304      	adds	r3, #4
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe fc5c 	bl	8005244 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006998:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a4:	4b0f      	ldr	r3, [pc, #60]	@ (80069e4 <xTaskPriorityDisinherit+0xd8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d903      	bls.n	80069b4 <xTaskPriorityDisinherit+0xa8>
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	4a0c      	ldr	r2, [pc, #48]	@ (80069e4 <xTaskPriorityDisinherit+0xd8>)
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4a09      	ldr	r2, [pc, #36]	@ (80069e8 <xTaskPriorityDisinherit+0xdc>)
 80069c2:	441a      	add	r2, r3
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4619      	mov	r1, r3
 80069ca:	4610      	mov	r0, r2
 80069cc:	f7fe fbdd 	bl	800518a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069d0:	2301      	movs	r3, #1
 80069d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069d4:	697b      	ldr	r3, [r7, #20]
	}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20006a38 	.word	0x20006a38
 80069e4:	20006f14 	.word	0x20006f14
 80069e8:	20006a3c 	.word	0x20006a3c

080069ec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80069f6:	f000 fe2f 	bl	8007658 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80069fa:	4b20      	ldr	r3, [pc, #128]	@ (8006a7c <ulTaskNotifyTake+0x90>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d113      	bne.n	8006a2e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006a06:	4b1d      	ldr	r3, [pc, #116]	@ (8006a7c <ulTaskNotifyTake+0x90>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00b      	beq.n	8006a2e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a16:	2101      	movs	r1, #1
 8006a18:	6838      	ldr	r0, [r7, #0]
 8006a1a:	f000 f979 	bl	8006d10 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006a1e:	4b18      	ldr	r3, [pc, #96]	@ (8006a80 <ulTaskNotifyTake+0x94>)
 8006a20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006a2e:	f000 fe45 	bl	80076bc <vPortExitCritical>

		taskENTER_CRITICAL();
 8006a32:	f000 fe11 	bl	8007658 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006a36:	4b11      	ldr	r3, [pc, #68]	@ (8006a7c <ulTaskNotifyTake+0x90>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a3e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00e      	beq.n	8006a64 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a7c <ulTaskNotifyTake+0x90>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8006a56:	e005      	b.n	8006a64 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006a58:	4b08      	ldr	r3, [pc, #32]	@ (8006a7c <ulTaskNotifyTake+0x90>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	3a01      	subs	r2, #1
 8006a60:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a64:	4b05      	ldr	r3, [pc, #20]	@ (8006a7c <ulTaskNotifyTake+0x90>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8006a6e:	f000 fe25 	bl	80076bc <vPortExitCritical>

		return ulReturn;
 8006a72:	68fb      	ldr	r3, [r7, #12]
	}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20006a38 	.word	0x20006a38
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	@ 0x28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	4613      	mov	r3, r2
 8006a92:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006a94:	2301      	movs	r3, #1
 8006a96:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <xTaskGenericNotify+0x32>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	61bb      	str	r3, [r7, #24]
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	e7fd      	b.n	8006ab2 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006aba:	f000 fdcd 	bl	8007658 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d004      	beq.n	8006ace <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006ad4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d82e      	bhi.n	8006b42 <xTaskGenericNotify+0xbe>
 8006ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <xTaskGenericNotify+0x68>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b43 	.word	0x08006b43
 8006af0:	08006b01 	.word	0x08006b01
 8006af4:	08006b13 	.word	0x08006b13
 8006af8:	08006b23 	.word	0x08006b23
 8006afc:	08006b2d 	.word	0x08006b2d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006b10:	e017      	b.n	8006b42 <xTaskGenericNotify+0xbe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006b20:	e00f      	b.n	8006b42 <xTaskGenericNotify+0xbe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006b2a:	e00a      	b.n	8006b42 <xTaskGenericNotify+0xbe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006b2c:	7ffb      	ldrb	r3, [r7, #31]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d004      	beq.n	8006b3c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006b3a:	e001      	b.n	8006b40 <xTaskGenericNotify+0xbc>
						xReturn = pdFAIL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006b40:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006b42:	7ffb      	ldrb	r3, [r7, #31]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d13b      	bne.n	8006bc0 <xTaskGenericNotify+0x13c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fe fb79 	bl	8005244 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b56:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd0 <xTaskGenericNotify+0x14c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d903      	bls.n	8006b66 <xTaskGenericNotify+0xe2>
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b62:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd0 <xTaskGenericNotify+0x14c>)
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4a18      	ldr	r2, [pc, #96]	@ (8006bd4 <xTaskGenericNotify+0x150>)
 8006b74:	441a      	add	r2, r3
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f7fe fb04 	bl	800518a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <xTaskGenericNotify+0x11e>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	617b      	str	r3, [r7, #20]
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	e7fd      	b.n	8006b9e <xTaskGenericNotify+0x11a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd8 <xTaskGenericNotify+0x154>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d907      	bls.n	8006bc0 <xTaskGenericNotify+0x13c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bdc <xTaskGenericNotify+0x158>)
 8006bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006bc0:	f000 fd7c 	bl	80076bc <vPortExitCritical>

		return xReturn;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3728      	adds	r7, #40	@ 0x28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20006f14 	.word	0x20006f14
 8006bd4:	20006a3c 	.word	0x20006a3c
 8006bd8:	20006a38 	.word	0x20006a38
 8006bdc:	e000ed04 	.word	0xe000ed04

08006be0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08a      	sub	sp, #40	@ 0x28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10b      	bne.n	8006c08 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	61bb      	str	r3, [r7, #24]
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	e7fd      	b.n	8006c04 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c08:	f000 fe06 	bl	8007818 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8006c10:	f3ef 8211 	mrs	r2, BASEPRI
 8006c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	617a      	str	r2, [r7, #20]
 8006c26:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006c28:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c2a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006c32:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006c4a:	7ffb      	ldrb	r3, [r7, #31]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d148      	bne.n	8006ce2 <vTaskNotifyGiveFromISR+0x102>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00b      	beq.n	8006c70 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	60fb      	str	r3, [r7, #12]
}
 8006c6a:	bf00      	nop
 8006c6c:	bf00      	nop
 8006c6e:	e7fd      	b.n	8006c6c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c70:	4b21      	ldr	r3, [pc, #132]	@ (8006cf8 <vTaskNotifyGiveFromISR+0x118>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d11d      	bne.n	8006cb4 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe fae1 	bl	8005244 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c86:	4b1d      	ldr	r3, [pc, #116]	@ (8006cfc <vTaskNotifyGiveFromISR+0x11c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d903      	bls.n	8006c96 <vTaskNotifyGiveFromISR+0xb6>
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	4a1a      	ldr	r2, [pc, #104]	@ (8006cfc <vTaskNotifyGiveFromISR+0x11c>)
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4a17      	ldr	r2, [pc, #92]	@ (8006d00 <vTaskNotifyGiveFromISR+0x120>)
 8006ca4:	441a      	add	r2, r3
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	3304      	adds	r3, #4
 8006caa:	4619      	mov	r1, r3
 8006cac:	4610      	mov	r0, r2
 8006cae:	f7fe fa6c 	bl	800518a <vListInsertEnd>
 8006cb2:	e005      	b.n	8006cc0 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	3318      	adds	r3, #24
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4812      	ldr	r0, [pc, #72]	@ (8006d04 <vTaskNotifyGiveFromISR+0x124>)
 8006cbc:	f7fe fa65 	bl	800518a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc4:	4b10      	ldr	r3, [pc, #64]	@ (8006d08 <vTaskNotifyGiveFromISR+0x128>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d909      	bls.n	8006ce2 <vTaskNotifyGiveFromISR+0x102>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e002      	b.n	8006ce2 <vTaskNotifyGiveFromISR+0x102>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8006d0c <vTaskNotifyGiveFromISR+0x12c>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f383 8811 	msr	BASEPRI, r3
}
 8006cec:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006cee:	bf00      	nop
 8006cf0:	3728      	adds	r7, #40	@ 0x28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20006f34 	.word	0x20006f34
 8006cfc:	20006f14 	.word	0x20006f14
 8006d00:	20006a3c 	.word	0x20006a3c
 8006d04:	20006ecc 	.word	0x20006ecc
 8006d08:	20006a38 	.word	0x20006a38
 8006d0c:	20006f20 	.word	0x20006f20

08006d10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d1a:	4b21      	ldr	r3, [pc, #132]	@ (8006da0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d20:	4b20      	ldr	r3, [pc, #128]	@ (8006da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3304      	adds	r3, #4
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fa8c 	bl	8005244 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d32:	d10a      	bne.n	8006d4a <prvAddCurrentTaskToDelayedList+0x3a>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d007      	beq.n	8006d4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	4619      	mov	r1, r3
 8006d42:	4819      	ldr	r0, [pc, #100]	@ (8006da8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d44:	f7fe fa21 	bl	800518a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d48:	e026      	b.n	8006d98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4413      	add	r3, r2
 8006d50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d52:	4b14      	ldr	r3, [pc, #80]	@ (8006da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d209      	bcs.n	8006d76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d62:	4b12      	ldr	r3, [pc, #72]	@ (8006dac <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	4b0f      	ldr	r3, [pc, #60]	@ (8006da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f7fe fa2f 	bl	80051d2 <vListInsert>
}
 8006d74:	e010      	b.n	8006d98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d76:	4b0e      	ldr	r3, [pc, #56]	@ (8006db0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f7fe fa25 	bl	80051d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d88:	4b0a      	ldr	r3, [pc, #40]	@ (8006db4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d202      	bcs.n	8006d98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d92:	4a08      	ldr	r2, [pc, #32]	@ (8006db4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6013      	str	r3, [r2, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	20006f10 	.word	0x20006f10
 8006da4:	20006a38 	.word	0x20006a38
 8006da8:	20006ef8 	.word	0x20006ef8
 8006dac:	20006ec8 	.word	0x20006ec8
 8006db0:	20006ec4 	.word	0x20006ec4
 8006db4:	20006f2c 	.word	0x20006f2c

08006db8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08a      	sub	sp, #40	@ 0x28
 8006dbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006dc2:	f000 fad9 	bl	8007378 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8006e3c <xTimerCreateTimerTask+0x84>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d021      	beq.n	8006e12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006dd6:	1d3a      	adds	r2, r7, #4
 8006dd8:	f107 0108 	add.w	r1, r7, #8
 8006ddc:	f107 030c 	add.w	r3, r7, #12
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe f98b 	bl	80050fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	9202      	str	r2, [sp, #8]
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	2302      	movs	r3, #2
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	2300      	movs	r3, #0
 8006df6:	460a      	mov	r2, r1
 8006df8:	4911      	ldr	r1, [pc, #68]	@ (8006e40 <xTimerCreateTimerTask+0x88>)
 8006dfa:	4812      	ldr	r0, [pc, #72]	@ (8006e44 <xTimerCreateTimerTask+0x8c>)
 8006dfc:	f7fe ff44 	bl	8005c88 <xTaskCreateStatic>
 8006e00:	4603      	mov	r3, r0
 8006e02:	4a11      	ldr	r2, [pc, #68]	@ (8006e48 <xTimerCreateTimerTask+0x90>)
 8006e04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e06:	4b10      	ldr	r3, [pc, #64]	@ (8006e48 <xTimerCreateTimerTask+0x90>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10b      	bne.n	8006e30 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	613b      	str	r3, [r7, #16]
}
 8006e2a:	bf00      	nop
 8006e2c:	bf00      	nop
 8006e2e:	e7fd      	b.n	8006e2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e30:	697b      	ldr	r3, [r7, #20]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20006f68 	.word	0x20006f68
 8006e40:	08008f54 	.word	0x08008f54
 8006e44:	08006f6d 	.word	0x08006f6d
 8006e48:	20006f6c 	.word	0x20006f6c

08006e4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08a      	sub	sp, #40	@ 0x28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10b      	bne.n	8006e7c <xTimerGenericCommand+0x30>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	623b      	str	r3, [r7, #32]
}
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	e7fd      	b.n	8006e78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e7c:	4b19      	ldr	r3, [pc, #100]	@ (8006ee4 <xTimerGenericCommand+0x98>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d02a      	beq.n	8006eda <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	dc18      	bgt.n	8006ec8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e96:	f7ff fd1b 	bl	80068d0 <xTaskGetSchedulerState>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d109      	bne.n	8006eb4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ea0:	4b10      	ldr	r3, [pc, #64]	@ (8006ee4 <xTimerGenericCommand+0x98>)
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	f107 0110 	add.w	r1, r7, #16
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eac:	f7fe fafe 	bl	80054ac <xQueueGenericSend>
 8006eb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006eb2:	e012      	b.n	8006eda <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee4 <xTimerGenericCommand+0x98>)
 8006eb6:	6818      	ldr	r0, [r3, #0]
 8006eb8:	f107 0110 	add.w	r1, r7, #16
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f7fe faf4 	bl	80054ac <xQueueGenericSend>
 8006ec4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ec6:	e008      	b.n	8006eda <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ec8:	4b06      	ldr	r3, [pc, #24]	@ (8006ee4 <xTimerGenericCommand+0x98>)
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	f107 0110 	add.w	r1, r7, #16
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	f7fe fbec 	bl	80056b0 <xQueueGenericSendFromISR>
 8006ed8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3728      	adds	r7, #40	@ 0x28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20006f68 	.word	0x20006f68

08006ee8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <prvProcessExpiredTimer+0x80>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fe f99f 	bl	8005244 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d123      	bne.n	8006f56 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	699a      	ldr	r2, [r3, #24]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	18d1      	adds	r1, r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	6978      	ldr	r0, [r7, #20]
 8006f1c:	f000 f8cc 	bl	80070b8 <prvInsertTimerInActiveList>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d017      	beq.n	8006f56 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f26:	2300      	movs	r3, #0
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6978      	ldr	r0, [r7, #20]
 8006f32:	f7ff ff8b 	bl	8006e4c <xTimerGenericCommand>
 8006f36:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10b      	bne.n	8006f56 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	60fb      	str	r3, [r7, #12]
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	e7fd      	b.n	8006f52 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	6978      	ldr	r0, [r7, #20]
 8006f5c:	4798      	blx	r3
}
 8006f5e:	bf00      	nop
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20006f60 	.word	0x20006f60

08006f6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f74:	f107 0308 	add.w	r3, r7, #8
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 f859 	bl	8007030 <prvGetNextExpireTime>
 8006f7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4619      	mov	r1, r3
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 f805 	bl	8006f94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f8a:	f000 f8d7 	bl	800713c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f8e:	bf00      	nop
 8006f90:	e7f0      	b.n	8006f74 <prvTimerTask+0x8>
	...

08006f94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f9e:	f7ff f897 	bl	80060d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fa2:	f107 0308 	add.w	r3, r7, #8
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 f866 	bl	8007078 <prvSampleTimeNow>
 8006fac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d130      	bne.n	8007016 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10a      	bne.n	8006fd0 <prvProcessTimerOrBlockTask+0x3c>
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d806      	bhi.n	8006fd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006fc2:	f7ff f893 	bl	80060ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff ff8d 	bl	8006ee8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006fce:	e024      	b.n	800701a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d008      	beq.n	8006fe8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006fd6:	4b13      	ldr	r3, [pc, #76]	@ (8007024 <prvProcessTimerOrBlockTask+0x90>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bf0c      	ite	eq
 8006fe0:	2301      	moveq	r3, #1
 8006fe2:	2300      	movne	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8007028 <prvProcessTimerOrBlockTask+0x94>)
 8006fea:	6818      	ldr	r0, [r3, #0]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f7fe fe13 	bl	8005c20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ffa:	f7ff f877 	bl	80060ec <xTaskResumeAll>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10a      	bne.n	800701a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007004:	4b09      	ldr	r3, [pc, #36]	@ (800702c <prvProcessTimerOrBlockTask+0x98>)
 8007006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	f3bf 8f6f 	isb	sy
}
 8007014:	e001      	b.n	800701a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007016:	f7ff f869 	bl	80060ec <xTaskResumeAll>
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20006f64 	.word	0x20006f64
 8007028:	20006f68 	.word	0x20006f68
 800702c:	e000ed04 	.word	0xe000ed04

08007030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007038:	4b0e      	ldr	r3, [pc, #56]	@ (8007074 <prvGetNextExpireTime+0x44>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	bf0c      	ite	eq
 8007042:	2301      	moveq	r3, #1
 8007044:	2300      	movne	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d105      	bne.n	8007062 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007056:	4b07      	ldr	r3, [pc, #28]	@ (8007074 <prvGetNextExpireTime+0x44>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	e001      	b.n	8007066 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007066:	68fb      	ldr	r3, [r7, #12]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	20006f60 	.word	0x20006f60

08007078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007080:	f7ff f8d2 	bl	8006228 <xTaskGetTickCount>
 8007084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007086:	4b0b      	ldr	r3, [pc, #44]	@ (80070b4 <prvSampleTimeNow+0x3c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	429a      	cmp	r2, r3
 800708e:	d205      	bcs.n	800709c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007090:	f000 f910 	bl	80072b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e002      	b.n	80070a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070a2:	4a04      	ldr	r2, [pc, #16]	@ (80070b4 <prvSampleTimeNow+0x3c>)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80070a8:	68fb      	ldr	r3, [r7, #12]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20006f70 	.word	0x20006f70

080070b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d812      	bhi.n	8007104 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d302      	bcc.n	80070f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070ec:	2301      	movs	r3, #1
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	e01b      	b.n	800712a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070f2:	4b10      	ldr	r3, [pc, #64]	@ (8007134 <prvInsertTimerInActiveList+0x7c>)
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3304      	adds	r3, #4
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f7fe f868 	bl	80051d2 <vListInsert>
 8007102:	e012      	b.n	800712a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d206      	bcs.n	800711a <prvInsertTimerInActiveList+0x62>
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d302      	bcc.n	800711a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	e007      	b.n	800712a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800711a:	4b07      	ldr	r3, [pc, #28]	@ (8007138 <prvInsertTimerInActiveList+0x80>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3304      	adds	r3, #4
 8007122:	4619      	mov	r1, r3
 8007124:	4610      	mov	r0, r2
 8007126:	f7fe f854 	bl	80051d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800712a:	697b      	ldr	r3, [r7, #20]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20006f64 	.word	0x20006f64
 8007138:	20006f60 	.word	0x20006f60

0800713c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08e      	sub	sp, #56	@ 0x38
 8007140:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007142:	e0a5      	b.n	8007290 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	da19      	bge.n	800717e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800714a:	1d3b      	adds	r3, r7, #4
 800714c:	3304      	adds	r3, #4
 800714e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10b      	bne.n	800716e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	61fb      	str	r3, [r7, #28]
}
 8007168:	bf00      	nop
 800716a:	bf00      	nop
 800716c:	e7fd      	b.n	800716a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800716e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007174:	6850      	ldr	r0, [r2, #4]
 8007176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007178:	6892      	ldr	r2, [r2, #8]
 800717a:	4611      	mov	r1, r2
 800717c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f2c0 8085 	blt.w	8007290 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007194:	3304      	adds	r3, #4
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe f854 	bl	8005244 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800719c:	463b      	mov	r3, r7
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff ff6a 	bl	8007078 <prvSampleTimeNow>
 80071a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b09      	cmp	r3, #9
 80071aa:	d86c      	bhi.n	8007286 <prvProcessReceivedCommands+0x14a>
 80071ac:	a201      	add	r2, pc, #4	@ (adr r2, 80071b4 <prvProcessReceivedCommands+0x78>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071dd 	.word	0x080071dd
 80071c0:	08007287 	.word	0x08007287
 80071c4:	0800723b 	.word	0x0800723b
 80071c8:	08007275 	.word	0x08007275
 80071cc:	080071dd 	.word	0x080071dd
 80071d0:	080071dd 	.word	0x080071dd
 80071d4:	08007287 	.word	0x08007287
 80071d8:	0800723b 	.word	0x0800723b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	18d1      	adds	r1, r2, r3
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071ea:	f7ff ff65 	bl	80070b8 <prvInsertTimerInActiveList>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d04a      	beq.n	800728a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d142      	bne.n	800728a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	441a      	add	r2, r3
 800720c:	2300      	movs	r3, #0
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2300      	movs	r3, #0
 8007212:	2100      	movs	r1, #0
 8007214:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007216:	f7ff fe19 	bl	8006e4c <xTimerGenericCommand>
 800721a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d133      	bne.n	800728a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	61bb      	str	r3, [r7, #24]
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	e7fd      	b.n	8007236 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10b      	bne.n	8007260 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	617b      	str	r3, [r7, #20]
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	699a      	ldr	r2, [r3, #24]
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	18d1      	adds	r1, r2, r3
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800726c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800726e:	f7ff ff23 	bl	80070b8 <prvInsertTimerInActiveList>
					break;
 8007272:	e00d      	b.n	8007290 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007276:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d107      	bne.n	800728e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800727e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007280:	f000 fbd4 	bl	8007a2c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007284:	e003      	b.n	800728e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8007286:	bf00      	nop
 8007288:	e002      	b.n	8007290 <prvProcessReceivedCommands+0x154>
					break;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <prvProcessReceivedCommands+0x154>
					break;
 800728e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007290:	4b07      	ldr	r3, [pc, #28]	@ (80072b0 <prvProcessReceivedCommands+0x174>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	1d39      	adds	r1, r7, #4
 8007296:	2200      	movs	r2, #0
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe faa5 	bl	80057e8 <xQueueReceive>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f47f af4f 	bne.w	8007144 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80072a6:	bf00      	nop
 80072a8:	bf00      	nop
 80072aa:	3730      	adds	r7, #48	@ 0x30
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20006f68 	.word	0x20006f68

080072b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b088      	sub	sp, #32
 80072b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072ba:	e046      	b.n	800734a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072bc:	4b2c      	ldr	r3, [pc, #176]	@ (8007370 <prvSwitchTimerLists+0xbc>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007370 <prvSwitchTimerLists+0xbc>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	3304      	adds	r3, #4
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fd ffb5 	bl	8005244 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d12f      	bne.n	800734a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4413      	add	r3, r2
 80072f2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d90e      	bls.n	800731a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007308:	4b19      	ldr	r3, [pc, #100]	@ (8007370 <prvSwitchTimerLists+0xbc>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3304      	adds	r3, #4
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f7fd ff5d 	bl	80051d2 <vListInsert>
 8007318:	e017      	b.n	800734a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800731a:	2300      	movs	r3, #0
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	2300      	movs	r3, #0
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	2100      	movs	r1, #0
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff fd91 	bl	8006e4c <xTimerGenericCommand>
 800732a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10b      	bne.n	800734a <prvSwitchTimerLists+0x96>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	603b      	str	r3, [r7, #0]
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800734a:	4b09      	ldr	r3, [pc, #36]	@ (8007370 <prvSwitchTimerLists+0xbc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1b3      	bne.n	80072bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007354:	4b06      	ldr	r3, [pc, #24]	@ (8007370 <prvSwitchTimerLists+0xbc>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800735a:	4b06      	ldr	r3, [pc, #24]	@ (8007374 <prvSwitchTimerLists+0xc0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a04      	ldr	r2, [pc, #16]	@ (8007370 <prvSwitchTimerLists+0xbc>)
 8007360:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007362:	4a04      	ldr	r2, [pc, #16]	@ (8007374 <prvSwitchTimerLists+0xc0>)
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	6013      	str	r3, [r2, #0]
}
 8007368:	bf00      	nop
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20006f60 	.word	0x20006f60
 8007374:	20006f64 	.word	0x20006f64

08007378 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800737e:	f000 f96b 	bl	8007658 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007382:	4b15      	ldr	r3, [pc, #84]	@ (80073d8 <prvCheckForValidListAndQueue+0x60>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d120      	bne.n	80073cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800738a:	4814      	ldr	r0, [pc, #80]	@ (80073dc <prvCheckForValidListAndQueue+0x64>)
 800738c:	f7fd fed0 	bl	8005130 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007390:	4813      	ldr	r0, [pc, #76]	@ (80073e0 <prvCheckForValidListAndQueue+0x68>)
 8007392:	f7fd fecd 	bl	8005130 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007396:	4b13      	ldr	r3, [pc, #76]	@ (80073e4 <prvCheckForValidListAndQueue+0x6c>)
 8007398:	4a10      	ldr	r2, [pc, #64]	@ (80073dc <prvCheckForValidListAndQueue+0x64>)
 800739a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800739c:	4b12      	ldr	r3, [pc, #72]	@ (80073e8 <prvCheckForValidListAndQueue+0x70>)
 800739e:	4a10      	ldr	r2, [pc, #64]	@ (80073e0 <prvCheckForValidListAndQueue+0x68>)
 80073a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073a2:	2300      	movs	r3, #0
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	4b11      	ldr	r3, [pc, #68]	@ (80073ec <prvCheckForValidListAndQueue+0x74>)
 80073a8:	4a11      	ldr	r2, [pc, #68]	@ (80073f0 <prvCheckForValidListAndQueue+0x78>)
 80073aa:	2110      	movs	r1, #16
 80073ac:	200a      	movs	r0, #10
 80073ae:	f7fd ffdd 	bl	800536c <xQueueGenericCreateStatic>
 80073b2:	4603      	mov	r3, r0
 80073b4:	4a08      	ldr	r2, [pc, #32]	@ (80073d8 <prvCheckForValidListAndQueue+0x60>)
 80073b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073b8:	4b07      	ldr	r3, [pc, #28]	@ (80073d8 <prvCheckForValidListAndQueue+0x60>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073c0:	4b05      	ldr	r3, [pc, #20]	@ (80073d8 <prvCheckForValidListAndQueue+0x60>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	490b      	ldr	r1, [pc, #44]	@ (80073f4 <prvCheckForValidListAndQueue+0x7c>)
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fc00 	bl	8005bcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073cc:	f000 f976 	bl	80076bc <vPortExitCritical>
}
 80073d0:	bf00      	nop
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20006f68 	.word	0x20006f68
 80073dc:	20006f38 	.word	0x20006f38
 80073e0:	20006f4c 	.word	0x20006f4c
 80073e4:	20006f60 	.word	0x20006f60
 80073e8:	20006f64 	.word	0x20006f64
 80073ec:	20007014 	.word	0x20007014
 80073f0:	20006f74 	.word	0x20006f74
 80073f4:	08008f5c 	.word	0x08008f5c

080073f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3b04      	subs	r3, #4
 8007408:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3b04      	subs	r3, #4
 8007416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f023 0201 	bic.w	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3b04      	subs	r3, #4
 8007426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007428:	4a0c      	ldr	r2, [pc, #48]	@ (800745c <pxPortInitialiseStack+0x64>)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3b14      	subs	r3, #20
 8007432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3b04      	subs	r3, #4
 800743e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f06f 0202 	mvn.w	r2, #2
 8007446:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3b20      	subs	r3, #32
 800744c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800744e:	68fb      	ldr	r3, [r7, #12]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	08007461 	.word	0x08007461

08007460 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800746a:	4b13      	ldr	r3, [pc, #76]	@ (80074b8 <prvTaskExitError+0x58>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007472:	d00b      	beq.n	800748c <prvTaskExitError+0x2c>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	60fb      	str	r3, [r7, #12]
}
 8007486:	bf00      	nop
 8007488:	bf00      	nop
 800748a:	e7fd      	b.n	8007488 <prvTaskExitError+0x28>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	60bb      	str	r3, [r7, #8]
}
 800749e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074a0:	bf00      	nop
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0fc      	beq.n	80074a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074a8:	bf00      	nop
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	20000010 	.word	0x20000010
 80074bc:	00000000 	.word	0x00000000

080074c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074c0:	4b07      	ldr	r3, [pc, #28]	@ (80074e0 <pxCurrentTCBConst2>)
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	6808      	ldr	r0, [r1, #0]
 80074c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ca:	f380 8809 	msr	PSP, r0
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8811 	msr	BASEPRI, r0
 80074da:	4770      	bx	lr
 80074dc:	f3af 8000 	nop.w

080074e0 <pxCurrentTCBConst2>:
 80074e0:	20006a38 	.word	0x20006a38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop

080074e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074e8:	4808      	ldr	r0, [pc, #32]	@ (800750c <prvPortStartFirstTask+0x24>)
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	6800      	ldr	r0, [r0, #0]
 80074ee:	f380 8808 	msr	MSP, r0
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f380 8814 	msr	CONTROL, r0
 80074fa:	b662      	cpsie	i
 80074fc:	b661      	cpsie	f
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	df00      	svc	0
 8007508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800750a:	bf00      	nop
 800750c:	e000ed08 	.word	0xe000ed08

08007510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007516:	4b47      	ldr	r3, [pc, #284]	@ (8007634 <xPortStartScheduler+0x124>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a47      	ldr	r2, [pc, #284]	@ (8007638 <xPortStartScheduler+0x128>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10b      	bne.n	8007538 <xPortStartScheduler+0x28>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	613b      	str	r3, [r7, #16]
}
 8007532:	bf00      	nop
 8007534:	bf00      	nop
 8007536:	e7fd      	b.n	8007534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007538:	4b3e      	ldr	r3, [pc, #248]	@ (8007634 <xPortStartScheduler+0x124>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a3f      	ldr	r2, [pc, #252]	@ (800763c <xPortStartScheduler+0x12c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d10b      	bne.n	800755a <xPortStartScheduler+0x4a>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	60fb      	str	r3, [r7, #12]
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop
 8007558:	e7fd      	b.n	8007556 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800755a:	4b39      	ldr	r3, [pc, #228]	@ (8007640 <xPortStartScheduler+0x130>)
 800755c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	22ff      	movs	r2, #255	@ 0xff
 800756a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800757c:	b2da      	uxtb	r2, r3
 800757e:	4b31      	ldr	r3, [pc, #196]	@ (8007644 <xPortStartScheduler+0x134>)
 8007580:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007582:	4b31      	ldr	r3, [pc, #196]	@ (8007648 <xPortStartScheduler+0x138>)
 8007584:	2207      	movs	r2, #7
 8007586:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007588:	e009      	b.n	800759e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800758a:	4b2f      	ldr	r3, [pc, #188]	@ (8007648 <xPortStartScheduler+0x138>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3b01      	subs	r3, #1
 8007590:	4a2d      	ldr	r2, [pc, #180]	@ (8007648 <xPortStartScheduler+0x138>)
 8007592:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	b2db      	uxtb	r3, r3
 800759c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a6:	2b80      	cmp	r3, #128	@ 0x80
 80075a8:	d0ef      	beq.n	800758a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075aa:	4b27      	ldr	r3, [pc, #156]	@ (8007648 <xPortStartScheduler+0x138>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f1c3 0307 	rsb	r3, r3, #7
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d00b      	beq.n	80075ce <xPortStartScheduler+0xbe>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	60bb      	str	r3, [r7, #8]
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	e7fd      	b.n	80075ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007648 <xPortStartScheduler+0x138>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	021b      	lsls	r3, r3, #8
 80075d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007648 <xPortStartScheduler+0x138>)
 80075d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007648 <xPortStartScheduler+0x138>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075e0:	4a19      	ldr	r2, [pc, #100]	@ (8007648 <xPortStartScheduler+0x138>)
 80075e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075ec:	4b17      	ldr	r3, [pc, #92]	@ (800764c <xPortStartScheduler+0x13c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a16      	ldr	r2, [pc, #88]	@ (800764c <xPortStartScheduler+0x13c>)
 80075f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075f8:	4b14      	ldr	r3, [pc, #80]	@ (800764c <xPortStartScheduler+0x13c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a13      	ldr	r2, [pc, #76]	@ (800764c <xPortStartScheduler+0x13c>)
 80075fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007602:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007604:	f000 f8da 	bl	80077bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007608:	4b11      	ldr	r3, [pc, #68]	@ (8007650 <xPortStartScheduler+0x140>)
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800760e:	f000 f8f9 	bl	8007804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007612:	4b10      	ldr	r3, [pc, #64]	@ (8007654 <xPortStartScheduler+0x144>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a0f      	ldr	r2, [pc, #60]	@ (8007654 <xPortStartScheduler+0x144>)
 8007618:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800761c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800761e:	f7ff ff63 	bl	80074e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007622:	f7fe fed1 	bl	80063c8 <vTaskSwitchContext>
	prvTaskExitError();
 8007626:	f7ff ff1b 	bl	8007460 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	e000ed00 	.word	0xe000ed00
 8007638:	410fc271 	.word	0x410fc271
 800763c:	410fc270 	.word	0x410fc270
 8007640:	e000e400 	.word	0xe000e400
 8007644:	20007064 	.word	0x20007064
 8007648:	20007068 	.word	0x20007068
 800764c:	e000ed20 	.word	0xe000ed20
 8007650:	20000010 	.word	0x20000010
 8007654:	e000ef34 	.word	0xe000ef34

08007658 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	607b      	str	r3, [r7, #4]
}
 8007670:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007672:	4b10      	ldr	r3, [pc, #64]	@ (80076b4 <vPortEnterCritical+0x5c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	4a0e      	ldr	r2, [pc, #56]	@ (80076b4 <vPortEnterCritical+0x5c>)
 800767a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800767c:	4b0d      	ldr	r3, [pc, #52]	@ (80076b4 <vPortEnterCritical+0x5c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d110      	bne.n	80076a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007684:	4b0c      	ldr	r3, [pc, #48]	@ (80076b8 <vPortEnterCritical+0x60>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	603b      	str	r3, [r7, #0]
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	e7fd      	b.n	80076a2 <vPortEnterCritical+0x4a>
	}
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20000010 	.word	0x20000010
 80076b8:	e000ed04 	.word	0xe000ed04

080076bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076c2:	4b12      	ldr	r3, [pc, #72]	@ (800770c <vPortExitCritical+0x50>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10b      	bne.n	80076e2 <vPortExitCritical+0x26>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	607b      	str	r3, [r7, #4]
}
 80076dc:	bf00      	nop
 80076de:	bf00      	nop
 80076e0:	e7fd      	b.n	80076de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076e2:	4b0a      	ldr	r3, [pc, #40]	@ (800770c <vPortExitCritical+0x50>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	4a08      	ldr	r2, [pc, #32]	@ (800770c <vPortExitCritical+0x50>)
 80076ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076ec:	4b07      	ldr	r3, [pc, #28]	@ (800770c <vPortExitCritical+0x50>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d105      	bne.n	8007700 <vPortExitCritical+0x44>
 80076f4:	2300      	movs	r3, #0
 80076f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	f383 8811 	msr	BASEPRI, r3
}
 80076fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	20000010 	.word	0x20000010

08007710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007710:	f3ef 8009 	mrs	r0, PSP
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	4b15      	ldr	r3, [pc, #84]	@ (8007770 <pxCurrentTCBConst>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	f01e 0f10 	tst.w	lr, #16
 8007720:	bf08      	it	eq
 8007722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	6010      	str	r0, [r2, #0]
 800772c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007730:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007734:	f380 8811 	msr	BASEPRI, r0
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f7fe fe42 	bl	80063c8 <vTaskSwitchContext>
 8007744:	f04f 0000 	mov.w	r0, #0
 8007748:	f380 8811 	msr	BASEPRI, r0
 800774c:	bc09      	pop	{r0, r3}
 800774e:	6819      	ldr	r1, [r3, #0]
 8007750:	6808      	ldr	r0, [r1, #0]
 8007752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007756:	f01e 0f10 	tst.w	lr, #16
 800775a:	bf08      	it	eq
 800775c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007760:	f380 8809 	msr	PSP, r0
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	f3af 8000 	nop.w

08007770 <pxCurrentTCBConst>:
 8007770:	20006a38 	.word	0x20006a38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop

08007778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
}
 8007790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007792:	f7fe fd59 	bl	8006248 <xTaskIncrementTick>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800779c:	4b06      	ldr	r3, [pc, #24]	@ (80077b8 <SysTick_Handler+0x40>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	2300      	movs	r3, #0
 80077a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f383 8811 	msr	BASEPRI, r3
}
 80077ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077c0:	4b0b      	ldr	r3, [pc, #44]	@ (80077f0 <vPortSetupTimerInterrupt+0x34>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077c6:	4b0b      	ldr	r3, [pc, #44]	@ (80077f4 <vPortSetupTimerInterrupt+0x38>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077cc:	4b0a      	ldr	r3, [pc, #40]	@ (80077f8 <vPortSetupTimerInterrupt+0x3c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0a      	ldr	r2, [pc, #40]	@ (80077fc <vPortSetupTimerInterrupt+0x40>)
 80077d2:	fba2 2303 	umull	r2, r3, r2, r3
 80077d6:	099b      	lsrs	r3, r3, #6
 80077d8:	4a09      	ldr	r2, [pc, #36]	@ (8007800 <vPortSetupTimerInterrupt+0x44>)
 80077da:	3b01      	subs	r3, #1
 80077dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077de:	4b04      	ldr	r3, [pc, #16]	@ (80077f0 <vPortSetupTimerInterrupt+0x34>)
 80077e0:	2207      	movs	r2, #7
 80077e2:	601a      	str	r2, [r3, #0]
}
 80077e4:	bf00      	nop
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	e000e010 	.word	0xe000e010
 80077f4:	e000e018 	.word	0xe000e018
 80077f8:	20000004 	.word	0x20000004
 80077fc:	10624dd3 	.word	0x10624dd3
 8007800:	e000e014 	.word	0xe000e014

08007804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007804:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007814 <vPortEnableVFP+0x10>
 8007808:	6801      	ldr	r1, [r0, #0]
 800780a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800780e:	6001      	str	r1, [r0, #0]
 8007810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007812:	bf00      	nop
 8007814:	e000ed88 	.word	0xe000ed88

08007818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800781e:	f3ef 8305 	mrs	r3, IPSR
 8007822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b0f      	cmp	r3, #15
 8007828:	d915      	bls.n	8007856 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800782a:	4a18      	ldr	r2, [pc, #96]	@ (800788c <vPortValidateInterruptPriority+0x74>)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007834:	4b16      	ldr	r3, [pc, #88]	@ (8007890 <vPortValidateInterruptPriority+0x78>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	7afa      	ldrb	r2, [r7, #11]
 800783a:	429a      	cmp	r2, r3
 800783c:	d20b      	bcs.n	8007856 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	607b      	str	r3, [r7, #4]
}
 8007850:	bf00      	nop
 8007852:	bf00      	nop
 8007854:	e7fd      	b.n	8007852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007856:	4b0f      	ldr	r3, [pc, #60]	@ (8007894 <vPortValidateInterruptPriority+0x7c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800785e:	4b0e      	ldr	r3, [pc, #56]	@ (8007898 <vPortValidateInterruptPriority+0x80>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d90b      	bls.n	800787e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	603b      	str	r3, [r7, #0]
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	e7fd      	b.n	800787a <vPortValidateInterruptPriority+0x62>
	}
 800787e:	bf00      	nop
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	e000e3f0 	.word	0xe000e3f0
 8007890:	20007064 	.word	0x20007064
 8007894:	e000ed0c 	.word	0xe000ed0c
 8007898:	20007068 	.word	0x20007068

0800789c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08a      	sub	sp, #40	@ 0x28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078a8:	f7fe fc12 	bl	80060d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078ac:	4b5a      	ldr	r3, [pc, #360]	@ (8007a18 <pvPortMalloc+0x17c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078b4:	f000 f916 	bl	8007ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078b8:	4b58      	ldr	r3, [pc, #352]	@ (8007a1c <pvPortMalloc+0x180>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4013      	ands	r3, r2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f040 8090 	bne.w	80079e6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01e      	beq.n	800790a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80078cc:	2208      	movs	r2, #8
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4413      	add	r3, r2
 80078d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d015      	beq.n	800790a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f023 0307 	bic.w	r3, r3, #7
 80078e4:	3308      	adds	r3, #8
 80078e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <pvPortMalloc+0x6e>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	617b      	str	r3, [r7, #20]
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop
 8007908:	e7fd      	b.n	8007906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d06a      	beq.n	80079e6 <pvPortMalloc+0x14a>
 8007910:	4b43      	ldr	r3, [pc, #268]	@ (8007a20 <pvPortMalloc+0x184>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	429a      	cmp	r2, r3
 8007918:	d865      	bhi.n	80079e6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800791a:	4b42      	ldr	r3, [pc, #264]	@ (8007a24 <pvPortMalloc+0x188>)
 800791c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800791e:	4b41      	ldr	r3, [pc, #260]	@ (8007a24 <pvPortMalloc+0x188>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007924:	e004      	b.n	8007930 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	429a      	cmp	r2, r3
 8007938:	d903      	bls.n	8007942 <pvPortMalloc+0xa6>
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f1      	bne.n	8007926 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007942:	4b35      	ldr	r3, [pc, #212]	@ (8007a18 <pvPortMalloc+0x17c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007948:	429a      	cmp	r2, r3
 800794a:	d04c      	beq.n	80079e6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2208      	movs	r2, #8
 8007952:	4413      	add	r3, r2
 8007954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	1ad2      	subs	r2, r2, r3
 8007966:	2308      	movs	r3, #8
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	429a      	cmp	r2, r3
 800796c:	d920      	bls.n	80079b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800796e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4413      	add	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <pvPortMalloc+0xfc>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	613b      	str	r3, [r7, #16]
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	e7fd      	b.n	8007994 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	1ad2      	subs	r2, r2, r3
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079aa:	69b8      	ldr	r0, [r7, #24]
 80079ac:	f000 f8fc 	bl	8007ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007a20 <pvPortMalloc+0x184>)
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	4a19      	ldr	r2, [pc, #100]	@ (8007a20 <pvPortMalloc+0x184>)
 80079bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079be:	4b18      	ldr	r3, [pc, #96]	@ (8007a20 <pvPortMalloc+0x184>)
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	4b19      	ldr	r3, [pc, #100]	@ (8007a28 <pvPortMalloc+0x18c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d203      	bcs.n	80079d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079ca:	4b15      	ldr	r3, [pc, #84]	@ (8007a20 <pvPortMalloc+0x184>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a16      	ldr	r2, [pc, #88]	@ (8007a28 <pvPortMalloc+0x18c>)
 80079d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	4b11      	ldr	r3, [pc, #68]	@ (8007a1c <pvPortMalloc+0x180>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	431a      	orrs	r2, r3
 80079dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079e6:	f7fe fb81 	bl	80060ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <pvPortMalloc+0x170>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	60fb      	str	r3, [r7, #12]
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	e7fd      	b.n	8007a08 <pvPortMalloc+0x16c>
	return pvReturn;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3728      	adds	r7, #40	@ 0x28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20007c74 	.word	0x20007c74
 8007a1c:	20007c80 	.word	0x20007c80
 8007a20:	20007c78 	.word	0x20007c78
 8007a24:	20007c6c 	.word	0x20007c6c
 8007a28:	20007c7c 	.word	0x20007c7c

08007a2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d04a      	beq.n	8007ad4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a3e:	2308      	movs	r3, #8
 8007a40:	425b      	negs	r3, r3
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4413      	add	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	4b22      	ldr	r3, [pc, #136]	@ (8007adc <vPortFree+0xb0>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4013      	ands	r3, r2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10b      	bne.n	8007a72 <vPortFree+0x46>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	60fb      	str	r3, [r7, #12]
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	e7fd      	b.n	8007a6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00b      	beq.n	8007a92 <vPortFree+0x66>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	60bb      	str	r3, [r7, #8]
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	e7fd      	b.n	8007a8e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	4b11      	ldr	r3, [pc, #68]	@ (8007adc <vPortFree+0xb0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d019      	beq.n	8007ad4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d115      	bne.n	8007ad4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4b0b      	ldr	r3, [pc, #44]	@ (8007adc <vPortFree+0xb0>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	401a      	ands	r2, r3
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ab8:	f7fe fb0a 	bl	80060d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	4b07      	ldr	r3, [pc, #28]	@ (8007ae0 <vPortFree+0xb4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	4a06      	ldr	r2, [pc, #24]	@ (8007ae0 <vPortFree+0xb4>)
 8007ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aca:	6938      	ldr	r0, [r7, #16]
 8007acc:	f000 f86c 	bl	8007ba8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ad0:	f7fe fb0c 	bl	80060ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ad4:	bf00      	nop
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20007c80 	.word	0x20007c80
 8007ae0:	20007c78 	.word	0x20007c78

08007ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007af0:	4b27      	ldr	r3, [pc, #156]	@ (8007b90 <prvHeapInit+0xac>)
 8007af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00c      	beq.n	8007b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3307      	adds	r3, #7
 8007b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0307 	bic.w	r3, r3, #7
 8007b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	4a1f      	ldr	r2, [pc, #124]	@ (8007b90 <prvHeapInit+0xac>)
 8007b14:	4413      	add	r3, r2
 8007b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b94 <prvHeapInit+0xb0>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b22:	4b1c      	ldr	r3, [pc, #112]	@ (8007b94 <prvHeapInit+0xb0>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b30:	2208      	movs	r2, #8
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0307 	bic.w	r3, r3, #7
 8007b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4a15      	ldr	r2, [pc, #84]	@ (8007b98 <prvHeapInit+0xb4>)
 8007b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b46:	4b14      	ldr	r3, [pc, #80]	@ (8007b98 <prvHeapInit+0xb4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b4e:	4b12      	ldr	r3, [pc, #72]	@ (8007b98 <prvHeapInit+0xb4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b64:	4b0c      	ldr	r3, [pc, #48]	@ (8007b98 <prvHeapInit+0xb4>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4a0a      	ldr	r2, [pc, #40]	@ (8007b9c <prvHeapInit+0xb8>)
 8007b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4a09      	ldr	r2, [pc, #36]	@ (8007ba0 <prvHeapInit+0xbc>)
 8007b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b7c:	4b09      	ldr	r3, [pc, #36]	@ (8007ba4 <prvHeapInit+0xc0>)
 8007b7e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b82:	601a      	str	r2, [r3, #0]
}
 8007b84:	bf00      	nop
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	2000706c 	.word	0x2000706c
 8007b94:	20007c6c 	.word	0x20007c6c
 8007b98:	20007c74 	.word	0x20007c74
 8007b9c:	20007c7c 	.word	0x20007c7c
 8007ba0:	20007c78 	.word	0x20007c78
 8007ba4:	20007c80 	.word	0x20007c80

08007ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bb0:	4b28      	ldr	r3, [pc, #160]	@ (8007c54 <prvInsertBlockIntoFreeList+0xac>)
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	e002      	b.n	8007bbc <prvInsertBlockIntoFreeList+0x14>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d8f7      	bhi.n	8007bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d108      	bne.n	8007bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	441a      	add	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	441a      	add	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d118      	bne.n	8007c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b15      	ldr	r3, [pc, #84]	@ (8007c58 <prvInsertBlockIntoFreeList+0xb0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d00d      	beq.n	8007c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	441a      	add	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	e008      	b.n	8007c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c26:	4b0c      	ldr	r3, [pc, #48]	@ (8007c58 <prvInsertBlockIntoFreeList+0xb0>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	e003      	b.n	8007c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d002      	beq.n	8007c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c46:	bf00      	nop
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20007c6c 	.word	0x20007c6c
 8007c58:	20007c74 	.word	0x20007c74

08007c5c <arm_rfft_32_fast_init_f32>:
 8007c5c:	b150      	cbz	r0, 8007c74 <arm_rfft_32_fast_init_f32+0x18>
 8007c5e:	b510      	push	{r4, lr}
 8007c60:	2110      	movs	r1, #16
 8007c62:	4604      	mov	r4, r0
 8007c64:	f000 fd58 	bl	8008718 <arm_cfft_init_f32>
 8007c68:	b918      	cbnz	r0, 8007c72 <arm_rfft_32_fast_init_f32+0x16>
 8007c6a:	4b04      	ldr	r3, [pc, #16]	@ (8007c7c <arm_rfft_32_fast_init_f32+0x20>)
 8007c6c:	6163      	str	r3, [r4, #20]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	8222      	strh	r2, [r4, #16]
 8007c72:	bd10      	pop	{r4, pc}
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	08021a3c 	.word	0x08021a3c

08007c80 <arm_rfft_64_fast_init_f32>:
 8007c80:	b150      	cbz	r0, 8007c98 <arm_rfft_64_fast_init_f32+0x18>
 8007c82:	b510      	push	{r4, lr}
 8007c84:	2120      	movs	r1, #32
 8007c86:	4604      	mov	r4, r0
 8007c88:	f000 fd46 	bl	8008718 <arm_cfft_init_f32>
 8007c8c:	b918      	cbnz	r0, 8007c96 <arm_rfft_64_fast_init_f32+0x16>
 8007c8e:	4b04      	ldr	r3, [pc, #16]	@ (8007ca0 <arm_rfft_64_fast_init_f32+0x20>)
 8007c90:	6163      	str	r3, [r4, #20]
 8007c92:	2240      	movs	r2, #64	@ 0x40
 8007c94:	8222      	strh	r2, [r4, #16]
 8007c96:	bd10      	pop	{r4, pc}
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	080262bc 	.word	0x080262bc

08007ca4 <arm_rfft_128_fast_init_f32>:
 8007ca4:	b150      	cbz	r0, 8007cbc <arm_rfft_128_fast_init_f32+0x18>
 8007ca6:	b510      	push	{r4, lr}
 8007ca8:	2140      	movs	r1, #64	@ 0x40
 8007caa:	4604      	mov	r4, r0
 8007cac:	f000 fd34 	bl	8008718 <arm_cfft_init_f32>
 8007cb0:	b918      	cbnz	r0, 8007cba <arm_rfft_128_fast_init_f32+0x16>
 8007cb2:	4b04      	ldr	r3, [pc, #16]	@ (8007cc4 <arm_rfft_128_fast_init_f32+0x20>)
 8007cb4:	6163      	str	r3, [r4, #20]
 8007cb6:	2280      	movs	r2, #128	@ 0x80
 8007cb8:	8222      	strh	r2, [r4, #16]
 8007cba:	bd10      	pop	{r4, pc}
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	0801f43c 	.word	0x0801f43c

08007cc8 <arm_rfft_256_fast_init_f32>:
 8007cc8:	b158      	cbz	r0, 8007ce2 <arm_rfft_256_fast_init_f32+0x1a>
 8007cca:	b510      	push	{r4, lr}
 8007ccc:	2180      	movs	r1, #128	@ 0x80
 8007cce:	4604      	mov	r4, r0
 8007cd0:	f000 fd22 	bl	8008718 <arm_cfft_init_f32>
 8007cd4:	b920      	cbnz	r0, 8007ce0 <arm_rfft_256_fast_init_f32+0x18>
 8007cd6:	4b04      	ldr	r3, [pc, #16]	@ (8007ce8 <arm_rfft_256_fast_init_f32+0x20>)
 8007cd8:	6163      	str	r3, [r4, #20]
 8007cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cde:	8222      	strh	r2, [r4, #16]
 8007ce0:	bd10      	pop	{r4, pc}
 8007ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce6:	4770      	bx	lr
 8007ce8:	0802163c 	.word	0x0802163c

08007cec <arm_rfft_512_fast_init_f32>:
 8007cec:	b160      	cbz	r0, 8007d08 <arm_rfft_512_fast_init_f32+0x1c>
 8007cee:	b510      	push	{r4, lr}
 8007cf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	f000 fd0f 	bl	8008718 <arm_cfft_init_f32>
 8007cfa:	b920      	cbnz	r0, 8007d06 <arm_rfft_512_fast_init_f32+0x1a>
 8007cfc:	4b04      	ldr	r3, [pc, #16]	@ (8007d10 <arm_rfft_512_fast_init_f32+0x24>)
 8007cfe:	6163      	str	r3, [r4, #20]
 8007d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d04:	8222      	strh	r2, [r4, #16]
 8007d06:	bd10      	pop	{r4, pc}
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	08025abc 	.word	0x08025abc

08007d14 <arm_rfft_1024_fast_init_f32>:
 8007d14:	b160      	cbz	r0, 8007d30 <arm_rfft_1024_fast_init_f32+0x1c>
 8007d16:	b510      	push	{r4, lr}
 8007d18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	f000 fcfb 	bl	8008718 <arm_cfft_init_f32>
 8007d22:	b920      	cbnz	r0, 8007d2e <arm_rfft_1024_fast_init_f32+0x1a>
 8007d24:	4b04      	ldr	r3, [pc, #16]	@ (8007d38 <arm_rfft_1024_fast_init_f32+0x24>)
 8007d26:	6163      	str	r3, [r4, #20]
 8007d28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d2c:	8222      	strh	r2, [r4, #16]
 8007d2e:	bd10      	pop	{r4, pc}
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	0801e43c 	.word	0x0801e43c

08007d3c <arm_rfft_2048_fast_init_f32>:
 8007d3c:	b160      	cbz	r0, 8007d58 <arm_rfft_2048_fast_init_f32+0x1c>
 8007d3e:	b510      	push	{r4, lr}
 8007d40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007d44:	4604      	mov	r4, r0
 8007d46:	f000 fce7 	bl	8008718 <arm_cfft_init_f32>
 8007d4a:	b920      	cbnz	r0, 8007d56 <arm_rfft_2048_fast_init_f32+0x1a>
 8007d4c:	4b04      	ldr	r3, [pc, #16]	@ (8007d60 <arm_rfft_2048_fast_init_f32+0x24>)
 8007d4e:	6163      	str	r3, [r4, #20]
 8007d50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d54:	8222      	strh	r2, [r4, #16]
 8007d56:	bd10      	pop	{r4, pc}
 8007d58:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	0801f63c 	.word	0x0801f63c

08007d64 <arm_rfft_4096_fast_init_f32>:
 8007d64:	b160      	cbz	r0, 8007d80 <arm_rfft_4096_fast_init_f32+0x1c>
 8007d66:	b510      	push	{r4, lr}
 8007d68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	f000 fcd3 	bl	8008718 <arm_cfft_init_f32>
 8007d72:	b920      	cbnz	r0, 8007d7e <arm_rfft_4096_fast_init_f32+0x1a>
 8007d74:	4b04      	ldr	r3, [pc, #16]	@ (8007d88 <arm_rfft_4096_fast_init_f32+0x24>)
 8007d76:	6163      	str	r3, [r4, #20]
 8007d78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007d7c:	8222      	strh	r2, [r4, #16]
 8007d7e:	bd10      	pop	{r4, pc}
 8007d80:	f04f 30ff 	mov.w	r0, #4294967295
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	08021abc 	.word	0x08021abc

08007d8c <arm_rfft_fast_init_f32>:
 8007d8c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007d90:	d024      	beq.n	8007ddc <arm_rfft_fast_init_f32+0x50>
 8007d92:	d807      	bhi.n	8007da4 <arm_rfft_fast_init_f32+0x18>
 8007d94:	2980      	cmp	r1, #128	@ 0x80
 8007d96:	d01c      	beq.n	8007dd2 <arm_rfft_fast_init_f32+0x46>
 8007d98:	d90c      	bls.n	8007db4 <arm_rfft_fast_init_f32+0x28>
 8007d9a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007d9e:	d11a      	bne.n	8007dd6 <arm_rfft_fast_init_f32+0x4a>
 8007da0:	4b0f      	ldr	r3, [pc, #60]	@ (8007de0 <arm_rfft_fast_init_f32+0x54>)
 8007da2:	4718      	bx	r3
 8007da4:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007da8:	d011      	beq.n	8007dce <arm_rfft_fast_init_f32+0x42>
 8007daa:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007dae:	d107      	bne.n	8007dc0 <arm_rfft_fast_init_f32+0x34>
 8007db0:	4b0c      	ldr	r3, [pc, #48]	@ (8007de4 <arm_rfft_fast_init_f32+0x58>)
 8007db2:	4718      	bx	r3
 8007db4:	2920      	cmp	r1, #32
 8007db6:	d008      	beq.n	8007dca <arm_rfft_fast_init_f32+0x3e>
 8007db8:	2940      	cmp	r1, #64	@ 0x40
 8007dba:	d10c      	bne.n	8007dd6 <arm_rfft_fast_init_f32+0x4a>
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8007de8 <arm_rfft_fast_init_f32+0x5c>)
 8007dbe:	e7f0      	b.n	8007da2 <arm_rfft_fast_init_f32+0x16>
 8007dc0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007dc4:	d107      	bne.n	8007dd6 <arm_rfft_fast_init_f32+0x4a>
 8007dc6:	4b09      	ldr	r3, [pc, #36]	@ (8007dec <arm_rfft_fast_init_f32+0x60>)
 8007dc8:	e7eb      	b.n	8007da2 <arm_rfft_fast_init_f32+0x16>
 8007dca:	4b09      	ldr	r3, [pc, #36]	@ (8007df0 <arm_rfft_fast_init_f32+0x64>)
 8007dcc:	e7e9      	b.n	8007da2 <arm_rfft_fast_init_f32+0x16>
 8007dce:	4b09      	ldr	r3, [pc, #36]	@ (8007df4 <arm_rfft_fast_init_f32+0x68>)
 8007dd0:	e7e7      	b.n	8007da2 <arm_rfft_fast_init_f32+0x16>
 8007dd2:	4b09      	ldr	r3, [pc, #36]	@ (8007df8 <arm_rfft_fast_init_f32+0x6c>)
 8007dd4:	e7e5      	b.n	8007da2 <arm_rfft_fast_init_f32+0x16>
 8007dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dda:	4770      	bx	lr
 8007ddc:	4b07      	ldr	r3, [pc, #28]	@ (8007dfc <arm_rfft_fast_init_f32+0x70>)
 8007dde:	e7e0      	b.n	8007da2 <arm_rfft_fast_init_f32+0x16>
 8007de0:	08007cc9 	.word	0x08007cc9
 8007de4:	08007d65 	.word	0x08007d65
 8007de8:	08007c81 	.word	0x08007c81
 8007dec:	08007d15 	.word	0x08007d15
 8007df0:	08007c5d 	.word	0x08007c5d
 8007df4:	08007d3d 	.word	0x08007d3d
 8007df8:	08007ca5 	.word	0x08007ca5
 8007dfc:	08007ced 	.word	0x08007ced

08007e00 <stage_rfft_f32>:
 8007e00:	b410      	push	{r4}
 8007e02:	edd1 7a00 	vldr	s15, [r1]
 8007e06:	ed91 7a01 	vldr	s14, [r1, #4]
 8007e0a:	8804      	ldrh	r4, [r0, #0]
 8007e0c:	6940      	ldr	r0, [r0, #20]
 8007e0e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8007e12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007e16:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8007e1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007e1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e22:	3c01      	subs	r4, #1
 8007e24:	ee26 7a84 	vmul.f32	s14, s13, s8
 8007e28:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007e2c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8007e30:	ed82 7a00 	vstr	s14, [r2]
 8007e34:	edc2 7a01 	vstr	s15, [r2, #4]
 8007e38:	3010      	adds	r0, #16
 8007e3a:	3210      	adds	r2, #16
 8007e3c:	3b08      	subs	r3, #8
 8007e3e:	3110      	adds	r1, #16
 8007e40:	ed11 5a02 	vldr	s10, [r1, #-8]
 8007e44:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e48:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007e4c:	edd3 4a03 	vldr	s9, [r3, #12]
 8007e50:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007e54:	ed10 6a01 	vldr	s12, [r0, #-4]
 8007e58:	ee77 5a45 	vsub.f32	s11, s14, s10
 8007e5c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007e60:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8007e64:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8007e68:	ee66 5a25 	vmul.f32	s11, s12, s11
 8007e6c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007e70:	ee37 7a23 	vadd.f32	s14, s14, s7
 8007e74:	ee66 6a85 	vmul.f32	s13, s13, s10
 8007e78:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007e7c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007e80:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007e84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e88:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007e8c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007e90:	3c01      	subs	r4, #1
 8007e92:	ed02 7a02 	vstr	s14, [r2, #-8]
 8007e96:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007e9a:	f1a3 0308 	sub.w	r3, r3, #8
 8007e9e:	f101 0108 	add.w	r1, r1, #8
 8007ea2:	f100 0008 	add.w	r0, r0, #8
 8007ea6:	f102 0208 	add.w	r2, r2, #8
 8007eaa:	d1c9      	bne.n	8007e40 <stage_rfft_f32+0x40>
 8007eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop

08007eb4 <merge_rfft_f32>:
 8007eb4:	b410      	push	{r4}
 8007eb6:	edd1 7a00 	vldr	s15, [r1]
 8007eba:	edd1 6a01 	vldr	s13, [r1, #4]
 8007ebe:	8804      	ldrh	r4, [r0, #0]
 8007ec0:	6940      	ldr	r0, [r0, #20]
 8007ec2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007ec6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007eca:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8007ece:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007ed2:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007ed6:	3c01      	subs	r4, #1
 8007ed8:	ed82 7a00 	vstr	s14, [r2]
 8007edc:	edc2 7a01 	vstr	s15, [r2, #4]
 8007ee0:	b3dc      	cbz	r4, 8007f5a <merge_rfft_f32+0xa6>
 8007ee2:	00e3      	lsls	r3, r4, #3
 8007ee4:	3b08      	subs	r3, #8
 8007ee6:	440b      	add	r3, r1
 8007ee8:	3010      	adds	r0, #16
 8007eea:	3210      	adds	r2, #16
 8007eec:	3110      	adds	r1, #16
 8007eee:	ed11 5a02 	vldr	s10, [r1, #-8]
 8007ef2:	ed93 7a02 	vldr	s14, [r3, #8]
 8007ef6:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007efa:	edd3 4a03 	vldr	s9, [r3, #12]
 8007efe:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007f02:	ed10 6a01 	vldr	s12, [r0, #-4]
 8007f06:	ee75 5a47 	vsub.f32	s11, s10, s14
 8007f0a:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007f0e:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8007f12:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8007f16:	ee66 5a25 	vmul.f32	s11, s12, s11
 8007f1a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007f1e:	ee37 7a63 	vsub.f32	s14, s14, s7
 8007f22:	ee66 6a85 	vmul.f32	s13, s13, s10
 8007f26:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007f2a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007f2e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8007f32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f36:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007f3a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007f3e:	3c01      	subs	r4, #1
 8007f40:	ed02 7a02 	vstr	s14, [r2, #-8]
 8007f44:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007f48:	f1a3 0308 	sub.w	r3, r3, #8
 8007f4c:	f101 0108 	add.w	r1, r1, #8
 8007f50:	f100 0008 	add.w	r0, r0, #8
 8007f54:	f102 0208 	add.w	r2, r2, #8
 8007f58:	d1c9      	bne.n	8007eee <merge_rfft_f32+0x3a>
 8007f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <arm_rfft_fast_f32>:
 8007f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f64:	461c      	mov	r4, r3
 8007f66:	4605      	mov	r5, r0
 8007f68:	4616      	mov	r6, r2
 8007f6a:	b14b      	cbz	r3, 8007f80 <arm_rfft_fast_f32+0x20>
 8007f6c:	f7ff ffa2 	bl	8007eb4 <merge_rfft_f32>
 8007f70:	4622      	mov	r2, r4
 8007f72:	4631      	mov	r1, r6
 8007f74:	4628      	mov	r0, r5
 8007f76:	2301      	movs	r3, #1
 8007f78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7c:	f000 bb34 	b.w	80085e8 <arm_cfft_f32>
 8007f80:	460f      	mov	r7, r1
 8007f82:	461a      	mov	r2, r3
 8007f84:	2301      	movs	r3, #1
 8007f86:	f000 fb2f 	bl	80085e8 <arm_cfft_f32>
 8007f8a:	4632      	mov	r2, r6
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	4628      	mov	r0, r5
 8007f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f94:	f7ff bf34 	b.w	8007e00 <stage_rfft_f32>

08007f98 <arm_cfft_radix8by2_f32>:
 8007f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9c:	ed2d 8b08 	vpush	{d8-d11}
 8007fa0:	f8b0 c000 	ldrh.w	ip, [r0]
 8007fa4:	6842      	ldr	r2, [r0, #4]
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8007fae:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8007fb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	f000 80b0 	beq.w	800811c <arm_cfft_radix8by2_f32+0x184>
 8007fbc:	008c      	lsls	r4, r1, #2
 8007fbe:	3410      	adds	r4, #16
 8007fc0:	f100 0310 	add.w	r3, r0, #16
 8007fc4:	1906      	adds	r6, r0, r4
 8007fc6:	3210      	adds	r2, #16
 8007fc8:	4444      	add	r4, r8
 8007fca:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8007fce:	f108 0510 	add.w	r5, r8, #16
 8007fd2:	ed15 2a04 	vldr	s4, [r5, #-16]
 8007fd6:	ed55 2a03 	vldr	s5, [r5, #-12]
 8007fda:	ed54 4a04 	vldr	s9, [r4, #-16]
 8007fde:	ed14 4a03 	vldr	s8, [r4, #-12]
 8007fe2:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007fe6:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007fea:	ed53 3a04 	vldr	s7, [r3, #-16]
 8007fee:	ed15 0a02 	vldr	s0, [r5, #-8]
 8007ff2:	ed55 0a01 	vldr	s1, [r5, #-4]
 8007ff6:	ed56 6a04 	vldr	s13, [r6, #-16]
 8007ffa:	ed16 3a03 	vldr	s6, [r6, #-12]
 8007ffe:	ed13 7a03 	vldr	s14, [r3, #-12]
 8008002:	ed13 5a02 	vldr	s10, [r3, #-8]
 8008006:	ed53 7a01 	vldr	s15, [r3, #-4]
 800800a:	ed16 1a02 	vldr	s2, [r6, #-8]
 800800e:	ed56 1a01 	vldr	s3, [r6, #-4]
 8008012:	ee73 ba82 	vadd.f32	s23, s7, s4
 8008016:	ee37 ba22 	vadd.f32	s22, s14, s5
 800801a:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800801e:	ee33 9a04 	vadd.f32	s18, s6, s8
 8008022:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8008026:	ee75 aa00 	vadd.f32	s21, s10, s0
 800802a:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800802e:	ee71 8a06 	vadd.f32	s17, s2, s12
 8008032:	ed43 ba04 	vstr	s23, [r3, #-16]
 8008036:	ed03 ba03 	vstr	s22, [r3, #-12]
 800803a:	ed43 aa02 	vstr	s21, [r3, #-8]
 800803e:	ed03 aa01 	vstr	s20, [r3, #-4]
 8008042:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008046:	ed46 9a04 	vstr	s19, [r6, #-16]
 800804a:	ed06 9a03 	vstr	s18, [r6, #-12]
 800804e:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008052:	ee37 7a62 	vsub.f32	s14, s14, s5
 8008056:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800805a:	ee34 4a43 	vsub.f32	s8, s8, s6
 800805e:	ed52 6a03 	vldr	s13, [r2, #-12]
 8008062:	ed12 3a04 	vldr	s6, [r2, #-16]
 8008066:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800806a:	ee27 8a26 	vmul.f32	s16, s14, s13
 800806e:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8008072:	ee23 2a83 	vmul.f32	s4, s7, s6
 8008076:	ee64 4a83 	vmul.f32	s9, s9, s6
 800807a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800807e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8008082:	ee64 6a26 	vmul.f32	s13, s8, s13
 8008086:	ee24 4a03 	vmul.f32	s8, s8, s6
 800808a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800808e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008092:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8008096:	ee32 3a08 	vadd.f32	s6, s4, s16
 800809a:	ed05 7a03 	vstr	s14, [r5, #-12]
 800809e:	ed05 3a04 	vstr	s6, [r5, #-16]
 80080a2:	ed04 4a04 	vstr	s8, [r4, #-16]
 80080a6:	ed44 6a03 	vstr	s13, [r4, #-12]
 80080aa:	ed12 7a01 	vldr	s14, [r2, #-4]
 80080ae:	ee76 6a41 	vsub.f32	s13, s12, s2
 80080b2:	ee35 5a40 	vsub.f32	s10, s10, s0
 80080b6:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80080ba:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80080be:	ed52 5a02 	vldr	s11, [r2, #-8]
 80080c2:	ee67 3a87 	vmul.f32	s7, s15, s14
 80080c6:	ee66 4a87 	vmul.f32	s9, s13, s14
 80080ca:	ee25 4a25 	vmul.f32	s8, s10, s11
 80080ce:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80080d2:	ee25 5a07 	vmul.f32	s10, s10, s14
 80080d6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80080da:	ee26 7a07 	vmul.f32	s14, s12, s14
 80080de:	ee26 6a25 	vmul.f32	s12, s12, s11
 80080e2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80080e6:	ee74 5a23 	vadd.f32	s11, s8, s7
 80080ea:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80080ee:	ee37 7a26 	vadd.f32	s14, s14, s13
 80080f2:	3310      	adds	r3, #16
 80080f4:	4563      	cmp	r3, ip
 80080f6:	ed45 5a02 	vstr	s11, [r5, #-8]
 80080fa:	f106 0610 	add.w	r6, r6, #16
 80080fe:	ed45 7a01 	vstr	s15, [r5, #-4]
 8008102:	f102 0210 	add.w	r2, r2, #16
 8008106:	ed04 6a02 	vstr	s12, [r4, #-8]
 800810a:	ed04 7a01 	vstr	s14, [r4, #-4]
 800810e:	f105 0510 	add.w	r5, r5, #16
 8008112:	f104 0410 	add.w	r4, r4, #16
 8008116:	f47f af5c 	bne.w	8007fd2 <arm_cfft_radix8by2_f32+0x3a>
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	b289      	uxth	r1, r1
 800811e:	2302      	movs	r3, #2
 8008120:	9101      	str	r1, [sp, #4]
 8008122:	f000 fb4b 	bl	80087bc <arm_radix8_butterfly_f32>
 8008126:	9901      	ldr	r1, [sp, #4]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	4640      	mov	r0, r8
 800812c:	2302      	movs	r3, #2
 800812e:	b002      	add	sp, #8
 8008130:	ecbd 8b08 	vpop	{d8-d11}
 8008134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008138:	f000 bb40 	b.w	80087bc <arm_radix8_butterfly_f32>

0800813c <arm_cfft_radix8by4_f32>:
 800813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	ed2d 8b0a 	vpush	{d8-d12}
 8008144:	8803      	ldrh	r3, [r0, #0]
 8008146:	6842      	ldr	r2, [r0, #4]
 8008148:	b08d      	sub	sp, #52	@ 0x34
 800814a:	085b      	lsrs	r3, r3, #1
 800814c:	900a      	str	r0, [sp, #40]	@ 0x28
 800814e:	4608      	mov	r0, r1
 8008150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008154:	edd1 5a00 	vldr	s11, [r1]
 8008158:	edd0 7a00 	vldr	s15, [r0]
 800815c:	edd1 3a01 	vldr	s7, [r1, #4]
 8008160:	ed90 5a01 	vldr	s10, [r0, #4]
 8008164:	9108      	str	r1, [sp, #32]
 8008166:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800816a:	ed96 7a00 	vldr	s14, [r6]
 800816e:	ed96 4a01 	vldr	s8, [r6, #4]
 8008172:	9607      	str	r6, [sp, #28]
 8008174:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8008178:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800817c:	edd8 4a00 	vldr	s9, [r8]
 8008180:	ed98 3a01 	vldr	s6, [r8, #4]
 8008184:	ee77 6a06 	vadd.f32	s13, s14, s12
 8008188:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800818c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008190:	4604      	mov	r4, r0
 8008192:	edc0 6a00 	vstr	s13, [r0]
 8008196:	edd6 5a01 	vldr	s11, [r6, #4]
 800819a:	edd8 2a01 	vldr	s5, [r8, #4]
 800819e:	ee75 6a23 	vadd.f32	s13, s10, s7
 80081a2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80081a6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80081aa:	ee74 3a27 	vadd.f32	s7, s8, s15
 80081ae:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80081b2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80081b6:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80081ba:	3408      	adds	r4, #8
 80081bc:	ee35 4a47 	vsub.f32	s8, s10, s14
 80081c0:	460d      	mov	r5, r1
 80081c2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80081c6:	4637      	mov	r7, r6
 80081c8:	9402      	str	r4, [sp, #8]
 80081ca:	3708      	adds	r7, #8
 80081cc:	460c      	mov	r4, r1
 80081ce:	3508      	adds	r5, #8
 80081d0:	0859      	lsrs	r1, r3, #1
 80081d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80081d4:	9706      	str	r7, [sp, #24]
 80081d6:	9505      	str	r5, [sp, #20]
 80081d8:	f102 0708 	add.w	r7, r2, #8
 80081dc:	ee36 6a64 	vsub.f32	s12, s12, s9
 80081e0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80081e4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80081e8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80081ec:	ee77 7a83 	vadd.f32	s15, s15, s6
 80081f0:	ee34 5a24 	vadd.f32	s10, s8, s9
 80081f4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80081f8:	3902      	subs	r1, #2
 80081fa:	4645      	mov	r5, r8
 80081fc:	9701      	str	r7, [sp, #4]
 80081fe:	f102 0c18 	add.w	ip, r2, #24
 8008202:	f102 0710 	add.w	r7, r2, #16
 8008206:	3508      	adds	r5, #8
 8008208:	0849      	lsrs	r1, r1, #1
 800820a:	edc0 5a01 	vstr	s11, [r0, #4]
 800820e:	9703      	str	r7, [sp, #12]
 8008210:	edc6 3a00 	vstr	s7, [r6]
 8008214:	ed86 5a01 	vstr	s10, [r6, #4]
 8008218:	f8cd c000 	str.w	ip, [sp]
 800821c:	ed84 6a00 	vstr	s12, [r4]
 8008220:	edc4 6a01 	vstr	s13, [r4, #4]
 8008224:	9504      	str	r5, [sp, #16]
 8008226:	edc8 7a00 	vstr	s15, [r8]
 800822a:	ed88 7a01 	vstr	s14, [r8, #4]
 800822e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008230:	f000 8138 	beq.w	80084a4 <arm_cfft_radix8by4_f32+0x368>
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	3b0c      	subs	r3, #12
 8008238:	f1a6 0c0c 	sub.w	ip, r6, #12
 800823c:	f106 0510 	add.w	r5, r6, #16
 8008240:	4626      	mov	r6, r4
 8008242:	46bb      	mov	fp, r7
 8008244:	f102 0a20 	add.w	sl, r2, #32
 8008248:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 800824c:	f106 0710 	add.w	r7, r6, #16
 8008250:	4443      	add	r3, r8
 8008252:	f100 0e10 	add.w	lr, r0, #16
 8008256:	3c0c      	subs	r4, #12
 8008258:	f1a8 060c 	sub.w	r6, r8, #12
 800825c:	f108 0210 	add.w	r2, r8, #16
 8008260:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8008264:	ed57 5a02 	vldr	s11, [r7, #-8]
 8008268:	ed55 7a02 	vldr	s15, [r5, #-8]
 800826c:	ed52 1a02 	vldr	s3, [r2, #-8]
 8008270:	ed57 6a01 	vldr	s13, [r7, #-4]
 8008274:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8008278:	ed12 1a01 	vldr	s2, [r2, #-4]
 800827c:	ed15 8a01 	vldr	s16, [r5, #-4]
 8008280:	ee35 4a25 	vadd.f32	s8, s10, s11
 8008284:	ee30 6a26 	vadd.f32	s12, s0, s13
 8008288:	ee37 7a84 	vadd.f32	s14, s15, s8
 800828c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008290:	ee37 7a21 	vadd.f32	s14, s14, s3
 8008294:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008298:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800829c:	ed15 7a01 	vldr	s14, [r5, #-4]
 80082a0:	ed52 6a01 	vldr	s13, [r2, #-4]
 80082a4:	ee36 7a07 	vadd.f32	s14, s12, s14
 80082a8:	ee78 aa25 	vadd.f32	s21, s16, s11
 80082ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80082b0:	ee70 3a67 	vsub.f32	s7, s0, s15
 80082b4:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80082b8:	ed96 7a02 	vldr	s14, [r6, #8]
 80082bc:	ed9c 2a02 	vldr	s4, [ip, #8]
 80082c0:	ed94 ba02 	vldr	s22, [r4, #8]
 80082c4:	edd3 9a02 	vldr	s19, [r3, #8]
 80082c8:	edd6 2a01 	vldr	s5, [r6, #4]
 80082cc:	ed9c 9a01 	vldr	s18, [ip, #4]
 80082d0:	ed93 5a01 	vldr	s10, [r3, #4]
 80082d4:	edd4 0a01 	vldr	s1, [r4, #4]
 80082d8:	ee72 6a07 	vadd.f32	s13, s4, s14
 80082dc:	ee32 2a47 	vsub.f32	s4, s4, s14
 80082e0:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80082e4:	ee79 4a22 	vadd.f32	s9, s18, s5
 80082e8:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80082ec:	ee79 2a62 	vsub.f32	s5, s18, s5
 80082f0:	ed8c 7a02 	vstr	s14, [ip, #8]
 80082f4:	ed94 7a01 	vldr	s14, [r4, #4]
 80082f8:	edd3 8a01 	vldr	s17, [r3, #4]
 80082fc:	ee34 7a87 	vadd.f32	s14, s9, s14
 8008300:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8008304:	ee37 7a28 	vadd.f32	s14, s14, s17
 8008308:	ee32 9a60 	vsub.f32	s18, s4, s1
 800830c:	ed8c 7a01 	vstr	s14, [ip, #4]
 8008310:	ed1b 7a01 	vldr	s14, [fp, #-4]
 8008314:	ed1b aa02 	vldr	s20, [fp, #-8]
 8008318:	ee73 8a22 	vadd.f32	s17, s6, s5
 800831c:	ee39 9a05 	vadd.f32	s18, s18, s10
 8008320:	ee7a aac1 	vsub.f32	s21, s21, s2
 8008324:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8008328:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800832c:	ee69 ba07 	vmul.f32	s23, s18, s14
 8008330:	ee6a aa87 	vmul.f32	s21, s21, s14
 8008334:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8008338:	ee63 ca87 	vmul.f32	s25, s7, s14
 800833c:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8008340:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8008344:	ee68 8a87 	vmul.f32	s17, s17, s14
 8008348:	ee73 3aea 	vsub.f32	s7, s7, s21
 800834c:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008350:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8008354:	ee3b aaca 	vsub.f32	s20, s23, s20
 8008358:	ee34 4a67 	vsub.f32	s8, s8, s15
 800835c:	ee76 6acb 	vsub.f32	s13, s13, s22
 8008360:	ee36 6a48 	vsub.f32	s12, s12, s16
 8008364:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8008368:	ed05 7a02 	vstr	s14, [r5, #-8]
 800836c:	ed45 3a01 	vstr	s7, [r5, #-4]
 8008370:	edc4 8a01 	vstr	s17, [r4, #4]
 8008374:	ed84 aa02 	vstr	s20, [r4, #8]
 8008378:	ed5a 3a04 	vldr	s7, [sl, #-16]
 800837c:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8008380:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8008384:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8008388:	ee34 4a61 	vsub.f32	s8, s8, s3
 800838c:	ee36 6a41 	vsub.f32	s12, s12, s2
 8008390:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8008394:	ee66 9a26 	vmul.f32	s19, s12, s13
 8008398:	ee24 9a23 	vmul.f32	s18, s8, s7
 800839c:	ee26 6a23 	vmul.f32	s12, s12, s7
 80083a0:	ee24 4a26 	vmul.f32	s8, s8, s13
 80083a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80083a8:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80083ac:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80083b0:	ee36 6a44 	vsub.f32	s12, s12, s8
 80083b4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80083b8:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80083bc:	ee79 3a29 	vadd.f32	s7, s18, s19
 80083c0:	ee75 6a60 	vsub.f32	s13, s10, s1
 80083c4:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80083c8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80083cc:	ed47 3a02 	vstr	s7, [r7, #-8]
 80083d0:	ed07 6a01 	vstr	s12, [r7, #-4]
 80083d4:	ed86 7a01 	vstr	s14, [r6, #4]
 80083d8:	ed86 4a02 	vstr	s8, [r6, #8]
 80083dc:	ee35 6a81 	vadd.f32	s12, s11, s2
 80083e0:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80083e4:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 80083e8:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 80083ec:	ee33 3a62 	vsub.f32	s6, s6, s5
 80083f0:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80083f4:	ee67 2a26 	vmul.f32	s5, s14, s13
 80083f8:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80083fc:	ee26 5a25 	vmul.f32	s10, s12, s11
 8008400:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008404:	ee26 6a26 	vmul.f32	s12, s12, s13
 8008408:	ee27 7a25 	vmul.f32	s14, s14, s11
 800840c:	ee63 6a26 	vmul.f32	s13, s6, s13
 8008410:	ee23 3a25 	vmul.f32	s6, s6, s11
 8008414:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008418:	ee75 5a24 	vadd.f32	s11, s10, s9
 800841c:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8008420:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008424:	3901      	subs	r1, #1
 8008426:	ed42 5a02 	vstr	s11, [r2, #-8]
 800842a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800842e:	f10e 0e08 	add.w	lr, lr, #8
 8008432:	ed83 3a02 	vstr	s6, [r3, #8]
 8008436:	ed83 7a01 	vstr	s14, [r3, #4]
 800843a:	f1ac 0c08 	sub.w	ip, ip, #8
 800843e:	f10b 0b08 	add.w	fp, fp, #8
 8008442:	f105 0508 	add.w	r5, r5, #8
 8008446:	f1a4 0408 	sub.w	r4, r4, #8
 800844a:	f10a 0a10 	add.w	sl, sl, #16
 800844e:	f107 0708 	add.w	r7, r7, #8
 8008452:	f1a6 0608 	sub.w	r6, r6, #8
 8008456:	f109 0918 	add.w	r9, r9, #24
 800845a:	f102 0208 	add.w	r2, r2, #8
 800845e:	f1a3 0308 	sub.w	r3, r3, #8
 8008462:	f47f aefd 	bne.w	8008260 <arm_cfft_radix8by4_f32+0x124>
 8008466:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008468:	9902      	ldr	r1, [sp, #8]
 800846a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800846e:	9102      	str	r1, [sp, #8]
 8008470:	9901      	ldr	r1, [sp, #4]
 8008472:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008476:	9101      	str	r1, [sp, #4]
 8008478:	9906      	ldr	r1, [sp, #24]
 800847a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800847e:	9106      	str	r1, [sp, #24]
 8008480:	9903      	ldr	r1, [sp, #12]
 8008482:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8008486:	9103      	str	r1, [sp, #12]
 8008488:	9905      	ldr	r1, [sp, #20]
 800848a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800848e:	9105      	str	r1, [sp, #20]
 8008490:	9904      	ldr	r1, [sp, #16]
 8008492:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8008496:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800849a:	9204      	str	r2, [sp, #16]
 800849c:	9a00      	ldr	r2, [sp, #0]
 800849e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	9902      	ldr	r1, [sp, #8]
 80084a6:	9d05      	ldr	r5, [sp, #20]
 80084a8:	ed91 4a00 	vldr	s8, [r1]
 80084ac:	edd5 6a00 	vldr	s13, [r5]
 80084b0:	9b06      	ldr	r3, [sp, #24]
 80084b2:	9c04      	ldr	r4, [sp, #16]
 80084b4:	edd3 7a00 	vldr	s15, [r3]
 80084b8:	ed94 3a00 	vldr	s6, [r4]
 80084bc:	edd5 4a01 	vldr	s9, [r5, #4]
 80084c0:	edd1 3a01 	vldr	s7, [r1, #4]
 80084c4:	ed94 2a01 	vldr	s4, [r4, #4]
 80084c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80084cc:	9a01      	ldr	r2, [sp, #4]
 80084ce:	ee34 6a26 	vadd.f32	s12, s8, s13
 80084d2:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80084d6:	ee37 5a86 	vadd.f32	s10, s15, s12
 80084da:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80084de:	ee35 5a03 	vadd.f32	s10, s10, s6
 80084e2:	ee74 6a66 	vsub.f32	s13, s8, s13
 80084e6:	ed81 5a00 	vstr	s10, [r1]
 80084ea:	ed93 5a01 	vldr	s10, [r3, #4]
 80084ee:	edd4 4a01 	vldr	s9, [r4, #4]
 80084f2:	ee35 5a85 	vadd.f32	s10, s11, s10
 80084f6:	ee37 4a26 	vadd.f32	s8, s14, s13
 80084fa:	ee35 5a24 	vadd.f32	s10, s10, s9
 80084fe:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8008502:	ed81 5a01 	vstr	s10, [r1, #4]
 8008506:	edd2 1a00 	vldr	s3, [r2]
 800850a:	edd2 2a01 	vldr	s5, [r2, #4]
 800850e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8008512:	ee34 5a83 	vadd.f32	s10, s9, s6
 8008516:	ee34 4a42 	vsub.f32	s8, s8, s4
 800851a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800851e:	ee64 4a21 	vmul.f32	s9, s8, s3
 8008522:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008526:	ee65 2a22 	vmul.f32	s5, s10, s5
 800852a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800852e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8008532:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008536:	edc3 2a00 	vstr	s5, [r3]
 800853a:	ed83 5a01 	vstr	s10, [r3, #4]
 800853e:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8008542:	9b03      	ldr	r3, [sp, #12]
 8008544:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008548:	ed93 4a01 	vldr	s8, [r3, #4]
 800854c:	ed93 5a00 	vldr	s10, [r3]
 8008550:	9b00      	ldr	r3, [sp, #0]
 8008552:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8008556:	ee66 4a05 	vmul.f32	s9, s12, s10
 800855a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800855e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008562:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008566:	ee35 6a46 	vsub.f32	s12, s10, s12
 800856a:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800856e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8008572:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008576:	ed85 6a01 	vstr	s12, [r5, #4]
 800857a:	edc5 5a00 	vstr	s11, [r5]
 800857e:	edd3 5a01 	vldr	s11, [r3, #4]
 8008582:	edd3 6a00 	vldr	s13, [r3]
 8008586:	ee37 7a02 	vadd.f32	s14, s14, s4
 800858a:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800858e:	ee27 6a26 	vmul.f32	s12, s14, s13
 8008592:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008596:	ee27 7a25 	vmul.f32	s14, s14, s11
 800859a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800859e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80085a2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80085a6:	ed84 7a01 	vstr	s14, [r4, #4]
 80085aa:	edc4 7a00 	vstr	s15, [r4]
 80085ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085b0:	9100      	str	r1, [sp, #0]
 80085b2:	6862      	ldr	r2, [r4, #4]
 80085b4:	2304      	movs	r3, #4
 80085b6:	f000 f901 	bl	80087bc <arm_radix8_butterfly_f32>
 80085ba:	9807      	ldr	r0, [sp, #28]
 80085bc:	9900      	ldr	r1, [sp, #0]
 80085be:	6862      	ldr	r2, [r4, #4]
 80085c0:	2304      	movs	r3, #4
 80085c2:	f000 f8fb 	bl	80087bc <arm_radix8_butterfly_f32>
 80085c6:	9808      	ldr	r0, [sp, #32]
 80085c8:	9900      	ldr	r1, [sp, #0]
 80085ca:	6862      	ldr	r2, [r4, #4]
 80085cc:	2304      	movs	r3, #4
 80085ce:	f000 f8f5 	bl	80087bc <arm_radix8_butterfly_f32>
 80085d2:	9900      	ldr	r1, [sp, #0]
 80085d4:	6862      	ldr	r2, [r4, #4]
 80085d6:	4640      	mov	r0, r8
 80085d8:	2304      	movs	r3, #4
 80085da:	b00d      	add	sp, #52	@ 0x34
 80085dc:	ecbd 8b0a 	vpop	{d8-d12}
 80085e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	f000 b8ea 	b.w	80087bc <arm_radix8_butterfly_f32>

080085e8 <arm_cfft_f32>:
 80085e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ec:	2a01      	cmp	r2, #1
 80085ee:	8805      	ldrh	r5, [r0, #0]
 80085f0:	4607      	mov	r7, r0
 80085f2:	4690      	mov	r8, r2
 80085f4:	460c      	mov	r4, r1
 80085f6:	4699      	mov	r9, r3
 80085f8:	d05c      	beq.n	80086b4 <arm_cfft_f32+0xcc>
 80085fa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80085fe:	d054      	beq.n	80086aa <arm_cfft_f32+0xc2>
 8008600:	d810      	bhi.n	8008624 <arm_cfft_f32+0x3c>
 8008602:	2d40      	cmp	r5, #64	@ 0x40
 8008604:	d015      	beq.n	8008632 <arm_cfft_f32+0x4a>
 8008606:	d94c      	bls.n	80086a2 <arm_cfft_f32+0xba>
 8008608:	2d80      	cmp	r5, #128	@ 0x80
 800860a:	d103      	bne.n	8008614 <arm_cfft_f32+0x2c>
 800860c:	4621      	mov	r1, r4
 800860e:	4638      	mov	r0, r7
 8008610:	f7ff fcc2 	bl	8007f98 <arm_cfft_radix8by2_f32>
 8008614:	f1b9 0f00 	cmp.w	r9, #0
 8008618:	d114      	bne.n	8008644 <arm_cfft_f32+0x5c>
 800861a:	f1b8 0f01 	cmp.w	r8, #1
 800861e:	d019      	beq.n	8008654 <arm_cfft_f32+0x6c>
 8008620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008624:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8008628:	d03f      	beq.n	80086aa <arm_cfft_f32+0xc2>
 800862a:	d933      	bls.n	8008694 <arm_cfft_f32+0xac>
 800862c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8008630:	d1f0      	bne.n	8008614 <arm_cfft_f32+0x2c>
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	2301      	movs	r3, #1
 8008636:	4629      	mov	r1, r5
 8008638:	4620      	mov	r0, r4
 800863a:	f000 f8bf 	bl	80087bc <arm_radix8_butterfly_f32>
 800863e:	f1b9 0f00 	cmp.w	r9, #0
 8008642:	d0ea      	beq.n	800861a <arm_cfft_f32+0x32>
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	89b9      	ldrh	r1, [r7, #12]
 8008648:	4620      	mov	r0, r4
 800864a:	f000 f845 	bl	80086d8 <arm_bitreversal_32>
 800864e:	f1b8 0f01 	cmp.w	r8, #1
 8008652:	d1e5      	bne.n	8008620 <arm_cfft_f32+0x38>
 8008654:	ee07 5a90 	vmov	s15, r5
 8008658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008660:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008664:	2d00      	cmp	r5, #0
 8008666:	d0db      	beq.n	8008620 <arm_cfft_f32+0x38>
 8008668:	f104 0108 	add.w	r1, r4, #8
 800866c:	2300      	movs	r3, #0
 800866e:	3301      	adds	r3, #1
 8008670:	429d      	cmp	r5, r3
 8008672:	f101 0108 	add.w	r1, r1, #8
 8008676:	ed11 7a04 	vldr	s14, [r1, #-16]
 800867a:	ed51 7a03 	vldr	s15, [r1, #-12]
 800867e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008682:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008686:	ed01 7a04 	vstr	s14, [r1, #-16]
 800868a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800868e:	d1ee      	bne.n	800866e <arm_cfft_f32+0x86>
 8008690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008694:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8008698:	d0cb      	beq.n	8008632 <arm_cfft_f32+0x4a>
 800869a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800869e:	d0b5      	beq.n	800860c <arm_cfft_f32+0x24>
 80086a0:	e7b8      	b.n	8008614 <arm_cfft_f32+0x2c>
 80086a2:	2d10      	cmp	r5, #16
 80086a4:	d0b2      	beq.n	800860c <arm_cfft_f32+0x24>
 80086a6:	2d20      	cmp	r5, #32
 80086a8:	d1b4      	bne.n	8008614 <arm_cfft_f32+0x2c>
 80086aa:	4621      	mov	r1, r4
 80086ac:	4638      	mov	r0, r7
 80086ae:	f7ff fd45 	bl	800813c <arm_cfft_radix8by4_f32>
 80086b2:	e7af      	b.n	8008614 <arm_cfft_f32+0x2c>
 80086b4:	b16d      	cbz	r5, 80086d2 <arm_cfft_f32+0xea>
 80086b6:	310c      	adds	r1, #12
 80086b8:	2600      	movs	r6, #0
 80086ba:	ed51 7a02 	vldr	s15, [r1, #-8]
 80086be:	3601      	adds	r6, #1
 80086c0:	eef1 7a67 	vneg.f32	s15, s15
 80086c4:	42b5      	cmp	r5, r6
 80086c6:	ed41 7a02 	vstr	s15, [r1, #-8]
 80086ca:	f101 0108 	add.w	r1, r1, #8
 80086ce:	d1f4      	bne.n	80086ba <arm_cfft_f32+0xd2>
 80086d0:	e793      	b.n	80085fa <arm_cfft_f32+0x12>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0a4      	beq.n	8008620 <arm_cfft_f32+0x38>
 80086d6:	e7b5      	b.n	8008644 <arm_cfft_f32+0x5c>

080086d8 <arm_bitreversal_32>:
 80086d8:	b1e9      	cbz	r1, 8008716 <arm_bitreversal_32+0x3e>
 80086da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086dc:	2500      	movs	r5, #0
 80086de:	f102 0e02 	add.w	lr, r2, #2
 80086e2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80086e6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80086ea:	08a4      	lsrs	r4, r4, #2
 80086ec:	089b      	lsrs	r3, r3, #2
 80086ee:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80086f2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80086f6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80086fa:	00a6      	lsls	r6, r4, #2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8008702:	3304      	adds	r3, #4
 8008704:	1d34      	adds	r4, r6, #4
 8008706:	3502      	adds	r5, #2
 8008708:	58c6      	ldr	r6, [r0, r3]
 800870a:	5907      	ldr	r7, [r0, r4]
 800870c:	50c7      	str	r7, [r0, r3]
 800870e:	428d      	cmp	r5, r1
 8008710:	5106      	str	r6, [r0, r4]
 8008712:	d3e6      	bcc.n	80086e2 <arm_bitreversal_32+0xa>
 8008714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008716:	4770      	bx	lr

08008718 <arm_cfft_init_f32>:
 8008718:	4603      	mov	r3, r0
 800871a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800871e:	f04f 0000 	mov.w	r0, #0
 8008722:	b410      	push	{r4}
 8008724:	8019      	strh	r1, [r3, #0]
 8008726:	6058      	str	r0, [r3, #4]
 8008728:	d033      	beq.n	8008792 <arm_cfft_init_f32+0x7a>
 800872a:	d918      	bls.n	800875e <arm_cfft_init_f32+0x46>
 800872c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8008730:	d027      	beq.n	8008782 <arm_cfft_init_f32+0x6a>
 8008732:	d90c      	bls.n	800874e <arm_cfft_init_f32+0x36>
 8008734:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8008738:	d11e      	bne.n	8008778 <arm_cfft_init_f32+0x60>
 800873a:	4a17      	ldr	r2, [pc, #92]	@ (8008798 <arm_cfft_init_f32+0x80>)
 800873c:	8994      	ldrh	r4, [r2, #12]
 800873e:	819c      	strh	r4, [r3, #12]
 8008740:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8008744:	e9c3 2101 	strd	r2, r1, [r3, #4]
 8008748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008752:	d018      	beq.n	8008786 <arm_cfft_init_f32+0x6e>
 8008754:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008758:	d10e      	bne.n	8008778 <arm_cfft_init_f32+0x60>
 800875a:	4a10      	ldr	r2, [pc, #64]	@ (800879c <arm_cfft_init_f32+0x84>)
 800875c:	e7ee      	b.n	800873c <arm_cfft_init_f32+0x24>
 800875e:	2940      	cmp	r1, #64	@ 0x40
 8008760:	d013      	beq.n	800878a <arm_cfft_init_f32+0x72>
 8008762:	d903      	bls.n	800876c <arm_cfft_init_f32+0x54>
 8008764:	2980      	cmp	r1, #128	@ 0x80
 8008766:	d107      	bne.n	8008778 <arm_cfft_init_f32+0x60>
 8008768:	4a0d      	ldr	r2, [pc, #52]	@ (80087a0 <arm_cfft_init_f32+0x88>)
 800876a:	e7e7      	b.n	800873c <arm_cfft_init_f32+0x24>
 800876c:	2910      	cmp	r1, #16
 800876e:	d00e      	beq.n	800878e <arm_cfft_init_f32+0x76>
 8008770:	2920      	cmp	r1, #32
 8008772:	d101      	bne.n	8008778 <arm_cfft_init_f32+0x60>
 8008774:	4a0b      	ldr	r2, [pc, #44]	@ (80087a4 <arm_cfft_init_f32+0x8c>)
 8008776:	e7e1      	b.n	800873c <arm_cfft_init_f32+0x24>
 8008778:	f04f 30ff 	mov.w	r0, #4294967295
 800877c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	4a09      	ldr	r2, [pc, #36]	@ (80087a8 <arm_cfft_init_f32+0x90>)
 8008784:	e7da      	b.n	800873c <arm_cfft_init_f32+0x24>
 8008786:	4a09      	ldr	r2, [pc, #36]	@ (80087ac <arm_cfft_init_f32+0x94>)
 8008788:	e7d8      	b.n	800873c <arm_cfft_init_f32+0x24>
 800878a:	4a09      	ldr	r2, [pc, #36]	@ (80087b0 <arm_cfft_init_f32+0x98>)
 800878c:	e7d6      	b.n	800873c <arm_cfft_init_f32+0x24>
 800878e:	4a09      	ldr	r2, [pc, #36]	@ (80087b4 <arm_cfft_init_f32+0x9c>)
 8008790:	e7d4      	b.n	800873c <arm_cfft_init_f32+0x24>
 8008792:	4a09      	ldr	r2, [pc, #36]	@ (80087b8 <arm_cfft_init_f32+0xa0>)
 8008794:	e7d2      	b.n	800873c <arm_cfft_init_f32+0x24>
 8008796:	bf00      	nop
 8008798:	0802641c 	.word	0x0802641c
 800879c:	080263bc 	.word	0x080263bc
 80087a0:	080263cc 	.word	0x080263cc
 80087a4:	0802640c 	.word	0x0802640c
 80087a8:	080263ec 	.word	0x080263ec
 80087ac:	0802642c 	.word	0x0802642c
 80087b0:	0802643c 	.word	0x0802643c
 80087b4:	080263dc 	.word	0x080263dc
 80087b8:	080263fc 	.word	0x080263fc

080087bc <arm_radix8_butterfly_f32>:
 80087bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	ed2d 8b10 	vpush	{d8-d15}
 80087c4:	b093      	sub	sp, #76	@ 0x4c
 80087c6:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 80087ca:	4603      	mov	r3, r0
 80087cc:	3304      	adds	r3, #4
 80087ce:	ed9f bac0 	vldr	s22, [pc, #768]	@ 8008ad0 <arm_radix8_butterfly_f32+0x314>
 80087d2:	9010      	str	r0, [sp, #64]	@ 0x40
 80087d4:	468b      	mov	fp, r1
 80087d6:	9311      	str	r3, [sp, #68]	@ 0x44
 80087d8:	4689      	mov	r9, r1
 80087da:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80087dc:	ea4f 05db 	mov.w	r5, fp, lsr #3
 80087e0:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80087e4:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 80087e8:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 80087ec:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80087f0:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 80087f4:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 80087f8:	9100      	str	r1, [sp, #0]
 80087fa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80087fe:	f108 0004 	add.w	r0, r8, #4
 8008802:	f10e 0104 	add.w	r1, lr, #4
 8008806:	462e      	mov	r6, r5
 8008808:	4420      	add	r0, r4
 800880a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800880e:	4421      	add	r1, r4
 8008810:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8008814:	960d      	str	r6, [sp, #52]	@ 0x34
 8008816:	9402      	str	r4, [sp, #8]
 8008818:	012c      	lsls	r4, r5, #4
 800881a:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 800881e:	9403      	str	r4, [sp, #12]
 8008820:	00ec      	lsls	r4, r5, #3
 8008822:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008824:	9404      	str	r4, [sp, #16]
 8008826:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800882a:	9405      	str	r4, [sp, #20]
 800882c:	016c      	lsls	r4, r5, #5
 800882e:	9401      	str	r4, [sp, #4]
 8008830:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8008832:	9c00      	ldr	r4, [sp, #0]
 8008834:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 8008838:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800883c:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008840:	f04f 0c00 	mov.w	ip, #0
 8008844:	edd6 6a00 	vldr	s13, [r6]
 8008848:	edd7 1a00 	vldr	s3, [r7]
 800884c:	ed15 aa01 	vldr	s20, [r5, #-4]
 8008850:	edd2 5a00 	vldr	s11, [r2]
 8008854:	ed51 9a01 	vldr	s19, [r1, #-4]
 8008858:	ed94 6a00 	vldr	s12, [r4]
 800885c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8008860:	ed93 3a00 	vldr	s6, [r3]
 8008864:	ee39 0a86 	vadd.f32	s0, s19, s12
 8008868:	ee33 2a21 	vadd.f32	s4, s6, s3
 800886c:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8008870:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8008874:	ee35 7a02 	vadd.f32	s14, s10, s4
 8008878:	ee34 4a80 	vadd.f32	s8, s9, s0
 800887c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008880:	ee74 6a07 	vadd.f32	s13, s8, s14
 8008884:	ee34 4a47 	vsub.f32	s8, s8, s14
 8008888:	ed45 6a01 	vstr	s13, [r5, #-4]
 800888c:	ed82 4a00 	vstr	s8, [r2]
 8008890:	edd0 6a00 	vldr	s13, [r0]
 8008894:	ed96 9a01 	vldr	s18, [r6, #4]
 8008898:	edd3 2a01 	vldr	s5, [r3, #4]
 800889c:	edd7 8a01 	vldr	s17, [r7, #4]
 80088a0:	edd5 0a00 	vldr	s1, [r5]
 80088a4:	edd2 3a01 	vldr	s7, [r2, #4]
 80088a8:	ed94 8a01 	vldr	s16, [r4, #4]
 80088ac:	ed91 7a00 	vldr	s14, [r1]
 80088b0:	ee33 3a61 	vsub.f32	s6, s6, s3
 80088b4:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80088b8:	ee72 aae8 	vsub.f32	s21, s5, s17
 80088bc:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80088c0:	ee34 1a2a 	vadd.f32	s2, s8, s21
 80088c4:	ee77 7a83 	vadd.f32	s15, s15, s6
 80088c8:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80088cc:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80088d0:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80088d4:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80088d8:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80088dc:	ee77 0a08 	vadd.f32	s1, s14, s16
 80088e0:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80088e4:	ee37 7a48 	vsub.f32	s14, s14, s16
 80088e8:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80088ec:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80088f0:	ee76 6a89 	vadd.f32	s13, s13, s18
 80088f4:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80088f8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80088fc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008900:	ee35 5a42 	vsub.f32	s10, s10, s4
 8008904:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8008908:	ee33 2a20 	vadd.f32	s4, s6, s1
 800890c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008910:	ee33 3a60 	vsub.f32	s6, s6, s1
 8008914:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8008918:	ee77 0a01 	vadd.f32	s1, s14, s2
 800891c:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8008920:	ee37 7a41 	vsub.f32	s14, s14, s2
 8008924:	ee73 1a84 	vadd.f32	s3, s7, s8
 8008928:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800892c:	ee76 3a27 	vadd.f32	s7, s12, s15
 8008930:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008934:	ee32 8a00 	vadd.f32	s16, s4, s0
 8008938:	ee33 1a45 	vsub.f32	s2, s6, s10
 800893c:	ee32 2a40 	vsub.f32	s4, s4, s0
 8008940:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008944:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8008948:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800894c:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8008950:	ee34 6a67 	vsub.f32	s12, s8, s15
 8008954:	ee75 4a87 	vadd.f32	s9, s11, s14
 8008958:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800895c:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8008960:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008964:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8008968:	44dc      	add	ip, fp
 800896a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800896e:	45e1      	cmp	r9, ip
 8008970:	ed85 8a00 	vstr	s16, [r5]
 8008974:	ed82 2a01 	vstr	s4, [r2, #4]
 8008978:	4455      	add	r5, sl
 800897a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800897e:	4452      	add	r2, sl
 8008980:	edc4 6a00 	vstr	s13, [r4]
 8008984:	ed81 1a00 	vstr	s2, [r1]
 8008988:	ed84 5a01 	vstr	s10, [r4, #4]
 800898c:	4451      	add	r1, sl
 800898e:	ed00 3a01 	vstr	s6, [r0, #-4]
 8008992:	4454      	add	r4, sl
 8008994:	edc7 2a00 	vstr	s5, [r7]
 8008998:	edc6 4a00 	vstr	s9, [r6]
 800899c:	ed83 7a00 	vstr	s14, [r3]
 80089a0:	edc0 5a00 	vstr	s11, [r0]
 80089a4:	edc7 3a01 	vstr	s7, [r7, #4]
 80089a8:	4450      	add	r0, sl
 80089aa:	ed86 6a01 	vstr	s12, [r6, #4]
 80089ae:	4457      	add	r7, sl
 80089b0:	edc3 7a01 	vstr	s15, [r3, #4]
 80089b4:	4456      	add	r6, sl
 80089b6:	4453      	add	r3, sl
 80089b8:	f63f af44 	bhi.w	8008844 <arm_radix8_butterfly_f32+0x88>
 80089bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089be:	2b07      	cmp	r3, #7
 80089c0:	f240 81c3 	bls.w	8008d4a <arm_radix8_butterfly_f32+0x58e>
 80089c4:	9805      	ldr	r0, [sp, #20]
 80089c6:	9a01      	ldr	r2, [sp, #4]
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	9d04      	ldr	r5, [sp, #16]
 80089cc:	9902      	ldr	r1, [sp, #8]
 80089ce:	f100 0c08 	add.w	ip, r0, #8
 80089d2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80089d4:	3208      	adds	r2, #8
 80089d6:	1882      	adds	r2, r0, r2
 80089d8:	3308      	adds	r3, #8
 80089da:	920a      	str	r2, [sp, #40]	@ 0x28
 80089dc:	4602      	mov	r2, r0
 80089de:	18d3      	adds	r3, r2, r3
 80089e0:	3108      	adds	r1, #8
 80089e2:	3508      	adds	r5, #8
 80089e4:	1851      	adds	r1, r2, r1
 80089e6:	9307      	str	r3, [sp, #28]
 80089e8:	4613      	mov	r3, r2
 80089ea:	442a      	add	r2, r5
 80089ec:	9206      	str	r2, [sp, #24]
 80089ee:	461a      	mov	r2, r3
 80089f0:	4462      	add	r2, ip
 80089f2:	f10e 0e0c 	add.w	lr, lr, #12
 80089f6:	9205      	str	r2, [sp, #20]
 80089f8:	461a      	mov	r2, r3
 80089fa:	4472      	add	r2, lr
 80089fc:	f108 0808 	add.w	r8, r8, #8
 8008a00:	330c      	adds	r3, #12
 8008a02:	4440      	add	r0, r8
 8008a04:	f04f 0e00 	mov.w	lr, #0
 8008a08:	9203      	str	r2, [sp, #12]
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	465a      	mov	r2, fp
 8008a0e:	464b      	mov	r3, r9
 8008a10:	46f3      	mov	fp, lr
 8008a12:	46d1      	mov	r9, sl
 8008a14:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a16:	9108      	str	r1, [sp, #32]
 8008a18:	f04f 0801 	mov.w	r8, #1
 8008a1c:	469a      	mov	sl, r3
 8008a1e:	4696      	mov	lr, r2
 8008a20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a22:	449b      	add	fp, r3
 8008a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a26:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a2a:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8008a2e:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 8008a32:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8008a36:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 8008a3a:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8008a3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a40:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 8008a44:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 8008a48:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008a4a:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 8008a4e:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 8008a52:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 8008a56:	9202      	str	r2, [sp, #8]
 8008a58:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	edd3 da01 	vldr	s27, [r3, #4]
 8008a64:	9b01      	ldr	r3, [sp, #4]
 8008a66:	edd0 7a00 	vldr	s15, [r0]
 8008a6a:	ed93 da01 	vldr	s26, [r3, #4]
 8008a6e:	9b02      	ldr	r3, [sp, #8]
 8008a70:	edcd 7a02 	vstr	s15, [sp, #8]
 8008a74:	ed93 ca01 	vldr	s24, [r3, #4]
 8008a78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a7a:	eddc ca01 	vldr	s25, [ip, #4]
 8008a7e:	edd3 7a00 	vldr	s15, [r3]
 8008a82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a84:	edcd 7a01 	vstr	s15, [sp, #4]
 8008a88:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8008a8c:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8008a90:	9200      	str	r2, [sp, #0]
 8008a92:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 8008a96:	edd3 7a00 	vldr	s15, [r3]
 8008a9a:	ed92 fa01 	vldr	s30, [r2, #4]
 8008a9e:	9a00      	ldr	r2, [sp, #0]
 8008aa0:	edd1 ea01 	vldr	s29, [r1, #4]
 8008aa4:	ed92 ea01 	vldr	s28, [r2, #4]
 8008aa8:	edd7 ba00 	vldr	s23, [r7]
 8008aac:	edd6 aa00 	vldr	s21, [r6]
 8008ab0:	ed95 aa00 	vldr	s20, [r5]
 8008ab4:	edd4 9a00 	vldr	s19, [r4]
 8008ab8:	edcd 7a00 	vstr	s15, [sp]
 8008abc:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8008ac0:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8008ac4:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8008ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8008acc:	46c4      	mov	ip, r8
 8008ace:	e001      	b.n	8008ad4 <arm_radix8_butterfly_f32+0x318>
 8008ad0:	3f3504f3 	.word	0x3f3504f3
 8008ad4:	ed91 6a00 	vldr	s12, [r1]
 8008ad8:	ed93 5a00 	vldr	s10, [r3]
 8008adc:	edd0 fa00 	vldr	s31, [r0]
 8008ae0:	edd4 7a00 	vldr	s15, [r4]
 8008ae4:	ed95 7a00 	vldr	s14, [r5]
 8008ae8:	ed56 3a01 	vldr	s7, [r6, #-4]
 8008aec:	ed17 3a01 	vldr	s6, [r7, #-4]
 8008af0:	ed92 2a00 	vldr	s4, [r2]
 8008af4:	ed96 0a00 	vldr	s0, [r6]
 8008af8:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008afc:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008b00:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8008b04:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008b08:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008b0c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008b10:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008b14:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008b18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b1c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8008b20:	edd4 8a01 	vldr	s17, [r4, #4]
 8008b24:	ed92 9a01 	vldr	s18, [r2, #4]
 8008b28:	edd7 0a00 	vldr	s1, [r7]
 8008b2c:	edd1 2a01 	vldr	s5, [r1, #4]
 8008b30:	ed95 7a01 	vldr	s14, [r5, #4]
 8008b34:	ed93 6a01 	vldr	s12, [r3, #4]
 8008b38:	edd0 5a01 	vldr	s11, [r0, #4]
 8008b3c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008b40:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8008b44:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008b48:	ee78 fac7 	vsub.f32	s31, s17, s14
 8008b4c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008b50:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008b54:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008b58:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008b5c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008b60:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008b64:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008b68:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8008b6c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008b70:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8008b74:	ee32 1a08 	vadd.f32	s2, s4, s16
 8008b78:	ee72 fa87 	vadd.f32	s31, s5, s14
 8008b7c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008b80:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008b84:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008b88:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008b8c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008b90:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008b94:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8008b98:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8008b9c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008ba0:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008ba4:	ee74 0a22 	vadd.f32	s1, s8, s5
 8008ba8:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008bac:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008bb0:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008bb4:	ee32 4a64 	vsub.f32	s8, s4, s9
 8008bb8:	ee73 8a09 	vadd.f32	s17, s6, s18
 8008bbc:	ee74 4a82 	vadd.f32	s9, s9, s4
 8008bc0:	ee33 9a49 	vsub.f32	s18, s6, s18
 8008bc4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8008bc8:	ee35 3a85 	vadd.f32	s6, s11, s10
 8008bcc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8008bd0:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8008bd4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008bd8:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8008bdc:	ee30 7a68 	vsub.f32	s14, s0, s17
 8008be0:	ee35 8a03 	vadd.f32	s16, s10, s6
 8008be4:	ee38 0a80 	vadd.f32	s0, s17, s0
 8008be8:	ee73 3a82 	vadd.f32	s7, s7, s4
 8008bec:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8008bf0:	ed9d 2a00 	vldr	s4, [sp]
 8008bf4:	eddd 1a01 	vldr	s3, [sp, #4]
 8008bf8:	ee35 5a43 	vsub.f32	s10, s10, s6
 8008bfc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8008c00:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8008c04:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8008c08:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008c0c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8008c10:	ee76 5a49 	vsub.f32	s11, s12, s18
 8008c14:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8008c18:	ee39 6a06 	vadd.f32	s12, s18, s12
 8008c1c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8008c20:	ee21 4a84 	vmul.f32	s8, s3, s8
 8008c24:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8008c28:	ee22 7a07 	vmul.f32	s14, s4, s14
 8008c2c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8008c30:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8008c34:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8008c38:	ee31 1a09 	vadd.f32	s2, s2, s18
 8008c3c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8008c40:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8008c44:	ee74 0a60 	vsub.f32	s1, s8, s1
 8008c48:	ee37 7a48 	vsub.f32	s14, s14, s16
 8008c4c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8008c50:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8008c54:	ee72 1a21 	vadd.f32	s3, s4, s3
 8008c58:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8008c5c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8008c60:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8008c64:	ee38 8a04 	vadd.f32	s16, s16, s8
 8008c68:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8008c6c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8008c70:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8008c74:	eddd 5a02 	vldr	s11, [sp, #8]
 8008c78:	edc6 fa00 	vstr	s31, [r6]
 8008c7c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8008c80:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008c84:	ee30 0a45 	vsub.f32	s0, s0, s10
 8008c88:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8008c8c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8008c90:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8008c94:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8008c98:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8008c9c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8008ca0:	ee74 4a89 	vadd.f32	s9, s9, s18
 8008ca4:	ee34 3a43 	vsub.f32	s6, s8, s6
 8008ca8:	ee78 8a85 	vadd.f32	s17, s17, s10
 8008cac:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008cb0:	44f4      	add	ip, lr
 8008cb2:	45e2      	cmp	sl, ip
 8008cb4:	edc3 3a00 	vstr	s7, [r3]
 8008cb8:	edc3 6a01 	vstr	s13, [r3, #4]
 8008cbc:	444e      	add	r6, r9
 8008cbe:	ed07 1a01 	vstr	s2, [r7, #-4]
 8008cc2:	edc7 0a00 	vstr	s1, [r7]
 8008cc6:	444b      	add	r3, r9
 8008cc8:	ed80 2a00 	vstr	s4, [r0]
 8008ccc:	edc0 2a01 	vstr	s5, [r0, #4]
 8008cd0:	444f      	add	r7, r9
 8008cd2:	edc2 1a00 	vstr	s3, [r2]
 8008cd6:	ed82 7a01 	vstr	s14, [r2, #4]
 8008cda:	4448      	add	r0, r9
 8008cdc:	ed85 8a00 	vstr	s16, [r5]
 8008ce0:	ed85 0a01 	vstr	s0, [r5, #4]
 8008ce4:	444a      	add	r2, r9
 8008ce6:	edc1 4a00 	vstr	s9, [r1]
 8008cea:	444d      	add	r5, r9
 8008cec:	ed81 3a01 	vstr	s6, [r1, #4]
 8008cf0:	edc4 8a00 	vstr	s17, [r4]
 8008cf4:	ed84 6a01 	vstr	s12, [r4, #4]
 8008cf8:	4449      	add	r1, r9
 8008cfa:	444c      	add	r4, r9
 8008cfc:	f63f aeea 	bhi.w	8008ad4 <arm_radix8_butterfly_f32+0x318>
 8008d00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d02:	3308      	adds	r3, #8
 8008d04:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d08:	3308      	adds	r3, #8
 8008d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d0c:	9b08      	ldr	r3, [sp, #32]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	9308      	str	r3, [sp, #32]
 8008d12:	9b07      	ldr	r3, [sp, #28]
 8008d14:	3308      	adds	r3, #8
 8008d16:	9307      	str	r3, [sp, #28]
 8008d18:	9b06      	ldr	r3, [sp, #24]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	9306      	str	r3, [sp, #24]
 8008d1e:	9b05      	ldr	r3, [sp, #20]
 8008d20:	3308      	adds	r3, #8
 8008d22:	9305      	str	r3, [sp, #20]
 8008d24:	9b04      	ldr	r3, [sp, #16]
 8008d26:	3308      	adds	r3, #8
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	9b03      	ldr	r3, [sp, #12]
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	9303      	str	r3, [sp, #12]
 8008d30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d32:	f108 0801 	add.w	r8, r8, #1
 8008d36:	4543      	cmp	r3, r8
 8008d38:	f47f ae72 	bne.w	8008a20 <arm_radix8_butterfly_f32+0x264>
 8008d3c:	469b      	mov	fp, r3
 8008d3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	46d1      	mov	r9, sl
 8008d46:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d48:	e547      	b.n	80087da <arm_radix8_butterfly_f32+0x1e>
 8008d4a:	b013      	add	sp, #76	@ 0x4c
 8008d4c:	ecbd 8b10 	vpop	{d8-d15}
 8008d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d54 <memset>:
 8008d54:	4402      	add	r2, r0
 8008d56:	4603      	mov	r3, r0
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d100      	bne.n	8008d5e <memset+0xa>
 8008d5c:	4770      	bx	lr
 8008d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d62:	e7f9      	b.n	8008d58 <memset+0x4>

08008d64 <_reclaim_reent>:
 8008d64:	4b29      	ldr	r3, [pc, #164]	@ (8008e0c <_reclaim_reent+0xa8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4283      	cmp	r3, r0
 8008d6a:	b570      	push	{r4, r5, r6, lr}
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	d04b      	beq.n	8008e08 <_reclaim_reent+0xa4>
 8008d70:	69c3      	ldr	r3, [r0, #28]
 8008d72:	b1ab      	cbz	r3, 8008da0 <_reclaim_reent+0x3c>
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	b16b      	cbz	r3, 8008d94 <_reclaim_reent+0x30>
 8008d78:	2500      	movs	r5, #0
 8008d7a:	69e3      	ldr	r3, [r4, #28]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	5959      	ldr	r1, [r3, r5]
 8008d80:	2900      	cmp	r1, #0
 8008d82:	d13b      	bne.n	8008dfc <_reclaim_reent+0x98>
 8008d84:	3504      	adds	r5, #4
 8008d86:	2d80      	cmp	r5, #128	@ 0x80
 8008d88:	d1f7      	bne.n	8008d7a <_reclaim_reent+0x16>
 8008d8a:	69e3      	ldr	r3, [r4, #28]
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	68d9      	ldr	r1, [r3, #12]
 8008d90:	f000 f872 	bl	8008e78 <_free_r>
 8008d94:	69e3      	ldr	r3, [r4, #28]
 8008d96:	6819      	ldr	r1, [r3, #0]
 8008d98:	b111      	cbz	r1, 8008da0 <_reclaim_reent+0x3c>
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 f86c 	bl	8008e78 <_free_r>
 8008da0:	6961      	ldr	r1, [r4, #20]
 8008da2:	b111      	cbz	r1, 8008daa <_reclaim_reent+0x46>
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 f867 	bl	8008e78 <_free_r>
 8008daa:	69e1      	ldr	r1, [r4, #28]
 8008dac:	b111      	cbz	r1, 8008db4 <_reclaim_reent+0x50>
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 f862 	bl	8008e78 <_free_r>
 8008db4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008db6:	b111      	cbz	r1, 8008dbe <_reclaim_reent+0x5a>
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 f85d 	bl	8008e78 <_free_r>
 8008dbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dc0:	b111      	cbz	r1, 8008dc8 <_reclaim_reent+0x64>
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 f858 	bl	8008e78 <_free_r>
 8008dc8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008dca:	b111      	cbz	r1, 8008dd2 <_reclaim_reent+0x6e>
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 f853 	bl	8008e78 <_free_r>
 8008dd2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008dd4:	b111      	cbz	r1, 8008ddc <_reclaim_reent+0x78>
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f000 f84e 	bl	8008e78 <_free_r>
 8008ddc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008dde:	b111      	cbz	r1, 8008de6 <_reclaim_reent+0x82>
 8008de0:	4620      	mov	r0, r4
 8008de2:	f000 f849 	bl	8008e78 <_free_r>
 8008de6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008de8:	b111      	cbz	r1, 8008df0 <_reclaim_reent+0x8c>
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 f844 	bl	8008e78 <_free_r>
 8008df0:	6a23      	ldr	r3, [r4, #32]
 8008df2:	b14b      	cbz	r3, 8008e08 <_reclaim_reent+0xa4>
 8008df4:	4620      	mov	r0, r4
 8008df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dfa:	4718      	bx	r3
 8008dfc:	680e      	ldr	r6, [r1, #0]
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f000 f83a 	bl	8008e78 <_free_r>
 8008e04:	4631      	mov	r1, r6
 8008e06:	e7bb      	b.n	8008d80 <_reclaim_reent+0x1c>
 8008e08:	bd70      	pop	{r4, r5, r6, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20000014 	.word	0x20000014

08008e10 <__libc_init_array>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	4d0d      	ldr	r5, [pc, #52]	@ (8008e48 <__libc_init_array+0x38>)
 8008e14:	4c0d      	ldr	r4, [pc, #52]	@ (8008e4c <__libc_init_array+0x3c>)
 8008e16:	1b64      	subs	r4, r4, r5
 8008e18:	10a4      	asrs	r4, r4, #2
 8008e1a:	2600      	movs	r6, #0
 8008e1c:	42a6      	cmp	r6, r4
 8008e1e:	d109      	bne.n	8008e34 <__libc_init_array+0x24>
 8008e20:	4d0b      	ldr	r5, [pc, #44]	@ (8008e50 <__libc_init_array+0x40>)
 8008e22:	4c0c      	ldr	r4, [pc, #48]	@ (8008e54 <__libc_init_array+0x44>)
 8008e24:	f000 f87e 	bl	8008f24 <_init>
 8008e28:	1b64      	subs	r4, r4, r5
 8008e2a:	10a4      	asrs	r4, r4, #2
 8008e2c:	2600      	movs	r6, #0
 8008e2e:	42a6      	cmp	r6, r4
 8008e30:	d105      	bne.n	8008e3e <__libc_init_array+0x2e>
 8008e32:	bd70      	pop	{r4, r5, r6, pc}
 8008e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e38:	4798      	blx	r3
 8008e3a:	3601      	adds	r6, #1
 8008e3c:	e7ee      	b.n	8008e1c <__libc_init_array+0xc>
 8008e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e42:	4798      	blx	r3
 8008e44:	3601      	adds	r6, #1
 8008e46:	e7f2      	b.n	8008e2e <__libc_init_array+0x1e>
 8008e48:	0802644c 	.word	0x0802644c
 8008e4c:	0802644c 	.word	0x0802644c
 8008e50:	0802644c 	.word	0x0802644c
 8008e54:	08026450 	.word	0x08026450

08008e58 <__retarget_lock_acquire_recursive>:
 8008e58:	4770      	bx	lr

08008e5a <__retarget_lock_release_recursive>:
 8008e5a:	4770      	bx	lr

08008e5c <memcpy>:
 8008e5c:	440a      	add	r2, r1
 8008e5e:	4291      	cmp	r1, r2
 8008e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e64:	d100      	bne.n	8008e68 <memcpy+0xc>
 8008e66:	4770      	bx	lr
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e72:	4291      	cmp	r1, r2
 8008e74:	d1f9      	bne.n	8008e6a <memcpy+0xe>
 8008e76:	bd10      	pop	{r4, pc}

08008e78 <_free_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	2900      	cmp	r1, #0
 8008e7e:	d041      	beq.n	8008f04 <_free_r+0x8c>
 8008e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e84:	1f0c      	subs	r4, r1, #4
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	bfb8      	it	lt
 8008e8a:	18e4      	addlt	r4, r4, r3
 8008e8c:	f000 f83e 	bl	8008f0c <__malloc_lock>
 8008e90:	4a1d      	ldr	r2, [pc, #116]	@ (8008f08 <_free_r+0x90>)
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	b933      	cbnz	r3, 8008ea4 <_free_r+0x2c>
 8008e96:	6063      	str	r3, [r4, #4]
 8008e98:	6014      	str	r4, [r2, #0]
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ea0:	f000 b83a 	b.w	8008f18 <__malloc_unlock>
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	d908      	bls.n	8008eba <_free_r+0x42>
 8008ea8:	6820      	ldr	r0, [r4, #0]
 8008eaa:	1821      	adds	r1, r4, r0
 8008eac:	428b      	cmp	r3, r1
 8008eae:	bf01      	itttt	eq
 8008eb0:	6819      	ldreq	r1, [r3, #0]
 8008eb2:	685b      	ldreq	r3, [r3, #4]
 8008eb4:	1809      	addeq	r1, r1, r0
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	e7ed      	b.n	8008e96 <_free_r+0x1e>
 8008eba:	461a      	mov	r2, r3
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	b10b      	cbz	r3, 8008ec4 <_free_r+0x4c>
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	d9fa      	bls.n	8008eba <_free_r+0x42>
 8008ec4:	6811      	ldr	r1, [r2, #0]
 8008ec6:	1850      	adds	r0, r2, r1
 8008ec8:	42a0      	cmp	r0, r4
 8008eca:	d10b      	bne.n	8008ee4 <_free_r+0x6c>
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	4401      	add	r1, r0
 8008ed0:	1850      	adds	r0, r2, r1
 8008ed2:	4283      	cmp	r3, r0
 8008ed4:	6011      	str	r1, [r2, #0]
 8008ed6:	d1e0      	bne.n	8008e9a <_free_r+0x22>
 8008ed8:	6818      	ldr	r0, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	6053      	str	r3, [r2, #4]
 8008ede:	4408      	add	r0, r1
 8008ee0:	6010      	str	r0, [r2, #0]
 8008ee2:	e7da      	b.n	8008e9a <_free_r+0x22>
 8008ee4:	d902      	bls.n	8008eec <_free_r+0x74>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	e7d6      	b.n	8008e9a <_free_r+0x22>
 8008eec:	6820      	ldr	r0, [r4, #0]
 8008eee:	1821      	adds	r1, r4, r0
 8008ef0:	428b      	cmp	r3, r1
 8008ef2:	bf04      	itt	eq
 8008ef4:	6819      	ldreq	r1, [r3, #0]
 8008ef6:	685b      	ldreq	r3, [r3, #4]
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	bf04      	itt	eq
 8008efc:	1809      	addeq	r1, r1, r0
 8008efe:	6021      	streq	r1, [r4, #0]
 8008f00:	6054      	str	r4, [r2, #4]
 8008f02:	e7ca      	b.n	8008e9a <_free_r+0x22>
 8008f04:	bd38      	pop	{r3, r4, r5, pc}
 8008f06:	bf00      	nop
 8008f08:	20007dc0 	.word	0x20007dc0

08008f0c <__malloc_lock>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	@ (8008f14 <__malloc_lock+0x8>)
 8008f0e:	f7ff bfa3 	b.w	8008e58 <__retarget_lock_acquire_recursive>
 8008f12:	bf00      	nop
 8008f14:	20007dbc 	.word	0x20007dbc

08008f18 <__malloc_unlock>:
 8008f18:	4801      	ldr	r0, [pc, #4]	@ (8008f20 <__malloc_unlock+0x8>)
 8008f1a:	f7ff bf9e 	b.w	8008e5a <__retarget_lock_release_recursive>
 8008f1e:	bf00      	nop
 8008f20:	20007dbc 	.word	0x20007dbc

08008f24 <_init>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	bf00      	nop
 8008f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2a:	bc08      	pop	{r3}
 8008f2c:	469e      	mov	lr, r3
 8008f2e:	4770      	bx	lr

08008f30 <_fini>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	bf00      	nop
 8008f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f36:	bc08      	pop	{r3}
 8008f38:	469e      	mov	lr, r3
 8008f3a:	4770      	bx	lr
