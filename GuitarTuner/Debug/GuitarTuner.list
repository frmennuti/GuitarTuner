
GuitarTuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d14  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d544  08009eb4  08009eb4  0000aeb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080273f8  080273f8  00029078  2**0
                  CONTENTS
  4 .ARM          00000000  080273f8  080273f8  00029078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080273f8  080273f8  00029078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080273f8  080273f8  000283f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080273fc  080273fc  000283fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08027400  00029000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00029078  2**0
                  CONTENTS
 10 .bss          0000a038  20000078  20000078  00029078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a0b0  2000a0b0  00029078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00029078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d15a  00000000  00000000  000290a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000508f  00000000  00000000  00056202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a00  00000000  00000000  0005b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001338  00000000  00000000  0005cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000046da  00000000  00000000  0005dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021f1b  00000000  00000000  000626aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e340d  00000000  00000000  000845c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  001679d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007214  00000000  00000000  00167a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0016eca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002fbb  00000000  00000000  0016ed0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000d0  00000000  00000000  00171cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e9c 	.word	0x08009e9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08009e9c 	.word	0x08009e9c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <calc_magnitude>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calc_magnitude(float real_part, float img_part)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b62:	edc7 0a00 	vstr	s1, [r7]
	return sqrt(real_part*real_part + img_part*img_part);
 8000b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b6a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000b6e:	edd7 7a00 	vldr	s15, [r7]
 8000b72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b7a:	ee17 0a90 	vmov	r0, s15
 8000b7e:	f7ff fc93 	bl	80004a8 <__aeabi_f2d>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	ec43 2b10 	vmov	d0, r2, r3
 8000b8a:	f009 f881 	bl	8009c90 <sqrt>
 8000b8e:	ec53 2b10 	vmov	r2, r3, d0
 8000b92:	4610      	mov	r0, r2
 8000b94:	4619      	mov	r1, r3
 8000b96:	f7ff ff8f 	bl	8000ab8 <__aeabi_d2f>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	ee07 3a90 	vmov	s15, r3
}
 8000ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f000 fdc2 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 f846 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 f9fc 	bl	8000fb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bbc:	f000 f9dc 	bl	8000f78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bc0:	f000 f984 	bl	8000ecc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000bc4:	f000 f8a4 	bl	8000d10 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000bc8:	f000 f914 	bl	8000df4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000bcc:	f000 f948 	bl	8000e60 <MX_TIM7_Init>
  MX_USB_PCD_Init();
 8000bd0:	f000 f9ac 	bl	8000f2c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_LENGTH);
 8000bd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bd8:	4810      	ldr	r0, [pc, #64]	@ (8000c1c <main+0x70>)
 8000bda:	f007 ff87 	bl	8008aec <arm_rfft_fast_init_f32>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bde:	f005 f80f 	bl	8005c00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DMATask */
  DMATaskHandle = osThreadNew(StartDMATask, NULL, &DMATask_attributes);
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <main+0x74>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	480f      	ldr	r0, [pc, #60]	@ (8000c24 <main+0x78>)
 8000be8:	f005 f872 	bl	8005cd0 <osThreadNew>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <main+0x7c>)
 8000bf0:	6013      	str	r3, [r2, #0]

  /* creation of fftTask */
  fftTaskHandle = osThreadNew(StartfftTaskTask, NULL, &fftTask_attributes);
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <main+0x80>)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	480e      	ldr	r0, [pc, #56]	@ (8000c30 <main+0x84>)
 8000bf8:	f005 f86a 	bl	8005cd0 <osThreadNew>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <main+0x88>)
 8000c00:	6013      	str	r3, [r2, #0]

  /* creation of elaborateFftDat */
  elaborateFftDatHandle = osThreadNew(elaborateFftData, NULL, &elaborateFftDat_attributes);
 8000c02:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <main+0x8c>)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <main+0x90>)
 8000c08:	f005 f862 	bl	8005cd0 <osThreadNew>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000c40 <main+0x94>)
 8000c10:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c12:	f005 f829 	bl	8005c68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c16:	bf00      	nop
 8000c18:	e7fd      	b.n	8000c16 <main+0x6a>
 8000c1a:	bf00      	nop
 8000c1c:	20006528 	.word	0x20006528
 8000c20:	08009eec 	.word	0x08009eec
 8000c24:	080010c1 	.word	0x080010c1
 8000c28:	2000051c 	.word	0x2000051c
 8000c2c:	08009f10 	.word	0x08009f10
 8000c30:	080011d9 	.word	0x080011d9
 8000c34:	20000520 	.word	0x20000520
 8000c38:	08009f34 	.word	0x08009f34
 8000c3c:	08001235 	.word	0x08001235
 8000c40:	20000524 	.word	0x20000524

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0a6      	sub	sp, #152	@ 0x98
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c4e:	2228      	movs	r2, #40	@ 0x28
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f008 ff2e 	bl	8009ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2258      	movs	r2, #88	@ 0x58
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f008 ff20 	bl	8009ab4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c78:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c7c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c82:	2302      	movs	r3, #2
 8000c84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 fac4 	bl	8003230 <HAL_RCC_OscConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cae:	f000 fb3b 	bl	8001328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cc8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fb02 	bl	80042d8 <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cda:	f000 fb25 	bl	8001328 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <SystemClock_Config+0xc8>)
 8000ce0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000ce6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f003 fd41 	bl	800477c <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d00:	f000 fb12 	bl	8001328 <Error_Handler>
  }
}
 8000d04:	bf00      	nop
 8000d06:	3798      	adds	r7, #152	@ 0x98
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	00020082 	.word	0x00020082

08000d10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	@ 0x28
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
 8000d30:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d32:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d5a:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000d62:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d64:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8000d68:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d76:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d80:	2204      	movs	r2, #4
 8000d82:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d90:	4817      	ldr	r0, [pc, #92]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000d92:	f000 fd11 	bl	80017b8 <HAL_ADC_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d9c:	f000 fac4 	bl	8001328 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000dac:	f001 fb04 	bl	80023b8 <HAL_ADCEx_MultiModeConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000db6:	f000 fab7 	bl	8001328 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <MX_ADC1_Init+0xe0>)
 8000dd8:	f001 f804 	bl	8001de4 <HAL_ADC_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000de2:	f000 faa1 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	@ 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000094 	.word	0x20000094

08000df4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_TIM6_Init+0x64>)
 8000e06:	4a15      	ldr	r2, [pc, #84]	@ (8000e5c <MX_TIM6_Init+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <MX_TIM6_Init+0x64>)
 8000e0c:	222f      	movs	r2, #47	@ 0x2f
 8000e0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_TIM6_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 195-1;
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <MX_TIM6_Init+0x64>)
 8000e18:	22c2      	movs	r2, #194	@ 0xc2
 8000e1a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MX_TIM6_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e22:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <MX_TIM6_Init+0x64>)
 8000e24:	f003 fec8 	bl	8004bb8 <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e2e:	f000 fa7b 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e32:	2320      	movs	r3, #32
 8000e34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <MX_TIM6_Init+0x64>)
 8000e40:	f004 f9be 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e4a:	f000 fa6d 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000128 	.word	0x20000128
 8000e5c:	40001000 	.word	0x40001000

08000e60 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_TIM7_Init+0x64>)
 8000e72:	4a15      	ldr	r2, [pc, #84]	@ (8000ec8 <MX_TIM7_Init+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_TIM7_Init+0x64>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_TIM7_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 24-1;
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <MX_TIM7_Init+0x64>)
 8000e84:	2217      	movs	r2, #23
 8000e86:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_TIM7_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e8e:	480d      	ldr	r0, [pc, #52]	@ (8000ec4 <MX_TIM7_Init+0x64>)
 8000e90:	f003 fe92 	bl	8004bb8 <HAL_TIM_Base_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000e9a:	f000 fa45 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	@ (8000ec4 <MX_TIM7_Init+0x64>)
 8000eac:	f004 f988 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000eb6:	f000 fa37 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000174 	.word	0x20000174
 8000ec8:	40001400 	.word	0x40001400

08000ecc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_USART2_UART_Init+0x58>)
 8000ed2:	4a15      	ldr	r2, [pc, #84]	@ (8000f28 <MX_USART2_UART_Init+0x5c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <MX_USART2_UART_Init+0x58>)
 8000ed8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_USART2_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_USART2_UART_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_USART2_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_USART2_UART_Init+0x58>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_USART2_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <MX_USART2_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_USART2_UART_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_USART2_UART_Init+0x58>)
 8000f10:	f004 fa00 	bl	8005314 <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f1a:	f000 fa05 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001c0 	.word	0x200001c0
 8000f28:	40004400 	.word	0x40004400

08000f2c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_USB_PCD_Init+0x44>)
 8000f32:	4a10      	ldr	r2, [pc, #64]	@ (8000f74 <MX_USB_PCD_Init+0x48>)
 8000f34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_USB_PCD_Init+0x44>)
 8000f38:	2208      	movs	r2, #8
 8000f3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_USB_PCD_Init+0x44>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <MX_USB_PCD_Init+0x44>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f48:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_USB_PCD_Init+0x44>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <MX_USB_PCD_Init+0x44>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_USB_PCD_Init+0x44>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <MX_USB_PCD_Init+0x44>)
 8000f5c:	f002 f8a0 	bl	80030a0 <HAL_PCD_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000f66:	f000 f9df 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000248 	.word	0x20000248
 8000f74:	40005c00 	.word	0x40005c00

08000f78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <MX_DMA_Init+0x38>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <MX_DMA_Init+0x38>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6153      	str	r3, [r2, #20]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <MX_DMA_Init+0x38>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2105      	movs	r1, #5
 8000f9a:	200b      	movs	r0, #11
 8000f9c:	f001 fce6 	bl	800296c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fa0:	200b      	movs	r0, #11
 8000fa2:	f001 fcff 	bl	80029a4 <HAL_NVIC_EnableIRQ>

}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	4b2b      	ldr	r3, [pc, #172]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a2a      	ldr	r2, [pc, #168]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8000fd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe2:	4b25      	ldr	r3, [pc, #148]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a24      	ldr	r2, [pc, #144]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8000fe8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a18      	ldr	r2, [pc, #96]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800101c:	6153      	str	r3, [r2, #20]
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <MX_GPIO_Init+0xc4>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trace0_Pin|Trace1_Pin|Trace2_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	21e0      	movs	r1, #224	@ 0xe0
 800102e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001032:	f002 f803 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001036:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800103c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	480b      	ldr	r0, [pc, #44]	@ (800107c <MX_GPIO_Init+0xc8>)
 800104e:	f001 fe6b 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trace0_Pin Trace1_Pin Trace2_Pin */
  GPIO_InitStruct.Pin = Trace0_Pin|Trace1_Pin|Trace2_Pin;
 8001052:	23e0      	movs	r3, #224	@ 0xe0
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106c:	f001 fe5c 	bl	8002d28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	@ 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	48000800 	.word	0x48000800

08001080 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Notify the task that the transmission is complete. */
	vTaskNotifyGiveFromISR( DMATaskHandle, pdFALSE );
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f006 fc54 	bl	800793c <vTaskNotifyGiveFromISR>
	//HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000051c 	.word	0x2000051c

080010a0 <HAL_ADC_ConvCpltCallback>:
void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Notify the task that the transmission is complete. */
	vTaskNotifyGiveFromISR( DMATaskHandle, pdFALSE );
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <HAL_ADC_ConvCpltCallback+0x1c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 fc44 	bl	800793c <vTaskNotifyGiveFromISR>
	//HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000051c 	.word	0x2000051c

080010c0 <StartDMATask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDMATask */
void StartDMATask(void *argument)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  static bool sampled_first_half = true;

  uint32_t DMAnotificationValue;

  HAL_ADC_Start_DMA(&hadc1, buffer_adc, ADC_BUFFER_LENGTH);
 80010c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010cc:	493a      	ldr	r1, [pc, #232]	@ (80011b8 <StartDMATask+0xf8>)
 80010ce:	483b      	ldr	r0, [pc, #236]	@ (80011bc <StartDMATask+0xfc>)
 80010d0:	f000 fd6c 	bl	8001bac <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim6);
 80010d4:	483a      	ldr	r0, [pc, #232]	@ (80011c0 <StartDMATask+0x100>)
 80010d6:	f003 fdc7 	bl	8004c68 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 80010da:	483a      	ldr	r0, [pc, #232]	@ (80011c4 <StartDMATask+0x104>)
 80010dc:	f003 fdc4 	bl	8004c68 <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	  DMAnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	2001      	movs	r0, #1
 80010e6:	f006 fb2f 	bl	8007748 <ulTaskNotifyTake>
 80010ea:	60f8      	str	r0, [r7, #12]

	  if(DMAnotificationValue == 1)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d1f6      	bne.n	80010e0 <StartDMATask+0x20>
	  {
		  //debug
		  HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
 80010f2:	2120      	movs	r1, #32
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f8:	f001 ffb8 	bl	800306c <HAL_GPIO_TogglePin>
		  //prima volta che arrivo qui ma mi sembra un marginal gain dato che
		  //tutte le altre volte che viene qua deve eseguirla. Una FSM, per
		  //quanto elegante sembra un overkill e mi sembra renda il codice più
		  //complesso da leggere e manutenere. Da implementare qualora le
		  //elaborazioni da fare qui risultino più complesse
		  memcpy(fft_buffer, &fft_buffer[PARK_BUFFER_LENGTH], sizeof(float)*PARK_BUFFER_LENGTH);
 80010fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001100:	4931      	ldr	r1, [pc, #196]	@ (80011c8 <StartDMATask+0x108>)
 8001102:	4832      	ldr	r0, [pc, #200]	@ (80011cc <StartDMATask+0x10c>)
 8001104:	f008 fd60 	bl	8009bc8 <memcpy>

		  if(sampled_first_half)
 8001108:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <StartDMATask+0x110>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d01a      	beq.n	8001146 <StartDMATask+0x86>
		  {
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e012      	b.n	800113c <StartDMATask+0x7c>
				  fft_buffer[PARK_BUFFER_LENGTH+i] = (float)buffer_adc[i];
 8001116:	4a28      	ldr	r2, [pc, #160]	@ (80011b8 <StartDMATask+0xf8>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001124:	ee07 2a90 	vmov	s15, r2
 8001128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800112c:	4a27      	ldr	r2, [pc, #156]	@ (80011cc <StartDMATask+0x10c>)
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	edc3 7a00 	vstr	s15, [r3]
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001142:	dbe8      	blt.n	8001116 <StartDMATask+0x56>
 8001144:	e01b      	b.n	800117e <StartDMATask+0xbe>
		  }
		  else
		  {
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	e014      	b.n	8001176 <StartDMATask+0xb6>
				  fft_buffer[PARK_BUFFER_LENGTH+i] = (float)buffer_adc[PARK_BUFFER_LENGTH+i];
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001152:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <StartDMATask+0xf8>)
 8001154:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800115e:	ee07 2a90 	vmov	s15, r2
 8001162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001166:	4a19      	ldr	r2, [pc, #100]	@ (80011cc <StartDMATask+0x10c>)
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	edc3 7a00 	vstr	s15, [r3]
			  for(int i = 0; i<PARK_BUFFER_LENGTH; i++)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	3301      	adds	r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800117c:	dbe6      	blt.n	800114c <StartDMATask+0x8c>
		  }

		  //punto al prossimo inizio del blocco da 1024 elementi in buffer adc
		  sampled_first_half = !sampled_first_half;
 800117e:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <StartDMATask+0x110>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	bf14      	ite	ne
 8001186:	2301      	movne	r3, #1
 8001188:	2300      	moveq	r3, #0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f083 0301 	eor.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <StartDMATask+0x110>)
 800119a:	701a      	strb	r2, [r3, #0]

		  xTaskNotifyGive(fftTaskHandle);
 800119c:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <StartDMATask+0x114>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	2300      	movs	r3, #0
 80011a2:	2202      	movs	r2, #2
 80011a4:	2100      	movs	r1, #0
 80011a6:	f006 fb1b 	bl	80077e0 <xTaskGenericNotify>

		  //debug
		  HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
 80011aa:	2120      	movs	r1, #32
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b0:	f001 ff5c 	bl	800306c <HAL_GPIO_TogglePin>
	  DMAnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80011b4:	e794      	b.n	80010e0 <StartDMATask+0x20>
 80011b6:	bf00      	nop
 80011b8:	20000528 	.word	0x20000528
 80011bc:	20000094 	.word	0x20000094
 80011c0:	20000128 	.word	0x20000128
 80011c4:	20000174 	.word	0x20000174
 80011c8:	20003528 	.word	0x20003528
 80011cc:	20002528 	.word	0x20002528
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000520 	.word	0x20000520

080011d8 <StartfftTaskTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartfftTaskTask */
void StartfftTaskTask(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartfftTaskTask */
  uint32_t fftnotificationValue;
  /* Infinite loop */
  for(;;)
  {
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	2001      	movs	r0, #1
 80011e6:	f006 faaf 	bl	8007748 <ulTaskNotifyTake>
 80011ea:	60f8      	str	r0, [r7, #12]

	  if(fftnotificationValue == 1)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d1f6      	bne.n	80011e0 <StartfftTaskTask+0x8>
	  {
		  //debug
		  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 80011f2:	2140      	movs	r1, #64	@ 0x40
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f001 ff38 	bl	800306c <HAL_GPIO_TogglePin>

		  //eseguire la fft
		  arm_rfft_fast_f32(&fftHandler, fft_buffer, fft_buffer_result, 0);
 80011fc:	2300      	movs	r3, #0
 80011fe:	4a09      	ldr	r2, [pc, #36]	@ (8001224 <StartfftTaskTask+0x4c>)
 8001200:	4909      	ldr	r1, [pc, #36]	@ (8001228 <StartfftTaskTask+0x50>)
 8001202:	480a      	ldr	r0, [pc, #40]	@ (800122c <StartfftTaskTask+0x54>)
 8001204:	f007 fd5c 	bl	8008cc0 <arm_rfft_fast_f32>

		  xTaskNotifyGive(elaborateFftDatHandle);
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <StartfftTaskTask+0x58>)
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	2300      	movs	r3, #0
 800120e:	2202      	movs	r2, #2
 8001210:	2100      	movs	r1, #0
 8001212:	f006 fae5 	bl	80077e0 <xTaskGenericNotify>

		  //debug
		  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 8001216:	2140      	movs	r1, #64	@ 0x40
 8001218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121c:	f001 ff26 	bl	800306c <HAL_GPIO_TogglePin>
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001220:	e7de      	b.n	80011e0 <StartfftTaskTask+0x8>
 8001222:	bf00      	nop
 8001224:	20004528 	.word	0x20004528
 8001228:	20002528 	.word	0x20002528
 800122c:	20006528 	.word	0x20006528
 8001230:	20000524 	.word	0x20000524

08001234 <elaborateFftData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_elaborateFftData */
void elaborateFftData(void *argument)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN elaborateFftData */
  uint32_t fftnotificationValue;

  //inizializzo il campo contenente i bin della frequenza, non devo
  //ricalcolarlo ogni volta ma solo la prima
  for(int32_t cnt = 0; cnt < ADC_BUFFER_LENGTH/2; cnt++)
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e01a      	b.n	8001278 <elaborateFftData+0x44>
  {
	  fft_out[cnt/2].frq = (cnt*SAMPLING_FREQUENCY_HZ)/ADC_BUFFER_LENGTH;
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	029b      	lsls	r3, r3, #10
 800124c:	2b00      	cmp	r3, #0
 800124e:	da01      	bge.n	8001254 <elaborateFftData+0x20>
 8001250:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001254:	12db      	asrs	r3, r3, #11
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	0fda      	lsrs	r2, r3, #31
 800125e:	4413      	add	r3, r2
 8001260:	105b      	asrs	r3, r3, #1
 8001262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001266:	4a25      	ldr	r2, [pc, #148]	@ (80012fc <elaborateFftData+0xc8>)
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4413      	add	r3, r2
 800126c:	3304      	adds	r3, #4
 800126e:	edc3 7a00 	vstr	s15, [r3]
  for(int32_t cnt = 0; cnt < ADC_BUFFER_LENGTH/2; cnt++)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800127e:	dbe0      	blt.n	8001242 <elaborateFftData+0xe>
  }
  /* Infinite loop */
  for(;;)
  {
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	2001      	movs	r0, #1
 8001286:	f006 fa5f 	bl	8007748 <ulTaskNotifyTake>
 800128a:	60f8      	str	r0, [r7, #12]

	  if(fftnotificationValue == 1)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d1f6      	bne.n	8001280 <elaborateFftData+0x4c>
	  {
		  //debug
		  HAL_GPIO_TogglePin(GPIOA, Trace2_Pin);
 8001292:	2180      	movs	r1, #128	@ 0x80
 8001294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001298:	f001 fee8 	bl	800306c <HAL_GPIO_TogglePin>

		  //fft_buffer_result contains imaginary numbers, the magnitude
		  //must be evaluated in order to recover the tones strength
		  //frequency bins must be evaluated
		  //after that data shall be sent through USB communication
		  for(int32_t cnt = 0; cnt < (ADC_BUFFER_LENGTH-2); cnt += 2)
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	e021      	b.n	80012e6 <elaborateFftData+0xb2>
		  {
			  fft_out[cnt/2].mag = calc_magnitude(fft_buffer_result[cnt],fft_buffer_result[cnt+1]);
 80012a2:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <elaborateFftData+0xcc>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a13      	ldr	r2, [pc, #76]	@ (8001300 <elaborateFftData+0xcc>)
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	ed93 7a00 	vldr	s14, [r3]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	0fda      	lsrs	r2, r3, #31
 80012c0:	4413      	add	r3, r2
 80012c2:	105b      	asrs	r3, r3, #1
 80012c4:	461c      	mov	r4, r3
 80012c6:	eef0 0a47 	vmov.f32	s1, s14
 80012ca:	eeb0 0a67 	vmov.f32	s0, s15
 80012ce:	f7ff fc43 	bl	8000b58 <calc_magnitude>
 80012d2:	eef0 7a40 	vmov.f32	s15, s0
 80012d6:	4a09      	ldr	r2, [pc, #36]	@ (80012fc <elaborateFftData+0xc8>)
 80012d8:	00e3      	lsls	r3, r4, #3
 80012da:	4413      	add	r3, r2
 80012dc:	edc3 7a00 	vstr	s15, [r3]
		  for(int32_t cnt = 0; cnt < (ADC_BUFFER_LENGTH-2); cnt += 2)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	3302      	adds	r3, #2
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	f240 72fd 	movw	r2, #2045	@ 0x7fd
 80012ec:	4293      	cmp	r3, r2
 80012ee:	ddd8      	ble.n	80012a2 <elaborateFftData+0x6e>
		  }

		  //debug
		  HAL_GPIO_TogglePin(GPIOA, Trace2_Pin);
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f6:	f001 feb9 	bl	800306c <HAL_GPIO_TogglePin>
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80012fa:	e7c1      	b.n	8001280 <elaborateFftData+0x4c>
 80012fc:	20006540 	.word	0x20006540
 8001300:	20004528 	.word	0x20004528

08001304 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001316:	f000 fa25 	bl	8001764 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40012c00 	.word	0x40012c00

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <Error_Handler+0x8>

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_MspInit+0x4c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a10      	ldr	r2, [pc, #64]	@ (8001380 <HAL_MspInit+0x4c>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_MspInit+0x4c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_MspInit+0x4c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <HAL_MspInit+0x4c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <HAL_MspInit+0x4c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	210f      	movs	r1, #15
 800136e:	f06f 0001 	mvn.w	r0, #1
 8001372:	f001 fafb 	bl	800296c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000

08001384 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	@ 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013a4:	d14c      	bne.n	8001440 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013a6:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <HAL_ADC_MspInit+0xc4>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	4a27      	ldr	r2, [pc, #156]	@ (8001448 <HAL_ADC_MspInit+0xc4>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b0:	6153      	str	r3, [r2, #20]
 80013b2:	4b25      	ldr	r3, [pc, #148]	@ (8001448 <HAL_ADC_MspInit+0xc4>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <HAL_ADC_MspInit+0xc4>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4a21      	ldr	r2, [pc, #132]	@ (8001448 <HAL_ADC_MspInit+0xc4>)
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c8:	6153      	str	r3, [r2, #20]
 80013ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <HAL_ADC_MspInit+0xc4>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d6:	2301      	movs	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013da:	2303      	movs	r3, #3
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ec:	f001 fc9c 	bl	8002d28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <HAL_ADC_MspInit+0xc8>)
 80013f2:	4a17      	ldr	r2, [pc, #92]	@ (8001450 <HAL_ADC_MspInit+0xcc>)
 80013f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_ADC_MspInit+0xc8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <HAL_ADC_MspInit+0xc8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_ADC_MspInit+0xc8>)
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001408:	4b10      	ldr	r3, [pc, #64]	@ (800144c <HAL_ADC_MspInit+0xc8>)
 800140a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800140e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001410:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <HAL_ADC_MspInit+0xc8>)
 8001412:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001416:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <HAL_ADC_MspInit+0xc8>)
 800141a:	2220      	movs	r2, #32
 800141c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <HAL_ADC_MspInit+0xc8>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001424:	4809      	ldr	r0, [pc, #36]	@ (800144c <HAL_ADC_MspInit+0xc8>)
 8001426:	f001 facb 	bl	80029c0 <HAL_DMA_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001430:	f7ff ff7a 	bl	8001328 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <HAL_ADC_MspInit+0xc8>)
 8001438:	639a      	str	r2, [r3, #56]	@ 0x38
 800143a:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_ADC_MspInit+0xc8>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	@ 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	200000e4 	.word	0x200000e4
 8001450:	40020008 	.word	0x40020008

08001454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <HAL_TIM_Base_MspInit+0x5c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d10c      	bne.n	8001480 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <HAL_TIM_Base_MspInit+0x60>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <HAL_TIM_Base_MspInit+0x60>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <HAL_TIM_Base_MspInit+0x60>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800147e:	e010      	b.n	80014a2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <HAL_TIM_Base_MspInit+0x64>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d10b      	bne.n	80014a2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <HAL_TIM_Base_MspInit+0x60>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a09      	ldr	r2, [pc, #36]	@ (80014b4 <HAL_TIM_Base_MspInit+0x60>)
 8001490:	f043 0320 	orr.w	r3, r3, #32
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <HAL_TIM_Base_MspInit+0x60>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40001000 	.word	0x40001000
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40001400 	.word	0x40001400

080014bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a17      	ldr	r2, [pc, #92]	@ (8001538 <HAL_UART_MspInit+0x7c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d128      	bne.n	8001530 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <HAL_UART_MspInit+0x80>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a16      	ldr	r2, [pc, #88]	@ (800153c <HAL_UART_MspInit+0x80>)
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <HAL_UART_MspInit+0x80>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_UART_MspInit+0x80>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a10      	ldr	r2, [pc, #64]	@ (800153c <HAL_UART_MspInit+0x80>)
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001500:	6153      	str	r3, [r2, #20]
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_UART_MspInit+0x80>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800150e:	230c      	movs	r3, #12
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151e:	2307      	movs	r3, #7
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152c:	f001 fbfc 	bl	8002d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	@ 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40004400 	.word	0x40004400
 800153c:	40021000 	.word	0x40021000

08001540 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <HAL_PCD_MspInit+0x38>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10b      	bne.n	800156a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001552:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <HAL_PCD_MspInit+0x3c>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a09      	ldr	r2, [pc, #36]	@ (800157c <HAL_PCD_MspInit+0x3c>)
 8001558:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <HAL_PCD_MspInit+0x3c>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40005c00 	.word	0x40005c00
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	@ 0x30
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001590:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <HAL_InitTick+0xcc>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a2d      	ldr	r2, [pc, #180]	@ (800164c <HAL_InitTick+0xcc>)
 8001596:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b2b      	ldr	r3, [pc, #172]	@ (800164c <HAL_InitTick+0xcc>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a8:	f107 020c 	add.w	r2, r7, #12
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 f8b0 	bl	8004718 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015b8:	f003 f88c 	bl	80046d4 <HAL_RCC_GetPCLK2Freq>
 80015bc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c0:	4a23      	ldr	r2, [pc, #140]	@ (8001650 <HAL_InitTick+0xd0>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9b      	lsrs	r3, r3, #18
 80015c8:	3b01      	subs	r3, #1
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015cc:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <HAL_InitTick+0xd4>)
 80015ce:	4a22      	ldr	r2, [pc, #136]	@ (8001658 <HAL_InitTick+0xd8>)
 80015d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015d2:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <HAL_InitTick+0xd4>)
 80015d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015da:	4a1e      	ldr	r2, [pc, #120]	@ (8001654 <HAL_InitTick+0xd4>)
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <HAL_InitTick+0xd4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_InitTick+0xd4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <HAL_InitTick+0xd4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015f2:	4818      	ldr	r0, [pc, #96]	@ (8001654 <HAL_InitTick+0xd4>)
 80015f4:	f003 fae0 	bl	8004bb8 <HAL_TIM_Base_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001602:	2b00      	cmp	r3, #0
 8001604:	d11b      	bne.n	800163e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001606:	4813      	ldr	r0, [pc, #76]	@ (8001654 <HAL_InitTick+0xd4>)
 8001608:	f003 fb96 	bl	8004d38 <HAL_TIM_Base_Start_IT>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001612:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001616:	2b00      	cmp	r3, #0
 8001618:	d111      	bne.n	800163e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800161a:	2019      	movs	r0, #25
 800161c:	f001 f9c2 	bl	80029a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b0f      	cmp	r3, #15
 8001624:	d808      	bhi.n	8001638 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001626:	2200      	movs	r2, #0
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	2019      	movs	r0, #25
 800162c:	f001 f99e 	bl	800296c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001630:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <HAL_InitTick+0xdc>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e002      	b.n	800163e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800163e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001642:	4618      	mov	r0, r3
 8001644:	3730      	adds	r7, #48	@ 0x30
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	431bde83 	.word	0x431bde83
 8001654:	20008540 	.word	0x20008540
 8001658:	40012c00 	.word	0x40012c00
 800165c:	20000008 	.word	0x20000008

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <NMI_Handler+0x4>

08001668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <MemManage_Handler+0x4>

08001678 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <UsageFault_Handler+0x4>

08001688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <DMA1_Channel1_IRQHandler+0x10>)
 800169e:	f001 fa35 	bl	8002b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200000e4 	.word	0x200000e4

080016ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80016b2:	f003 fbb1 	bl	8004e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20008540 	.word	0x20008540

080016c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800171c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e8:	f7ff ffea 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	@ (8001724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <LoopForever+0xe>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	@ (8001730 <LoopForever+0x16>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001712:	f008 fa33 	bl	8009b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001716:	f7ff fa49 	bl	8000bac <main>

0800171a <LoopForever>:

LoopForever:
    b LoopForever
 800171a:	e7fe      	b.n	800171a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800171c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001728:	08027400 	.word	0x08027400
  ldr r2, =_sbss
 800172c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001730:	2000a0b0 	.word	0x2000a0b0

08001734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC1_2_IRQHandler>
	...

08001738 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <HAL_Init+0x28>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a07      	ldr	r2, [pc, #28]	@ (8001760 <HAL_Init+0x28>)
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f001 f904 	bl	8002956 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174e:	200f      	movs	r0, #15
 8001750:	f7ff ff16 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001754:	f7ff fdee 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40022000 	.word	0x40022000

08001764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	2000000c 	.word	0x2000000c
 8001788:	2000858c 	.word	0x2000858c

0800178c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001790:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	2000858c 	.word	0x2000858c

080017a4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b09a      	sub	sp, #104	@ 0x68
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e1e3      	b.n	8001ba0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d176      	bne.n	80018d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d152      	bne.n	8001898 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fdb9 	bl	8001384 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d13b      	bne.n	8001898 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 ff85 	bl	8002730 <ADC_Disable>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	d12f      	bne.n	8001898 <HAL_ADC_Init+0xe0>
 8001838:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800183c:	2b00      	cmp	r3, #0
 800183e:	d12b      	bne.n	8001898 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001848:	f023 0302 	bic.w	r3, r3, #2
 800184c:	f043 0202 	orr.w	r2, r3, #2
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001862:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001872:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001874:	4b92      	ldr	r3, [pc, #584]	@ (8001ac0 <HAL_ADC_Init+0x308>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a92      	ldr	r2, [pc, #584]	@ (8001ac4 <HAL_ADC_Init+0x30c>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	0c9a      	lsrs	r2, r3, #18
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800188a:	e002      	b.n	8001892 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	3b01      	subs	r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f9      	bne.n	800188c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018b4:	d110      	bne.n	80018d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	f023 0312 	bic.w	r3, r3, #18
 80018be:	f043 0210 	orr.w	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f040 8150 	bne.w	8001b86 <HAL_ADC_Init+0x3ce>
 80018e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 814b 	bne.w	8001b86 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 8143 	bne.w	8001b86 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001918:	d004      	beq.n	8001924 <HAL_ADC_Init+0x16c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a6a      	ldr	r2, [pc, #424]	@ (8001ac8 <HAL_ADC_Init+0x310>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d101      	bne.n	8001928 <HAL_ADC_Init+0x170>
 8001924:	4b69      	ldr	r3, [pc, #420]	@ (8001acc <HAL_ADC_Init+0x314>)
 8001926:	e000      	b.n	800192a <HAL_ADC_Init+0x172>
 8001928:	4b69      	ldr	r3, [pc, #420]	@ (8001ad0 <HAL_ADC_Init+0x318>)
 800192a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001934:	d102      	bne.n	800193c <HAL_ADC_Init+0x184>
 8001936:	4b64      	ldr	r3, [pc, #400]	@ (8001ac8 <HAL_ADC_Init+0x310>)
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e01a      	b.n	8001972 <HAL_ADC_Init+0x1ba>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a61      	ldr	r2, [pc, #388]	@ (8001ac8 <HAL_ADC_Init+0x310>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d103      	bne.n	800194e <HAL_ADC_Init+0x196>
 8001946:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e011      	b.n	8001972 <HAL_ADC_Init+0x1ba>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a60      	ldr	r2, [pc, #384]	@ (8001ad4 <HAL_ADC_Init+0x31c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d102      	bne.n	800195e <HAL_ADC_Init+0x1a6>
 8001958:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad8 <HAL_ADC_Init+0x320>)
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e009      	b.n	8001972 <HAL_ADC_Init+0x1ba>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a5d      	ldr	r2, [pc, #372]	@ (8001ad8 <HAL_ADC_Init+0x320>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d102      	bne.n	800196e <HAL_ADC_Init+0x1b6>
 8001968:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad4 <HAL_ADC_Init+0x31c>)
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e001      	b.n	8001972 <HAL_ADC_Init+0x1ba>
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d108      	bne.n	8001992 <HAL_ADC_Init+0x1da>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_ADC_Init+0x1da>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_ADC_Init+0x1dc>
 8001992:	2300      	movs	r3, #0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d11c      	bne.n	80019d2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001998:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800199a:	2b00      	cmp	r3, #0
 800199c:	d010      	beq.n	80019c0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_ADC_Init+0x202>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_Init+0x202>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_ADC_Init+0x204>
 80019ba:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d108      	bne.n	80019d2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80019c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019d0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7e5b      	ldrb	r3, [r3, #25]
 80019d6:	035b      	lsls	r3, r3, #13
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019dc:	2a01      	cmp	r2, #1
 80019de:	d002      	beq.n	80019e6 <HAL_ADC_Init+0x22e>
 80019e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019e4:	e000      	b.n	80019e8 <HAL_ADC_Init+0x230>
 80019e6:	2200      	movs	r2, #0
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019f8:	4313      	orrs	r3, r2
 80019fa:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d11b      	bne.n	8001a3e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7e5b      	ldrb	r3, [r3, #25]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	3b01      	subs	r3, #1
 8001a14:	045a      	lsls	r2, r3, #17
 8001a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a20:	e00d      	b.n	8001a3e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001a2a:	f043 0220 	orr.w	r2, r3, #32
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d054      	beq.n	8001af0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a22      	ldr	r2, [pc, #136]	@ (8001ad4 <HAL_ADC_Init+0x31c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d004      	beq.n	8001a5a <HAL_ADC_Init+0x2a2>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a20      	ldr	r2, [pc, #128]	@ (8001ad8 <HAL_ADC_Init+0x320>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d140      	bne.n	8001adc <HAL_ADC_Init+0x324>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001a62:	d02a      	beq.n	8001aba <HAL_ADC_Init+0x302>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a6c:	d022      	beq.n	8001ab4 <HAL_ADC_Init+0x2fc>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a72:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001a76:	d01a      	beq.n	8001aae <HAL_ADC_Init+0x2f6>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7c:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001a80:	d012      	beq.n	8001aa8 <HAL_ADC_Init+0x2f0>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a86:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001a8a:	d00a      	beq.n	8001aa2 <HAL_ADC_Init+0x2ea>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a90:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001a94:	d002      	beq.n	8001a9c <HAL_ADC_Init+0x2e4>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	e023      	b.n	8001ae4 <HAL_ADC_Init+0x32c>
 8001a9c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001aa0:	e020      	b.n	8001ae4 <HAL_ADC_Init+0x32c>
 8001aa2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001aa6:	e01d      	b.n	8001ae4 <HAL_ADC_Init+0x32c>
 8001aa8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001aac:	e01a      	b.n	8001ae4 <HAL_ADC_Init+0x32c>
 8001aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ab2:	e017      	b.n	8001ae4 <HAL_ADC_Init+0x32c>
 8001ab4:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001ab8:	e014      	b.n	8001ae4 <HAL_ADC_Init+0x32c>
 8001aba:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001abe:	e011      	b.n	8001ae4 <HAL_ADC_Init+0x32c>
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	431bde83 	.word	0x431bde83
 8001ac8:	50000100 	.word	0x50000100
 8001acc:	50000300 	.word	0x50000300
 8001ad0:	50000700 	.word	0x50000700
 8001ad4:	50000400 	.word	0x50000400
 8001ad8:	50000500 	.word	0x50000500
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001aec:	4313      	orrs	r3, r2
 8001aee:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d114      	bne.n	8001b28 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b0c:	f023 0302 	bic.w	r3, r3, #2
 8001b10:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7e1b      	ldrb	r3, [r3, #24]
 8001b16:	039a      	lsls	r2, r3, #14
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4313      	orrs	r3, r2
 8001b22:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b24:	4313      	orrs	r3, r2
 8001b26:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <HAL_ADC_Init+0x3f0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d10c      	bne.n	8001b5e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f023 010f 	bic.w	r1, r3, #15
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	1e5a      	subs	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b5c:	e007      	b.n	8001b6e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 020f 	bic.w	r2, r2, #15
 8001b6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	f023 0303 	bic.w	r3, r3, #3
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b84:	e00a      	b.n	8001b9c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f023 0312 	bic.w	r3, r3, #18
 8001b8e:	f043 0210 	orr.w	r2, r3, #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3768      	adds	r7, #104	@ 0x68
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	fff0c007 	.word	0xfff0c007

08001bac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f040 80f7 	bne.w	8001dba <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_Start_DMA+0x2e>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e0f2      	b.n	8001dc0 <HAL_ADC_Start_DMA+0x214>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bea:	d004      	beq.n	8001bf6 <HAL_ADC_Start_DMA+0x4a>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a75      	ldr	r2, [pc, #468]	@ (8001dc8 <HAL_ADC_Start_DMA+0x21c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d109      	bne.n	8001c0a <HAL_ADC_Start_DMA+0x5e>
 8001bf6:	4b75      	ldr	r3, [pc, #468]	@ (8001dcc <HAL_ADC_Start_DMA+0x220>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	e008      	b.n	8001c1c <HAL_ADC_Start_DMA+0x70>
 8001c0a:	4b71      	ldr	r3, [pc, #452]	@ (8001dd0 <HAL_ADC_Start_DMA+0x224>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf0c      	ite	eq
 8001c16:	2301      	moveq	r3, #1
 8001c18:	2300      	movne	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80c5 	beq.w	8001dac <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fd20 	bl	8002668 <ADC_Enable>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 80b7 	bne.w	8001da2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c50:	d004      	beq.n	8001c5c <HAL_ADC_Start_DMA+0xb0>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a5c      	ldr	r2, [pc, #368]	@ (8001dc8 <HAL_ADC_Start_DMA+0x21c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d106      	bne.n	8001c6a <HAL_ADC_Start_DMA+0xbe>
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dcc <HAL_ADC_Start_DMA+0x220>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_ADC_Start_DMA+0xde>
 8001c68:	e005      	b.n	8001c76 <HAL_ADC_Start_DMA+0xca>
 8001c6a:	4b59      	ldr	r3, [pc, #356]	@ (8001dd0 <HAL_ADC_Start_DMA+0x224>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_ADC_Start_DMA+0xde>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c7e:	d004      	beq.n	8001c8a <HAL_ADC_Start_DMA+0xde>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a53      	ldr	r2, [pc, #332]	@ (8001dd4 <HAL_ADC_Start_DMA+0x228>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d115      	bne.n	8001cb6 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d036      	beq.n	8001d12 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001cb4:	e02d      	b.n	8001d12 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cca:	d004      	beq.n	8001cd6 <HAL_ADC_Start_DMA+0x12a>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3d      	ldr	r2, [pc, #244]	@ (8001dc8 <HAL_ADC_Start_DMA+0x21c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10a      	bne.n	8001cec <HAL_ADC_Start_DMA+0x140>
 8001cd6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf14      	ite	ne
 8001ce4:	2301      	movne	r3, #1
 8001ce6:	2300      	moveq	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e008      	b.n	8001cfe <HAL_ADC_Start_DMA+0x152>
 8001cec:	4b39      	ldr	r3, [pc, #228]	@ (8001dd4 <HAL_ADC_Start_DMA+0x228>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf14      	ite	ne
 8001cf8:	2301      	movne	r3, #1
 8001cfa:	2300      	moveq	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d0a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d1e:	d106      	bne.n	8001d2e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d24:	f023 0206 	bic.w	r2, r3, #6
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d2c:	e002      	b.n	8001d34 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d40:	4a25      	ldr	r2, [pc, #148]	@ (8001dd8 <HAL_ADC_Start_DMA+0x22c>)
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d48:	4a24      	ldr	r2, [pc, #144]	@ (8001ddc <HAL_ADC_Start_DMA+0x230>)
 8001d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d50:	4a23      	ldr	r2, [pc, #140]	@ (8001de0 <HAL_ADC_Start_DMA+0x234>)
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	221c      	movs	r2, #28
 8001d5a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0210 	orr.w	r2, r2, #16
 8001d6a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3340      	adds	r3, #64	@ 0x40
 8001d86:	4619      	mov	r1, r3
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f000 fe5f 	bl	8002a4e <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0204 	orr.w	r2, r2, #4
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e00d      	b.n	8001dbe <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001daa:	e008      	b.n	8001dbe <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001db8:	e001      	b.n	8001dbe <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	50000100 	.word	0x50000100
 8001dcc:	50000300 	.word	0x50000300
 8001dd0:	50000700 	.word	0x50000700
 8001dd4:	50000400 	.word	0x50000400
 8001dd8:	0800259d 	.word	0x0800259d
 8001ddc:	08002617 	.word	0x08002617
 8001de0:	08002633 	.word	0x08002633

08001de4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b09b      	sub	sp, #108	@ 0x6c
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x22>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e2c8      	b.n	8002398 <HAL_ADC_ConfigChannel+0x5b4>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f040 82ac 	bne.w	8002376 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d81c      	bhi.n	8001e60 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	461a      	mov	r2, r3
 8001e3a:	231f      	movs	r3, #31
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	4019      	ands	r1, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa00 f203 	lsl.w	r2, r0, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e5e:	e063      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	d81e      	bhi.n	8001ea6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	3b1e      	subs	r3, #30
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	4019      	ands	r1, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	3b1e      	subs	r3, #30
 8001e98:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ea4:	e040      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b0e      	cmp	r3, #14
 8001eac:	d81e      	bhi.n	8001eec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	3b3c      	subs	r3, #60	@ 0x3c
 8001ec2:	221f      	movs	r2, #31
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	4019      	ands	r1, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	3b3c      	subs	r3, #60	@ 0x3c
 8001ede:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eea:	e01d      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	3b5a      	subs	r3, #90	@ 0x5a
 8001f00:	221f      	movs	r2, #31
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4019      	ands	r1, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	3b5a      	subs	r3, #90	@ 0x5a
 8001f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 80e5 	bne.w	8002102 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b09      	cmp	r3, #9
 8001f3e:	d91c      	bls.n	8001f7a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6999      	ldr	r1, [r3, #24]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b1e      	subs	r3, #30
 8001f52:	2207      	movs	r2, #7
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4019      	ands	r1, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6898      	ldr	r0, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	3b1e      	subs	r3, #30
 8001f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	619a      	str	r2, [r3, #24]
 8001f78:	e019      	b.n	8001fae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6959      	ldr	r1, [r3, #20]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4019      	ands	r1, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6898      	ldr	r0, [r3, #8]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d84f      	bhi.n	8002070 <HAL_ADC_ConfigChannel+0x28c>
 8001fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd6:	bf00      	nop
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	0800200b 	.word	0x0800200b
 8001fe0:	0800202d 	.word	0x0800202d
 8001fe4:	0800204f 	.word	0x0800204f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fee:	4b99      	ldr	r3, [pc, #612]	@ (8002254 <HAL_ADC_ConfigChannel+0x470>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	0691      	lsls	r1, r2, #26
 8001ff8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002006:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002008:	e07b      	b.n	8002102 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002010:	4b90      	ldr	r3, [pc, #576]	@ (8002254 <HAL_ADC_ConfigChannel+0x470>)
 8002012:	4013      	ands	r3, r2
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	0691      	lsls	r1, r2, #26
 800201a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800201c:	430a      	orrs	r2, r1
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002028:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800202a:	e06a      	b.n	8002102 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002032:	4b88      	ldr	r3, [pc, #544]	@ (8002254 <HAL_ADC_ConfigChannel+0x470>)
 8002034:	4013      	ands	r3, r2
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	0691      	lsls	r1, r2, #26
 800203c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800203e:	430a      	orrs	r2, r1
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800204a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800204c:	e059      	b.n	8002102 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002054:	4b7f      	ldr	r3, [pc, #508]	@ (8002254 <HAL_ADC_ConfigChannel+0x470>)
 8002056:	4013      	ands	r3, r2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	0691      	lsls	r1, r2, #26
 800205e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002060:	430a      	orrs	r2, r1
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800206c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800206e:	e048      	b.n	8002102 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002092:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800209a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020b6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	069b      	lsls	r3, r3, #26
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d107      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020da:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	069b      	lsls	r3, r3, #26
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d107      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020fe:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002100:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d108      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x33e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x33e>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_ADC_ConfigChannel+0x340>
 8002122:	2300      	movs	r3, #0
 8002124:	2b00      	cmp	r3, #0
 8002126:	f040 8131 	bne.w	800238c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d00f      	beq.n	8002152 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2201      	movs	r2, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43da      	mvns	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	400a      	ands	r2, r1
 800214c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002150:	e049      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2201      	movs	r2, #1
 8002160:	409a      	lsls	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b09      	cmp	r3, #9
 8002172:	d91c      	bls.n	80021ae <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6999      	ldr	r1, [r3, #24]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	3b1b      	subs	r3, #27
 8002186:	2207      	movs	r2, #7
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	4019      	ands	r1, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6898      	ldr	r0, [r3, #8]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	3b1b      	subs	r3, #27
 80021a0:	fa00 f203 	lsl.w	r2, r0, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	619a      	str	r2, [r3, #24]
 80021ac:	e01b      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6959      	ldr	r1, [r3, #20]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	2207      	movs	r2, #7
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	4019      	ands	r1, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6898      	ldr	r0, [r3, #8]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	fa00 f203 	lsl.w	r2, r0, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021ee:	d004      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x416>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a18      	ldr	r2, [pc, #96]	@ (8002258 <HAL_ADC_ConfigChannel+0x474>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x41a>
 80021fa:	4b18      	ldr	r3, [pc, #96]	@ (800225c <HAL_ADC_ConfigChannel+0x478>)
 80021fc:	e000      	b.n	8002200 <HAL_ADC_ConfigChannel+0x41c>
 80021fe:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <HAL_ADC_ConfigChannel+0x47c>)
 8002200:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b10      	cmp	r3, #16
 8002208:	d105      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800220a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d015      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800221a:	2b11      	cmp	r3, #17
 800221c:	d105      	bne.n	800222a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800221e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800222e:	2b12      	cmp	r3, #18
 8002230:	f040 80ac 	bne.w	800238c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 80a5 	bne.w	800238c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800224a:	d10b      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x480>
 800224c:	4b02      	ldr	r3, [pc, #8]	@ (8002258 <HAL_ADC_ConfigChannel+0x474>)
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e023      	b.n	800229a <HAL_ADC_ConfigChannel+0x4b6>
 8002252:	bf00      	nop
 8002254:	83fff000 	.word	0x83fff000
 8002258:	50000100 	.word	0x50000100
 800225c:	50000300 	.word	0x50000300
 8002260:	50000700 	.word	0x50000700
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a4e      	ldr	r2, [pc, #312]	@ (80023a4 <HAL_ADC_ConfigChannel+0x5c0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d103      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x492>
 800226e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e011      	b.n	800229a <HAL_ADC_ConfigChannel+0x4b6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a4b      	ldr	r2, [pc, #300]	@ (80023a8 <HAL_ADC_ConfigChannel+0x5c4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x4a2>
 8002280:	4b4a      	ldr	r3, [pc, #296]	@ (80023ac <HAL_ADC_ConfigChannel+0x5c8>)
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e009      	b.n	800229a <HAL_ADC_ConfigChannel+0x4b6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a48      	ldr	r2, [pc, #288]	@ (80023ac <HAL_ADC_ConfigChannel+0x5c8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d102      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x4b2>
 8002290:	4b45      	ldr	r3, [pc, #276]	@ (80023a8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e001      	b.n	800229a <HAL_ADC_ConfigChannel+0x4b6>
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d108      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x4d6>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x4d6>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_ADC_ConfigChannel+0x4d8>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d150      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022c0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d010      	beq.n	80022e8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d107      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x4fe>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x4fe>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x500>
 80022e2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d13c      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b10      	cmp	r3, #16
 80022ee:	d11d      	bne.n	800232c <HAL_ADC_ConfigChannel+0x548>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022f8:	d118      	bne.n	800232c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80022fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002304:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002306:	4b2a      	ldr	r3, [pc, #168]	@ (80023b0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a2a      	ldr	r2, [pc, #168]	@ (80023b4 <HAL_ADC_ConfigChannel+0x5d0>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9a      	lsrs	r2, r3, #18
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800231c:	e002      	b.n	8002324 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3b01      	subs	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f9      	bne.n	800231e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800232a:	e02e      	b.n	800238a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b11      	cmp	r3, #17
 8002332:	d10b      	bne.n	800234c <HAL_ADC_ConfigChannel+0x568>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800233c:	d106      	bne.n	800234c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800233e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002348:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800234a:	e01e      	b.n	800238a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b12      	cmp	r3, #18
 8002352:	d11a      	bne.n	800238a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002354:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800235c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800235e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002360:	e013      	b.n	800238a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f043 0220 	orr.w	r2, r3, #32
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002374:	e00a      	b.n	800238c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	f043 0220 	orr.w	r2, r3, #32
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002388:	e000      	b.n	800238c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800238a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002394:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002398:	4618      	mov	r0, r3
 800239a:	376c      	adds	r7, #108	@ 0x6c
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	50000100 	.word	0x50000100
 80023a8:	50000400 	.word	0x50000400
 80023ac:	50000500 	.word	0x50000500
 80023b0:	20000004 	.word	0x20000004
 80023b4:	431bde83 	.word	0x431bde83

080023b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b099      	sub	sp, #100	@ 0x64
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023d0:	d102      	bne.n	80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80023d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	e01a      	b.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d103      	bne.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80023e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	e011      	b.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a67      	ldr	r2, [pc, #412]	@ (800258c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d102      	bne.n	80023fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023f4:	4b66      	ldr	r3, [pc, #408]	@ (8002590 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	e009      	b.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a64      	ldr	r2, [pc, #400]	@ (8002590 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d102      	bne.n	800240a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002404:	4b61      	ldr	r3, [pc, #388]	@ (800258c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	e001      	b.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b0      	b.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002422:	2302      	movs	r3, #2
 8002424:	e0a9      	b.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f040 808d 	bne.w	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 8086 	bne.w	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002454:	d004      	beq.n	8002460 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a4b      	ldr	r2, [pc, #300]	@ (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d101      	bne.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002460:	4b4c      	ldr	r3, [pc, #304]	@ (8002594 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002462:	e000      	b.n	8002466 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002464:	4b4c      	ldr	r3, [pc, #304]	@ (8002598 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002466:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d040      	beq.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002482:	035b      	lsls	r3, r3, #13
 8002484:	430b      	orrs	r3, r1
 8002486:	431a      	orrs	r2, r3
 8002488:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800248a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80024ac:	2300      	movs	r3, #0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d15c      	bne.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80024ce:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d14b      	bne.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80024d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024dc:	f023 030f 	bic.w	r3, r3, #15
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	6811      	ldr	r1, [r2, #0]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	6892      	ldr	r2, [r2, #8]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	431a      	orrs	r2, r3
 80024ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024ee:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024f0:	e03c      	b.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024fc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d108      	bne.n	800251e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800251e:	2300      	movs	r3, #0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d123      	bne.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002540:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d112      	bne.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800254e:	f023 030f 	bic.w	r3, r3, #15
 8002552:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002554:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002556:	e009      	b.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	f043 0220 	orr.w	r2, r3, #32
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800256a:	e000      	b.n	800256e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800256c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002576:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800257a:	4618      	mov	r0, r3
 800257c:	3764      	adds	r7, #100	@ 0x64
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	50000100 	.word	0x50000100
 800258c:	50000400 	.word	0x50000400
 8002590:	50000500 	.word	0x50000500
 8002594:	50000300 	.word	0x50000300
 8002598:	50000700 	.word	0x50000700

0800259c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d126      	bne.n	8002604 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d115      	bne.n	80025fc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d111      	bne.n	80025fc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d105      	bne.n	80025fc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7fe fd4f 	bl	80010a0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002602:	e004      	b.n	800260e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7fe fd2b 	bl	8001080 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7ff f8a3 	bl	80017a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d108      	bne.n	8002694 <ADC_Enable+0x2c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <ADC_Enable+0x2c>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <ADC_Enable+0x2e>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d143      	bne.n	8002722 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	4b22      	ldr	r3, [pc, #136]	@ (800272c <ADC_Enable+0xc4>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00d      	beq.n	80026c4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e02f      	b.n	8002724 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80026d4:	f7ff f85a 	bl	800178c <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026da:	e01b      	b.n	8002714 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026dc:	f7ff f856 	bl	800178c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d914      	bls.n	8002714 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d00d      	beq.n	8002714 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	f043 0210 	orr.w	r2, r3, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e007      	b.n	8002724 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d1dc      	bne.n	80026dc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	8000003f 	.word	0x8000003f

08002730 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d108      	bne.n	800275c <ADC_Disable+0x2c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <ADC_Disable+0x2c>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <ADC_Disable+0x2e>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d047      	beq.n	80027f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030d 	and.w	r3, r3, #13
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10f      	bne.n	8002790 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0202 	orr.w	r2, r2, #2
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2203      	movs	r2, #3
 8002786:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002788:	f7ff f800 	bl	800178c <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800278e:	e029      	b.n	80027e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	f043 0210 	orr.w	r2, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e023      	b.n	80027f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ac:	f7fe ffee 	bl	800178c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d914      	bls.n	80027e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d10d      	bne.n	80027e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	f043 0210 	orr.w	r2, r3, #16
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e007      	b.n	80027f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d0dc      	beq.n	80027ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	@ (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	@ (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4907      	ldr	r1, [pc, #28]	@ (8002898 <__NVIC_EnableIRQ+0x38>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0a      	blt.n	80028c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	490c      	ldr	r1, [pc, #48]	@ (80028e8 <__NVIC_SetPriority+0x4c>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	440b      	add	r3, r1
 80028c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c4:	e00a      	b.n	80028dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4908      	ldr	r1, [pc, #32]	@ (80028ec <__NVIC_SetPriority+0x50>)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3b04      	subs	r3, #4
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	440b      	add	r3, r1
 80028da:	761a      	strb	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	@ 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f1c3 0307 	rsb	r3, r3, #7
 800290a:	2b04      	cmp	r3, #4
 800290c:	bf28      	it	cs
 800290e:	2304      	movcs	r3, #4
 8002910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3304      	adds	r3, #4
 8002916:	2b06      	cmp	r3, #6
 8002918:	d902      	bls.n	8002920 <NVIC_EncodePriority+0x30>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3b03      	subs	r3, #3
 800291e:	e000      	b.n	8002922 <NVIC_EncodePriority+0x32>
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002938:	f04f 31ff 	mov.w	r1, #4294967295
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	43d9      	mvns	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	4313      	orrs	r3, r2
         );
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	@ 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff4c 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800297e:	f7ff ff61 	bl	8002844 <__NVIC_GetPriorityGrouping>
 8002982:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	6978      	ldr	r0, [r7, #20]
 800298a:	f7ff ffb1 	bl	80028f0 <NVIC_EncodePriority>
 800298e:	4602      	mov	r2, r0
 8002990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff80 	bl	800289c <__NVIC_SetPriority>
}
 800299c:	bf00      	nop
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff54 	bl	8002860 <__NVIC_EnableIRQ>
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e037      	b.n	8002a46 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029ec:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80029f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f941 	bl	8002cb0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_DMA_Start_IT+0x20>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e04a      	b.n	8002b04 <HAL_DMA_Start_IT+0xb6>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d13a      	bne.n	8002af6 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f8d4 	bl	8002c52 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 020e 	orr.w	r2, r2, #14
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e00f      	b.n	8002ae4 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 020a 	orr.w	r2, r2, #10
 8002ad2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0204 	bic.w	r2, r2, #4
 8002ae2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e005      	b.n	8002b02 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	2204      	movs	r2, #4
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d024      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x72>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01f      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d107      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0204 	bic.w	r2, r2, #4
 8002b5a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	2104      	movs	r1, #4
 8002b66:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d06a      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b7c:	e065      	b.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	2202      	movs	r2, #2
 8002b84:	409a      	lsls	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d02c      	beq.n	8002be8 <HAL_DMA_IRQHandler+0xdc>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d027      	beq.n	8002be8 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 020a 	bic.w	r2, r2, #10
 8002bb4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bcc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d035      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002be6:	e030      	b.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	2208      	movs	r2, #8
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d028      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d023      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 020e 	bic.w	r2, r2, #14
 8002c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d004      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
    }
  }
}
 8002c48:	e7ff      	b.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c68:	2101      	movs	r1, #1
 8002c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d108      	bne.n	8002c92 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c90:	e007      	b.n	8002ca2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	60da      	str	r2, [r3, #12]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <DMA_CalcBaseAndBitshift+0x60>)
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d80f      	bhi.n	8002ce4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <DMA_CalcBaseAndBitshift+0x64>)
 8002ccc:	4413      	add	r3, r2
 8002cce:	4a12      	ldr	r2, [pc, #72]	@ (8002d18 <DMA_CalcBaseAndBitshift+0x68>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0f      	ldr	r2, [pc, #60]	@ (8002d1c <DMA_CalcBaseAndBitshift+0x6c>)
 8002ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002ce2:	e00e      	b.n	8002d02 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b0d      	ldr	r3, [pc, #52]	@ (8002d20 <DMA_CalcBaseAndBitshift+0x70>)
 8002cec:	4413      	add	r3, r2
 8002cee:	4a0a      	ldr	r2, [pc, #40]	@ (8002d18 <DMA_CalcBaseAndBitshift+0x68>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a09      	ldr	r2, [pc, #36]	@ (8002d24 <DMA_CalcBaseAndBitshift+0x74>)
 8002d00:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40020407 	.word	0x40020407
 8002d14:	bffdfff8 	.word	0xbffdfff8
 8002d18:	cccccccd 	.word	0xcccccccd
 8002d1c:	40020000 	.word	0x40020000
 8002d20:	bffdfbf8 	.word	0xbffdfbf8
 8002d24:	40020400 	.word	0x40020400

08002d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d36:	e160      	b.n	8002ffa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8152 	beq.w	8002ff4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d005      	beq.n	8002d68 <HAL_GPIO_Init+0x40>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d130      	bne.n	8002dca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d9e:	2201      	movs	r2, #1
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 0201 	and.w	r2, r3, #1
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d017      	beq.n	8002e06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	2203      	movs	r2, #3
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4013      	ands	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d123      	bne.n	8002e5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	08da      	lsrs	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3208      	adds	r2, #8
 8002e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	08da      	lsrs	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3208      	adds	r2, #8
 8002e54:	6939      	ldr	r1, [r7, #16]
 8002e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	2203      	movs	r2, #3
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0203 	and.w	r2, r3, #3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80ac 	beq.w	8002ff4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9c:	4b5e      	ldr	r3, [pc, #376]	@ (8003018 <HAL_GPIO_Init+0x2f0>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4a5d      	ldr	r2, [pc, #372]	@ (8003018 <HAL_GPIO_Init+0x2f0>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6193      	str	r3, [r2, #24]
 8002ea8:	4b5b      	ldr	r3, [pc, #364]	@ (8003018 <HAL_GPIO_Init+0x2f0>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002eb4:	4a59      	ldr	r2, [pc, #356]	@ (800301c <HAL_GPIO_Init+0x2f4>)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	3302      	adds	r3, #2
 8002ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	220f      	movs	r2, #15
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ede:	d025      	beq.n	8002f2c <HAL_GPIO_Init+0x204>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a4f      	ldr	r2, [pc, #316]	@ (8003020 <HAL_GPIO_Init+0x2f8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d01f      	beq.n	8002f28 <HAL_GPIO_Init+0x200>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a4e      	ldr	r2, [pc, #312]	@ (8003024 <HAL_GPIO_Init+0x2fc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d019      	beq.n	8002f24 <HAL_GPIO_Init+0x1fc>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a4d      	ldr	r2, [pc, #308]	@ (8003028 <HAL_GPIO_Init+0x300>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <HAL_GPIO_Init+0x1f8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a4c      	ldr	r2, [pc, #304]	@ (800302c <HAL_GPIO_Init+0x304>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00d      	beq.n	8002f1c <HAL_GPIO_Init+0x1f4>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a4b      	ldr	r2, [pc, #300]	@ (8003030 <HAL_GPIO_Init+0x308>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d007      	beq.n	8002f18 <HAL_GPIO_Init+0x1f0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003034 <HAL_GPIO_Init+0x30c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <HAL_GPIO_Init+0x1ec>
 8002f10:	2306      	movs	r3, #6
 8002f12:	e00c      	b.n	8002f2e <HAL_GPIO_Init+0x206>
 8002f14:	2307      	movs	r3, #7
 8002f16:	e00a      	b.n	8002f2e <HAL_GPIO_Init+0x206>
 8002f18:	2305      	movs	r3, #5
 8002f1a:	e008      	b.n	8002f2e <HAL_GPIO_Init+0x206>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	e006      	b.n	8002f2e <HAL_GPIO_Init+0x206>
 8002f20:	2303      	movs	r3, #3
 8002f22:	e004      	b.n	8002f2e <HAL_GPIO_Init+0x206>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e002      	b.n	8002f2e <HAL_GPIO_Init+0x206>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_GPIO_Init+0x206>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	f002 0203 	and.w	r2, r2, #3
 8002f34:	0092      	lsls	r2, r2, #2
 8002f36:	4093      	lsls	r3, r2
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f3e:	4937      	ldr	r1, [pc, #220]	@ (800301c <HAL_GPIO_Init+0x2f4>)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	3302      	adds	r3, #2
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003038 <HAL_GPIO_Init+0x310>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f70:	4a31      	ldr	r2, [pc, #196]	@ (8003038 <HAL_GPIO_Init+0x310>)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f76:	4b30      	ldr	r3, [pc, #192]	@ (8003038 <HAL_GPIO_Init+0x310>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f9a:	4a27      	ldr	r2, [pc, #156]	@ (8003038 <HAL_GPIO_Init+0x310>)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa0:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <HAL_GPIO_Init+0x310>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4013      	ands	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8003038 <HAL_GPIO_Init+0x310>)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fca:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <HAL_GPIO_Init+0x310>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fee:	4a12      	ldr	r2, [pc, #72]	@ (8003038 <HAL_GPIO_Init+0x310>)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	f47f ae97 	bne.w	8002d38 <HAL_GPIO_Init+0x10>
  }
}
 800300a:	bf00      	nop
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40021000 	.word	0x40021000
 800301c:	40010000 	.word	0x40010000
 8003020:	48000400 	.word	0x48000400
 8003024:	48000800 	.word	0x48000800
 8003028:	48000c00 	.word	0x48000c00
 800302c:	48001000 	.word	0x48001000
 8003030:	48001400 	.word	0x48001400
 8003034:	48001800 	.word	0x48001800
 8003038:	40010400 	.word	0x40010400

0800303c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
 8003048:	4613      	mov	r3, r2
 800304a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800304c:	787b      	ldrb	r3, [r7, #1]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003058:	e002      	b.n	8003060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800305a:	887a      	ldrh	r2, [r7, #2]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	041a      	lsls	r2, r3, #16
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	43d9      	mvns	r1, r3
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	400b      	ands	r3, r1
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	619a      	str	r2, [r3, #24]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0b9      	b.n	8003226 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe fa3a 	bl	8001540 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2203      	movs	r2, #3
 80030d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f002 fd58 	bl	8005b8e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	e03e      	b.n	8003162 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	3311      	adds	r3, #17
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	3310      	adds	r3, #16
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	3313      	adds	r3, #19
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	3320      	adds	r3, #32
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	440b      	add	r3, r1
 8003142:	3324      	adds	r3, #36	@ 0x24
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	3301      	adds	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	791b      	ldrb	r3, [r3, #4]
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	429a      	cmp	r2, r3
 800316a:	d3bb      	bcc.n	80030e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	e044      	b.n	80031fc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	440b      	add	r3, r1
 80031ac:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	440b      	add	r3, r1
 80031ee:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	3301      	adds	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	791b      	ldrb	r3, [r3, #4]
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	429a      	cmp	r2, r3
 8003204:	d3b5      	bcc.n	8003172 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003212:	f002 fcd7 	bl	8005bc4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003236:	af00      	add	r7, sp, #0
 8003238:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003240:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003246:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	f001 b83a 	b.w	80042ca <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003256:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800325a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 816f 	beq.w	800354a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800326c:	4bb5      	ldr	r3, [pc, #724]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b04      	cmp	r3, #4
 8003276:	d00c      	beq.n	8003292 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003278:	4bb2      	ldr	r3, [pc, #712]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b08      	cmp	r3, #8
 8003282:	d15c      	bne.n	800333e <HAL_RCC_OscConfig+0x10e>
 8003284:	4baf      	ldr	r3, [pc, #700]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003290:	d155      	bne.n	800333e <HAL_RCC_OscConfig+0x10e>
 8003292:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003296:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d102      	bne.n	80032c4 <HAL_RCC_OscConfig+0x94>
 80032be:	4ba1      	ldr	r3, [pc, #644]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	e015      	b.n	80032f0 <HAL_RCC_OscConfig+0xc0>
 80032c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032c8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80032d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032dc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80032e0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80032ec:	4b95      	ldr	r3, [pc, #596]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032f4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80032f8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80032fc:	fa92 f2a2 	rbit	r2, r2
 8003300:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8003304:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003308:	fab2 f282 	clz	r2, r2
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	f042 0220 	orr.w	r2, r2, #32
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	f002 021f 	and.w	r2, r2, #31
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f202 	lsl.w	r2, r1, r2
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8111 	beq.w	8003548 <HAL_RCC_OscConfig+0x318>
 8003326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800332a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 8108 	bne.w	8003548 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f000 bfc6 	b.w	80042ca <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003342:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334e:	d106      	bne.n	800335e <HAL_RCC_OscConfig+0x12e>
 8003350:	4b7c      	ldr	r3, [pc, #496]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a7b      	ldr	r2, [pc, #492]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 8003356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e036      	b.n	80033cc <HAL_RCC_OscConfig+0x19c>
 800335e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003362:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x158>
 800336e:	4b75      	ldr	r3, [pc, #468]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a74      	ldr	r2, [pc, #464]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 8003374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b72      	ldr	r3, [pc, #456]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a71      	ldr	r2, [pc, #452]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 8003380:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e021      	b.n	80033cc <HAL_RCC_OscConfig+0x19c>
 8003388:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800338c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x184>
 800339a:	4b6a      	ldr	r3, [pc, #424]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a69      	ldr	r2, [pc, #420]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 80033a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4b67      	ldr	r3, [pc, #412]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a66      	ldr	r2, [pc, #408]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e00b      	b.n	80033cc <HAL_RCC_OscConfig+0x19c>
 80033b4:	4b63      	ldr	r3, [pc, #396]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a62      	ldr	r2, [pc, #392]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 80033ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b60      	ldr	r3, [pc, #384]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a5f      	ldr	r2, [pc, #380]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 80033c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ca:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d059      	beq.n	8003490 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe f9d6 	bl	800178c <HAL_GetTick>
 80033e0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e6:	f7fe f9d1 	bl	800178c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d902      	bls.n	80033fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	f000 bf67 	b.w	80042ca <HAL_RCC_OscConfig+0x109a>
 80033fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003400:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003410:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d102      	bne.n	800342e <HAL_RCC_OscConfig+0x1fe>
 8003428:	4b46      	ldr	r3, [pc, #280]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	e015      	b.n	800345a <HAL_RCC_OscConfig+0x22a>
 800342e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003432:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003442:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003446:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800344a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003456:	4b3b      	ldr	r3, [pc, #236]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800345e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003462:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003466:	fa92 f2a2 	rbit	r2, r2
 800346a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800346e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003472:	fab2 f282 	clz	r2, r2
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	f042 0220 	orr.w	r2, r2, #32
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	f002 021f 	and.w	r2, r2, #31
 8003482:	2101      	movs	r1, #1
 8003484:	fa01 f202 	lsl.w	r2, r1, r2
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0ab      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1b6>
 800348e:	e05c      	b.n	800354a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fe f97c 	bl	800178c <HAL_GetTick>
 8003494:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800349a:	f7fe f977 	bl	800178c <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	@ 0x64
 80034a8:	d902      	bls.n	80034b0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	f000 bf0d 	b.w	80042ca <HAL_RCC_OscConfig+0x109a>
 80034b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034b4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80034c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <HAL_RCC_OscConfig+0x2b2>
 80034dc:	4b19      	ldr	r3, [pc, #100]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	e015      	b.n	800350e <HAL_RCC_OscConfig+0x2de>
 80034e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034e6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80034f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034fa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80034fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <HAL_RCC_OscConfig+0x314>)
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003512:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003516:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800351a:	fa92 f2a2 	rbit	r2, r2
 800351e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003522:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003526:	fab2 f282 	clz	r2, r2
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	f042 0220 	orr.w	r2, r2, #32
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	f002 021f 	and.w	r2, r2, #31
 8003536:	2101      	movs	r1, #1
 8003538:	fa01 f202 	lsl.w	r2, r1, r2
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ab      	bne.n	800349a <HAL_RCC_OscConfig+0x26a>
 8003542:	e002      	b.n	800354a <HAL_RCC_OscConfig+0x31a>
 8003544:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800354e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 817f 	beq.w	800385e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003560:	4ba7      	ldr	r3, [pc, #668]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00c      	beq.n	8003586 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800356c:	4ba4      	ldr	r3, [pc, #656]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b08      	cmp	r3, #8
 8003576:	d173      	bne.n	8003660 <HAL_RCC_OscConfig+0x430>
 8003578:	4ba1      	ldr	r3, [pc, #644]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003584:	d16c      	bne.n	8003660 <HAL_RCC_OscConfig+0x430>
 8003586:	2302      	movs	r3, #2
 8003588:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003598:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d102      	bne.n	80035b6 <HAL_RCC_OscConfig+0x386>
 80035b0:	4b93      	ldr	r3, [pc, #588]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	e013      	b.n	80035de <HAL_RCC_OscConfig+0x3ae>
 80035b6:	2302      	movs	r3, #2
 80035b8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80035c8:	2302      	movs	r3, #2
 80035ca:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80035ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80035da:	4b89      	ldr	r3, [pc, #548]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	2202      	movs	r2, #2
 80035e0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80035e4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80035e8:	fa92 f2a2 	rbit	r2, r2
 80035ec:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80035f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80035f4:	fab2 f282 	clz	r2, r2
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f042 0220 	orr.w	r2, r2, #32
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	f002 021f 	and.w	r2, r2, #31
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f202 	lsl.w	r2, r1, r2
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCC_OscConfig+0x3f6>
 8003610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003614:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d002      	beq.n	8003626 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f000 be52 	b.w	80042ca <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003626:	4b76      	ldr	r3, [pc, #472]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800362e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003632:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	21f8      	movs	r1, #248	@ 0xf8
 800363c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003644:	fa91 f1a1 	rbit	r1, r1
 8003648:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800364c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003650:	fab1 f181 	clz	r1, r1
 8003654:	b2c9      	uxtb	r1, r1
 8003656:	408b      	lsls	r3, r1
 8003658:	4969      	ldr	r1, [pc, #420]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	e0fe      	b.n	800385e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003660:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003664:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8088 	beq.w	8003782 <HAL_RCC_OscConfig+0x552>
 8003672:	2301      	movs	r3, #1
 8003674:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003684:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003692:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	461a      	mov	r2, r3
 800369a:	2301      	movs	r3, #1
 800369c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369e:	f7fe f875 	bl	800178c <HAL_GetTick>
 80036a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a8:	f7fe f870 	bl	800178c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d902      	bls.n	80036be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	f000 be06 	b.w	80042ca <HAL_RCC_OscConfig+0x109a>
 80036be:	2302      	movs	r3, #2
 80036c0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80036d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d102      	bne.n	80036ee <HAL_RCC_OscConfig+0x4be>
 80036e8:	4b45      	ldr	r3, [pc, #276]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	e013      	b.n	8003716 <HAL_RCC_OscConfig+0x4e6>
 80036ee:	2302      	movs	r3, #2
 80036f0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003700:	2302      	movs	r3, #2
 8003702:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003706:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003712:	4b3b      	ldr	r3, [pc, #236]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	2202      	movs	r2, #2
 8003718:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800371c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003720:	fa92 f2a2 	rbit	r2, r2
 8003724:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003728:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800372c:	fab2 f282 	clz	r2, r2
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	f042 0220 	orr.w	r2, r2, #32
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	f002 021f 	and.w	r2, r2, #31
 800373c:	2101      	movs	r1, #1
 800373e:	fa01 f202 	lsl.w	r2, r1, r2
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0af      	beq.n	80036a8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003748:	4b2d      	ldr	r3, [pc, #180]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003750:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003754:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	21f8      	movs	r1, #248	@ 0xf8
 800375e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003766:	fa91 f1a1 	rbit	r1, r1
 800376a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800376e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003772:	fab1 f181 	clz	r1, r1
 8003776:	b2c9      	uxtb	r1, r1
 8003778:	408b      	lsls	r3, r1
 800377a:	4921      	ldr	r1, [pc, #132]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]
 8003780:	e06d      	b.n	800385e <HAL_RCC_OscConfig+0x62e>
 8003782:	2301      	movs	r3, #1
 8003784:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800378c:	fa93 f3a3 	rbit	r3, r3
 8003790:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003794:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003798:	fab3 f383 	clz	r3, r3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037a2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	461a      	mov	r2, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fd ffed 	bl	800178c <HAL_GetTick>
 80037b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fd ffe8 	bl	800178c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	f000 bd7e 	b.w	80042ca <HAL_RCC_OscConfig+0x109a>
 80037ce:	2302      	movs	r3, #2
 80037d0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80037e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e4:	fab3 f383 	clz	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_RCC_OscConfig+0x5d4>
 80037f8:	4b01      	ldr	r3, [pc, #4]	@ (8003800 <HAL_RCC_OscConfig+0x5d0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	e016      	b.n	800382c <HAL_RCC_OscConfig+0x5fc>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	2302      	movs	r3, #2
 8003806:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003816:	2302      	movs	r3, #2
 8003818:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800381c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003828:	4bbf      	ldr	r3, [pc, #764]	@ (8003b28 <HAL_RCC_OscConfig+0x8f8>)
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	2202      	movs	r2, #2
 800382e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003832:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003836:	fa92 f2a2 	rbit	r2, r2
 800383a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800383e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003842:	fab2 f282 	clz	r2, r2
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	f042 0220 	orr.w	r2, r2, #32
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	f002 021f 	and.w	r2, r2, #31
 8003852:	2101      	movs	r1, #1
 8003854:	fa01 f202 	lsl.w	r2, r1, r2
 8003858:	4013      	ands	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ac      	bne.n	80037b8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003862:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8113 	beq.w	8003a9a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003874:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003878:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d07c      	beq.n	800397e <HAL_RCC_OscConfig+0x74e>
 8003884:	2301      	movs	r3, #1
 8003886:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003896:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	4ba2      	ldr	r3, [pc, #648]	@ (8003b2c <HAL_RCC_OscConfig+0x8fc>)
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	461a      	mov	r2, r3
 80038aa:	2301      	movs	r3, #1
 80038ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ae:	f7fd ff6d 	bl	800178c <HAL_GetTick>
 80038b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fd ff68 	bl	800178c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d902      	bls.n	80038ce <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	f000 bcfe 	b.w	80042ca <HAL_RCC_OscConfig+0x109a>
 80038ce:	2302      	movs	r3, #2
 80038d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038d8:	fa93 f2a3 	rbit	r2, r3
 80038dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038ee:	2202      	movs	r2, #2
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	fa93 f2a3 	rbit	r2, r3
 8003900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800390e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003912:	2202      	movs	r2, #2
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800391a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	fa93 f2a3 	rbit	r2, r3
 8003924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003928:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800392c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392e:	4b7e      	ldr	r3, [pc, #504]	@ (8003b28 <HAL_RCC_OscConfig+0x8f8>)
 8003930:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003932:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003936:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800393a:	2102      	movs	r1, #2
 800393c:	6019      	str	r1, [r3, #0]
 800393e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003942:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	fa93 f1a3 	rbit	r1, r3
 800394c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003950:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003954:	6019      	str	r1, [r3, #0]
  return result;
 8003956:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800395a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d09d      	beq.n	80038b8 <HAL_RCC_OscConfig+0x688>
 800397c:	e08d      	b.n	8003a9a <HAL_RCC_OscConfig+0x86a>
 800397e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003982:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800398e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	fa93 f2a3 	rbit	r2, r3
 8003998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800399c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80039a0:	601a      	str	r2, [r3, #0]
  return result;
 80039a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80039aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b5d      	ldr	r3, [pc, #372]	@ (8003b2c <HAL_RCC_OscConfig+0x8fc>)
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	461a      	mov	r2, r3
 80039bc:	2300      	movs	r3, #0
 80039be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c0:	f7fd fee4 	bl	800178c <HAL_GetTick>
 80039c4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c8:	e00a      	b.n	80039e0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ca:	f7fd fedf 	bl	800178c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	f000 bc75 	b.w	80042ca <HAL_RCC_OscConfig+0x109a>
 80039e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80039e8:	2202      	movs	r2, #2
 80039ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	fa93 f2a3 	rbit	r2, r3
 80039fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	fa93 f2a3 	rbit	r2, r3
 8003a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a2c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a30:	2202      	movs	r2, #2
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a38:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	fa93 f2a3 	rbit	r2, r3
 8003a42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a46:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4c:	4b36      	ldr	r3, [pc, #216]	@ (8003b28 <HAL_RCC_OscConfig+0x8f8>)
 8003a4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a58:	2102      	movs	r1, #2
 8003a5a:	6019      	str	r1, [r3, #0]
 8003a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	fa93 f1a3 	rbit	r1, r3
 8003a6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a6e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003a72:	6019      	str	r1, [r3, #0]
  return result;
 8003a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a78:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	2101      	movs	r1, #1
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d197      	bne.n	80039ca <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 81a5 	beq.w	8003dfa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b28 <HAL_RCC_OscConfig+0x8f8>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d116      	bne.n	8003af0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	4b19      	ldr	r3, [pc, #100]	@ (8003b28 <HAL_RCC_OscConfig+0x8f8>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	4a18      	ldr	r2, [pc, #96]	@ (8003b28 <HAL_RCC_OscConfig+0x8f8>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003acc:	61d3      	str	r3, [r2, #28]
 8003ace:	4b16      	ldr	r3, [pc, #88]	@ (8003b28 <HAL_RCC_OscConfig+0x8f8>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ada:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ae8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b30 <HAL_RCC_OscConfig+0x900>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d121      	bne.n	8003b40 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <HAL_RCC_OscConfig+0x900>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0b      	ldr	r2, [pc, #44]	@ (8003b30 <HAL_RCC_OscConfig+0x900>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b06:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b08:	f7fd fe40 	bl	800178c <HAL_GetTick>
 8003b0c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	e010      	b.n	8003b34 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b12:	f7fd fe3b 	bl	800178c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	@ 0x64
 8003b20:	d908      	bls.n	8003b34 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e3d1      	b.n	80042ca <HAL_RCC_OscConfig+0x109a>
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	10908120 	.word	0x10908120
 8003b30:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b34:	4b8d      	ldr	r3, [pc, #564]	@ (8003d6c <HAL_RCC_OscConfig+0xb3c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0e8      	beq.n	8003b12 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d106      	bne.n	8003b5e <HAL_RCC_OscConfig+0x92e>
 8003b50:	4b87      	ldr	r3, [pc, #540]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4a86      	ldr	r2, [pc, #536]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6213      	str	r3, [r2, #32]
 8003b5c:	e035      	b.n	8003bca <HAL_RCC_OscConfig+0x99a>
 8003b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x958>
 8003b6e:	4b80      	ldr	r3, [pc, #512]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4a7f      	ldr	r2, [pc, #508]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	6213      	str	r3, [r2, #32]
 8003b7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	6213      	str	r3, [r2, #32]
 8003b86:	e020      	b.n	8003bca <HAL_RCC_OscConfig+0x99a>
 8003b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x982>
 8003b98:	4b75      	ldr	r3, [pc, #468]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	4a74      	ldr	r2, [pc, #464]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	6213      	str	r3, [r2, #32]
 8003ba4:	4b72      	ldr	r3, [pc, #456]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a71      	ldr	r2, [pc, #452]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	e00b      	b.n	8003bca <HAL_RCC_OscConfig+0x99a>
 8003bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4a6e      	ldr	r2, [pc, #440]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	6213      	str	r3, [r2, #32]
 8003bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4a6b      	ldr	r2, [pc, #428]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8081 	beq.w	8003cde <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bdc:	f7fd fdd6 	bl	800178c <HAL_GetTick>
 8003be0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	e00b      	b.n	8003bfe <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fd fdd1 	bl	800178c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e365      	b.n	80042ca <HAL_RCC_OscConfig+0x109a>
 8003bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c02:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c06:	2202      	movs	r2, #2
 8003c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c0e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	fa93 f2a3 	rbit	r2, r3
 8003c18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c1c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c26:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c32:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	fa93 f2a3 	rbit	r2, r3
 8003c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c40:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c44:	601a      	str	r2, [r3, #0]
  return result;
 8003c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c4a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f043 0302 	orr.w	r3, r3, #2
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d102      	bne.n	8003c6a <HAL_RCC_OscConfig+0xa3a>
 8003c64:	4b42      	ldr	r3, [pc, #264]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	e013      	b.n	8003c92 <HAL_RCC_OscConfig+0xa62>
 8003c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c6e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003c72:	2202      	movs	r2, #2
 8003c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c7a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f2a3 	rbit	r2, r3
 8003c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c88:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	4b38      	ldr	r3, [pc, #224]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c96:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	6011      	str	r1, [r2, #0]
 8003c9e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ca2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	fa92 f1a2 	rbit	r1, r2
 8003cac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cb0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003cb4:	6011      	str	r1, [r2, #0]
  return result;
 8003cb6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cba:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	fab2 f282 	clz	r2, r2
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	f002 021f 	and.w	r2, r2, #31
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d084      	beq.n	8003be6 <HAL_RCC_OscConfig+0x9b6>
 8003cdc:	e083      	b.n	8003de6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cde:	f7fd fd55 	bl	800178c <HAL_GetTick>
 8003ce2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fd fd50 	bl	800178c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e2e4      	b.n	80042ca <HAL_RCC_OscConfig+0x109a>
 8003d00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d04:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003d08:	2202      	movs	r2, #2
 8003d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d10:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	fa93 f2a3 	rbit	r2, r3
 8003d1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d1e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d34:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	fa93 f2a3 	rbit	r2, r3
 8003d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d42:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d46:	601a      	str	r2, [r3, #0]
  return result;
 8003d48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d4c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f043 0302 	orr.w	r3, r3, #2
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d106      	bne.n	8003d74 <HAL_RCC_OscConfig+0xb44>
 8003d66:	4b02      	ldr	r3, [pc, #8]	@ (8003d70 <HAL_RCC_OscConfig+0xb40>)
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	e017      	b.n	8003d9c <HAL_RCC_OscConfig+0xb6c>
 8003d6c:	40007000 	.word	0x40007000
 8003d70:	40021000 	.word	0x40021000
 8003d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d78:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d84:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	fa93 f2a3 	rbit	r2, r3
 8003d8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d92:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	4bb3      	ldr	r3, [pc, #716]	@ (8004068 <HAL_RCC_OscConfig+0xe38>)
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003da0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003da4:	2102      	movs	r1, #2
 8003da6:	6011      	str	r1, [r2, #0]
 8003da8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003dac:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	fa92 f1a2 	rbit	r1, r2
 8003db6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003dba:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003dbe:	6011      	str	r1, [r2, #0]
  return result;
 8003dc0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003dc4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	fab2 f282 	clz	r2, r2
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	f002 021f 	and.w	r2, r2, #31
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d180      	bne.n	8003ce8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003de6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dee:	4b9e      	ldr	r3, [pc, #632]	@ (8004068 <HAL_RCC_OscConfig+0xe38>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	4a9d      	ldr	r2, [pc, #628]	@ (8004068 <HAL_RCC_OscConfig+0xe38>)
 8003df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003df8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dfe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 825e 	beq.w	80042c8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e0c:	4b96      	ldr	r3, [pc, #600]	@ (8004068 <HAL_RCC_OscConfig+0xe38>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	f000 821f 	beq.w	8004258 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	f040 8170 	bne.w	800410c <HAL_RCC_OscConfig+0xedc>
 8003e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e30:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e3e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	fa93 f2a3 	rbit	r2, r3
 8003e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e4c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003e50:	601a      	str	r2, [r3, #0]
  return result;
 8003e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e56:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003e5a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5c:	fab3 f383 	clz	r3, r3
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e66:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fd fc8b 	bl	800178c <HAL_GetTick>
 8003e76:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7a:	e009      	b.n	8003e90 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fd fc86 	bl	800178c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e21c      	b.n	80042ca <HAL_RCC_OscConfig+0x109a>
 8003e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e94:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003e98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ea2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	fa93 f2a3 	rbit	r2, r3
 8003eac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eb0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003eb4:	601a      	str	r2, [r3, #0]
  return result;
 8003eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ebe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d102      	bne.n	8003eda <HAL_RCC_OscConfig+0xcaa>
 8003ed4:	4b64      	ldr	r3, [pc, #400]	@ (8004068 <HAL_RCC_OscConfig+0xe38>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	e027      	b.n	8003f2a <HAL_RCC_OscConfig+0xcfa>
 8003eda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ede:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003ee2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eec:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	fa93 f2a3 	rbit	r2, r3
 8003ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003efa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f04:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003f08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f12:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	fa93 f2a3 	rbit	r2, r3
 8003f1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f20:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	4b50      	ldr	r3, [pc, #320]	@ (8004068 <HAL_RCC_OscConfig+0xe38>)
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f2e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f32:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f36:	6011      	str	r1, [r2, #0]
 8003f38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f3c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	fa92 f1a2 	rbit	r1, r2
 8003f46:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f4a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003f4e:	6011      	str	r1, [r2, #0]
  return result;
 8003f50:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f54:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	fab2 f282 	clz	r2, r2
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f042 0220 	orr.w	r2, r2, #32
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	f002 021f 	and.w	r2, r2, #31
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d182      	bne.n	8003e7c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f76:	4b3c      	ldr	r3, [pc, #240]	@ (8004068 <HAL_RCC_OscConfig+0xe38>)
 8003f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7a:	f023 020f 	bic.w	r2, r3, #15
 8003f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	4937      	ldr	r1, [pc, #220]	@ (8004068 <HAL_RCC_OscConfig+0xe38>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003f90:	4b35      	ldr	r3, [pc, #212]	@ (8004068 <HAL_RCC_OscConfig+0xe38>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6a19      	ldr	r1, [r3, #32]
 8003fa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fa8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	492d      	ldr	r1, [pc, #180]	@ (8004068 <HAL_RCC_OscConfig+0xe38>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
 8003fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fbc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003fc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	fa93 f2a3 	rbit	r2, r3
 8003fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fd8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003fdc:	601a      	str	r2, [r3, #0]
  return result;
 8003fde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fe2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003fe6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe8:	fab3 f383 	clz	r3, r3
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ff2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fbc5 	bl	800178c <HAL_GetTick>
 8004002:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004006:	e009      	b.n	800401c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004008:	f7fd fbc0 	bl	800178c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e156      	b.n	80042ca <HAL_RCC_OscConfig+0x109a>
 800401c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004020:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004024:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004028:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800402e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	fa93 f2a3 	rbit	r2, r3
 8004038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800403c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004040:	601a      	str	r2, [r3, #0]
  return result;
 8004042:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004046:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800404a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800404c:	fab3 f383 	clz	r3, r3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d105      	bne.n	800406c <HAL_RCC_OscConfig+0xe3c>
 8004060:	4b01      	ldr	r3, [pc, #4]	@ (8004068 <HAL_RCC_OscConfig+0xe38>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	e02a      	b.n	80040bc <HAL_RCC_OscConfig+0xe8c>
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004070:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004074:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800407e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	fa93 f2a3 	rbit	r2, r3
 8004088:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800408c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004096:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800409a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040a4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	fa93 f2a3 	rbit	r2, r3
 80040ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040b2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	4b86      	ldr	r3, [pc, #536]	@ (80042d4 <HAL_RCC_OscConfig+0x10a4>)
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80040c0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040c8:	6011      	str	r1, [r2, #0]
 80040ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80040ce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	fa92 f1a2 	rbit	r1, r2
 80040d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80040dc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80040e0:	6011      	str	r1, [r2, #0]
  return result;
 80040e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80040e6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	fab2 f282 	clz	r2, r2
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	f042 0220 	orr.w	r2, r2, #32
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	f002 021f 	and.w	r2, r2, #31
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	f43f af7f 	beq.w	8004008 <HAL_RCC_OscConfig+0xdd8>
 800410a:	e0dd      	b.n	80042c8 <HAL_RCC_OscConfig+0x1098>
 800410c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004110:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004114:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004118:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800411e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	fa93 f2a3 	rbit	r2, r3
 8004128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800412c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004130:	601a      	str	r2, [r3, #0]
  return result;
 8004132:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004136:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800413a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004146:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	461a      	mov	r2, r3
 800414e:	2300      	movs	r3, #0
 8004150:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7fd fb1b 	bl	800178c <HAL_GetTick>
 8004156:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415a:	e009      	b.n	8004170 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd fb16 	bl	800178c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e0ac      	b.n	80042ca <HAL_RCC_OscConfig+0x109a>
 8004170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004174:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004178:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800417c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004182:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	fa93 f2a3 	rbit	r2, r3
 800418c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004190:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004194:	601a      	str	r2, [r3, #0]
  return result;
 8004196:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800419a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800419e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d102      	bne.n	80041ba <HAL_RCC_OscConfig+0xf8a>
 80041b4:	4b47      	ldr	r3, [pc, #284]	@ (80042d4 <HAL_RCC_OscConfig+0x10a4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	e027      	b.n	800420a <HAL_RCC_OscConfig+0xfda>
 80041ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041be:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80041c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041cc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	fa93 f2a3 	rbit	r2, r3
 80041d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041da:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041e4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80041e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041f2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	fa93 f2a3 	rbit	r2, r3
 80041fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004200:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	4b33      	ldr	r3, [pc, #204]	@ (80042d4 <HAL_RCC_OscConfig+0x10a4>)
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800420e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004212:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004216:	6011      	str	r1, [r2, #0]
 8004218:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800421c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	fa92 f1a2 	rbit	r1, r2
 8004226:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800422a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800422e:	6011      	str	r1, [r2, #0]
  return result;
 8004230:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004234:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	fab2 f282 	clz	r2, r2
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	f042 0220 	orr.w	r2, r2, #32
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	f002 021f 	and.w	r2, r2, #31
 800424a:	2101      	movs	r1, #1
 800424c:	fa01 f202 	lsl.w	r2, r1, r2
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d182      	bne.n	800415c <HAL_RCC_OscConfig+0xf2c>
 8004256:	e037      	b.n	80042c8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800425c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e02e      	b.n	80042ca <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800426c:	4b19      	ldr	r3, [pc, #100]	@ (80042d4 <HAL_RCC_OscConfig+0x10a4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004274:	4b17      	ldr	r3, [pc, #92]	@ (80042d4 <HAL_RCC_OscConfig+0x10a4>)
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800427c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004280:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8004284:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004288:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	429a      	cmp	r2, r3
 8004292:	d117      	bne.n	80042c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004294:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004298:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800429c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d10b      	bne.n	80042c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80042ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042b0:	f003 020f 	and.w	r2, r3, #15
 80042b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000

080042d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b09e      	sub	sp, #120	@ 0x78
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e162      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f0:	4b90      	ldr	r3, [pc, #576]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d910      	bls.n	8004320 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 0207 	bic.w	r2, r3, #7
 8004306:	498b      	ldr	r1, [pc, #556]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b89      	ldr	r3, [pc, #548]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e14a      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800432c:	4b82      	ldr	r3, [pc, #520]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	497f      	ldr	r1, [pc, #508]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80dc 	beq.w	8004504 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d13c      	bne.n	80043ce <HAL_RCC_ClockConfig+0xf6>
 8004354:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004358:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800435c:	fa93 f3a3 	rbit	r3, r3
 8004360:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004364:	fab3 f383 	clz	r3, r3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d102      	bne.n	800437e <HAL_RCC_ClockConfig+0xa6>
 8004378:	4b6f      	ldr	r3, [pc, #444]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	e00f      	b.n	800439e <HAL_RCC_ClockConfig+0xc6>
 800437e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004382:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	667b      	str	r3, [r7, #100]	@ 0x64
 800438c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004390:	663b      	str	r3, [r7, #96]	@ 0x60
 8004392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004394:	fa93 f3a3 	rbit	r3, r3
 8004398:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800439a:	4b67      	ldr	r3, [pc, #412]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043a6:	fa92 f2a2 	rbit	r2, r2
 80043aa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80043ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043ae:	fab2 f282 	clz	r2, r2
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	f042 0220 	orr.w	r2, r2, #32
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	f002 021f 	and.w	r2, r2, #31
 80043be:	2101      	movs	r1, #1
 80043c0:	fa01 f202 	lsl.w	r2, r1, r2
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d17b      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e0f3      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d13c      	bne.n	8004450 <HAL_RCC_ClockConfig+0x178>
 80043d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80043e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	fab3 f383 	clz	r3, r3
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d102      	bne.n	8004400 <HAL_RCC_ClockConfig+0x128>
 80043fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	e00f      	b.n	8004420 <HAL_RCC_ClockConfig+0x148>
 8004400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004404:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
 800440e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004412:	643b      	str	r3, [r7, #64]	@ 0x40
 8004414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800441c:	4b46      	ldr	r3, [pc, #280]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004424:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004426:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004428:	fa92 f2a2 	rbit	r2, r2
 800442c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800442e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004430:	fab2 f282 	clz	r2, r2
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	f042 0220 	orr.w	r2, r2, #32
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	f002 021f 	and.w	r2, r2, #31
 8004440:	2101      	movs	r1, #1
 8004442:	fa01 f202 	lsl.w	r2, r1, r2
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d13a      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0b2      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
 8004450:	2302      	movs	r3, #2
 8004452:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004456:	fa93 f3a3 	rbit	r3, r3
 800445a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d102      	bne.n	8004478 <HAL_RCC_ClockConfig+0x1a0>
 8004472:	4b31      	ldr	r3, [pc, #196]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	e00d      	b.n	8004494 <HAL_RCC_ClockConfig+0x1bc>
 8004478:	2302      	movs	r3, #2
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447e:	fa93 f3a3 	rbit	r3, r3
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
 8004484:	2302      	movs	r3, #2
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	fa93 f3a3 	rbit	r3, r3
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	4b29      	ldr	r3, [pc, #164]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	2202      	movs	r2, #2
 8004496:	61ba      	str	r2, [r7, #24]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	fa92 f2a2 	rbit	r2, r2
 800449e:	617a      	str	r2, [r7, #20]
  return result;
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	fab2 f282 	clz	r2, r2
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	f042 0220 	orr.w	r2, r2, #32
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	f002 021f 	and.w	r2, r2, #31
 80044b2:	2101      	movs	r1, #1
 80044b4:	fa01 f202 	lsl.w	r2, r1, r2
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e079      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f023 0203 	bic.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	491a      	ldr	r1, [pc, #104]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d4:	f7fd f95a 	bl	800178c <HAL_GetTick>
 80044d8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044dc:	f7fd f956 	bl	800178c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e061      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	4b11      	ldr	r3, [pc, #68]	@ (8004538 <HAL_RCC_ClockConfig+0x260>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 020c 	and.w	r2, r3, #12
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	429a      	cmp	r2, r3
 8004502:	d1eb      	bne.n	80044dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004504:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d214      	bcs.n	800453c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b08      	ldr	r3, [pc, #32]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 0207 	bic.w	r2, r3, #7
 800451a:	4906      	ldr	r1, [pc, #24]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <HAL_RCC_ClockConfig+0x25c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e040      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2de>
 8004534:	40022000 	.word	0x40022000
 8004538:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <HAL_RCC_ClockConfig+0x2e8>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	491a      	ldr	r1, [pc, #104]	@ (80045c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004556:	4313      	orrs	r3, r2
 8004558:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004566:	4b16      	ldr	r3, [pc, #88]	@ (80045c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4912      	ldr	r1, [pc, #72]	@ (80045c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800457a:	f000 f829 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800457e:	4601      	mov	r1, r0
 8004580:	4b0f      	ldr	r3, [pc, #60]	@ (80045c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004588:	22f0      	movs	r2, #240	@ 0xf0
 800458a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	fa92 f2a2 	rbit	r2, r2
 8004592:	60fa      	str	r2, [r7, #12]
  return result;
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	fab2 f282 	clz	r2, r2
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	40d3      	lsrs	r3, r2
 800459e:	4a09      	ldr	r2, [pc, #36]	@ (80045c4 <HAL_RCC_ClockConfig+0x2ec>)
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
 80045a2:	fa21 f303 	lsr.w	r3, r1, r3
 80045a6:	4a08      	ldr	r2, [pc, #32]	@ (80045c8 <HAL_RCC_ClockConfig+0x2f0>)
 80045a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045aa:	4b08      	ldr	r3, [pc, #32]	@ (80045cc <HAL_RCC_ClockConfig+0x2f4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fc ffe6 	bl	8001580 <HAL_InitTick>
  
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3778      	adds	r7, #120	@ 0x78
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	08009f58 	.word	0x08009f58
 80045c8:	20000004 	.word	0x20000004
 80045cc:	20000008 	.word	0x20000008

080045d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80045ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d002      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x30>
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d003      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x36>
 80045fe:	e029      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004600:	4b1a      	ldr	r3, [pc, #104]	@ (800466c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004602:	613b      	str	r3, [r7, #16]
      break;
 8004604:	e029      	b.n	800465a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	0c9b      	lsrs	r3, r3, #18
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	4a18      	ldr	r2, [pc, #96]	@ (8004670 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004610:	5cd3      	ldrb	r3, [r2, r3]
 8004612:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004614:	4b14      	ldr	r3, [pc, #80]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x98>)
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	4a15      	ldr	r2, [pc, #84]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xa4>)
 800461e:	5cd3      	ldrb	r3, [r2, r3]
 8004620:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800462c:	4a0f      	ldr	r2, [pc, #60]	@ (800466c <HAL_RCC_GetSysClockFreq+0x9c>)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	fbb2 f2f3 	udiv	r2, r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e007      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800463e:	4a0b      	ldr	r2, [pc, #44]	@ (800466c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	fbb2 f2f3 	udiv	r2, r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	fb02 f303 	mul.w	r3, r2, r3
 800464c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	613b      	str	r3, [r7, #16]
      break;
 8004652:	e002      	b.n	800465a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004654:	4b05      	ldr	r3, [pc, #20]	@ (800466c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004656:	613b      	str	r3, [r7, #16]
      break;
 8004658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800465a:	693b      	ldr	r3, [r7, #16]
}
 800465c:	4618      	mov	r0, r3
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40021000 	.word	0x40021000
 800466c:	007a1200 	.word	0x007a1200
 8004670:	08009f70 	.word	0x08009f70
 8004674:	08009f80 	.word	0x08009f80

08004678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b03      	ldr	r3, [pc, #12]	@ (800468c <HAL_RCC_GetHCLKFreq+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000004 	.word	0x20000004

08004690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004696:	f7ff ffef 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 800469a:	4601      	mov	r1, r0
 800469c:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046a4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80046a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	fa92 f2a2 	rbit	r2, r2
 80046b0:	603a      	str	r2, [r7, #0]
  return result;
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	fab2 f282 	clz	r2, r2
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	40d3      	lsrs	r3, r2
 80046bc:	4a04      	ldr	r2, [pc, #16]	@ (80046d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80046be:	5cd3      	ldrb	r3, [r2, r3]
 80046c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40021000 	.word	0x40021000
 80046d0:	08009f68 	.word	0x08009f68

080046d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80046da:	f7ff ffcd 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80046de:	4601      	mov	r1, r0
 80046e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80046e8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80046ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	fa92 f2a2 	rbit	r2, r2
 80046f4:	603a      	str	r2, [r7, #0]
  return result;
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	fab2 f282 	clz	r2, r2
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	40d3      	lsrs	r3, r2
 8004700:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004702:	5cd3      	ldrb	r3, [r2, r3]
 8004704:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40021000 	.word	0x40021000
 8004714:	08009f68 	.word	0x08009f68

08004718 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	220f      	movs	r2, #15
 8004726:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004728:	4b12      	ldr	r3, [pc, #72]	@ (8004774 <HAL_RCC_GetClockConfig+0x5c>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0203 	and.w	r2, r3, #3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004734:	4b0f      	ldr	r3, [pc, #60]	@ (8004774 <HAL_RCC_GetClockConfig+0x5c>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004740:	4b0c      	ldr	r3, [pc, #48]	@ (8004774 <HAL_RCC_GetClockConfig+0x5c>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800474c:	4b09      	ldr	r3, [pc, #36]	@ (8004774 <HAL_RCC_GetClockConfig+0x5c>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	08db      	lsrs	r3, r3, #3
 8004752:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800475a:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <HAL_RCC_GetClockConfig+0x60>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0207 	and.w	r2, r3, #7
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	601a      	str	r2, [r3, #0]
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40021000 	.word	0x40021000
 8004778:	40022000 	.word	0x40022000

0800477c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b092      	sub	sp, #72	@ 0x48
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800478c:	2300      	movs	r3, #0
 800478e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80d4 	beq.w	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a0:	4b4e      	ldr	r3, [pc, #312]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10e      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ac:	4b4b      	ldr	r3, [pc, #300]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	4a4a      	ldr	r2, [pc, #296]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b6:	61d3      	str	r3, [r2, #28]
 80047b8:	4b48      	ldr	r3, [pc, #288]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c4:	2301      	movs	r3, #1
 80047c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ca:	4b45      	ldr	r3, [pc, #276]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d118      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d6:	4b42      	ldr	r3, [pc, #264]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a41      	ldr	r2, [pc, #260]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e2:	f7fc ffd3 	bl	800178c <HAL_GetTick>
 80047e6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e8:	e008      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ea:	f7fc ffcf 	bl	800178c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b64      	cmp	r3, #100	@ 0x64
 80047f6:	d901      	bls.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e1d6      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fc:	4b38      	ldr	r3, [pc, #224]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004808:	4b34      	ldr	r3, [pc, #208]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004810:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8084 	beq.w	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004822:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004824:	429a      	cmp	r2, r3
 8004826:	d07c      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004828:	4b2c      	ldr	r3, [pc, #176]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004832:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004836:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483a:	fa93 f3a3 	rbit	r3, r3
 800483e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004842:	fab3 f383 	clz	r3, r3
 8004846:	b2db      	uxtb	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	4b26      	ldr	r3, [pc, #152]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	461a      	mov	r2, r3
 8004852:	2301      	movs	r3, #1
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800485a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004866:	fab3 f383 	clz	r3, r3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	461a      	mov	r2, r3
 800486e:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	461a      	mov	r2, r3
 8004876:	2300      	movs	r3, #0
 8004878:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800487a:	4a18      	ldr	r2, [pc, #96]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04b      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488a:	f7fc ff7f 	bl	800178c <HAL_GetTick>
 800488e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004890:	e00a      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004892:	f7fc ff7b 	bl	800178c <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e180      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80048a8:	2302      	movs	r3, #2
 80048aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ae:	fa93 f3a3 	rbit	r3, r3
 80048b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b4:	2302      	movs	r3, #2
 80048b6:	623b      	str	r3, [r7, #32]
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	fa93 f3a3 	rbit	r3, r3
 80048be:	61fb      	str	r3, [r7, #28]
  return result;
 80048c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d108      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80048d6:	4b01      	ldr	r3, [pc, #4]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	e00d      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40007000 	.word	0x40007000
 80048e4:	10908100 	.word	0x10908100
 80048e8:	2302      	movs	r3, #2
 80048ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	fa93 f3a3 	rbit	r3, r3
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	4b9a      	ldr	r3, [pc, #616]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	2202      	movs	r2, #2
 80048fa:	613a      	str	r2, [r7, #16]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	fa92 f2a2 	rbit	r2, r2
 8004902:	60fa      	str	r2, [r7, #12]
  return result;
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	fab2 f282 	clz	r2, r2
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	f002 021f 	and.w	r2, r2, #31
 8004916:	2101      	movs	r1, #1
 8004918:	fa01 f202 	lsl.w	r2, r1, r2
 800491c:	4013      	ands	r3, r2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0b7      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004922:	4b8f      	ldr	r3, [pc, #572]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	498c      	ldr	r1, [pc, #560]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004930:	4313      	orrs	r3, r2
 8004932:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004934:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004938:	2b01      	cmp	r3, #1
 800493a:	d105      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493c:	4b88      	ldr	r3, [pc, #544]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	4a87      	ldr	r2, [pc, #540]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004946:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004954:	4b82      	ldr	r3, [pc, #520]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004958:	f023 0203 	bic.w	r2, r3, #3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	497f      	ldr	r1, [pc, #508]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004962:	4313      	orrs	r3, r2
 8004964:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004972:	4b7b      	ldr	r3, [pc, #492]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	4978      	ldr	r1, [pc, #480]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004980:	4313      	orrs	r3, r2
 8004982:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004990:	4b73      	ldr	r3, [pc, #460]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004994:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	4970      	ldr	r1, [pc, #448]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b2:	f023 0210 	bic.w	r2, r3, #16
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	4969      	ldr	r1, [pc, #420]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80049cc:	4b64      	ldr	r3, [pc, #400]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d8:	4961      	ldr	r1, [pc, #388]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ee:	f023 0220 	bic.w	r2, r3, #32
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	495a      	ldr	r1, [pc, #360]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a08:	4b55      	ldr	r3, [pc, #340]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	4952      	ldr	r1, [pc, #328]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a26:	4b4e      	ldr	r3, [pc, #312]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	494b      	ldr	r1, [pc, #300]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a44:	4b46      	ldr	r3, [pc, #280]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	4943      	ldr	r1, [pc, #268]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a62:	4b3f      	ldr	r3, [pc, #252]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6e:	493c      	ldr	r1, [pc, #240]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a80:	4b37      	ldr	r3, [pc, #220]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a84:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	4934      	ldr	r1, [pc, #208]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004a9e:	4b30      	ldr	r3, [pc, #192]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aaa:	492d      	ldr	r1, [pc, #180]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004abc:	4b28      	ldr	r3, [pc, #160]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac8:	4925      	ldr	r1, [pc, #148]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004ada:	4b21      	ldr	r3, [pc, #132]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	491e      	ldr	r1, [pc, #120]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004af8:	4b19      	ldr	r3, [pc, #100]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	4916      	ldr	r1, [pc, #88]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004b16:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b22:	490f      	ldr	r1, [pc, #60]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004b34:	4b0a      	ldr	r3, [pc, #40]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b38:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b40:	4907      	ldr	r1, [pc, #28]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00c      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004b52:	4b03      	ldr	r3, [pc, #12]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	e002      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004b5e:	bf00      	nop
 8004b60:	40021000 	.word	0x40021000
 8004b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b66:	4913      	ldr	r1, [pc, #76]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004b78:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b84:	490b      	ldr	r1, [pc, #44]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004b96:	4b07      	ldr	r3, [pc, #28]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba2:	4904      	ldr	r1, [pc, #16]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3748      	adds	r7, #72	@ 0x48
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000

08004bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e049      	b.n	8004c5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fc fc38 	bl	8001454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	f000 fa38 	bl	800506c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d001      	beq.n	8004c80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e047      	b.n	8004d10 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a23      	ldr	r2, [pc, #140]	@ (8004d1c <HAL_TIM_Base_Start+0xb4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01d      	beq.n	8004cce <HAL_TIM_Base_Start+0x66>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c9a:	d018      	beq.n	8004cce <HAL_TIM_Base_Start+0x66>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d20 <HAL_TIM_Base_Start+0xb8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <HAL_TIM_Base_Start+0x66>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1e      	ldr	r2, [pc, #120]	@ (8004d24 <HAL_TIM_Base_Start+0xbc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_TIM_Base_Start+0x66>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d28 <HAL_TIM_Base_Start+0xc0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_TIM_Base_Start+0x66>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8004d2c <HAL_TIM_Base_Start+0xc4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <HAL_TIM_Base_Start+0x66>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a19      	ldr	r2, [pc, #100]	@ (8004d30 <HAL_TIM_Base_Start+0xc8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d115      	bne.n	8004cfa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	4b17      	ldr	r3, [pc, #92]	@ (8004d34 <HAL_TIM_Base_Start+0xcc>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b06      	cmp	r3, #6
 8004cde:	d015      	beq.n	8004d0c <HAL_TIM_Base_Start+0xa4>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce6:	d011      	beq.n	8004d0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf8:	e008      	b.n	8004d0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	e000      	b.n	8004d0e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40013400 	.word	0x40013400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40015000 	.word	0x40015000
 8004d34:	00010007 	.word	0x00010007

08004d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d001      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e04f      	b.n	8004df0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a23      	ldr	r2, [pc, #140]	@ (8004dfc <HAL_TIM_Base_Start_IT+0xc4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01d      	beq.n	8004dae <HAL_TIM_Base_Start_IT+0x76>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7a:	d018      	beq.n	8004dae <HAL_TIM_Base_Start_IT+0x76>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1f      	ldr	r2, [pc, #124]	@ (8004e00 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <HAL_TIM_Base_Start_IT+0x76>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e04 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <HAL_TIM_Base_Start_IT+0x76>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1c      	ldr	r2, [pc, #112]	@ (8004e08 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_TIM_Base_Start_IT+0x76>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004e0c <HAL_TIM_Base_Start_IT+0xd4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_TIM_Base_Start_IT+0x76>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a19      	ldr	r2, [pc, #100]	@ (8004e10 <HAL_TIM_Base_Start_IT+0xd8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d115      	bne.n	8004dda <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	4b17      	ldr	r3, [pc, #92]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xdc>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d015      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0xb4>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc6:	d011      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd8:	e008      	b.n	8004dec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e000      	b.n	8004dee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800
 8004e08:	40013400 	.word	0x40013400
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40015000 	.word	0x40015000
 8004e14:	00010007 	.word	0x00010007

08004e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d020      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01b      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0202 	mvn.w	r2, #2
 8004e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f8e4 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f8d6 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f8e7 	bl	8005044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d020      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01b      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0204 	mvn.w	r2, #4
 8004e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f8be 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8b0 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8c1 	bl	8005044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d020      	beq.n	8004f14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01b      	beq.n	8004f14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0208 	mvn.w	r2, #8
 8004ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f898 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f88a 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f89b 	bl	8005044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d020      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01b      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0210 	mvn.w	r2, #16
 8004f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2208      	movs	r2, #8
 8004f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f872 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004f4c:	e005      	b.n	8004f5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f864 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f875 	bl	8005044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0201 	mvn.w	r2, #1
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fc f9c0 	bl	8001304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9a2 	bl	80052ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00c      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f99a 	bl	8005300 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f834 	bl	8005058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00c      	beq.n	8005014 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0220 	mvn.w	r2, #32
 800500c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f962 	bl	80052d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a48      	ldr	r2, [pc, #288]	@ (80051a0 <TIM_Base_SetConfig+0x134>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <TIM_Base_SetConfig+0x40>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800508a:	d00f      	beq.n	80050ac <TIM_Base_SetConfig+0x40>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a45      	ldr	r2, [pc, #276]	@ (80051a4 <TIM_Base_SetConfig+0x138>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00b      	beq.n	80050ac <TIM_Base_SetConfig+0x40>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a44      	ldr	r2, [pc, #272]	@ (80051a8 <TIM_Base_SetConfig+0x13c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <TIM_Base_SetConfig+0x40>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a43      	ldr	r2, [pc, #268]	@ (80051ac <TIM_Base_SetConfig+0x140>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a42      	ldr	r2, [pc, #264]	@ (80051b0 <TIM_Base_SetConfig+0x144>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d108      	bne.n	80050be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a37      	ldr	r2, [pc, #220]	@ (80051a0 <TIM_Base_SetConfig+0x134>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01f      	beq.n	8005106 <TIM_Base_SetConfig+0x9a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050cc:	d01b      	beq.n	8005106 <TIM_Base_SetConfig+0x9a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a34      	ldr	r2, [pc, #208]	@ (80051a4 <TIM_Base_SetConfig+0x138>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d017      	beq.n	8005106 <TIM_Base_SetConfig+0x9a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a33      	ldr	r2, [pc, #204]	@ (80051a8 <TIM_Base_SetConfig+0x13c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <TIM_Base_SetConfig+0x9a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a32      	ldr	r2, [pc, #200]	@ (80051ac <TIM_Base_SetConfig+0x140>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00f      	beq.n	8005106 <TIM_Base_SetConfig+0x9a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a32      	ldr	r2, [pc, #200]	@ (80051b4 <TIM_Base_SetConfig+0x148>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00b      	beq.n	8005106 <TIM_Base_SetConfig+0x9a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a31      	ldr	r2, [pc, #196]	@ (80051b8 <TIM_Base_SetConfig+0x14c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d007      	beq.n	8005106 <TIM_Base_SetConfig+0x9a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a30      	ldr	r2, [pc, #192]	@ (80051bc <TIM_Base_SetConfig+0x150>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d003      	beq.n	8005106 <TIM_Base_SetConfig+0x9a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2b      	ldr	r2, [pc, #172]	@ (80051b0 <TIM_Base_SetConfig+0x144>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d108      	bne.n	8005118 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800510c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a18      	ldr	r2, [pc, #96]	@ (80051a0 <TIM_Base_SetConfig+0x134>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <TIM_Base_SetConfig+0x100>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a19      	ldr	r2, [pc, #100]	@ (80051ac <TIM_Base_SetConfig+0x140>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00f      	beq.n	800516c <TIM_Base_SetConfig+0x100>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a19      	ldr	r2, [pc, #100]	@ (80051b4 <TIM_Base_SetConfig+0x148>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00b      	beq.n	800516c <TIM_Base_SetConfig+0x100>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a18      	ldr	r2, [pc, #96]	@ (80051b8 <TIM_Base_SetConfig+0x14c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <TIM_Base_SetConfig+0x100>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a17      	ldr	r2, [pc, #92]	@ (80051bc <TIM_Base_SetConfig+0x150>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_Base_SetConfig+0x100>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a12      	ldr	r2, [pc, #72]	@ (80051b0 <TIM_Base_SetConfig+0x144>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d103      	bne.n	8005174 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b01      	cmp	r3, #1
 8005184:	d105      	bne.n	8005192 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f023 0201 	bic.w	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	611a      	str	r2, [r3, #16]
  }
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40013400 	.word	0x40013400
 80051b0:	40015000 	.word	0x40015000
 80051b4:	40014000 	.word	0x40014000
 80051b8:	40014400 	.word	0x40014400
 80051bc:	40014800 	.word	0x40014800

080051c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e06d      	b.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a30      	ldr	r2, [pc, #192]	@ (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d009      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2f      	ldr	r2, [pc, #188]	@ (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d004      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2d      	ldr	r2, [pc, #180]	@ (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d108      	bne.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800521c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4313      	orrs	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1e      	ldr	r2, [pc, #120]	@ (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d01d      	beq.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005254:	d018      	beq.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1c      	ldr	r2, [pc, #112]	@ (80052cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1a      	ldr	r2, [pc, #104]	@ (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00e      	beq.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a15      	ldr	r2, [pc, #84]	@ (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d009      	beq.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a16      	ldr	r2, [pc, #88]	@ (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a11      	ldr	r2, [pc, #68]	@ (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d10c      	bne.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800528e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	4313      	orrs	r3, r2
 8005298:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40013400 	.word	0x40013400
 80052c8:	40015000 	.word	0x40015000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40014000 	.word	0x40014000

080052d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e040      	b.n	80053a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fc f8c0 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2224      	movs	r2, #36	@ 0x24
 8005340:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0201 	bic.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f9fc 	bl	8005758 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f825 	bl	80053b0 <UART_SetConfig>
 8005366:	4603      	mov	r3, r0
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e01b      	b.n	80053a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800537e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800538e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fa7b 	bl	800589c <UART_CheckIdleState>
 80053a6:	4603      	mov	r3, r0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b92      	ldr	r3, [pc, #584]	@ (8005624 <UART_SetConfig+0x274>)
 80053dc:	4013      	ands	r3, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	6979      	ldr	r1, [r7, #20]
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	430a      	orrs	r2, r1
 8005420:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a80      	ldr	r2, [pc, #512]	@ (8005628 <UART_SetConfig+0x278>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d120      	bne.n	800546e <UART_SetConfig+0xbe>
 800542c:	4b7f      	ldr	r3, [pc, #508]	@ (800562c <UART_SetConfig+0x27c>)
 800542e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	2b03      	cmp	r3, #3
 8005436:	d817      	bhi.n	8005468 <UART_SetConfig+0xb8>
 8005438:	a201      	add	r2, pc, #4	@ (adr r2, 8005440 <UART_SetConfig+0x90>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005451 	.word	0x08005451
 8005444:	0800545d 	.word	0x0800545d
 8005448:	08005463 	.word	0x08005463
 800544c:	08005457 	.word	0x08005457
 8005450:	2301      	movs	r3, #1
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e0b5      	b.n	80055c2 <UART_SetConfig+0x212>
 8005456:	2302      	movs	r3, #2
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e0b2      	b.n	80055c2 <UART_SetConfig+0x212>
 800545c:	2304      	movs	r3, #4
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e0af      	b.n	80055c2 <UART_SetConfig+0x212>
 8005462:	2308      	movs	r3, #8
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e0ac      	b.n	80055c2 <UART_SetConfig+0x212>
 8005468:	2310      	movs	r3, #16
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e0a9      	b.n	80055c2 <UART_SetConfig+0x212>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6f      	ldr	r2, [pc, #444]	@ (8005630 <UART_SetConfig+0x280>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d124      	bne.n	80054c2 <UART_SetConfig+0x112>
 8005478:	4b6c      	ldr	r3, [pc, #432]	@ (800562c <UART_SetConfig+0x27c>)
 800547a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005480:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005484:	d011      	beq.n	80054aa <UART_SetConfig+0xfa>
 8005486:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800548a:	d817      	bhi.n	80054bc <UART_SetConfig+0x10c>
 800548c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005490:	d011      	beq.n	80054b6 <UART_SetConfig+0x106>
 8005492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005496:	d811      	bhi.n	80054bc <UART_SetConfig+0x10c>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <UART_SetConfig+0xf4>
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a0:	d006      	beq.n	80054b0 <UART_SetConfig+0x100>
 80054a2:	e00b      	b.n	80054bc <UART_SetConfig+0x10c>
 80054a4:	2300      	movs	r3, #0
 80054a6:	77fb      	strb	r3, [r7, #31]
 80054a8:	e08b      	b.n	80055c2 <UART_SetConfig+0x212>
 80054aa:	2302      	movs	r3, #2
 80054ac:	77fb      	strb	r3, [r7, #31]
 80054ae:	e088      	b.n	80055c2 <UART_SetConfig+0x212>
 80054b0:	2304      	movs	r3, #4
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e085      	b.n	80055c2 <UART_SetConfig+0x212>
 80054b6:	2308      	movs	r3, #8
 80054b8:	77fb      	strb	r3, [r7, #31]
 80054ba:	e082      	b.n	80055c2 <UART_SetConfig+0x212>
 80054bc:	2310      	movs	r3, #16
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e07f      	b.n	80055c2 <UART_SetConfig+0x212>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005634 <UART_SetConfig+0x284>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d124      	bne.n	8005516 <UART_SetConfig+0x166>
 80054cc:	4b57      	ldr	r3, [pc, #348]	@ (800562c <UART_SetConfig+0x27c>)
 80054ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80054d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054d8:	d011      	beq.n	80054fe <UART_SetConfig+0x14e>
 80054da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054de:	d817      	bhi.n	8005510 <UART_SetConfig+0x160>
 80054e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054e4:	d011      	beq.n	800550a <UART_SetConfig+0x15a>
 80054e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054ea:	d811      	bhi.n	8005510 <UART_SetConfig+0x160>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <UART_SetConfig+0x148>
 80054f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054f4:	d006      	beq.n	8005504 <UART_SetConfig+0x154>
 80054f6:	e00b      	b.n	8005510 <UART_SetConfig+0x160>
 80054f8:	2300      	movs	r3, #0
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e061      	b.n	80055c2 <UART_SetConfig+0x212>
 80054fe:	2302      	movs	r3, #2
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e05e      	b.n	80055c2 <UART_SetConfig+0x212>
 8005504:	2304      	movs	r3, #4
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e05b      	b.n	80055c2 <UART_SetConfig+0x212>
 800550a:	2308      	movs	r3, #8
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e058      	b.n	80055c2 <UART_SetConfig+0x212>
 8005510:	2310      	movs	r3, #16
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e055      	b.n	80055c2 <UART_SetConfig+0x212>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a47      	ldr	r2, [pc, #284]	@ (8005638 <UART_SetConfig+0x288>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d124      	bne.n	800556a <UART_SetConfig+0x1ba>
 8005520:	4b42      	ldr	r3, [pc, #264]	@ (800562c <UART_SetConfig+0x27c>)
 8005522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005524:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005528:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800552c:	d011      	beq.n	8005552 <UART_SetConfig+0x1a2>
 800552e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005532:	d817      	bhi.n	8005564 <UART_SetConfig+0x1b4>
 8005534:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005538:	d011      	beq.n	800555e <UART_SetConfig+0x1ae>
 800553a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800553e:	d811      	bhi.n	8005564 <UART_SetConfig+0x1b4>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <UART_SetConfig+0x19c>
 8005544:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005548:	d006      	beq.n	8005558 <UART_SetConfig+0x1a8>
 800554a:	e00b      	b.n	8005564 <UART_SetConfig+0x1b4>
 800554c:	2300      	movs	r3, #0
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e037      	b.n	80055c2 <UART_SetConfig+0x212>
 8005552:	2302      	movs	r3, #2
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e034      	b.n	80055c2 <UART_SetConfig+0x212>
 8005558:	2304      	movs	r3, #4
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e031      	b.n	80055c2 <UART_SetConfig+0x212>
 800555e:	2308      	movs	r3, #8
 8005560:	77fb      	strb	r3, [r7, #31]
 8005562:	e02e      	b.n	80055c2 <UART_SetConfig+0x212>
 8005564:	2310      	movs	r3, #16
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e02b      	b.n	80055c2 <UART_SetConfig+0x212>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a33      	ldr	r2, [pc, #204]	@ (800563c <UART_SetConfig+0x28c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d124      	bne.n	80055be <UART_SetConfig+0x20e>
 8005574:	4b2d      	ldr	r3, [pc, #180]	@ (800562c <UART_SetConfig+0x27c>)
 8005576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005578:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800557c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005580:	d011      	beq.n	80055a6 <UART_SetConfig+0x1f6>
 8005582:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005586:	d817      	bhi.n	80055b8 <UART_SetConfig+0x208>
 8005588:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800558c:	d011      	beq.n	80055b2 <UART_SetConfig+0x202>
 800558e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005592:	d811      	bhi.n	80055b8 <UART_SetConfig+0x208>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <UART_SetConfig+0x1f0>
 8005598:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800559c:	d006      	beq.n	80055ac <UART_SetConfig+0x1fc>
 800559e:	e00b      	b.n	80055b8 <UART_SetConfig+0x208>
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e00d      	b.n	80055c2 <UART_SetConfig+0x212>
 80055a6:	2302      	movs	r3, #2
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e00a      	b.n	80055c2 <UART_SetConfig+0x212>
 80055ac:	2304      	movs	r3, #4
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e007      	b.n	80055c2 <UART_SetConfig+0x212>
 80055b2:	2308      	movs	r3, #8
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e004      	b.n	80055c2 <UART_SetConfig+0x212>
 80055b8:	2310      	movs	r3, #16
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e001      	b.n	80055c2 <UART_SetConfig+0x212>
 80055be:	2310      	movs	r3, #16
 80055c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ca:	d16b      	bne.n	80056a4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80055cc:	7ffb      	ldrb	r3, [r7, #31]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d838      	bhi.n	8005644 <UART_SetConfig+0x294>
 80055d2:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <UART_SetConfig+0x228>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	08005605 	.word	0x08005605
 80055e0:	0800560d 	.word	0x0800560d
 80055e4:	08005645 	.word	0x08005645
 80055e8:	08005613 	.word	0x08005613
 80055ec:	08005645 	.word	0x08005645
 80055f0:	08005645 	.word	0x08005645
 80055f4:	08005645 	.word	0x08005645
 80055f8:	0800561b 	.word	0x0800561b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055fc:	f7ff f848 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8005600:	61b8      	str	r0, [r7, #24]
        break;
 8005602:	e024      	b.n	800564e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7ff f866 	bl	80046d4 <HAL_RCC_GetPCLK2Freq>
 8005608:	61b8      	str	r0, [r7, #24]
        break;
 800560a:	e020      	b.n	800564e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800560c:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <UART_SetConfig+0x290>)
 800560e:	61bb      	str	r3, [r7, #24]
        break;
 8005610:	e01d      	b.n	800564e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005612:	f7fe ffdd 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8005616:	61b8      	str	r0, [r7, #24]
        break;
 8005618:	e019      	b.n	800564e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800561e:	61bb      	str	r3, [r7, #24]
        break;
 8005620:	e015      	b.n	800564e <UART_SetConfig+0x29e>
 8005622:	bf00      	nop
 8005624:	efff69f3 	.word	0xefff69f3
 8005628:	40013800 	.word	0x40013800
 800562c:	40021000 	.word	0x40021000
 8005630:	40004400 	.word	0x40004400
 8005634:	40004800 	.word	0x40004800
 8005638:	40004c00 	.word	0x40004c00
 800563c:	40005000 	.word	0x40005000
 8005640:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	77bb      	strb	r3, [r7, #30]
        break;
 800564c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d073      	beq.n	800573c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	005a      	lsls	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	441a      	add	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	fbb2 f3f3 	udiv	r3, r2, r3
 8005668:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b0f      	cmp	r3, #15
 800566e:	d916      	bls.n	800569e <UART_SetConfig+0x2ee>
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005676:	d212      	bcs.n	800569e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f023 030f 	bic.w	r3, r3, #15
 8005680:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	b29b      	uxth	r3, r3
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	b29a      	uxth	r2, r3
 800568e:	89fb      	ldrh	r3, [r7, #14]
 8005690:	4313      	orrs	r3, r2
 8005692:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	89fa      	ldrh	r2, [r7, #14]
 800569a:	60da      	str	r2, [r3, #12]
 800569c:	e04e      	b.n	800573c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	77bb      	strb	r3, [r7, #30]
 80056a2:	e04b      	b.n	800573c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056a4:	7ffb      	ldrb	r3, [r7, #31]
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d827      	bhi.n	80056fa <UART_SetConfig+0x34a>
 80056aa:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <UART_SetConfig+0x300>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	080056fb 	.word	0x080056fb
 80056c0:	080056eb 	.word	0x080056eb
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	080056fb 	.word	0x080056fb
 80056cc:	080056fb 	.word	0x080056fb
 80056d0:	080056f3 	.word	0x080056f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d4:	f7fe ffdc 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 80056d8:	61b8      	str	r0, [r7, #24]
        break;
 80056da:	e013      	b.n	8005704 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056dc:	f7fe fffa 	bl	80046d4 <HAL_RCC_GetPCLK2Freq>
 80056e0:	61b8      	str	r0, [r7, #24]
        break;
 80056e2:	e00f      	b.n	8005704 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005754 <UART_SetConfig+0x3a4>)
 80056e6:	61bb      	str	r3, [r7, #24]
        break;
 80056e8:	e00c      	b.n	8005704 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ea:	f7fe ff71 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 80056ee:	61b8      	str	r0, [r7, #24]
        break;
 80056f0:	e008      	b.n	8005704 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056f6:	61bb      	str	r3, [r7, #24]
        break;
 80056f8:	e004      	b.n	8005704 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	77bb      	strb	r3, [r7, #30]
        break;
 8005702:	bf00      	nop
    }

    if (pclk != 0U)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d018      	beq.n	800573c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	085a      	lsrs	r2, r3, #1
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	441a      	add	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b0f      	cmp	r3, #15
 8005722:	d909      	bls.n	8005738 <UART_SetConfig+0x388>
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572a:	d205      	bcs.n	8005738 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	b29a      	uxth	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	e001      	b.n	800573c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005748:	7fbb      	ldrb	r3, [r7, #30]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	007a1200 	.word	0x007a1200

08005758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01a      	beq.n	800586e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005856:	d10a      	bne.n	800586e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	605a      	str	r2, [r3, #4]
  }
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b098      	sub	sp, #96	@ 0x60
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058ac:	f7fb ff6e 	bl	800178c <HAL_GetTick>
 80058b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d12e      	bne.n	800591e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058c8:	2200      	movs	r2, #0
 80058ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f88c 	bl	80059ec <UART_WaitOnFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d021      	beq.n	800591e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e6      	bne.n	80058da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e062      	b.n	80059e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d149      	bne.n	80059c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800592c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005934:	2200      	movs	r2, #0
 8005936:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f856 	bl	80059ec <UART_WaitOnFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d03c      	beq.n	80059c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	623b      	str	r3, [r7, #32]
   return(result);
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800595a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005964:	633b      	str	r3, [r7, #48]	@ 0x30
 8005966:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800596a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e6      	bne.n	8005946 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3308      	adds	r3, #8
 800597e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	60fb      	str	r3, [r7, #12]
   return(result);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3308      	adds	r3, #8
 8005996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005998:	61fa      	str	r2, [r7, #28]
 800599a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	69b9      	ldr	r1, [r7, #24]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	617b      	str	r3, [r7, #20]
   return(result);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e5      	bne.n	8005978 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e011      	b.n	80059e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3758      	adds	r7, #88	@ 0x58
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	4613      	mov	r3, r2
 80059fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fc:	e04f      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a04:	d04b      	beq.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a06:	f7fb fec1 	bl	800178c <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d302      	bcc.n	8005a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e04e      	b.n	8005abe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d037      	beq.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b80      	cmp	r3, #128	@ 0x80
 8005a32:	d034      	beq.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b40      	cmp	r3, #64	@ 0x40
 8005a38:	d031      	beq.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d110      	bne.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f838 	bl	8005ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2208      	movs	r2, #8
 8005a5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e029      	b.n	8005abe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a78:	d111      	bne.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f81e 	bl	8005ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e00f      	b.n	8005abe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	bf0c      	ite	eq
 8005aae:	2301      	moveq	r3, #1
 8005ab0:	2300      	movne	r3, #0
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d0a0      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b095      	sub	sp, #84	@ 0x54
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005af2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e6      	bne.n	8005ace <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3308      	adds	r3, #8
 8005b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e5      	bne.n	8005b00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d118      	bne.n	8005b6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f023 0310 	bic.w	r3, r3, #16
 8005b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b5a:	61bb      	str	r3, [r7, #24]
 8005b5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6979      	ldr	r1, [r7, #20]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	613b      	str	r3, [r7, #16]
   return(result);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b82:	bf00      	nop
 8005b84:	3754      	adds	r7, #84	@ 0x54
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b96:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005b9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	43db      	mvns	r3, r3
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	4013      	ands	r3, r2
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	1d3b      	adds	r3, r7, #4
 8005bce:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c06:	f3ef 8305 	mrs	r3, IPSR
 8005c0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10f      	bne.n	8005c32 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c12:	f3ef 8310 	mrs	r3, PRIMASK
 8005c16:	607b      	str	r3, [r7, #4]
  return(result);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <osKernelInitialize+0x32>
 8005c1e:	4b11      	ldr	r3, [pc, #68]	@ (8005c64 <osKernelInitialize+0x64>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d109      	bne.n	8005c3a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c26:	f3ef 8311 	mrs	r3, BASEPRI
 8005c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005c32:	f06f 0305 	mvn.w	r3, #5
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e00c      	b.n	8005c54 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c64 <osKernelInitialize+0x64>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d105      	bne.n	8005c4e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005c42:	4b08      	ldr	r3, [pc, #32]	@ (8005c64 <osKernelInitialize+0x64>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	e002      	b.n	8005c54 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c54:	68fb      	ldr	r3, [r7, #12]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	20008590 	.word	0x20008590

08005c68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c6e:	f3ef 8305 	mrs	r3, IPSR
 8005c72:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10f      	bne.n	8005c9a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7e:	607b      	str	r3, [r7, #4]
  return(result);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <osKernelStart+0x32>
 8005c86:	4b11      	ldr	r3, [pc, #68]	@ (8005ccc <osKernelStart+0x64>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d109      	bne.n	8005ca2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c92:	603b      	str	r3, [r7, #0]
  return(result);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005c9a:	f06f 0305 	mvn.w	r3, #5
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e00e      	b.n	8005cc0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ccc <osKernelStart+0x64>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d107      	bne.n	8005cba <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005caa:	4b08      	ldr	r3, [pc, #32]	@ (8005ccc <osKernelStart+0x64>)
 8005cac:	2202      	movs	r2, #2
 8005cae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005cb0:	f001 f84c 	bl	8006d4c <vTaskStartScheduler>
      stat = osOK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	e002      	b.n	8005cc0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005cba:	f04f 33ff 	mov.w	r3, #4294967295
 8005cbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20008590 	.word	0x20008590

08005cd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b092      	sub	sp, #72	@ 0x48
 8005cd4:	af04      	add	r7, sp, #16
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ce0:	f3ef 8305 	mrs	r3, IPSR
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f040 8094 	bne.w	8005e16 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cee:	f3ef 8310 	mrs	r3, PRIMASK
 8005cf2:	623b      	str	r3, [r7, #32]
  return(result);
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 808d 	bne.w	8005e16 <osThreadNew+0x146>
 8005cfc:	4b48      	ldr	r3, [pc, #288]	@ (8005e20 <osThreadNew+0x150>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d106      	bne.n	8005d12 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d04:	f3ef 8311 	mrs	r3, BASEPRI
 8005d08:	61fb      	str	r3, [r7, #28]
  return(result);
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 8082 	bne.w	8005e16 <osThreadNew+0x146>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d07e      	beq.n	8005e16 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005d18:	2380      	movs	r3, #128	@ 0x80
 8005d1a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005d1c:	2318      	movs	r3, #24
 8005d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8005d20:	2300      	movs	r3, #0
 8005d22:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005d24:	f107 031b 	add.w	r3, r7, #27
 8005d28:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8005d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d045      	beq.n	8005dc2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <osThreadNew+0x74>
        name = attr->name;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <osThreadNew+0x9a>
 8005d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5a:	2b38      	cmp	r3, #56	@ 0x38
 8005d5c:	d805      	bhi.n	8005d6a <osThreadNew+0x9a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <osThreadNew+0x9e>
        return (NULL);
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e054      	b.n	8005e18 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	089b      	lsrs	r3, r3, #2
 8005d7c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00e      	beq.n	8005da4 <osThreadNew+0xd4>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2ba7      	cmp	r3, #167	@ 0xa7
 8005d8c:	d90a      	bls.n	8005da4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d006      	beq.n	8005da4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <osThreadNew+0xd4>
        mem = 1;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005da2:	e010      	b.n	8005dc6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10c      	bne.n	8005dc6 <osThreadNew+0xf6>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d108      	bne.n	8005dc6 <osThreadNew+0xf6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d104      	bne.n	8005dc6 <osThreadNew+0xf6>
          mem = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dc0:	e001      	b.n	8005dc6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8005dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d110      	bne.n	8005dee <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dd4:	9202      	str	r2, [sp, #8]
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fdfe 	bl	80069e4 <xTaskCreateStatic>
 8005de8:	4603      	mov	r3, r0
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	e013      	b.n	8005e16 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d110      	bne.n	8005e16 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	f107 0314 	add.w	r3, r7, #20
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fe4b 	bl	8006aa2 <xTaskCreate>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d001      	beq.n	8005e16 <osThreadNew+0x146>
          hTask = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e16:	697b      	ldr	r3, [r7, #20]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3738      	adds	r7, #56	@ 0x38
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20008590 	.word	0x20008590

08005e24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4a07      	ldr	r2, [pc, #28]	@ (8005e50 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4a06      	ldr	r2, [pc, #24]	@ (8005e54 <vApplicationGetIdleTaskMemory+0x30>)
 8005e3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2280      	movs	r2, #128	@ 0x80
 8005e40:	601a      	str	r2, [r3, #0]
}
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20008594 	.word	0x20008594
 8005e54:	2000863c 	.word	0x2000863c

08005e58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4a07      	ldr	r2, [pc, #28]	@ (8005e84 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4a06      	ldr	r2, [pc, #24]	@ (8005e88 <vApplicationGetTimerTaskMemory+0x30>)
 8005e6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e76:	601a      	str	r2, [r3, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	2000883c 	.word	0x2000883c
 8005e88:	200088e4 	.word	0x200088e4

08005e8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f103 0208 	add.w	r2, r3, #8
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f103 0208 	add.w	r2, r3, #8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f103 0208 	add.w	r2, r3, #8
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	601a      	str	r2, [r3, #0]
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d103      	bne.n	8005f4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	e00c      	b.n	8005f68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3308      	adds	r3, #8
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e002      	b.n	8005f5c <vListInsert+0x2e>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d2f6      	bcs.n	8005f56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6892      	ldr	r2, [r2, #8]
 8005fb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6852      	ldr	r2, [r2, #4]
 8005fc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d103      	bne.n	8005fd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	1e5a      	subs	r2, r3, #1
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10b      	bne.n	8006020 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	e7fd      	b.n	800601c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006020:	f002 f9ca 	bl	80083b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602c:	68f9      	ldr	r1, [r7, #12]
 800602e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	441a      	add	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006050:	3b01      	subs	r3, #1
 8006052:	68f9      	ldr	r1, [r7, #12]
 8006054:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	441a      	add	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	22ff      	movs	r2, #255	@ 0xff
 8006064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	22ff      	movs	r2, #255	@ 0xff
 800606c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d114      	bne.n	80060a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01a      	beq.n	80060b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3310      	adds	r3, #16
 8006082:	4618      	mov	r0, r3
 8006084:	f001 f906 	bl	8007294 <xTaskRemoveFromEventList>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d012      	beq.n	80060b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800608e:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <xQueueGenericReset+0xd0>)
 8006090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	e009      	b.n	80060b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3310      	adds	r3, #16
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fef1 	bl	8005e8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3324      	adds	r3, #36	@ 0x24
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff feec 	bl	8005e8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060b4:	f002 f9b2 	bl	800841c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060b8:	2301      	movs	r3, #1
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	e000ed04 	.word	0xe000ed04

080060c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08e      	sub	sp, #56	@ 0x38
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10b      	bne.n	80060f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	e7fd      	b.n	800610e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <xQueueGenericCreateStatic+0x56>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <xQueueGenericCreateStatic+0x5a>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <xQueueGenericCreateStatic+0x5c>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	623b      	str	r3, [r7, #32]
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	e7fd      	b.n	800613c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <xQueueGenericCreateStatic+0x84>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <xQueueGenericCreateStatic+0x88>
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <xQueueGenericCreateStatic+0x8a>
 8006150:	2300      	movs	r3, #0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10b      	bne.n	800616e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	61fb      	str	r3, [r7, #28]
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	e7fd      	b.n	800616a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800616e:	2350      	movs	r3, #80	@ 0x50
 8006170:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b50      	cmp	r3, #80	@ 0x50
 8006176:	d00b      	beq.n	8006190 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	61bb      	str	r3, [r7, #24]
}
 800618a:	bf00      	nop
 800618c:	bf00      	nop
 800618e:	e7fd      	b.n	800618c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00d      	beq.n	80061b6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800619a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061a2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80061a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	4613      	mov	r3, r2
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f805 	bl	80061c0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80061b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3730      	adds	r7, #48	@ 0x30
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d103      	bne.n	80061dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e002      	b.n	80061e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061ee:	2101      	movs	r1, #1
 80061f0:	69b8      	ldr	r0, [r7, #24]
 80061f2:	f7ff feff 	bl	8005ff4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	78fa      	ldrb	r2, [r7, #3]
 80061fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08e      	sub	sp, #56	@ 0x38
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006216:	2300      	movs	r3, #0
 8006218:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <xQueueGenericSend+0x34>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006236:	bf00      	nop
 8006238:	bf00      	nop
 800623a:	e7fd      	b.n	8006238 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d103      	bne.n	800624a <xQueueGenericSend+0x42>
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <xQueueGenericSend+0x46>
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <xQueueGenericSend+0x48>
 800624e:	2300      	movs	r3, #0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10b      	bne.n	800626c <xQueueGenericSend+0x64>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006266:	bf00      	nop
 8006268:	bf00      	nop
 800626a:	e7fd      	b.n	8006268 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d103      	bne.n	800627a <xQueueGenericSend+0x72>
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <xQueueGenericSend+0x76>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <xQueueGenericSend+0x78>
 800627e:	2300      	movs	r3, #0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10b      	bne.n	800629c <xQueueGenericSend+0x94>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	623b      	str	r3, [r7, #32]
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	e7fd      	b.n	8006298 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800629c:	f001 f9c6 	bl	800762c <xTaskGetSchedulerState>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <xQueueGenericSend+0xa4>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <xQueueGenericSend+0xa8>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <xQueueGenericSend+0xaa>
 80062b0:	2300      	movs	r3, #0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10b      	bne.n	80062ce <xQueueGenericSend+0xc6>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	61fb      	str	r3, [r7, #28]
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	e7fd      	b.n	80062ca <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062ce:	f002 f873 	bl	80083b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062da:	429a      	cmp	r2, r3
 80062dc:	d302      	bcc.n	80062e4 <xQueueGenericSend+0xdc>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d129      	bne.n	8006338 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062ea:	f000 fa0d 	bl	8006708 <prvCopyDataToQueue>
 80062ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d010      	beq.n	800631a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	3324      	adds	r3, #36	@ 0x24
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 ffc9 	bl	8007294 <xTaskRemoveFromEventList>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d013      	beq.n	8006330 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006308:	4b3f      	ldr	r3, [pc, #252]	@ (8006408 <xQueueGenericSend+0x200>)
 800630a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	e00a      	b.n	8006330 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800631a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d007      	beq.n	8006330 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006320:	4b39      	ldr	r3, [pc, #228]	@ (8006408 <xQueueGenericSend+0x200>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006330:	f002 f874 	bl	800841c <vPortExitCritical>
				return pdPASS;
 8006334:	2301      	movs	r3, #1
 8006336:	e063      	b.n	8006400 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800633e:	f002 f86d 	bl	800841c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006342:	2300      	movs	r3, #0
 8006344:	e05c      	b.n	8006400 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800634c:	f107 0314 	add.w	r3, r7, #20
 8006350:	4618      	mov	r0, r3
 8006352:	f001 f803 	bl	800735c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006356:	2301      	movs	r3, #1
 8006358:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800635a:	f002 f85f 	bl	800841c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800635e:	f000 fd65 	bl	8006e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006362:	f002 f829 	bl	80083b8 <vPortEnterCritical>
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800636c:	b25b      	sxtb	r3, r3
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006372:	d103      	bne.n	800637c <xQueueGenericSend+0x174>
 8006374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006382:	b25b      	sxtb	r3, r3
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006388:	d103      	bne.n	8006392 <xQueueGenericSend+0x18a>
 800638a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006392:	f002 f843 	bl	800841c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006396:	1d3a      	adds	r2, r7, #4
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fff2 	bl	8007388 <xTaskCheckForTimeOut>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d124      	bne.n	80063f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063ac:	f000 faa4 	bl	80068f8 <prvIsQueueFull>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d018      	beq.n	80063e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	3310      	adds	r3, #16
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	4611      	mov	r1, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 ff16 	bl	80071f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063c6:	f000 fa2f 	bl	8006828 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063ca:	f000 fd3d 	bl	8006e48 <xTaskResumeAll>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f47f af7c 	bne.w	80062ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80063d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006408 <xQueueGenericSend+0x200>)
 80063d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	e772      	b.n	80062ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063ea:	f000 fa1d 	bl	8006828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063ee:	f000 fd2b 	bl	8006e48 <xTaskResumeAll>
 80063f2:	e76c      	b.n	80062ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063f6:	f000 fa17 	bl	8006828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063fa:	f000 fd25 	bl	8006e48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063fe:	2300      	movs	r3, #0
		}
	}
}
 8006400:	4618      	mov	r0, r3
 8006402:	3738      	adds	r7, #56	@ 0x38
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08e      	sub	sp, #56	@ 0x38
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d103      	bne.n	800644a <xQueueGenericSendFromISR+0x3e>
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <xQueueGenericSendFromISR+0x42>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <xQueueGenericSendFromISR+0x44>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10b      	bne.n	800646c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	623b      	str	r3, [r7, #32]
}
 8006466:	bf00      	nop
 8006468:	bf00      	nop
 800646a:	e7fd      	b.n	8006468 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d103      	bne.n	800647a <xQueueGenericSendFromISR+0x6e>
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <xQueueGenericSendFromISR+0x72>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <xQueueGenericSendFromISR+0x74>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10b      	bne.n	800649c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	61fb      	str	r3, [r7, #28]
}
 8006496:	bf00      	nop
 8006498:	bf00      	nop
 800649a:	e7fd      	b.n	8006498 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800649c:	f002 f86c 	bl	8008578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064a0:	f3ef 8211 	mrs	r2, BASEPRI
 80064a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	61ba      	str	r2, [r7, #24]
 80064b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d302      	bcc.n	80064ce <xQueueGenericSendFromISR+0xc2>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d12c      	bne.n	8006528 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064de:	f000 f913 	bl	8006708 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ea:	d112      	bne.n	8006512 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d016      	beq.n	8006522 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f6:	3324      	adds	r3, #36	@ 0x24
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fecb 	bl	8007294 <xTaskRemoveFromEventList>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00e      	beq.n	8006522 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00b      	beq.n	8006522 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	e007      	b.n	8006522 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006512:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006516:	3301      	adds	r3, #1
 8006518:	b2db      	uxtb	r3, r3
 800651a:	b25a      	sxtb	r2, r3
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006522:	2301      	movs	r3, #1
 8006524:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006526:	e001      	b.n	800652c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006528:	2300      	movs	r3, #0
 800652a:	637b      	str	r3, [r7, #52]	@ 0x34
 800652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006536:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800653a:	4618      	mov	r0, r3
 800653c:	3738      	adds	r7, #56	@ 0x38
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08c      	sub	sp, #48	@ 0x30
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006550:	2300      	movs	r3, #0
 8006552:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10b      	bne.n	8006576 <xQueueReceive+0x32>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	623b      	str	r3, [r7, #32]
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	e7fd      	b.n	8006572 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d103      	bne.n	8006584 <xQueueReceive+0x40>
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <xQueueReceive+0x44>
 8006584:	2301      	movs	r3, #1
 8006586:	e000      	b.n	800658a <xQueueReceive+0x46>
 8006588:	2300      	movs	r3, #0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10b      	bne.n	80065a6 <xQueueReceive+0x62>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	61fb      	str	r3, [r7, #28]
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	e7fd      	b.n	80065a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065a6:	f001 f841 	bl	800762c <xTaskGetSchedulerState>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <xQueueReceive+0x72>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <xQueueReceive+0x76>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <xQueueReceive+0x78>
 80065ba:	2300      	movs	r3, #0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10b      	bne.n	80065d8 <xQueueReceive+0x94>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	61bb      	str	r3, [r7, #24]
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80065d8:	f001 feee 	bl	80083b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01f      	beq.n	8006628 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065ec:	f000 f8f6 	bl	80067dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	1e5a      	subs	r2, r3, #1
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00f      	beq.n	8006620 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006602:	3310      	adds	r3, #16
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fe45 	bl	8007294 <xTaskRemoveFromEventList>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006610:	4b3c      	ldr	r3, [pc, #240]	@ (8006704 <xQueueReceive+0x1c0>)
 8006612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006620:	f001 fefc 	bl	800841c <vPortExitCritical>
				return pdPASS;
 8006624:	2301      	movs	r3, #1
 8006626:	e069      	b.n	80066fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800662e:	f001 fef5 	bl	800841c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006632:	2300      	movs	r3, #0
 8006634:	e062      	b.n	80066fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d106      	bne.n	800664a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800663c:	f107 0310 	add.w	r3, r7, #16
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fe8b 	bl	800735c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006646:	2301      	movs	r3, #1
 8006648:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800664a:	f001 fee7 	bl	800841c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800664e:	f000 fbed 	bl	8006e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006652:	f001 feb1 	bl	80083b8 <vPortEnterCritical>
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800665c:	b25b      	sxtb	r3, r3
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006662:	d103      	bne.n	800666c <xQueueReceive+0x128>
 8006664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006672:	b25b      	sxtb	r3, r3
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d103      	bne.n	8006682 <xQueueReceive+0x13e>
 800667a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006682:	f001 fecb 	bl	800841c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006686:	1d3a      	adds	r2, r7, #4
 8006688:	f107 0310 	add.w	r3, r7, #16
 800668c:	4611      	mov	r1, r2
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fe7a 	bl	8007388 <xTaskCheckForTimeOut>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d123      	bne.n	80066e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800669a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800669c:	f000 f916 	bl	80068cc <prvIsQueueEmpty>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d017      	beq.n	80066d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a8:	3324      	adds	r3, #36	@ 0x24
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fd9e 	bl	80071f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066b6:	f000 f8b7 	bl	8006828 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066ba:	f000 fbc5 	bl	8006e48 <xTaskResumeAll>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d189      	bne.n	80065d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80066c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006704 <xQueueReceive+0x1c0>)
 80066c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	e780      	b.n	80065d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d8:	f000 f8a6 	bl	8006828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066dc:	f000 fbb4 	bl	8006e48 <xTaskResumeAll>
 80066e0:	e77a      	b.n	80065d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066e4:	f000 f8a0 	bl	8006828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066e8:	f000 fbae 	bl	8006e48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066ee:	f000 f8ed 	bl	80068cc <prvIsQueueEmpty>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f43f af6f 	beq.w	80065d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3730      	adds	r7, #48	@ 0x30
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10d      	bne.n	8006742 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d14d      	bne.n	80067ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 ff98 	bl	8007668 <xTaskPriorityDisinherit>
 8006738:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	605a      	str	r2, [r3, #4]
 8006740:	e043      	b.n	80067ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d119      	bne.n	800677c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6898      	ldr	r0, [r3, #8]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006750:	461a      	mov	r2, r3
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	f003 fa38 	bl	8009bc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006760:	441a      	add	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	429a      	cmp	r2, r3
 8006770:	d32b      	bcc.n	80067ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	609a      	str	r2, [r3, #8]
 800677a:	e026      	b.n	80067ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	68d8      	ldr	r0, [r3, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006784:	461a      	mov	r2, r3
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	f003 fa1e 	bl	8009bc8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	425b      	negs	r3, r3
 8006796:	441a      	add	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d207      	bcs.n	80067b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b0:	425b      	negs	r3, r3
 80067b2:	441a      	add	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d105      	bne.n	80067ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80067d2:	697b      	ldr	r3, [r7, #20]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d018      	beq.n	8006820 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f6:	441a      	add	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	429a      	cmp	r2, r3
 8006806:	d303      	bcc.n	8006810 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68d9      	ldr	r1, [r3, #12]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	461a      	mov	r2, r3
 800681a:	6838      	ldr	r0, [r7, #0]
 800681c:	f003 f9d4 	bl	8009bc8 <memcpy>
	}
}
 8006820:	bf00      	nop
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006830:	f001 fdc2 	bl	80083b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800683a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800683c:	e011      	b.n	8006862 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006842:	2b00      	cmp	r3, #0
 8006844:	d012      	beq.n	800686c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3324      	adds	r3, #36	@ 0x24
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fd22 	bl	8007294 <xTaskRemoveFromEventList>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006856:	f000 fdfb 	bl	8007450 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	3b01      	subs	r3, #1
 800685e:	b2db      	uxtb	r3, r3
 8006860:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006866:	2b00      	cmp	r3, #0
 8006868:	dce9      	bgt.n	800683e <prvUnlockQueue+0x16>
 800686a:	e000      	b.n	800686e <prvUnlockQueue+0x46>
					break;
 800686c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	22ff      	movs	r2, #255	@ 0xff
 8006872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006876:	f001 fdd1 	bl	800841c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800687a:	f001 fd9d 	bl	80083b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006884:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006886:	e011      	b.n	80068ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d012      	beq.n	80068b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3310      	adds	r3, #16
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fcfd 	bl	8007294 <xTaskRemoveFromEventList>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068a0:	f000 fdd6 	bl	8007450 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dce9      	bgt.n	8006888 <prvUnlockQueue+0x60>
 80068b4:	e000      	b.n	80068b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	22ff      	movs	r2, #255	@ 0xff
 80068bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80068c0:	f001 fdac 	bl	800841c <vPortExitCritical>
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068d4:	f001 fd70 	bl	80083b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068e0:	2301      	movs	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e001      	b.n	80068ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068ea:	f001 fd97 	bl	800841c <vPortExitCritical>

	return xReturn;
 80068ee:	68fb      	ldr	r3, [r7, #12]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006900:	f001 fd5a 	bl	80083b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690c:	429a      	cmp	r2, r3
 800690e:	d102      	bne.n	8006916 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006910:	2301      	movs	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	e001      	b.n	800691a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800691a:	f001 fd7f 	bl	800841c <vPortExitCritical>

	return xReturn;
 800691e:	68fb      	ldr	r3, [r7, #12]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	e014      	b.n	8006962 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006938:	4a0f      	ldr	r2, [pc, #60]	@ (8006978 <vQueueAddToRegistry+0x50>)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006944:	490c      	ldr	r1, [pc, #48]	@ (8006978 <vQueueAddToRegistry+0x50>)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800694e:	4a0a      	ldr	r2, [pc, #40]	@ (8006978 <vQueueAddToRegistry+0x50>)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	4413      	add	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800695a:	e006      	b.n	800696a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3301      	adds	r3, #1
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b07      	cmp	r3, #7
 8006966:	d9e7      	bls.n	8006938 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	20008ce4 	.word	0x20008ce4

0800697c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800698c:	f001 fd14 	bl	80083b8 <vPortEnterCritical>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006996:	b25b      	sxtb	r3, r3
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699c:	d103      	bne.n	80069a6 <vQueueWaitForMessageRestricted+0x2a>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069ac:	b25b      	sxtb	r3, r3
 80069ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b2:	d103      	bne.n	80069bc <vQueueWaitForMessageRestricted+0x40>
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069bc:	f001 fd2e 	bl	800841c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d106      	bne.n	80069d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	3324      	adds	r3, #36	@ 0x24
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fc33 	bl	800723c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069d6:	6978      	ldr	r0, [r7, #20]
 80069d8:	f7ff ff26 	bl	8006828 <prvUnlockQueue>
	}
 80069dc:	bf00      	nop
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08e      	sub	sp, #56	@ 0x38
 80069e8:	af04      	add	r7, sp, #16
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10b      	bne.n	8006a10 <xTaskCreateStatic+0x2c>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	623b      	str	r3, [r7, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
 8006a0e:	e7fd      	b.n	8006a0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	61fb      	str	r3, [r7, #28]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a2e:	23a8      	movs	r3, #168	@ 0xa8
 8006a30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2ba8      	cmp	r3, #168	@ 0xa8
 8006a36:	d00b      	beq.n	8006a50 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	61bb      	str	r3, [r7, #24]
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	e7fd      	b.n	8006a4c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01e      	beq.n	8006a94 <xTaskCreateStatic+0xb0>
 8006a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01b      	beq.n	8006a94 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a64:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	2202      	movs	r2, #2
 8006a6a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9303      	str	r3, [sp, #12]
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	9302      	str	r3, [sp, #8]
 8006a76:	f107 0314 	add.w	r3, r7, #20
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f850 	bl	8006b2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a8e:	f000 f8ed 	bl	8006c6c <prvAddNewTaskToReadyList>
 8006a92:	e001      	b.n	8006a98 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a98:	697b      	ldr	r3, [r7, #20]
	}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3728      	adds	r7, #40	@ 0x28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b08c      	sub	sp, #48	@ 0x30
 8006aa6:	af04      	add	r7, sp, #16
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 fda0 	bl	80085fc <pvPortMalloc>
 8006abc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00e      	beq.n	8006ae2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006ac4:	20a8      	movs	r0, #168	@ 0xa8
 8006ac6:	f001 fd99 	bl	80085fc <pvPortMalloc>
 8006aca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ad8:	e005      	b.n	8006ae6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ada:	6978      	ldr	r0, [r7, #20]
 8006adc:	f001 fe56 	bl	800878c <vPortFree>
 8006ae0:	e001      	b.n	8006ae6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d017      	beq.n	8006b1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006af4:	88fa      	ldrh	r2, [r7, #6]
 8006af6:	2300      	movs	r3, #0
 8006af8:	9303      	str	r3, [sp, #12]
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	9302      	str	r3, [sp, #8]
 8006afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f80e 	bl	8006b2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b10:	69f8      	ldr	r0, [r7, #28]
 8006b12:	f000 f8ab 	bl	8006c6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b16:	2301      	movs	r3, #1
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	e002      	b.n	8006b22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b22:	69bb      	ldr	r3, [r7, #24]
	}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	461a      	mov	r2, r3
 8006b44:	21a5      	movs	r1, #165	@ 0xa5
 8006b46:	f002 ffb5 	bl	8009ab4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b54:	3b01      	subs	r3, #1
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	f023 0307 	bic.w	r3, r3, #7
 8006b62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00b      	beq.n	8006b86 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	617b      	str	r3, [r7, #20]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b86:	2300      	movs	r3, #0
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	e012      	b.n	8006bb2 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	4413      	add	r3, r2
 8006b92:	7819      	ldrb	r1, [r3, #0]
 8006b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	4413      	add	r3, r2
 8006b9a:	3334      	adds	r3, #52	@ 0x34
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d006      	beq.n	8006bba <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	2b0f      	cmp	r3, #15
 8006bb6:	d9e9      	bls.n	8006b8c <prvInitialiseNewTask+0x60>
 8006bb8:	e000      	b.n	8006bbc <prvInitialiseNewTask+0x90>
		{
			break;
 8006bba:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc6:	2b37      	cmp	r3, #55	@ 0x37
 8006bc8:	d901      	bls.n	8006bce <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bca:	2337      	movs	r3, #55	@ 0x37
 8006bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bd8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	2200      	movs	r2, #0
 8006bde:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	3304      	adds	r3, #4
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff f971 	bl	8005ecc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	3318      	adds	r3, #24
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff f96c 	bl	8005ecc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c08:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	3354      	adds	r3, #84	@ 0x54
 8006c1e:	224c      	movs	r2, #76	@ 0x4c
 8006c20:	2100      	movs	r1, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f002 ff46 	bl	8009ab4 <memset>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8006c60 <prvInitialiseNewTask+0x134>)
 8006c2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	4a0c      	ldr	r2, [pc, #48]	@ (8006c64 <prvInitialiseNewTask+0x138>)
 8006c32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	4a0c      	ldr	r2, [pc, #48]	@ (8006c68 <prvInitialiseNewTask+0x13c>)
 8006c38:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	68f9      	ldr	r1, [r7, #12]
 8006c3e:	69b8      	ldr	r0, [r7, #24]
 8006c40:	f001 fa88 	bl	8008154 <pxPortInitialiseStack>
 8006c44:	4602      	mov	r2, r0
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c56:	bf00      	nop
 8006c58:	3720      	adds	r7, #32
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20009f70 	.word	0x20009f70
 8006c64:	20009fd8 	.word	0x20009fd8
 8006c68:	2000a040 	.word	0x2000a040

08006c6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c74:	f001 fba0 	bl	80083b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c78:	4b2d      	ldr	r3, [pc, #180]	@ (8006d30 <prvAddNewTaskToReadyList+0xc4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8006d30 <prvAddNewTaskToReadyList+0xc4>)
 8006c80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c82:	4b2c      	ldr	r3, [pc, #176]	@ (8006d34 <prvAddNewTaskToReadyList+0xc8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d109      	bne.n	8006c9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8006d34 <prvAddNewTaskToReadyList+0xc8>)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c90:	4b27      	ldr	r3, [pc, #156]	@ (8006d30 <prvAddNewTaskToReadyList+0xc4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d110      	bne.n	8006cba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c98:	f000 fbfe 	bl	8007498 <prvInitialiseTaskLists>
 8006c9c:	e00d      	b.n	8006cba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c9e:	4b26      	ldr	r3, [pc, #152]	@ (8006d38 <prvAddNewTaskToReadyList+0xcc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ca6:	4b23      	ldr	r3, [pc, #140]	@ (8006d34 <prvAddNewTaskToReadyList+0xc8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d802      	bhi.n	8006cba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8006d34 <prvAddNewTaskToReadyList+0xc8>)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cba:	4b20      	ldr	r3, [pc, #128]	@ (8006d3c <prvAddNewTaskToReadyList+0xd0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8006d3c <prvAddNewTaskToReadyList+0xd0>)
 8006cc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d3c <prvAddNewTaskToReadyList+0xd0>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8006d40 <prvAddNewTaskToReadyList+0xd4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d903      	bls.n	8006ce0 <prvAddNewTaskToReadyList+0x74>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	4a18      	ldr	r2, [pc, #96]	@ (8006d40 <prvAddNewTaskToReadyList+0xd4>)
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4a15      	ldr	r2, [pc, #84]	@ (8006d44 <prvAddNewTaskToReadyList+0xd8>)
 8006cee:	441a      	add	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f7ff f8f5 	bl	8005ee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cfc:	f001 fb8e 	bl	800841c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d00:	4b0d      	ldr	r3, [pc, #52]	@ (8006d38 <prvAddNewTaskToReadyList+0xcc>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00e      	beq.n	8006d26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d08:	4b0a      	ldr	r3, [pc, #40]	@ (8006d34 <prvAddNewTaskToReadyList+0xc8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d207      	bcs.n	8006d26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d16:	4b0c      	ldr	r3, [pc, #48]	@ (8006d48 <prvAddNewTaskToReadyList+0xdc>)
 8006d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	200091f8 	.word	0x200091f8
 8006d34:	20008d24 	.word	0x20008d24
 8006d38:	20009204 	.word	0x20009204
 8006d3c:	20009214 	.word	0x20009214
 8006d40:	20009200 	.word	0x20009200
 8006d44:	20008d28 	.word	0x20008d28
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	@ 0x28
 8006d50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d5a:	463a      	mov	r2, r7
 8006d5c:	1d39      	adds	r1, r7, #4
 8006d5e:	f107 0308 	add.w	r3, r7, #8
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff f85e 	bl	8005e24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	9202      	str	r2, [sp, #8]
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	2300      	movs	r3, #0
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	2300      	movs	r3, #0
 8006d78:	460a      	mov	r2, r1
 8006d7a:	4924      	ldr	r1, [pc, #144]	@ (8006e0c <vTaskStartScheduler+0xc0>)
 8006d7c:	4824      	ldr	r0, [pc, #144]	@ (8006e10 <vTaskStartScheduler+0xc4>)
 8006d7e:	f7ff fe31 	bl	80069e4 <xTaskCreateStatic>
 8006d82:	4603      	mov	r3, r0
 8006d84:	4a23      	ldr	r2, [pc, #140]	@ (8006e14 <vTaskStartScheduler+0xc8>)
 8006d86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d88:	4b22      	ldr	r3, [pc, #136]	@ (8006e14 <vTaskStartScheduler+0xc8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d90:	2301      	movs	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	e001      	b.n	8006d9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d102      	bne.n	8006da6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006da0:	f000 feb8 	bl	8007b14 <xTimerCreateTimerTask>
 8006da4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d11b      	bne.n	8006de4 <vTaskStartScheduler+0x98>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	613b      	str	r3, [r7, #16]
}
 8006dbe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dc0:	4b15      	ldr	r3, [pc, #84]	@ (8006e18 <vTaskStartScheduler+0xcc>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3354      	adds	r3, #84	@ 0x54
 8006dc6:	4a15      	ldr	r2, [pc, #84]	@ (8006e1c <vTaskStartScheduler+0xd0>)
 8006dc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dca:	4b15      	ldr	r3, [pc, #84]	@ (8006e20 <vTaskStartScheduler+0xd4>)
 8006dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dd2:	4b14      	ldr	r3, [pc, #80]	@ (8006e24 <vTaskStartScheduler+0xd8>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006dd8:	4b13      	ldr	r3, [pc, #76]	@ (8006e28 <vTaskStartScheduler+0xdc>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dde:	f001 fa47 	bl	8008270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006de2:	e00f      	b.n	8006e04 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dea:	d10b      	bne.n	8006e04 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	60fb      	str	r3, [r7, #12]
}
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
 8006e02:	e7fd      	b.n	8006e00 <vTaskStartScheduler+0xb4>
}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	08009ed4 	.word	0x08009ed4
 8006e10:	08007469 	.word	0x08007469
 8006e14:	2000921c 	.word	0x2000921c
 8006e18:	20008d24 	.word	0x20008d24
 8006e1c:	20000014 	.word	0x20000014
 8006e20:	20009218 	.word	0x20009218
 8006e24:	20009204 	.word	0x20009204
 8006e28:	200091fc 	.word	0x200091fc

08006e2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e30:	4b04      	ldr	r3, [pc, #16]	@ (8006e44 <vTaskSuspendAll+0x18>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	4a03      	ldr	r2, [pc, #12]	@ (8006e44 <vTaskSuspendAll+0x18>)
 8006e38:	6013      	str	r3, [r2, #0]
}
 8006e3a:	bf00      	nop
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	20009220 	.word	0x20009220

08006e48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e56:	4b42      	ldr	r3, [pc, #264]	@ (8006f60 <xTaskResumeAll+0x118>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10b      	bne.n	8006e76 <xTaskResumeAll+0x2e>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	603b      	str	r3, [r7, #0]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e76:	f001 fa9f 	bl	80083b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e7a:	4b39      	ldr	r3, [pc, #228]	@ (8006f60 <xTaskResumeAll+0x118>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	4a37      	ldr	r2, [pc, #220]	@ (8006f60 <xTaskResumeAll+0x118>)
 8006e82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e84:	4b36      	ldr	r3, [pc, #216]	@ (8006f60 <xTaskResumeAll+0x118>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d162      	bne.n	8006f52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e8c:	4b35      	ldr	r3, [pc, #212]	@ (8006f64 <xTaskResumeAll+0x11c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d05e      	beq.n	8006f52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e94:	e02f      	b.n	8006ef6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006e96:	4b34      	ldr	r3, [pc, #208]	@ (8006f68 <xTaskResumeAll+0x120>)
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3318      	adds	r3, #24
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff f87c 	bl	8005fa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff f877 	bl	8005fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8006f6c <xTaskResumeAll+0x124>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d903      	bls.n	8006ec6 <xTaskResumeAll+0x7e>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8006f6c <xTaskResumeAll+0x124>)
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4a27      	ldr	r2, [pc, #156]	@ (8006f70 <xTaskResumeAll+0x128>)
 8006ed4:	441a      	add	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f7ff f802 	bl	8005ee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee6:	4b23      	ldr	r3, [pc, #140]	@ (8006f74 <xTaskResumeAll+0x12c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d302      	bcc.n	8006ef6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006ef0:	4b21      	ldr	r3, [pc, #132]	@ (8006f78 <xTaskResumeAll+0x130>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8006f68 <xTaskResumeAll+0x120>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1cb      	bne.n	8006e96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f04:	f000 fb6c 	bl	80075e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f08:	4b1c      	ldr	r3, [pc, #112]	@ (8006f7c <xTaskResumeAll+0x134>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d010      	beq.n	8006f36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f14:	f000 f846 	bl	8006fa4 <xTaskIncrementTick>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006f1e:	4b16      	ldr	r3, [pc, #88]	@ (8006f78 <xTaskResumeAll+0x130>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f1      	bne.n	8006f14 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006f30:	4b12      	ldr	r3, [pc, #72]	@ (8006f7c <xTaskResumeAll+0x134>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f36:	4b10      	ldr	r3, [pc, #64]	@ (8006f78 <xTaskResumeAll+0x130>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f42:	4b0f      	ldr	r3, [pc, #60]	@ (8006f80 <xTaskResumeAll+0x138>)
 8006f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f52:	f001 fa63 	bl	800841c <vPortExitCritical>

	return xAlreadyYielded;
 8006f56:	68bb      	ldr	r3, [r7, #8]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20009220 	.word	0x20009220
 8006f64:	200091f8 	.word	0x200091f8
 8006f68:	200091b8 	.word	0x200091b8
 8006f6c:	20009200 	.word	0x20009200
 8006f70:	20008d28 	.word	0x20008d28
 8006f74:	20008d24 	.word	0x20008d24
 8006f78:	2000920c 	.word	0x2000920c
 8006f7c:	20009208 	.word	0x20009208
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f8a:	4b05      	ldr	r3, [pc, #20]	@ (8006fa0 <xTaskGetTickCount+0x1c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f90:	687b      	ldr	r3, [r7, #4]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	200091fc 	.word	0x200091fc

08006fa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fae:	4b52      	ldr	r3, [pc, #328]	@ (80070f8 <xTaskIncrementTick+0x154>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f040 808f 	bne.w	80070d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fb8:	4b50      	ldr	r3, [pc, #320]	@ (80070fc <xTaskIncrementTick+0x158>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80070fc <xTaskIncrementTick+0x158>)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d121      	bne.n	8007010 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8007100 <xTaskIncrementTick+0x15c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00b      	beq.n	8006fee <xTaskIncrementTick+0x4a>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	603b      	str	r3, [r7, #0]
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <xTaskIncrementTick+0x46>
 8006fee:	4b44      	ldr	r3, [pc, #272]	@ (8007100 <xTaskIncrementTick+0x15c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	4b43      	ldr	r3, [pc, #268]	@ (8007104 <xTaskIncrementTick+0x160>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a41      	ldr	r2, [pc, #260]	@ (8007100 <xTaskIncrementTick+0x15c>)
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	4a41      	ldr	r2, [pc, #260]	@ (8007104 <xTaskIncrementTick+0x160>)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	4b41      	ldr	r3, [pc, #260]	@ (8007108 <xTaskIncrementTick+0x164>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3301      	adds	r3, #1
 8007008:	4a3f      	ldr	r2, [pc, #252]	@ (8007108 <xTaskIncrementTick+0x164>)
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	f000 fae8 	bl	80075e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007010:	4b3e      	ldr	r3, [pc, #248]	@ (800710c <xTaskIncrementTick+0x168>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	429a      	cmp	r2, r3
 8007018:	d34e      	bcc.n	80070b8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800701a:	4b39      	ldr	r3, [pc, #228]	@ (8007100 <xTaskIncrementTick+0x15c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <xTaskIncrementTick+0x84>
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <xTaskIncrementTick+0x86>
 8007028:	2300      	movs	r3, #0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d004      	beq.n	8007038 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800702e:	4b37      	ldr	r3, [pc, #220]	@ (800710c <xTaskIncrementTick+0x168>)
 8007030:	f04f 32ff 	mov.w	r2, #4294967295
 8007034:	601a      	str	r2, [r3, #0]
					break;
 8007036:	e03f      	b.n	80070b8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007038:	4b31      	ldr	r3, [pc, #196]	@ (8007100 <xTaskIncrementTick+0x15c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	429a      	cmp	r2, r3
 800704e:	d203      	bcs.n	8007058 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007050:	4a2e      	ldr	r2, [pc, #184]	@ (800710c <xTaskIncrementTick+0x168>)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6013      	str	r3, [r2, #0]
						break;
 8007056:	e02f      	b.n	80070b8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	3304      	adds	r3, #4
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe ff9f 	bl	8005fa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007066:	2b00      	cmp	r3, #0
 8007068:	d004      	beq.n	8007074 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	3318      	adds	r3, #24
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe ff96 	bl	8005fa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007078:	4b25      	ldr	r3, [pc, #148]	@ (8007110 <xTaskIncrementTick+0x16c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d903      	bls.n	8007088 <xTaskIncrementTick+0xe4>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	4a22      	ldr	r2, [pc, #136]	@ (8007110 <xTaskIncrementTick+0x16c>)
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4a1f      	ldr	r2, [pc, #124]	@ (8007114 <xTaskIncrementTick+0x170>)
 8007096:	441a      	add	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	3304      	adds	r3, #4
 800709c:	4619      	mov	r1, r3
 800709e:	4610      	mov	r0, r2
 80070a0:	f7fe ff21 	bl	8005ee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007118 <xTaskIncrementTick+0x174>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d3b3      	bcc.n	800701a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80070b2:	2301      	movs	r3, #1
 80070b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070b6:	e7b0      	b.n	800701a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070b8:	4b17      	ldr	r3, [pc, #92]	@ (8007118 <xTaskIncrementTick+0x174>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070be:	4915      	ldr	r1, [pc, #84]	@ (8007114 <xTaskIncrementTick+0x170>)
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d907      	bls.n	80070e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070d0:	2301      	movs	r3, #1
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	e004      	b.n	80070e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80070d6:	4b11      	ldr	r3, [pc, #68]	@ (800711c <xTaskIncrementTick+0x178>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	4a0f      	ldr	r2, [pc, #60]	@ (800711c <xTaskIncrementTick+0x178>)
 80070de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80070e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007120 <xTaskIncrementTick+0x17c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80070e8:	2301      	movs	r3, #1
 80070ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80070ec:	697b      	ldr	r3, [r7, #20]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20009220 	.word	0x20009220
 80070fc:	200091fc 	.word	0x200091fc
 8007100:	200091b0 	.word	0x200091b0
 8007104:	200091b4 	.word	0x200091b4
 8007108:	20009210 	.word	0x20009210
 800710c:	20009218 	.word	0x20009218
 8007110:	20009200 	.word	0x20009200
 8007114:	20008d28 	.word	0x20008d28
 8007118:	20008d24 	.word	0x20008d24
 800711c:	20009208 	.word	0x20009208
 8007120:	2000920c 	.word	0x2000920c

08007124 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800712a:	4b2b      	ldr	r3, [pc, #172]	@ (80071d8 <vTaskSwitchContext+0xb4>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007132:	4b2a      	ldr	r3, [pc, #168]	@ (80071dc <vTaskSwitchContext+0xb8>)
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007138:	e047      	b.n	80071ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800713a:	4b28      	ldr	r3, [pc, #160]	@ (80071dc <vTaskSwitchContext+0xb8>)
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007140:	4b27      	ldr	r3, [pc, #156]	@ (80071e0 <vTaskSwitchContext+0xbc>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	e011      	b.n	800716c <vTaskSwitchContext+0x48>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10b      	bne.n	8007166 <vTaskSwitchContext+0x42>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	607b      	str	r3, [r7, #4]
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	e7fd      	b.n	8007162 <vTaskSwitchContext+0x3e>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3b01      	subs	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	491d      	ldr	r1, [pc, #116]	@ (80071e4 <vTaskSwitchContext+0xc0>)
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0e3      	beq.n	8007148 <vTaskSwitchContext+0x24>
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4613      	mov	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4a16      	ldr	r2, [pc, #88]	@ (80071e4 <vTaskSwitchContext+0xc0>)
 800718c:	4413      	add	r3, r2
 800718e:	60bb      	str	r3, [r7, #8]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	605a      	str	r2, [r3, #4]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	3308      	adds	r3, #8
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d104      	bne.n	80071b0 <vTaskSwitchContext+0x8c>
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	605a      	str	r2, [r3, #4]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	4a0c      	ldr	r2, [pc, #48]	@ (80071e8 <vTaskSwitchContext+0xc4>)
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	4a09      	ldr	r2, [pc, #36]	@ (80071e0 <vTaskSwitchContext+0xbc>)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071c0:	4b09      	ldr	r3, [pc, #36]	@ (80071e8 <vTaskSwitchContext+0xc4>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3354      	adds	r3, #84	@ 0x54
 80071c6:	4a09      	ldr	r2, [pc, #36]	@ (80071ec <vTaskSwitchContext+0xc8>)
 80071c8:	6013      	str	r3, [r2, #0]
}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20009220 	.word	0x20009220
 80071dc:	2000920c 	.word	0x2000920c
 80071e0:	20009200 	.word	0x20009200
 80071e4:	20008d28 	.word	0x20008d28
 80071e8:	20008d24 	.word	0x20008d24
 80071ec:	20000014 	.word	0x20000014

080071f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10b      	bne.n	8007218 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	60fb      	str	r3, [r7, #12]
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007218:	4b07      	ldr	r3, [pc, #28]	@ (8007238 <vTaskPlaceOnEventList+0x48>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3318      	adds	r3, #24
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7fe fe84 	bl	8005f2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007226:	2101      	movs	r1, #1
 8007228:	6838      	ldr	r0, [r7, #0]
 800722a:	f000 fc1f 	bl	8007a6c <prvAddCurrentTaskToDelayedList>
}
 800722e:	bf00      	nop
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20008d24 	.word	0x20008d24

0800723c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10b      	bne.n	8007266 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	617b      	str	r3, [r7, #20]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007266:	4b0a      	ldr	r3, [pc, #40]	@ (8007290 <vTaskPlaceOnEventListRestricted+0x54>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3318      	adds	r3, #24
 800726c:	4619      	mov	r1, r3
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7fe fe39 	bl	8005ee6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800727a:	f04f 33ff 	mov.w	r3, #4294967295
 800727e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	68b8      	ldr	r0, [r7, #8]
 8007284:	f000 fbf2 	bl	8007a6c <prvAddCurrentTaskToDelayedList>
	}
 8007288:	bf00      	nop
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20008d24 	.word	0x20008d24

08007294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	60fb      	str	r3, [r7, #12]
}
 80072bc:	bf00      	nop
 80072be:	bf00      	nop
 80072c0:	e7fd      	b.n	80072be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	3318      	adds	r3, #24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe fe6a 	bl	8005fa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007344 <xTaskRemoveFromEventList+0xb0>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d11d      	bne.n	8007310 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe fe61 	bl	8005fa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e2:	4b19      	ldr	r3, [pc, #100]	@ (8007348 <xTaskRemoveFromEventList+0xb4>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d903      	bls.n	80072f2 <xTaskRemoveFromEventList+0x5e>
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ee:	4a16      	ldr	r2, [pc, #88]	@ (8007348 <xTaskRemoveFromEventList+0xb4>)
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4a13      	ldr	r2, [pc, #76]	@ (800734c <xTaskRemoveFromEventList+0xb8>)
 8007300:	441a      	add	r2, r3
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3304      	adds	r3, #4
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f7fe fdec 	bl	8005ee6 <vListInsertEnd>
 800730e:	e005      	b.n	800731c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	3318      	adds	r3, #24
 8007314:	4619      	mov	r1, r3
 8007316:	480e      	ldr	r0, [pc, #56]	@ (8007350 <xTaskRemoveFromEventList+0xbc>)
 8007318:	f7fe fde5 	bl	8005ee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007320:	4b0c      	ldr	r3, [pc, #48]	@ (8007354 <xTaskRemoveFromEventList+0xc0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007326:	429a      	cmp	r2, r3
 8007328:	d905      	bls.n	8007336 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800732a:	2301      	movs	r3, #1
 800732c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800732e:	4b0a      	ldr	r3, [pc, #40]	@ (8007358 <xTaskRemoveFromEventList+0xc4>)
 8007330:	2201      	movs	r2, #1
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e001      	b.n	800733a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800733a:	697b      	ldr	r3, [r7, #20]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20009220 	.word	0x20009220
 8007348:	20009200 	.word	0x20009200
 800734c:	20008d28 	.word	0x20008d28
 8007350:	200091b8 	.word	0x200091b8
 8007354:	20008d24 	.word	0x20008d24
 8007358:	2000920c 	.word	0x2000920c

0800735c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007364:	4b06      	ldr	r3, [pc, #24]	@ (8007380 <vTaskInternalSetTimeOutState+0x24>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800736c:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <vTaskInternalSetTimeOutState+0x28>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	605a      	str	r2, [r3, #4]
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	20009210 	.word	0x20009210
 8007384:	200091fc 	.word	0x200091fc

08007388 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10b      	bne.n	80073b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	613b      	str	r3, [r7, #16]
}
 80073aa:	bf00      	nop
 80073ac:	bf00      	nop
 80073ae:	e7fd      	b.n	80073ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10b      	bne.n	80073ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	60fb      	str	r3, [r7, #12]
}
 80073c8:	bf00      	nop
 80073ca:	bf00      	nop
 80073cc:	e7fd      	b.n	80073ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80073ce:	f000 fff3 	bl	80083b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007448 <xTaskCheckForTimeOut+0xc0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ea:	d102      	bne.n	80073f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]
 80073f0:	e023      	b.n	800743a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	4b15      	ldr	r3, [pc, #84]	@ (800744c <xTaskCheckForTimeOut+0xc4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d007      	beq.n	800740e <xTaskCheckForTimeOut+0x86>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	429a      	cmp	r2, r3
 8007406:	d302      	bcc.n	800740e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007408:	2301      	movs	r3, #1
 800740a:	61fb      	str	r3, [r7, #28]
 800740c:	e015      	b.n	800743a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	429a      	cmp	r2, r3
 8007416:	d20b      	bcs.n	8007430 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff ff99 	bl	800735c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800742a:	2300      	movs	r3, #0
 800742c:	61fb      	str	r3, [r7, #28]
 800742e:	e004      	b.n	800743a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007436:	2301      	movs	r3, #1
 8007438:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800743a:	f000 ffef 	bl	800841c <vPortExitCritical>

	return xReturn;
 800743e:	69fb      	ldr	r3, [r7, #28]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3720      	adds	r7, #32
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	200091fc 	.word	0x200091fc
 800744c:	20009210 	.word	0x20009210

08007450 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007454:	4b03      	ldr	r3, [pc, #12]	@ (8007464 <vTaskMissedYield+0x14>)
 8007456:	2201      	movs	r2, #1
 8007458:	601a      	str	r2, [r3, #0]
}
 800745a:	bf00      	nop
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	2000920c 	.word	0x2000920c

08007468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007470:	f000 f852 	bl	8007518 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007474:	4b06      	ldr	r3, [pc, #24]	@ (8007490 <prvIdleTask+0x28>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d9f9      	bls.n	8007470 <prvIdleTask+0x8>
			{
				taskYIELD();
 800747c:	4b05      	ldr	r3, [pc, #20]	@ (8007494 <prvIdleTask+0x2c>)
 800747e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800748c:	e7f0      	b.n	8007470 <prvIdleTask+0x8>
 800748e:	bf00      	nop
 8007490:	20008d28 	.word	0x20008d28
 8007494:	e000ed04 	.word	0xe000ed04

08007498 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800749e:	2300      	movs	r3, #0
 80074a0:	607b      	str	r3, [r7, #4]
 80074a2:	e00c      	b.n	80074be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4a12      	ldr	r2, [pc, #72]	@ (80074f8 <prvInitialiseTaskLists+0x60>)
 80074b0:	4413      	add	r3, r2
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fcea 	bl	8005e8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3301      	adds	r3, #1
 80074bc:	607b      	str	r3, [r7, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b37      	cmp	r3, #55	@ 0x37
 80074c2:	d9ef      	bls.n	80074a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074c4:	480d      	ldr	r0, [pc, #52]	@ (80074fc <prvInitialiseTaskLists+0x64>)
 80074c6:	f7fe fce1 	bl	8005e8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074ca:	480d      	ldr	r0, [pc, #52]	@ (8007500 <prvInitialiseTaskLists+0x68>)
 80074cc:	f7fe fcde 	bl	8005e8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074d0:	480c      	ldr	r0, [pc, #48]	@ (8007504 <prvInitialiseTaskLists+0x6c>)
 80074d2:	f7fe fcdb 	bl	8005e8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074d6:	480c      	ldr	r0, [pc, #48]	@ (8007508 <prvInitialiseTaskLists+0x70>)
 80074d8:	f7fe fcd8 	bl	8005e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074dc:	480b      	ldr	r0, [pc, #44]	@ (800750c <prvInitialiseTaskLists+0x74>)
 80074de:	f7fe fcd5 	bl	8005e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007510 <prvInitialiseTaskLists+0x78>)
 80074e4:	4a05      	ldr	r2, [pc, #20]	@ (80074fc <prvInitialiseTaskLists+0x64>)
 80074e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007514 <prvInitialiseTaskLists+0x7c>)
 80074ea:	4a05      	ldr	r2, [pc, #20]	@ (8007500 <prvInitialiseTaskLists+0x68>)
 80074ec:	601a      	str	r2, [r3, #0]
}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20008d28 	.word	0x20008d28
 80074fc:	20009188 	.word	0x20009188
 8007500:	2000919c 	.word	0x2000919c
 8007504:	200091b8 	.word	0x200091b8
 8007508:	200091cc 	.word	0x200091cc
 800750c:	200091e4 	.word	0x200091e4
 8007510:	200091b0 	.word	0x200091b0
 8007514:	200091b4 	.word	0x200091b4

08007518 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800751e:	e019      	b.n	8007554 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007520:	f000 ff4a 	bl	80083b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007524:	4b10      	ldr	r3, [pc, #64]	@ (8007568 <prvCheckTasksWaitingTermination+0x50>)
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3304      	adds	r3, #4
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe fd35 	bl	8005fa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007536:	4b0d      	ldr	r3, [pc, #52]	@ (800756c <prvCheckTasksWaitingTermination+0x54>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3b01      	subs	r3, #1
 800753c:	4a0b      	ldr	r2, [pc, #44]	@ (800756c <prvCheckTasksWaitingTermination+0x54>)
 800753e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007540:	4b0b      	ldr	r3, [pc, #44]	@ (8007570 <prvCheckTasksWaitingTermination+0x58>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3b01      	subs	r3, #1
 8007546:	4a0a      	ldr	r2, [pc, #40]	@ (8007570 <prvCheckTasksWaitingTermination+0x58>)
 8007548:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800754a:	f000 ff67 	bl	800841c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f810 	bl	8007574 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007554:	4b06      	ldr	r3, [pc, #24]	@ (8007570 <prvCheckTasksWaitingTermination+0x58>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e1      	bne.n	8007520 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	200091cc 	.word	0x200091cc
 800756c:	200091f8 	.word	0x200091f8
 8007570:	200091e0 	.word	0x200091e0

08007574 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3354      	adds	r3, #84	@ 0x54
 8007580:	4618      	mov	r0, r3
 8007582:	f002 fa9f 	bl	8009ac4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800758c:	2b00      	cmp	r3, #0
 800758e:	d108      	bne.n	80075a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007594:	4618      	mov	r0, r3
 8007596:	f001 f8f9 	bl	800878c <vPortFree>
				vPortFree( pxTCB );
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f001 f8f6 	bl	800878c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075a0:	e019      	b.n	80075d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d103      	bne.n	80075b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f8ed 	bl	800878c <vPortFree>
	}
 80075b2:	e010      	b.n	80075d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d00b      	beq.n	80075d6 <prvDeleteTCB+0x62>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	60fb      	str	r3, [r7, #12]
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	e7fd      	b.n	80075d2 <prvDeleteTCB+0x5e>
	}
 80075d6:	bf00      	nop
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007624 <prvResetNextTaskUnblockTime+0x44>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <prvResetNextTaskUnblockTime+0x14>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <prvResetNextTaskUnblockTime+0x16>
 80075f4:	2300      	movs	r3, #0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d004      	beq.n	8007604 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007628 <prvResetNextTaskUnblockTime+0x48>)
 80075fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007600:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007602:	e008      	b.n	8007616 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007604:	4b07      	ldr	r3, [pc, #28]	@ (8007624 <prvResetNextTaskUnblockTime+0x44>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	4a05      	ldr	r2, [pc, #20]	@ (8007628 <prvResetNextTaskUnblockTime+0x48>)
 8007614:	6013      	str	r3, [r2, #0]
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	200091b0 	.word	0x200091b0
 8007628:	20009218 	.word	0x20009218

0800762c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007632:	4b0b      	ldr	r3, [pc, #44]	@ (8007660 <xTaskGetSchedulerState+0x34>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d102      	bne.n	8007640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800763a:	2301      	movs	r3, #1
 800763c:	607b      	str	r3, [r7, #4]
 800763e:	e008      	b.n	8007652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007640:	4b08      	ldr	r3, [pc, #32]	@ (8007664 <xTaskGetSchedulerState+0x38>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d102      	bne.n	800764e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007648:	2302      	movs	r3, #2
 800764a:	607b      	str	r3, [r7, #4]
 800764c:	e001      	b.n	8007652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800764e:	2300      	movs	r3, #0
 8007650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007652:	687b      	ldr	r3, [r7, #4]
	}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	20009204 	.word	0x20009204
 8007664:	20009220 	.word	0x20009220

08007668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d058      	beq.n	8007730 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800767e:	4b2f      	ldr	r3, [pc, #188]	@ (800773c <xTaskPriorityDisinherit+0xd4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	429a      	cmp	r2, r3
 8007686:	d00b      	beq.n	80076a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	60fb      	str	r3, [r7, #12]
}
 800769a:	bf00      	nop
 800769c:	bf00      	nop
 800769e:	e7fd      	b.n	800769c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10b      	bne.n	80076c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	60bb      	str	r3, [r7, #8]
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	e7fd      	b.n	80076bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c4:	1e5a      	subs	r2, r3, #1
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d02c      	beq.n	8007730 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d128      	bne.n	8007730 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	3304      	adds	r3, #4
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe fc5c 	bl	8005fa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007700:	4b0f      	ldr	r3, [pc, #60]	@ (8007740 <xTaskPriorityDisinherit+0xd8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d903      	bls.n	8007710 <xTaskPriorityDisinherit+0xa8>
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770c:	4a0c      	ldr	r2, [pc, #48]	@ (8007740 <xTaskPriorityDisinherit+0xd8>)
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007714:	4613      	mov	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4a09      	ldr	r2, [pc, #36]	@ (8007744 <xTaskPriorityDisinherit+0xdc>)
 800771e:	441a      	add	r2, r3
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	3304      	adds	r3, #4
 8007724:	4619      	mov	r1, r3
 8007726:	4610      	mov	r0, r2
 8007728:	f7fe fbdd 	bl	8005ee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007730:	697b      	ldr	r3, [r7, #20]
	}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20008d24 	.word	0x20008d24
 8007740:	20009200 	.word	0x20009200
 8007744:	20008d28 	.word	0x20008d28

08007748 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007752:	f000 fe31 	bl	80083b8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007756:	4b20      	ldr	r3, [pc, #128]	@ (80077d8 <ulTaskNotifyTake+0x90>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d113      	bne.n	800778a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007762:	4b1d      	ldr	r3, [pc, #116]	@ (80077d8 <ulTaskNotifyTake+0x90>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00b      	beq.n	800778a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007772:	2101      	movs	r1, #1
 8007774:	6838      	ldr	r0, [r7, #0]
 8007776:	f000 f979 	bl	8007a6c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800777a:	4b18      	ldr	r3, [pc, #96]	@ (80077dc <ulTaskNotifyTake+0x94>)
 800777c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800778a:	f000 fe47 	bl	800841c <vPortExitCritical>

		taskENTER_CRITICAL();
 800778e:	f000 fe13 	bl	80083b8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007792:	4b11      	ldr	r3, [pc, #68]	@ (80077d8 <ulTaskNotifyTake+0x90>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800779a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00e      	beq.n	80077c0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80077a8:	4b0b      	ldr	r3, [pc, #44]	@ (80077d8 <ulTaskNotifyTake+0x90>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80077b2:	e005      	b.n	80077c0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80077b4:	4b08      	ldr	r3, [pc, #32]	@ (80077d8 <ulTaskNotifyTake+0x90>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	3a01      	subs	r2, #1
 80077bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077c0:	4b05      	ldr	r3, [pc, #20]	@ (80077d8 <ulTaskNotifyTake+0x90>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80077ca:	f000 fe27 	bl	800841c <vPortExitCritical>

		return ulReturn;
 80077ce:	68fb      	ldr	r3, [r7, #12]
	}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20008d24 	.word	0x20008d24
 80077dc:	e000ed04 	.word	0xe000ed04

080077e0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08a      	sub	sp, #40	@ 0x28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	4613      	mov	r3, r2
 80077ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80077f0:	2301      	movs	r3, #1
 80077f2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10b      	bne.n	8007812 <xTaskGenericNotify+0x32>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	61bb      	str	r3, [r7, #24]
}
 800780c:	bf00      	nop
 800780e:	bf00      	nop
 8007810:	e7fd      	b.n	800780e <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007816:	f000 fdcf 	bl	80083b8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007830:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	2202      	movs	r2, #2
 8007836:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	2b04      	cmp	r3, #4
 800783e:	d82e      	bhi.n	800789e <xTaskGenericNotify+0xbe>
 8007840:	a201      	add	r2, pc, #4	@ (adr r2, 8007848 <xTaskGenericNotify+0x68>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	0800789f 	.word	0x0800789f
 800784c:	0800785d 	.word	0x0800785d
 8007850:	0800786f 	.word	0x0800786f
 8007854:	0800787f 	.word	0x0800787f
 8007858:	08007889 	.word	0x08007889
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	431a      	orrs	r2, r3
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800786c:	e017      	b.n	800789e <xTaskGenericNotify+0xbe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800787c:	e00f      	b.n	800789e <xTaskGenericNotify+0xbe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007886:	e00a      	b.n	800789e <xTaskGenericNotify+0xbe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007888:	7ffb      	ldrb	r3, [r7, #31]
 800788a:	2b02      	cmp	r3, #2
 800788c:	d004      	beq.n	8007898 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007896:	e001      	b.n	800789c <xTaskGenericNotify+0xbc>
						xReturn = pdFAIL;
 8007898:	2300      	movs	r3, #0
 800789a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800789c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800789e:	7ffb      	ldrb	r3, [r7, #31]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d13b      	bne.n	800791c <xTaskGenericNotify+0x13c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fe fb79 	bl	8005fa0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b2:	4b1e      	ldr	r3, [pc, #120]	@ (800792c <xTaskGenericNotify+0x14c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d903      	bls.n	80078c2 <xTaskGenericNotify+0xe2>
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078be:	4a1b      	ldr	r2, [pc, #108]	@ (800792c <xTaskGenericNotify+0x14c>)
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4a18      	ldr	r2, [pc, #96]	@ (8007930 <xTaskGenericNotify+0x150>)
 80078d0:	441a      	add	r2, r3
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7fe fb04 	bl	8005ee6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <xTaskGenericNotify+0x11e>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	617b      	str	r3, [r7, #20]
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	e7fd      	b.n	80078fa <xTaskGenericNotify+0x11a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007902:	4b0c      	ldr	r3, [pc, #48]	@ (8007934 <xTaskGenericNotify+0x154>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007908:	429a      	cmp	r2, r3
 800790a:	d907      	bls.n	800791c <xTaskGenericNotify+0x13c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800790c:	4b0a      	ldr	r3, [pc, #40]	@ (8007938 <xTaskGenericNotify+0x158>)
 800790e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800791c:	f000 fd7e 	bl	800841c <vPortExitCritical>

		return xReturn;
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007922:	4618      	mov	r0, r3
 8007924:	3728      	adds	r7, #40	@ 0x28
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20009200 	.word	0x20009200
 8007930:	20008d28 	.word	0x20008d28
 8007934:	20008d24 	.word	0x20008d24
 8007938:	e000ed04 	.word	0xe000ed04

0800793c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08a      	sub	sp, #40	@ 0x28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10b      	bne.n	8007964 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	61bb      	str	r3, [r7, #24]
}
 800795e:	bf00      	nop
 8007960:	bf00      	nop
 8007962:	e7fd      	b.n	8007960 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007964:	f000 fe08 	bl	8008578 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800796c:	f3ef 8211 	mrs	r2, BASEPRI
 8007970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	617a      	str	r2, [r7, #20]
 8007982:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007984:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007986:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800798e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	2202      	movs	r2, #2
 8007994:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80079a6:	7ffb      	ldrb	r3, [r7, #31]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d148      	bne.n	8007a3e <vTaskNotifyGiveFromISR+0x102>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00b      	beq.n	80079cc <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	60fb      	str	r3, [r7, #12]
}
 80079c6:	bf00      	nop
 80079c8:	bf00      	nop
 80079ca:	e7fd      	b.n	80079c8 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079cc:	4b21      	ldr	r3, [pc, #132]	@ (8007a54 <vTaskNotifyGiveFromISR+0x118>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d11d      	bne.n	8007a10 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	3304      	adds	r3, #4
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fe fae1 	bl	8005fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a58 <vTaskNotifyGiveFromISR+0x11c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d903      	bls.n	80079f2 <vTaskNotifyGiveFromISR+0xb6>
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007a58 <vTaskNotifyGiveFromISR+0x11c>)
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4a17      	ldr	r2, [pc, #92]	@ (8007a5c <vTaskNotifyGiveFromISR+0x120>)
 8007a00:	441a      	add	r2, r3
 8007a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a04:	3304      	adds	r3, #4
 8007a06:	4619      	mov	r1, r3
 8007a08:	4610      	mov	r0, r2
 8007a0a:	f7fe fa6c 	bl	8005ee6 <vListInsertEnd>
 8007a0e:	e005      	b.n	8007a1c <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	3318      	adds	r3, #24
 8007a14:	4619      	mov	r1, r3
 8007a16:	4812      	ldr	r0, [pc, #72]	@ (8007a60 <vTaskNotifyGiveFromISR+0x124>)
 8007a18:	f7fe fa65 	bl	8005ee6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a20:	4b10      	ldr	r3, [pc, #64]	@ (8007a64 <vTaskNotifyGiveFromISR+0x128>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d909      	bls.n	8007a3e <vTaskNotifyGiveFromISR+0x102>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2201      	movs	r2, #1
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	e002      	b.n	8007a3e <vTaskNotifyGiveFromISR+0x102>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8007a38:	4b0b      	ldr	r3, [pc, #44]	@ (8007a68 <vTaskNotifyGiveFromISR+0x12c>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f383 8811 	msr	BASEPRI, r3
}
 8007a48:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007a4a:	bf00      	nop
 8007a4c:	3728      	adds	r7, #40	@ 0x28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20009220 	.word	0x20009220
 8007a58:	20009200 	.word	0x20009200
 8007a5c:	20008d28 	.word	0x20008d28
 8007a60:	200091b8 	.word	0x200091b8
 8007a64:	20008d24 	.word	0x20008d24
 8007a68:	2000920c 	.word	0x2000920c

08007a6c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a76:	4b21      	ldr	r3, [pc, #132]	@ (8007afc <prvAddCurrentTaskToDelayedList+0x90>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a7c:	4b20      	ldr	r3, [pc, #128]	@ (8007b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3304      	adds	r3, #4
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fe fa8c 	bl	8005fa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8e:	d10a      	bne.n	8007aa6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a96:	4b1a      	ldr	r3, [pc, #104]	@ (8007b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4819      	ldr	r0, [pc, #100]	@ (8007b04 <prvAddCurrentTaskToDelayedList+0x98>)
 8007aa0:	f7fe fa21 	bl	8005ee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007aa4:	e026      	b.n	8007af4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007aae:	4b14      	ldr	r3, [pc, #80]	@ (8007b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d209      	bcs.n	8007ad2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007abe:	4b12      	ldr	r3, [pc, #72]	@ (8007b08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8007b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4610      	mov	r0, r2
 8007acc:	f7fe fa2f 	bl	8005f2e <vListInsert>
}
 8007ad0:	e010      	b.n	8007af4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8007b0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4619      	mov	r1, r3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	f7fe fa25 	bl	8005f2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8007b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d202      	bcs.n	8007af4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007aee:	4a08      	ldr	r2, [pc, #32]	@ (8007b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	6013      	str	r3, [r2, #0]
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	200091fc 	.word	0x200091fc
 8007b00:	20008d24 	.word	0x20008d24
 8007b04:	200091e4 	.word	0x200091e4
 8007b08:	200091b4 	.word	0x200091b4
 8007b0c:	200091b0 	.word	0x200091b0
 8007b10:	20009218 	.word	0x20009218

08007b14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08a      	sub	sp, #40	@ 0x28
 8007b18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b1e:	f000 fad9 	bl	80080d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b22:	4b1d      	ldr	r3, [pc, #116]	@ (8007b98 <xTimerCreateTimerTask+0x84>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d021      	beq.n	8007b6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b32:	1d3a      	adds	r2, r7, #4
 8007b34:	f107 0108 	add.w	r1, r7, #8
 8007b38:	f107 030c 	add.w	r3, r7, #12
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe f98b 	bl	8005e58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	9202      	str	r2, [sp, #8]
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	2300      	movs	r3, #0
 8007b52:	460a      	mov	r2, r1
 8007b54:	4911      	ldr	r1, [pc, #68]	@ (8007b9c <xTimerCreateTimerTask+0x88>)
 8007b56:	4812      	ldr	r0, [pc, #72]	@ (8007ba0 <xTimerCreateTimerTask+0x8c>)
 8007b58:	f7fe ff44 	bl	80069e4 <xTaskCreateStatic>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	4a11      	ldr	r2, [pc, #68]	@ (8007ba4 <xTimerCreateTimerTask+0x90>)
 8007b60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b62:	4b10      	ldr	r3, [pc, #64]	@ (8007ba4 <xTimerCreateTimerTask+0x90>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10b      	bne.n	8007b8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	613b      	str	r3, [r7, #16]
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	e7fd      	b.n	8007b88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007b8c:	697b      	ldr	r3, [r7, #20]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20009254 	.word	0x20009254
 8007b9c:	08009edc 	.word	0x08009edc
 8007ba0:	08007cc9 	.word	0x08007cc9
 8007ba4:	20009258 	.word	0x20009258

08007ba8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	@ 0x28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10b      	bne.n	8007bd8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	623b      	str	r3, [r7, #32]
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	e7fd      	b.n	8007bd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bd8:	4b19      	ldr	r3, [pc, #100]	@ (8007c40 <xTimerGenericCommand+0x98>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d02a      	beq.n	8007c36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	dc18      	bgt.n	8007c24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007bf2:	f7ff fd1b 	bl	800762c <xTaskGetSchedulerState>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d109      	bne.n	8007c10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007bfc:	4b10      	ldr	r3, [pc, #64]	@ (8007c40 <xTimerGenericCommand+0x98>)
 8007bfe:	6818      	ldr	r0, [r3, #0]
 8007c00:	f107 0110 	add.w	r1, r7, #16
 8007c04:	2300      	movs	r3, #0
 8007c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c08:	f7fe fafe 	bl	8006208 <xQueueGenericSend>
 8007c0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c0e:	e012      	b.n	8007c36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c10:	4b0b      	ldr	r3, [pc, #44]	@ (8007c40 <xTimerGenericCommand+0x98>)
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	f107 0110 	add.w	r1, r7, #16
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f7fe faf4 	bl	8006208 <xQueueGenericSend>
 8007c20:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c22:	e008      	b.n	8007c36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c24:	4b06      	ldr	r3, [pc, #24]	@ (8007c40 <xTimerGenericCommand+0x98>)
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	f107 0110 	add.w	r1, r7, #16
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	f7fe fbec 	bl	800640c <xQueueGenericSendFromISR>
 8007c34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3728      	adds	r7, #40	@ 0x28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20009254 	.word	0x20009254

08007c44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007cc4 <prvProcessExpiredTimer+0x80>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe f99f 	bl	8005fa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d123      	bne.n	8007cb2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	699a      	ldr	r2, [r3, #24]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	18d1      	adds	r1, r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	6978      	ldr	r0, [r7, #20]
 8007c78:	f000 f8cc 	bl	8007e14 <prvInsertTimerInActiveList>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d017      	beq.n	8007cb2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c82:	2300      	movs	r3, #0
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	2300      	movs	r3, #0
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	6978      	ldr	r0, [r7, #20]
 8007c8e:	f7ff ff8b 	bl	8007ba8 <xTimerGenericCommand>
 8007c92:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10b      	bne.n	8007cb2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	60fb      	str	r3, [r7, #12]
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	e7fd      	b.n	8007cae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb6:	6978      	ldr	r0, [r7, #20]
 8007cb8:	4798      	blx	r3
}
 8007cba:	bf00      	nop
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	2000924c 	.word	0x2000924c

08007cc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cd0:	f107 0308 	add.w	r3, r7, #8
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 f859 	bl	8007d8c <prvGetNextExpireTime>
 8007cda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f805 	bl	8007cf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ce6:	f000 f8d7 	bl	8007e98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cea:	bf00      	nop
 8007cec:	e7f0      	b.n	8007cd0 <prvTimerTask+0x8>
	...

08007cf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007cfa:	f7ff f897 	bl	8006e2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cfe:	f107 0308 	add.w	r3, r7, #8
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 f866 	bl	8007dd4 <prvSampleTimeNow>
 8007d08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d130      	bne.n	8007d72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <prvProcessTimerOrBlockTask+0x3c>
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d806      	bhi.n	8007d2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d1e:	f7ff f893 	bl	8006e48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d22:	68f9      	ldr	r1, [r7, #12]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff ff8d 	bl	8007c44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d2a:	e024      	b.n	8007d76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d008      	beq.n	8007d44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d32:	4b13      	ldr	r3, [pc, #76]	@ (8007d80 <prvProcessTimerOrBlockTask+0x90>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bf0c      	ite	eq
 8007d3c:	2301      	moveq	r3, #1
 8007d3e:	2300      	movne	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d44:	4b0f      	ldr	r3, [pc, #60]	@ (8007d84 <prvProcessTimerOrBlockTask+0x94>)
 8007d46:	6818      	ldr	r0, [r3, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	4619      	mov	r1, r3
 8007d52:	f7fe fe13 	bl	800697c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d56:	f7ff f877 	bl	8006e48 <xTaskResumeAll>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10a      	bne.n	8007d76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d60:	4b09      	ldr	r3, [pc, #36]	@ (8007d88 <prvProcessTimerOrBlockTask+0x98>)
 8007d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
}
 8007d70:	e001      	b.n	8007d76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d72:	f7ff f869 	bl	8006e48 <xTaskResumeAll>
}
 8007d76:	bf00      	nop
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20009250 	.word	0x20009250
 8007d84:	20009254 	.word	0x20009254
 8007d88:	e000ed04 	.word	0xe000ed04

08007d8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d94:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd0 <prvGetNextExpireTime+0x44>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bf0c      	ite	eq
 8007d9e:	2301      	moveq	r3, #1
 8007da0:	2300      	movne	r3, #0
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	461a      	mov	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d105      	bne.n	8007dbe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007db2:	4b07      	ldr	r3, [pc, #28]	@ (8007dd0 <prvGetNextExpireTime+0x44>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e001      	b.n	8007dc2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	2000924c 	.word	0x2000924c

08007dd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ddc:	f7ff f8d2 	bl	8006f84 <xTaskGetTickCount>
 8007de0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007de2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e10 <prvSampleTimeNow+0x3c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d205      	bcs.n	8007df8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007dec:	f000 f910 	bl	8008010 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	e002      	b.n	8007dfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007dfe:	4a04      	ldr	r2, [pc, #16]	@ (8007e10 <prvSampleTimeNow+0x3c>)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e04:	68fb      	ldr	r3, [r7, #12]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	2000925c 	.word	0x2000925c

08007e14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d812      	bhi.n	8007e60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d302      	bcc.n	8007e4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]
 8007e4c:	e01b      	b.n	8007e86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e4e:	4b10      	ldr	r3, [pc, #64]	@ (8007e90 <prvInsertTimerInActiveList+0x7c>)
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3304      	adds	r3, #4
 8007e56:	4619      	mov	r1, r3
 8007e58:	4610      	mov	r0, r2
 8007e5a:	f7fe f868 	bl	8005f2e <vListInsert>
 8007e5e:	e012      	b.n	8007e86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d206      	bcs.n	8007e76 <prvInsertTimerInActiveList+0x62>
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d302      	bcc.n	8007e76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e007      	b.n	8007e86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e76:	4b07      	ldr	r3, [pc, #28]	@ (8007e94 <prvInsertTimerInActiveList+0x80>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4610      	mov	r0, r2
 8007e82:	f7fe f854 	bl	8005f2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e86:	697b      	ldr	r3, [r7, #20]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20009250 	.word	0x20009250
 8007e94:	2000924c 	.word	0x2000924c

08007e98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08e      	sub	sp, #56	@ 0x38
 8007e9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e9e:	e0a5      	b.n	8007fec <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	da19      	bge.n	8007eda <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ea6:	1d3b      	adds	r3, r7, #4
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10b      	bne.n	8007eca <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	61fb      	str	r3, [r7, #28]
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop
 8007ec8:	e7fd      	b.n	8007ec6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ed0:	6850      	ldr	r0, [r2, #4]
 8007ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ed4:	6892      	ldr	r2, [r2, #8]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f2c0 8085 	blt.w	8007fec <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe f854 	bl	8005fa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ef8:	463b      	mov	r3, r7
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff ff6a 	bl	8007dd4 <prvSampleTimeNow>
 8007f00:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	d86c      	bhi.n	8007fe2 <prvProcessReceivedCommands+0x14a>
 8007f08:	a201      	add	r2, pc, #4	@ (adr r2, 8007f10 <prvProcessReceivedCommands+0x78>)
 8007f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0e:	bf00      	nop
 8007f10:	08007f39 	.word	0x08007f39
 8007f14:	08007f39 	.word	0x08007f39
 8007f18:	08007f39 	.word	0x08007f39
 8007f1c:	08007fe3 	.word	0x08007fe3
 8007f20:	08007f97 	.word	0x08007f97
 8007f24:	08007fd1 	.word	0x08007fd1
 8007f28:	08007f39 	.word	0x08007f39
 8007f2c:	08007f39 	.word	0x08007f39
 8007f30:	08007fe3 	.word	0x08007fe3
 8007f34:	08007f97 	.word	0x08007f97
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	18d1      	adds	r1, r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f46:	f7ff ff65 	bl	8007e14 <prvInsertTimerInActiveList>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d04a      	beq.n	8007fe6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f56:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5a:	69db      	ldr	r3, [r3, #28]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d142      	bne.n	8007fe6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	441a      	add	r2, r3
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	2100      	movs	r1, #0
 8007f70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f72:	f7ff fe19 	bl	8007ba8 <xTimerGenericCommand>
 8007f76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d133      	bne.n	8007fe6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	61bb      	str	r3, [r7, #24]
}
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	e7fd      	b.n	8007f92 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10b      	bne.n	8007fbc <prvProcessReceivedCommands+0x124>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	617b      	str	r3, [r7, #20]
}
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	e7fd      	b.n	8007fb8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc2:	18d1      	adds	r1, r2, r3
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fca:	f7ff ff23 	bl	8007e14 <prvInsertTimerInActiveList>
					break;
 8007fce:	e00d      	b.n	8007fec <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d107      	bne.n	8007fea <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8007fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fdc:	f000 fbd6 	bl	800878c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007fe0:	e003      	b.n	8007fea <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8007fe2:	bf00      	nop
 8007fe4:	e002      	b.n	8007fec <prvProcessReceivedCommands+0x154>
					break;
 8007fe6:	bf00      	nop
 8007fe8:	e000      	b.n	8007fec <prvProcessReceivedCommands+0x154>
					break;
 8007fea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fec:	4b07      	ldr	r3, [pc, #28]	@ (800800c <prvProcessReceivedCommands+0x174>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	1d39      	adds	r1, r7, #4
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe faa5 	bl	8006544 <xQueueReceive>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f47f af4f 	bne.w	8007ea0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	3730      	adds	r7, #48	@ 0x30
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20009254 	.word	0x20009254

08008010 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008016:	e046      	b.n	80080a6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008018:	4b2c      	ldr	r3, [pc, #176]	@ (80080cc <prvSwitchTimerLists+0xbc>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008022:	4b2a      	ldr	r3, [pc, #168]	@ (80080cc <prvSwitchTimerLists+0xbc>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3304      	adds	r3, #4
 8008030:	4618      	mov	r0, r3
 8008032:	f7fd ffb5 	bl	8005fa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d12f      	bne.n	80080a6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	4413      	add	r3, r2
 800804e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	429a      	cmp	r2, r3
 8008056:	d90e      	bls.n	8008076 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008064:	4b19      	ldr	r3, [pc, #100]	@ (80080cc <prvSwitchTimerLists+0xbc>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3304      	adds	r3, #4
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f7fd ff5d 	bl	8005f2e <vListInsert>
 8008074:	e017      	b.n	80080a6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008076:	2300      	movs	r3, #0
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	2100      	movs	r1, #0
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff fd91 	bl	8007ba8 <xTimerGenericCommand>
 8008086:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10b      	bne.n	80080a6 <prvSwitchTimerLists+0x96>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	603b      	str	r3, [r7, #0]
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	e7fd      	b.n	80080a2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080a6:	4b09      	ldr	r3, [pc, #36]	@ (80080cc <prvSwitchTimerLists+0xbc>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1b3      	bne.n	8008018 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80080b0:	4b06      	ldr	r3, [pc, #24]	@ (80080cc <prvSwitchTimerLists+0xbc>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80080b6:	4b06      	ldr	r3, [pc, #24]	@ (80080d0 <prvSwitchTimerLists+0xc0>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a04      	ldr	r2, [pc, #16]	@ (80080cc <prvSwitchTimerLists+0xbc>)
 80080bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80080be:	4a04      	ldr	r2, [pc, #16]	@ (80080d0 <prvSwitchTimerLists+0xc0>)
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	6013      	str	r3, [r2, #0]
}
 80080c4:	bf00      	nop
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	2000924c 	.word	0x2000924c
 80080d0:	20009250 	.word	0x20009250

080080d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80080da:	f000 f96d 	bl	80083b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80080de:	4b15      	ldr	r3, [pc, #84]	@ (8008134 <prvCheckForValidListAndQueue+0x60>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d120      	bne.n	8008128 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80080e6:	4814      	ldr	r0, [pc, #80]	@ (8008138 <prvCheckForValidListAndQueue+0x64>)
 80080e8:	f7fd fed0 	bl	8005e8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80080ec:	4813      	ldr	r0, [pc, #76]	@ (800813c <prvCheckForValidListAndQueue+0x68>)
 80080ee:	f7fd fecd 	bl	8005e8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80080f2:	4b13      	ldr	r3, [pc, #76]	@ (8008140 <prvCheckForValidListAndQueue+0x6c>)
 80080f4:	4a10      	ldr	r2, [pc, #64]	@ (8008138 <prvCheckForValidListAndQueue+0x64>)
 80080f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80080f8:	4b12      	ldr	r3, [pc, #72]	@ (8008144 <prvCheckForValidListAndQueue+0x70>)
 80080fa:	4a10      	ldr	r2, [pc, #64]	@ (800813c <prvCheckForValidListAndQueue+0x68>)
 80080fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80080fe:	2300      	movs	r3, #0
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4b11      	ldr	r3, [pc, #68]	@ (8008148 <prvCheckForValidListAndQueue+0x74>)
 8008104:	4a11      	ldr	r2, [pc, #68]	@ (800814c <prvCheckForValidListAndQueue+0x78>)
 8008106:	2110      	movs	r1, #16
 8008108:	200a      	movs	r0, #10
 800810a:	f7fd ffdd 	bl	80060c8 <xQueueGenericCreateStatic>
 800810e:	4603      	mov	r3, r0
 8008110:	4a08      	ldr	r2, [pc, #32]	@ (8008134 <prvCheckForValidListAndQueue+0x60>)
 8008112:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008114:	4b07      	ldr	r3, [pc, #28]	@ (8008134 <prvCheckForValidListAndQueue+0x60>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800811c:	4b05      	ldr	r3, [pc, #20]	@ (8008134 <prvCheckForValidListAndQueue+0x60>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	490b      	ldr	r1, [pc, #44]	@ (8008150 <prvCheckForValidListAndQueue+0x7c>)
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fc00 	bl	8006928 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008128:	f000 f978 	bl	800841c <vPortExitCritical>
}
 800812c:	bf00      	nop
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20009254 	.word	0x20009254
 8008138:	20009224 	.word	0x20009224
 800813c:	20009238 	.word	0x20009238
 8008140:	2000924c 	.word	0x2000924c
 8008144:	20009250 	.word	0x20009250
 8008148:	20009300 	.word	0x20009300
 800814c:	20009260 	.word	0x20009260
 8008150:	08009ee4 	.word	0x08009ee4

08008154 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3b04      	subs	r3, #4
 8008164:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800816c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3b04      	subs	r3, #4
 8008172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f023 0201 	bic.w	r2, r3, #1
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3b04      	subs	r3, #4
 8008182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008184:	4a0c      	ldr	r2, [pc, #48]	@ (80081b8 <pxPortInitialiseStack+0x64>)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3b14      	subs	r3, #20
 800818e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3b04      	subs	r3, #4
 800819a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f06f 0202 	mvn.w	r2, #2
 80081a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3b20      	subs	r3, #32
 80081a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081aa:	68fb      	ldr	r3, [r7, #12]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	080081bd 	.word	0x080081bd

080081bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081c6:	4b13      	ldr	r3, [pc, #76]	@ (8008214 <prvTaskExitError+0x58>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ce:	d00b      	beq.n	80081e8 <prvTaskExitError+0x2c>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	60fb      	str	r3, [r7, #12]
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	e7fd      	b.n	80081e4 <prvTaskExitError+0x28>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	60bb      	str	r3, [r7, #8]
}
 80081fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081fc:	bf00      	nop
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0fc      	beq.n	80081fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	20000010 	.word	0x20000010
	...

08008220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008220:	4b07      	ldr	r3, [pc, #28]	@ (8008240 <pxCurrentTCBConst2>)
 8008222:	6819      	ldr	r1, [r3, #0]
 8008224:	6808      	ldr	r0, [r1, #0]
 8008226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822a:	f380 8809 	msr	PSP, r0
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f04f 0000 	mov.w	r0, #0
 8008236:	f380 8811 	msr	BASEPRI, r0
 800823a:	4770      	bx	lr
 800823c:	f3af 8000 	nop.w

08008240 <pxCurrentTCBConst2>:
 8008240:	20008d24 	.word	0x20008d24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop

08008248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008248:	4808      	ldr	r0, [pc, #32]	@ (800826c <prvPortStartFirstTask+0x24>)
 800824a:	6800      	ldr	r0, [r0, #0]
 800824c:	6800      	ldr	r0, [r0, #0]
 800824e:	f380 8808 	msr	MSP, r0
 8008252:	f04f 0000 	mov.w	r0, #0
 8008256:	f380 8814 	msr	CONTROL, r0
 800825a:	b662      	cpsie	i
 800825c:	b661      	cpsie	f
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	df00      	svc	0
 8008268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800826a:	bf00      	nop
 800826c:	e000ed08 	.word	0xe000ed08

08008270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008276:	4b47      	ldr	r3, [pc, #284]	@ (8008394 <xPortStartScheduler+0x124>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a47      	ldr	r2, [pc, #284]	@ (8008398 <xPortStartScheduler+0x128>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d10b      	bne.n	8008298 <xPortStartScheduler+0x28>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	613b      	str	r3, [r7, #16]
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008298:	4b3e      	ldr	r3, [pc, #248]	@ (8008394 <xPortStartScheduler+0x124>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a3f      	ldr	r2, [pc, #252]	@ (800839c <xPortStartScheduler+0x12c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d10b      	bne.n	80082ba <xPortStartScheduler+0x4a>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	60fb      	str	r3, [r7, #12]
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082ba:	4b39      	ldr	r3, [pc, #228]	@ (80083a0 <xPortStartScheduler+0x130>)
 80082bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	22ff      	movs	r2, #255	@ 0xff
 80082ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	4b31      	ldr	r3, [pc, #196]	@ (80083a4 <xPortStartScheduler+0x134>)
 80082e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082e2:	4b31      	ldr	r3, [pc, #196]	@ (80083a8 <xPortStartScheduler+0x138>)
 80082e4:	2207      	movs	r2, #7
 80082e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082e8:	e009      	b.n	80082fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80082ea:	4b2f      	ldr	r3, [pc, #188]	@ (80083a8 <xPortStartScheduler+0x138>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	4a2d      	ldr	r2, [pc, #180]	@ (80083a8 <xPortStartScheduler+0x138>)
 80082f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082fe:	78fb      	ldrb	r3, [r7, #3]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008306:	2b80      	cmp	r3, #128	@ 0x80
 8008308:	d0ef      	beq.n	80082ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800830a:	4b27      	ldr	r3, [pc, #156]	@ (80083a8 <xPortStartScheduler+0x138>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f1c3 0307 	rsb	r3, r3, #7
 8008312:	2b04      	cmp	r3, #4
 8008314:	d00b      	beq.n	800832e <xPortStartScheduler+0xbe>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	60bb      	str	r3, [r7, #8]
}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	e7fd      	b.n	800832a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800832e:	4b1e      	ldr	r3, [pc, #120]	@ (80083a8 <xPortStartScheduler+0x138>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	021b      	lsls	r3, r3, #8
 8008334:	4a1c      	ldr	r2, [pc, #112]	@ (80083a8 <xPortStartScheduler+0x138>)
 8008336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008338:	4b1b      	ldr	r3, [pc, #108]	@ (80083a8 <xPortStartScheduler+0x138>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008340:	4a19      	ldr	r2, [pc, #100]	@ (80083a8 <xPortStartScheduler+0x138>)
 8008342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	b2da      	uxtb	r2, r3
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800834c:	4b17      	ldr	r3, [pc, #92]	@ (80083ac <xPortStartScheduler+0x13c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a16      	ldr	r2, [pc, #88]	@ (80083ac <xPortStartScheduler+0x13c>)
 8008352:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008358:	4b14      	ldr	r3, [pc, #80]	@ (80083ac <xPortStartScheduler+0x13c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a13      	ldr	r2, [pc, #76]	@ (80083ac <xPortStartScheduler+0x13c>)
 800835e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008364:	f000 f8da 	bl	800851c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008368:	4b11      	ldr	r3, [pc, #68]	@ (80083b0 <xPortStartScheduler+0x140>)
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800836e:	f000 f8f9 	bl	8008564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008372:	4b10      	ldr	r3, [pc, #64]	@ (80083b4 <xPortStartScheduler+0x144>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a0f      	ldr	r2, [pc, #60]	@ (80083b4 <xPortStartScheduler+0x144>)
 8008378:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800837c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800837e:	f7ff ff63 	bl	8008248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008382:	f7fe fecf 	bl	8007124 <vTaskSwitchContext>
	prvTaskExitError();
 8008386:	f7ff ff19 	bl	80081bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	e000ed00 	.word	0xe000ed00
 8008398:	410fc271 	.word	0x410fc271
 800839c:	410fc270 	.word	0x410fc270
 80083a0:	e000e400 	.word	0xe000e400
 80083a4:	20009350 	.word	0x20009350
 80083a8:	20009354 	.word	0x20009354
 80083ac:	e000ed20 	.word	0xe000ed20
 80083b0:	20000010 	.word	0x20000010
 80083b4:	e000ef34 	.word	0xe000ef34

080083b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	607b      	str	r3, [r7, #4]
}
 80083d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083d2:	4b10      	ldr	r3, [pc, #64]	@ (8008414 <vPortEnterCritical+0x5c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3301      	adds	r3, #1
 80083d8:	4a0e      	ldr	r2, [pc, #56]	@ (8008414 <vPortEnterCritical+0x5c>)
 80083da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008414 <vPortEnterCritical+0x5c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d110      	bne.n	8008406 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008418 <vPortEnterCritical+0x60>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00b      	beq.n	8008406 <vPortEnterCritical+0x4e>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	603b      	str	r3, [r7, #0]
}
 8008400:	bf00      	nop
 8008402:	bf00      	nop
 8008404:	e7fd      	b.n	8008402 <vPortEnterCritical+0x4a>
	}
}
 8008406:	bf00      	nop
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	20000010 	.word	0x20000010
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008422:	4b12      	ldr	r3, [pc, #72]	@ (800846c <vPortExitCritical+0x50>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10b      	bne.n	8008442 <vPortExitCritical+0x26>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	607b      	str	r3, [r7, #4]
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	e7fd      	b.n	800843e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008442:	4b0a      	ldr	r3, [pc, #40]	@ (800846c <vPortExitCritical+0x50>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3b01      	subs	r3, #1
 8008448:	4a08      	ldr	r2, [pc, #32]	@ (800846c <vPortExitCritical+0x50>)
 800844a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800844c:	4b07      	ldr	r3, [pc, #28]	@ (800846c <vPortExitCritical+0x50>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d105      	bne.n	8008460 <vPortExitCritical+0x44>
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f383 8811 	msr	BASEPRI, r3
}
 800845e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	20000010 	.word	0x20000010

08008470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008470:	f3ef 8009 	mrs	r0, PSP
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	4b15      	ldr	r3, [pc, #84]	@ (80084d0 <pxCurrentTCBConst>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	f01e 0f10 	tst.w	lr, #16
 8008480:	bf08      	it	eq
 8008482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848a:	6010      	str	r0, [r2, #0]
 800848c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008494:	f380 8811 	msr	BASEPRI, r0
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f7fe fe40 	bl	8007124 <vTaskSwitchContext>
 80084a4:	f04f 0000 	mov.w	r0, #0
 80084a8:	f380 8811 	msr	BASEPRI, r0
 80084ac:	bc09      	pop	{r0, r3}
 80084ae:	6819      	ldr	r1, [r3, #0]
 80084b0:	6808      	ldr	r0, [r1, #0]
 80084b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b6:	f01e 0f10 	tst.w	lr, #16
 80084ba:	bf08      	it	eq
 80084bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084c0:	f380 8809 	msr	PSP, r0
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	f3af 8000 	nop.w

080084d0 <pxCurrentTCBConst>:
 80084d0:	20008d24 	.word	0x20008d24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop

080084d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	607b      	str	r3, [r7, #4]
}
 80084f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084f2:	f7fe fd57 	bl	8006fa4 <xTaskIncrementTick>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084fc:	4b06      	ldr	r3, [pc, #24]	@ (8008518 <SysTick_Handler+0x40>)
 80084fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	2300      	movs	r3, #0
 8008506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	f383 8811 	msr	BASEPRI, r3
}
 800850e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800851c:	b480      	push	{r7}
 800851e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008520:	4b0b      	ldr	r3, [pc, #44]	@ (8008550 <vPortSetupTimerInterrupt+0x34>)
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008526:	4b0b      	ldr	r3, [pc, #44]	@ (8008554 <vPortSetupTimerInterrupt+0x38>)
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800852c:	4b0a      	ldr	r3, [pc, #40]	@ (8008558 <vPortSetupTimerInterrupt+0x3c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a0a      	ldr	r2, [pc, #40]	@ (800855c <vPortSetupTimerInterrupt+0x40>)
 8008532:	fba2 2303 	umull	r2, r3, r2, r3
 8008536:	099b      	lsrs	r3, r3, #6
 8008538:	4a09      	ldr	r2, [pc, #36]	@ (8008560 <vPortSetupTimerInterrupt+0x44>)
 800853a:	3b01      	subs	r3, #1
 800853c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800853e:	4b04      	ldr	r3, [pc, #16]	@ (8008550 <vPortSetupTimerInterrupt+0x34>)
 8008540:	2207      	movs	r2, #7
 8008542:	601a      	str	r2, [r3, #0]
}
 8008544:	bf00      	nop
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	e000e010 	.word	0xe000e010
 8008554:	e000e018 	.word	0xe000e018
 8008558:	20000004 	.word	0x20000004
 800855c:	10624dd3 	.word	0x10624dd3
 8008560:	e000e014 	.word	0xe000e014

08008564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008564:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008574 <vPortEnableVFP+0x10>
 8008568:	6801      	ldr	r1, [r0, #0]
 800856a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800856e:	6001      	str	r1, [r0, #0]
 8008570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008572:	bf00      	nop
 8008574:	e000ed88 	.word	0xe000ed88

08008578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800857e:	f3ef 8305 	mrs	r3, IPSR
 8008582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b0f      	cmp	r3, #15
 8008588:	d915      	bls.n	80085b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800858a:	4a18      	ldr	r2, [pc, #96]	@ (80085ec <vPortValidateInterruptPriority+0x74>)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008594:	4b16      	ldr	r3, [pc, #88]	@ (80085f0 <vPortValidateInterruptPriority+0x78>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	7afa      	ldrb	r2, [r7, #11]
 800859a:	429a      	cmp	r2, r3
 800859c:	d20b      	bcs.n	80085b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	607b      	str	r3, [r7, #4]
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	e7fd      	b.n	80085b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085b6:	4b0f      	ldr	r3, [pc, #60]	@ (80085f4 <vPortValidateInterruptPriority+0x7c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80085be:	4b0e      	ldr	r3, [pc, #56]	@ (80085f8 <vPortValidateInterruptPriority+0x80>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d90b      	bls.n	80085de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	603b      	str	r3, [r7, #0]
}
 80085d8:	bf00      	nop
 80085da:	bf00      	nop
 80085dc:	e7fd      	b.n	80085da <vPortValidateInterruptPriority+0x62>
	}
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	e000e3f0 	.word	0xe000e3f0
 80085f0:	20009350 	.word	0x20009350
 80085f4:	e000ed0c 	.word	0xe000ed0c
 80085f8:	20009354 	.word	0x20009354

080085fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08a      	sub	sp, #40	@ 0x28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008604:	2300      	movs	r3, #0
 8008606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008608:	f7fe fc10 	bl	8006e2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800860c:	4b5a      	ldr	r3, [pc, #360]	@ (8008778 <pvPortMalloc+0x17c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008614:	f000 f916 	bl	8008844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008618:	4b58      	ldr	r3, [pc, #352]	@ (800877c <pvPortMalloc+0x180>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4013      	ands	r3, r2
 8008620:	2b00      	cmp	r3, #0
 8008622:	f040 8090 	bne.w	8008746 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01e      	beq.n	800866a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800862c:	2208      	movs	r2, #8
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4413      	add	r3, r2
 8008632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	2b00      	cmp	r3, #0
 800863c:	d015      	beq.n	800866a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f023 0307 	bic.w	r3, r3, #7
 8008644:	3308      	adds	r3, #8
 8008646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <pvPortMalloc+0x6e>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	617b      	str	r3, [r7, #20]
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d06a      	beq.n	8008746 <pvPortMalloc+0x14a>
 8008670:	4b43      	ldr	r3, [pc, #268]	@ (8008780 <pvPortMalloc+0x184>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	429a      	cmp	r2, r3
 8008678:	d865      	bhi.n	8008746 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800867a:	4b42      	ldr	r3, [pc, #264]	@ (8008784 <pvPortMalloc+0x188>)
 800867c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800867e:	4b41      	ldr	r3, [pc, #260]	@ (8008784 <pvPortMalloc+0x188>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008684:	e004      	b.n	8008690 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008688:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800868a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	429a      	cmp	r2, r3
 8008698:	d903      	bls.n	80086a2 <pvPortMalloc+0xa6>
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1f1      	bne.n	8008686 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086a2:	4b35      	ldr	r3, [pc, #212]	@ (8008778 <pvPortMalloc+0x17c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d04c      	beq.n	8008746 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2208      	movs	r2, #8
 80086b2:	4413      	add	r3, r2
 80086b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	1ad2      	subs	r2, r2, r3
 80086c6:	2308      	movs	r3, #8
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d920      	bls.n	8008710 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4413      	add	r3, r2
 80086d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	f003 0307 	and.w	r3, r3, #7
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <pvPortMalloc+0xfc>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	613b      	str	r3, [r7, #16]
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	e7fd      	b.n	80086f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800870a:	69b8      	ldr	r0, [r7, #24]
 800870c:	f000 f8fc 	bl	8008908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008710:	4b1b      	ldr	r3, [pc, #108]	@ (8008780 <pvPortMalloc+0x184>)
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	4a19      	ldr	r2, [pc, #100]	@ (8008780 <pvPortMalloc+0x184>)
 800871c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800871e:	4b18      	ldr	r3, [pc, #96]	@ (8008780 <pvPortMalloc+0x184>)
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b19      	ldr	r3, [pc, #100]	@ (8008788 <pvPortMalloc+0x18c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d203      	bcs.n	8008732 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800872a:	4b15      	ldr	r3, [pc, #84]	@ (8008780 <pvPortMalloc+0x184>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a16      	ldr	r2, [pc, #88]	@ (8008788 <pvPortMalloc+0x18c>)
 8008730:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	4b11      	ldr	r3, [pc, #68]	@ (800877c <pvPortMalloc+0x180>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	431a      	orrs	r2, r3
 800873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008746:	f7fe fb7f 	bl	8006e48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	f003 0307 	and.w	r3, r3, #7
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00b      	beq.n	800876c <pvPortMalloc+0x170>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	60fb      	str	r3, [r7, #12]
}
 8008766:	bf00      	nop
 8008768:	bf00      	nop
 800876a:	e7fd      	b.n	8008768 <pvPortMalloc+0x16c>
	return pvReturn;
 800876c:	69fb      	ldr	r3, [r7, #28]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3728      	adds	r7, #40	@ 0x28
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20009f60 	.word	0x20009f60
 800877c:	20009f6c 	.word	0x20009f6c
 8008780:	20009f64 	.word	0x20009f64
 8008784:	20009f58 	.word	0x20009f58
 8008788:	20009f68 	.word	0x20009f68

0800878c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d04a      	beq.n	8008834 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800879e:	2308      	movs	r3, #8
 80087a0:	425b      	negs	r3, r3
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	4413      	add	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	4b22      	ldr	r3, [pc, #136]	@ (800883c <vPortFree+0xb0>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4013      	ands	r3, r2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10b      	bne.n	80087d2 <vPortFree+0x46>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	60fb      	str	r3, [r7, #12]
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	e7fd      	b.n	80087ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <vPortFree+0x66>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	60bb      	str	r3, [r7, #8]
}
 80087ec:	bf00      	nop
 80087ee:	bf00      	nop
 80087f0:	e7fd      	b.n	80087ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	4b11      	ldr	r3, [pc, #68]	@ (800883c <vPortFree+0xb0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4013      	ands	r3, r2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d019      	beq.n	8008834 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d115      	bne.n	8008834 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	4b0b      	ldr	r3, [pc, #44]	@ (800883c <vPortFree+0xb0>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	43db      	mvns	r3, r3
 8008812:	401a      	ands	r2, r3
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008818:	f7fe fb08 	bl	8006e2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	4b07      	ldr	r3, [pc, #28]	@ (8008840 <vPortFree+0xb4>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4413      	add	r3, r2
 8008826:	4a06      	ldr	r2, [pc, #24]	@ (8008840 <vPortFree+0xb4>)
 8008828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800882a:	6938      	ldr	r0, [r7, #16]
 800882c:	f000 f86c 	bl	8008908 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008830:	f7fe fb0a 	bl	8006e48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008834:	bf00      	nop
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20009f6c 	.word	0x20009f6c
 8008840:	20009f64 	.word	0x20009f64

08008844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800884a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800884e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008850:	4b27      	ldr	r3, [pc, #156]	@ (80088f0 <prvHeapInit+0xac>)
 8008852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00c      	beq.n	8008878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3307      	adds	r3, #7
 8008862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0307 	bic.w	r3, r3, #7
 800886a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	4a1f      	ldr	r2, [pc, #124]	@ (80088f0 <prvHeapInit+0xac>)
 8008874:	4413      	add	r3, r2
 8008876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800887c:	4a1d      	ldr	r2, [pc, #116]	@ (80088f4 <prvHeapInit+0xb0>)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008882:	4b1c      	ldr	r3, [pc, #112]	@ (80088f4 <prvHeapInit+0xb0>)
 8008884:	2200      	movs	r2, #0
 8008886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	4413      	add	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008890:	2208      	movs	r2, #8
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0307 	bic.w	r3, r3, #7
 800889e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4a15      	ldr	r2, [pc, #84]	@ (80088f8 <prvHeapInit+0xb4>)
 80088a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088a6:	4b14      	ldr	r3, [pc, #80]	@ (80088f8 <prvHeapInit+0xb4>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2200      	movs	r2, #0
 80088ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088ae:	4b12      	ldr	r3, [pc, #72]	@ (80088f8 <prvHeapInit+0xb4>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088c4:	4b0c      	ldr	r3, [pc, #48]	@ (80088f8 <prvHeapInit+0xb4>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	4a0a      	ldr	r2, [pc, #40]	@ (80088fc <prvHeapInit+0xb8>)
 80088d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	4a09      	ldr	r2, [pc, #36]	@ (8008900 <prvHeapInit+0xbc>)
 80088da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088dc:	4b09      	ldr	r3, [pc, #36]	@ (8008904 <prvHeapInit+0xc0>)
 80088de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20009358 	.word	0x20009358
 80088f4:	20009f58 	.word	0x20009f58
 80088f8:	20009f60 	.word	0x20009f60
 80088fc:	20009f68 	.word	0x20009f68
 8008900:	20009f64 	.word	0x20009f64
 8008904:	20009f6c 	.word	0x20009f6c

08008908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008910:	4b28      	ldr	r3, [pc, #160]	@ (80089b4 <prvInsertBlockIntoFreeList+0xac>)
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	e002      	b.n	800891c <prvInsertBlockIntoFreeList+0x14>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	d8f7      	bhi.n	8008916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4413      	add	r3, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d108      	bne.n	800894a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	441a      	add	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	441a      	add	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d118      	bne.n	8008990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4b15      	ldr	r3, [pc, #84]	@ (80089b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d00d      	beq.n	8008986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	441a      	add	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e008      	b.n	8008998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008986:	4b0c      	ldr	r3, [pc, #48]	@ (80089b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	e003      	b.n	8008998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	429a      	cmp	r2, r3
 800899e:	d002      	beq.n	80089a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20009f58 	.word	0x20009f58
 80089b8:	20009f60 	.word	0x20009f60

080089bc <arm_rfft_32_fast_init_f32>:
 80089bc:	b150      	cbz	r0, 80089d4 <arm_rfft_32_fast_init_f32+0x18>
 80089be:	b510      	push	{r4, lr}
 80089c0:	2110      	movs	r1, #16
 80089c2:	4604      	mov	r4, r0
 80089c4:	f000 fd58 	bl	8009478 <arm_cfft_init_f32>
 80089c8:	b918      	cbnz	r0, 80089d2 <arm_rfft_32_fast_init_f32+0x16>
 80089ca:	4b04      	ldr	r3, [pc, #16]	@ (80089dc <arm_rfft_32_fast_init_f32+0x20>)
 80089cc:	6163      	str	r3, [r4, #20]
 80089ce:	2220      	movs	r2, #32
 80089d0:	8222      	strh	r2, [r4, #16]
 80089d2:	bd10      	pop	{r4, pc}
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	080229e8 	.word	0x080229e8

080089e0 <arm_rfft_64_fast_init_f32>:
 80089e0:	b150      	cbz	r0, 80089f8 <arm_rfft_64_fast_init_f32+0x18>
 80089e2:	b510      	push	{r4, lr}
 80089e4:	2120      	movs	r1, #32
 80089e6:	4604      	mov	r4, r0
 80089e8:	f000 fd46 	bl	8009478 <arm_cfft_init_f32>
 80089ec:	b918      	cbnz	r0, 80089f6 <arm_rfft_64_fast_init_f32+0x16>
 80089ee:	4b04      	ldr	r3, [pc, #16]	@ (8008a00 <arm_rfft_64_fast_init_f32+0x20>)
 80089f0:	6163      	str	r3, [r4, #20]
 80089f2:	2240      	movs	r2, #64	@ 0x40
 80089f4:	8222      	strh	r2, [r4, #16]
 80089f6:	bd10      	pop	{r4, pc}
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	08027268 	.word	0x08027268

08008a04 <arm_rfft_128_fast_init_f32>:
 8008a04:	b150      	cbz	r0, 8008a1c <arm_rfft_128_fast_init_f32+0x18>
 8008a06:	b510      	push	{r4, lr}
 8008a08:	2140      	movs	r1, #64	@ 0x40
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	f000 fd34 	bl	8009478 <arm_cfft_init_f32>
 8008a10:	b918      	cbnz	r0, 8008a1a <arm_rfft_128_fast_init_f32+0x16>
 8008a12:	4b04      	ldr	r3, [pc, #16]	@ (8008a24 <arm_rfft_128_fast_init_f32+0x20>)
 8008a14:	6163      	str	r3, [r4, #20]
 8008a16:	2280      	movs	r2, #128	@ 0x80
 8008a18:	8222      	strh	r2, [r4, #16]
 8008a1a:	bd10      	pop	{r4, pc}
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	080203e8 	.word	0x080203e8

08008a28 <arm_rfft_256_fast_init_f32>:
 8008a28:	b158      	cbz	r0, 8008a42 <arm_rfft_256_fast_init_f32+0x1a>
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	2180      	movs	r1, #128	@ 0x80
 8008a2e:	4604      	mov	r4, r0
 8008a30:	f000 fd22 	bl	8009478 <arm_cfft_init_f32>
 8008a34:	b920      	cbnz	r0, 8008a40 <arm_rfft_256_fast_init_f32+0x18>
 8008a36:	4b04      	ldr	r3, [pc, #16]	@ (8008a48 <arm_rfft_256_fast_init_f32+0x20>)
 8008a38:	6163      	str	r3, [r4, #20]
 8008a3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a3e:	8222      	strh	r2, [r4, #16]
 8008a40:	bd10      	pop	{r4, pc}
 8008a42:	f04f 30ff 	mov.w	r0, #4294967295
 8008a46:	4770      	bx	lr
 8008a48:	080225e8 	.word	0x080225e8

08008a4c <arm_rfft_512_fast_init_f32>:
 8008a4c:	b160      	cbz	r0, 8008a68 <arm_rfft_512_fast_init_f32+0x1c>
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008a54:	4604      	mov	r4, r0
 8008a56:	f000 fd0f 	bl	8009478 <arm_cfft_init_f32>
 8008a5a:	b920      	cbnz	r0, 8008a66 <arm_rfft_512_fast_init_f32+0x1a>
 8008a5c:	4b04      	ldr	r3, [pc, #16]	@ (8008a70 <arm_rfft_512_fast_init_f32+0x24>)
 8008a5e:	6163      	str	r3, [r4, #20]
 8008a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a64:	8222      	strh	r2, [r4, #16]
 8008a66:	bd10      	pop	{r4, pc}
 8008a68:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	08026a68 	.word	0x08026a68

08008a74 <arm_rfft_1024_fast_init_f32>:
 8008a74:	b160      	cbz	r0, 8008a90 <arm_rfft_1024_fast_init_f32+0x1c>
 8008a76:	b510      	push	{r4, lr}
 8008a78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	f000 fcfb 	bl	8009478 <arm_cfft_init_f32>
 8008a82:	b920      	cbnz	r0, 8008a8e <arm_rfft_1024_fast_init_f32+0x1a>
 8008a84:	4b04      	ldr	r3, [pc, #16]	@ (8008a98 <arm_rfft_1024_fast_init_f32+0x24>)
 8008a86:	6163      	str	r3, [r4, #20]
 8008a88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008a8c:	8222      	strh	r2, [r4, #16]
 8008a8e:	bd10      	pop	{r4, pc}
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	0801f3e8 	.word	0x0801f3e8

08008a9c <arm_rfft_2048_fast_init_f32>:
 8008a9c:	b160      	cbz	r0, 8008ab8 <arm_rfft_2048_fast_init_f32+0x1c>
 8008a9e:	b510      	push	{r4, lr}
 8008aa0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	f000 fce7 	bl	8009478 <arm_cfft_init_f32>
 8008aaa:	b920      	cbnz	r0, 8008ab6 <arm_rfft_2048_fast_init_f32+0x1a>
 8008aac:	4b04      	ldr	r3, [pc, #16]	@ (8008ac0 <arm_rfft_2048_fast_init_f32+0x24>)
 8008aae:	6163      	str	r3, [r4, #20]
 8008ab0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ab4:	8222      	strh	r2, [r4, #16]
 8008ab6:	bd10      	pop	{r4, pc}
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	080205e8 	.word	0x080205e8

08008ac4 <arm_rfft_4096_fast_init_f32>:
 8008ac4:	b160      	cbz	r0, 8008ae0 <arm_rfft_4096_fast_init_f32+0x1c>
 8008ac6:	b510      	push	{r4, lr}
 8008ac8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008acc:	4604      	mov	r4, r0
 8008ace:	f000 fcd3 	bl	8009478 <arm_cfft_init_f32>
 8008ad2:	b920      	cbnz	r0, 8008ade <arm_rfft_4096_fast_init_f32+0x1a>
 8008ad4:	4b04      	ldr	r3, [pc, #16]	@ (8008ae8 <arm_rfft_4096_fast_init_f32+0x24>)
 8008ad6:	6163      	str	r3, [r4, #20]
 8008ad8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008adc:	8222      	strh	r2, [r4, #16]
 8008ade:	bd10      	pop	{r4, pc}
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	08022a68 	.word	0x08022a68

08008aec <arm_rfft_fast_init_f32>:
 8008aec:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008af0:	d024      	beq.n	8008b3c <arm_rfft_fast_init_f32+0x50>
 8008af2:	d807      	bhi.n	8008b04 <arm_rfft_fast_init_f32+0x18>
 8008af4:	2980      	cmp	r1, #128	@ 0x80
 8008af6:	d01c      	beq.n	8008b32 <arm_rfft_fast_init_f32+0x46>
 8008af8:	d90c      	bls.n	8008b14 <arm_rfft_fast_init_f32+0x28>
 8008afa:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008afe:	d11a      	bne.n	8008b36 <arm_rfft_fast_init_f32+0x4a>
 8008b00:	4b0f      	ldr	r3, [pc, #60]	@ (8008b40 <arm_rfft_fast_init_f32+0x54>)
 8008b02:	4718      	bx	r3
 8008b04:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8008b08:	d011      	beq.n	8008b2e <arm_rfft_fast_init_f32+0x42>
 8008b0a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8008b0e:	d107      	bne.n	8008b20 <arm_rfft_fast_init_f32+0x34>
 8008b10:	4b0c      	ldr	r3, [pc, #48]	@ (8008b44 <arm_rfft_fast_init_f32+0x58>)
 8008b12:	4718      	bx	r3
 8008b14:	2920      	cmp	r1, #32
 8008b16:	d008      	beq.n	8008b2a <arm_rfft_fast_init_f32+0x3e>
 8008b18:	2940      	cmp	r1, #64	@ 0x40
 8008b1a:	d10c      	bne.n	8008b36 <arm_rfft_fast_init_f32+0x4a>
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b48 <arm_rfft_fast_init_f32+0x5c>)
 8008b1e:	e7f0      	b.n	8008b02 <arm_rfft_fast_init_f32+0x16>
 8008b20:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008b24:	d107      	bne.n	8008b36 <arm_rfft_fast_init_f32+0x4a>
 8008b26:	4b09      	ldr	r3, [pc, #36]	@ (8008b4c <arm_rfft_fast_init_f32+0x60>)
 8008b28:	e7eb      	b.n	8008b02 <arm_rfft_fast_init_f32+0x16>
 8008b2a:	4b09      	ldr	r3, [pc, #36]	@ (8008b50 <arm_rfft_fast_init_f32+0x64>)
 8008b2c:	e7e9      	b.n	8008b02 <arm_rfft_fast_init_f32+0x16>
 8008b2e:	4b09      	ldr	r3, [pc, #36]	@ (8008b54 <arm_rfft_fast_init_f32+0x68>)
 8008b30:	e7e7      	b.n	8008b02 <arm_rfft_fast_init_f32+0x16>
 8008b32:	4b09      	ldr	r3, [pc, #36]	@ (8008b58 <arm_rfft_fast_init_f32+0x6c>)
 8008b34:	e7e5      	b.n	8008b02 <arm_rfft_fast_init_f32+0x16>
 8008b36:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3a:	4770      	bx	lr
 8008b3c:	4b07      	ldr	r3, [pc, #28]	@ (8008b5c <arm_rfft_fast_init_f32+0x70>)
 8008b3e:	e7e0      	b.n	8008b02 <arm_rfft_fast_init_f32+0x16>
 8008b40:	08008a29 	.word	0x08008a29
 8008b44:	08008ac5 	.word	0x08008ac5
 8008b48:	080089e1 	.word	0x080089e1
 8008b4c:	08008a75 	.word	0x08008a75
 8008b50:	080089bd 	.word	0x080089bd
 8008b54:	08008a9d 	.word	0x08008a9d
 8008b58:	08008a05 	.word	0x08008a05
 8008b5c:	08008a4d 	.word	0x08008a4d

08008b60 <stage_rfft_f32>:
 8008b60:	b410      	push	{r4}
 8008b62:	edd1 7a00 	vldr	s15, [r1]
 8008b66:	ed91 7a01 	vldr	s14, [r1, #4]
 8008b6a:	8804      	ldrh	r4, [r0, #0]
 8008b6c:	6940      	ldr	r0, [r0, #20]
 8008b6e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008b72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b76:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8008b7a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008b7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b82:	3c01      	subs	r4, #1
 8008b84:	ee26 7a84 	vmul.f32	s14, s13, s8
 8008b88:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008b8c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8008b90:	ed82 7a00 	vstr	s14, [r2]
 8008b94:	edc2 7a01 	vstr	s15, [r2, #4]
 8008b98:	3010      	adds	r0, #16
 8008b9a:	3210      	adds	r2, #16
 8008b9c:	3b08      	subs	r3, #8
 8008b9e:	3110      	adds	r1, #16
 8008ba0:	ed11 5a02 	vldr	s10, [r1, #-8]
 8008ba4:	ed93 7a02 	vldr	s14, [r3, #8]
 8008ba8:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008bac:	edd3 4a03 	vldr	s9, [r3, #12]
 8008bb0:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008bb4:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008bb8:	ee77 5a45 	vsub.f32	s11, s14, s10
 8008bbc:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008bc0:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008bc4:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008bc8:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008bcc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008bd0:	ee37 7a23 	vadd.f32	s14, s14, s7
 8008bd4:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008bd8:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008bdc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008be0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008be4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008be8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008bec:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008bf0:	3c01      	subs	r4, #1
 8008bf2:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008bf6:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008bfa:	f1a3 0308 	sub.w	r3, r3, #8
 8008bfe:	f101 0108 	add.w	r1, r1, #8
 8008c02:	f100 0008 	add.w	r0, r0, #8
 8008c06:	f102 0208 	add.w	r2, r2, #8
 8008c0a:	d1c9      	bne.n	8008ba0 <stage_rfft_f32+0x40>
 8008c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop

08008c14 <merge_rfft_f32>:
 8008c14:	b410      	push	{r4}
 8008c16:	edd1 7a00 	vldr	s15, [r1]
 8008c1a:	edd1 6a01 	vldr	s13, [r1, #4]
 8008c1e:	8804      	ldrh	r4, [r0, #0]
 8008c20:	6940      	ldr	r0, [r0, #20]
 8008c22:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008c26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c2a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8008c2e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008c32:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008c36:	3c01      	subs	r4, #1
 8008c38:	ed82 7a00 	vstr	s14, [r2]
 8008c3c:	edc2 7a01 	vstr	s15, [r2, #4]
 8008c40:	b3dc      	cbz	r4, 8008cba <merge_rfft_f32+0xa6>
 8008c42:	00e3      	lsls	r3, r4, #3
 8008c44:	3b08      	subs	r3, #8
 8008c46:	440b      	add	r3, r1
 8008c48:	3010      	adds	r0, #16
 8008c4a:	3210      	adds	r2, #16
 8008c4c:	3110      	adds	r1, #16
 8008c4e:	ed11 5a02 	vldr	s10, [r1, #-8]
 8008c52:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c56:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008c5a:	edd3 4a03 	vldr	s9, [r3, #12]
 8008c5e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008c62:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008c66:	ee75 5a47 	vsub.f32	s11, s10, s14
 8008c6a:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008c6e:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008c72:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008c76:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008c7a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008c7e:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008c82:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008c86:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008c8a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008c8e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8008c92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c96:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008c9a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008c9e:	3c01      	subs	r4, #1
 8008ca0:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008ca4:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008ca8:	f1a3 0308 	sub.w	r3, r3, #8
 8008cac:	f101 0108 	add.w	r1, r1, #8
 8008cb0:	f100 0008 	add.w	r0, r0, #8
 8008cb4:	f102 0208 	add.w	r2, r2, #8
 8008cb8:	d1c9      	bne.n	8008c4e <merge_rfft_f32+0x3a>
 8008cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <arm_rfft_fast_f32>:
 8008cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc4:	461c      	mov	r4, r3
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	4616      	mov	r6, r2
 8008cca:	b14b      	cbz	r3, 8008ce0 <arm_rfft_fast_f32+0x20>
 8008ccc:	f7ff ffa2 	bl	8008c14 <merge_rfft_f32>
 8008cd0:	4622      	mov	r2, r4
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cdc:	f000 bb34 	b.w	8009348 <arm_cfft_f32>
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f000 fb2f 	bl	8009348 <arm_cfft_f32>
 8008cea:	4632      	mov	r2, r6
 8008cec:	4639      	mov	r1, r7
 8008cee:	4628      	mov	r0, r5
 8008cf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf4:	f7ff bf34 	b.w	8008b60 <stage_rfft_f32>

08008cf8 <arm_cfft_radix8by2_f32>:
 8008cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfc:	ed2d 8b08 	vpush	{d8-d11}
 8008d00:	f8b0 c000 	ldrh.w	ip, [r0]
 8008d04:	6842      	ldr	r2, [r0, #4]
 8008d06:	4607      	mov	r7, r0
 8008d08:	4608      	mov	r0, r1
 8008d0a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8008d0e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8008d12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008d16:	b082      	sub	sp, #8
 8008d18:	f000 80b0 	beq.w	8008e7c <arm_cfft_radix8by2_f32+0x184>
 8008d1c:	008c      	lsls	r4, r1, #2
 8008d1e:	3410      	adds	r4, #16
 8008d20:	f100 0310 	add.w	r3, r0, #16
 8008d24:	1906      	adds	r6, r0, r4
 8008d26:	3210      	adds	r2, #16
 8008d28:	4444      	add	r4, r8
 8008d2a:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8008d2e:	f108 0510 	add.w	r5, r8, #16
 8008d32:	ed15 2a04 	vldr	s4, [r5, #-16]
 8008d36:	ed55 2a03 	vldr	s5, [r5, #-12]
 8008d3a:	ed54 4a04 	vldr	s9, [r4, #-16]
 8008d3e:	ed14 4a03 	vldr	s8, [r4, #-12]
 8008d42:	ed14 6a02 	vldr	s12, [r4, #-8]
 8008d46:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008d4a:	ed53 3a04 	vldr	s7, [r3, #-16]
 8008d4e:	ed15 0a02 	vldr	s0, [r5, #-8]
 8008d52:	ed55 0a01 	vldr	s1, [r5, #-4]
 8008d56:	ed56 6a04 	vldr	s13, [r6, #-16]
 8008d5a:	ed16 3a03 	vldr	s6, [r6, #-12]
 8008d5e:	ed13 7a03 	vldr	s14, [r3, #-12]
 8008d62:	ed13 5a02 	vldr	s10, [r3, #-8]
 8008d66:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008d6a:	ed16 1a02 	vldr	s2, [r6, #-8]
 8008d6e:	ed56 1a01 	vldr	s3, [r6, #-4]
 8008d72:	ee73 ba82 	vadd.f32	s23, s7, s4
 8008d76:	ee37 ba22 	vadd.f32	s22, s14, s5
 8008d7a:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8008d7e:	ee33 9a04 	vadd.f32	s18, s6, s8
 8008d82:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8008d86:	ee75 aa00 	vadd.f32	s21, s10, s0
 8008d8a:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8008d8e:	ee71 8a06 	vadd.f32	s17, s2, s12
 8008d92:	ed43 ba04 	vstr	s23, [r3, #-16]
 8008d96:	ed03 ba03 	vstr	s22, [r3, #-12]
 8008d9a:	ed43 aa02 	vstr	s21, [r3, #-8]
 8008d9e:	ed03 aa01 	vstr	s20, [r3, #-4]
 8008da2:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008da6:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008daa:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008dae:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008db2:	ee37 7a62 	vsub.f32	s14, s14, s5
 8008db6:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8008dba:	ee34 4a43 	vsub.f32	s8, s8, s6
 8008dbe:	ed52 6a03 	vldr	s13, [r2, #-12]
 8008dc2:	ed12 3a04 	vldr	s6, [r2, #-16]
 8008dc6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8008dca:	ee27 8a26 	vmul.f32	s16, s14, s13
 8008dce:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8008dd2:	ee23 2a83 	vmul.f32	s4, s7, s6
 8008dd6:	ee64 4a83 	vmul.f32	s9, s9, s6
 8008dda:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8008dde:	ee27 7a03 	vmul.f32	s14, s14, s6
 8008de2:	ee64 6a26 	vmul.f32	s13, s8, s13
 8008de6:	ee24 4a03 	vmul.f32	s8, s8, s6
 8008dea:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008dee:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008df2:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8008df6:	ee32 3a08 	vadd.f32	s6, s4, s16
 8008dfa:	ed05 7a03 	vstr	s14, [r5, #-12]
 8008dfe:	ed05 3a04 	vstr	s6, [r5, #-16]
 8008e02:	ed04 4a04 	vstr	s8, [r4, #-16]
 8008e06:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008e0a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008e0e:	ee76 6a41 	vsub.f32	s13, s12, s2
 8008e12:	ee35 5a40 	vsub.f32	s10, s10, s0
 8008e16:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8008e1a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008e1e:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008e22:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008e26:	ee66 4a87 	vmul.f32	s9, s13, s14
 8008e2a:	ee25 4a25 	vmul.f32	s8, s10, s11
 8008e2e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008e32:	ee25 5a07 	vmul.f32	s10, s10, s14
 8008e36:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008e3a:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008e3e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008e42:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008e46:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008e4a:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8008e4e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008e52:	3310      	adds	r3, #16
 8008e54:	4563      	cmp	r3, ip
 8008e56:	ed45 5a02 	vstr	s11, [r5, #-8]
 8008e5a:	f106 0610 	add.w	r6, r6, #16
 8008e5e:	ed45 7a01 	vstr	s15, [r5, #-4]
 8008e62:	f102 0210 	add.w	r2, r2, #16
 8008e66:	ed04 6a02 	vstr	s12, [r4, #-8]
 8008e6a:	ed04 7a01 	vstr	s14, [r4, #-4]
 8008e6e:	f105 0510 	add.w	r5, r5, #16
 8008e72:	f104 0410 	add.w	r4, r4, #16
 8008e76:	f47f af5c 	bne.w	8008d32 <arm_cfft_radix8by2_f32+0x3a>
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	b289      	uxth	r1, r1
 8008e7e:	2302      	movs	r3, #2
 8008e80:	9101      	str	r1, [sp, #4]
 8008e82:	f000 fb4b 	bl	800951c <arm_radix8_butterfly_f32>
 8008e86:	9901      	ldr	r1, [sp, #4]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	b002      	add	sp, #8
 8008e90:	ecbd 8b08 	vpop	{d8-d11}
 8008e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	f000 bb40 	b.w	800951c <arm_radix8_butterfly_f32>

08008e9c <arm_cfft_radix8by4_f32>:
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	ed2d 8b0a 	vpush	{d8-d12}
 8008ea4:	8803      	ldrh	r3, [r0, #0]
 8008ea6:	6842      	ldr	r2, [r0, #4]
 8008ea8:	b08d      	sub	sp, #52	@ 0x34
 8008eaa:	085b      	lsrs	r3, r3, #1
 8008eac:	900a      	str	r0, [sp, #40]	@ 0x28
 8008eae:	4608      	mov	r0, r1
 8008eb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008eb4:	edd1 5a00 	vldr	s11, [r1]
 8008eb8:	edd0 7a00 	vldr	s15, [r0]
 8008ebc:	edd1 3a01 	vldr	s7, [r1, #4]
 8008ec0:	ed90 5a01 	vldr	s10, [r0, #4]
 8008ec4:	9108      	str	r1, [sp, #32]
 8008ec6:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8008eca:	ed96 7a00 	vldr	s14, [r6]
 8008ece:	ed96 4a01 	vldr	s8, [r6, #4]
 8008ed2:	9607      	str	r6, [sp, #28]
 8008ed4:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8008ed8:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8008edc:	edd8 4a00 	vldr	s9, [r8]
 8008ee0:	ed98 3a01 	vldr	s6, [r8, #4]
 8008ee4:	ee77 6a06 	vadd.f32	s13, s14, s12
 8008ee8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008eec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	edc0 6a00 	vstr	s13, [r0]
 8008ef6:	edd6 5a01 	vldr	s11, [r6, #4]
 8008efa:	edd8 2a01 	vldr	s5, [r8, #4]
 8008efe:	ee75 6a23 	vadd.f32	s13, s10, s7
 8008f02:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008f06:	ee36 6a47 	vsub.f32	s12, s12, s14
 8008f0a:	ee74 3a27 	vadd.f32	s7, s8, s15
 8008f0e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8008f12:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008f16:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8008f1a:	3408      	adds	r4, #8
 8008f1c:	ee35 4a47 	vsub.f32	s8, s10, s14
 8008f20:	460d      	mov	r5, r1
 8008f22:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008f26:	4637      	mov	r7, r6
 8008f28:	9402      	str	r4, [sp, #8]
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	3508      	adds	r5, #8
 8008f30:	0859      	lsrs	r1, r3, #1
 8008f32:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f34:	9706      	str	r7, [sp, #24]
 8008f36:	9505      	str	r5, [sp, #20]
 8008f38:	f102 0708 	add.w	r7, r2, #8
 8008f3c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8008f40:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008f44:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8008f48:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8008f4c:	ee77 7a83 	vadd.f32	s15, s15, s6
 8008f50:	ee34 5a24 	vadd.f32	s10, s8, s9
 8008f54:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008f58:	3902      	subs	r1, #2
 8008f5a:	4645      	mov	r5, r8
 8008f5c:	9701      	str	r7, [sp, #4]
 8008f5e:	f102 0c18 	add.w	ip, r2, #24
 8008f62:	f102 0710 	add.w	r7, r2, #16
 8008f66:	3508      	adds	r5, #8
 8008f68:	0849      	lsrs	r1, r1, #1
 8008f6a:	edc0 5a01 	vstr	s11, [r0, #4]
 8008f6e:	9703      	str	r7, [sp, #12]
 8008f70:	edc6 3a00 	vstr	s7, [r6]
 8008f74:	ed86 5a01 	vstr	s10, [r6, #4]
 8008f78:	f8cd c000 	str.w	ip, [sp]
 8008f7c:	ed84 6a00 	vstr	s12, [r4]
 8008f80:	edc4 6a01 	vstr	s13, [r4, #4]
 8008f84:	9504      	str	r5, [sp, #16]
 8008f86:	edc8 7a00 	vstr	s15, [r8]
 8008f8a:	ed88 7a01 	vstr	s14, [r8, #4]
 8008f8e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f90:	f000 8138 	beq.w	8009204 <arm_cfft_radix8by4_f32+0x368>
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	3b0c      	subs	r3, #12
 8008f98:	f1a6 0c0c 	sub.w	ip, r6, #12
 8008f9c:	f106 0510 	add.w	r5, r6, #16
 8008fa0:	4626      	mov	r6, r4
 8008fa2:	46bb      	mov	fp, r7
 8008fa4:	f102 0a20 	add.w	sl, r2, #32
 8008fa8:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 8008fac:	f106 0710 	add.w	r7, r6, #16
 8008fb0:	4443      	add	r3, r8
 8008fb2:	f100 0e10 	add.w	lr, r0, #16
 8008fb6:	3c0c      	subs	r4, #12
 8008fb8:	f1a8 060c 	sub.w	r6, r8, #12
 8008fbc:	f108 0210 	add.w	r2, r8, #16
 8008fc0:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8008fc4:	ed57 5a02 	vldr	s11, [r7, #-8]
 8008fc8:	ed55 7a02 	vldr	s15, [r5, #-8]
 8008fcc:	ed52 1a02 	vldr	s3, [r2, #-8]
 8008fd0:	ed57 6a01 	vldr	s13, [r7, #-4]
 8008fd4:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8008fd8:	ed12 1a01 	vldr	s2, [r2, #-4]
 8008fdc:	ed15 8a01 	vldr	s16, [r5, #-4]
 8008fe0:	ee35 4a25 	vadd.f32	s8, s10, s11
 8008fe4:	ee30 6a26 	vadd.f32	s12, s0, s13
 8008fe8:	ee37 7a84 	vadd.f32	s14, s15, s8
 8008fec:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008ff0:	ee37 7a21 	vadd.f32	s14, s14, s3
 8008ff4:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008ff8:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8008ffc:	ed15 7a01 	vldr	s14, [r5, #-4]
 8009000:	ed52 6a01 	vldr	s13, [r2, #-4]
 8009004:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009008:	ee78 aa25 	vadd.f32	s21, s16, s11
 800900c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009010:	ee70 3a67 	vsub.f32	s7, s0, s15
 8009014:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8009018:	ed96 7a02 	vldr	s14, [r6, #8]
 800901c:	ed9c 2a02 	vldr	s4, [ip, #8]
 8009020:	ed94 ba02 	vldr	s22, [r4, #8]
 8009024:	edd3 9a02 	vldr	s19, [r3, #8]
 8009028:	edd6 2a01 	vldr	s5, [r6, #4]
 800902c:	ed9c 9a01 	vldr	s18, [ip, #4]
 8009030:	ed93 5a01 	vldr	s10, [r3, #4]
 8009034:	edd4 0a01 	vldr	s1, [r4, #4]
 8009038:	ee72 6a07 	vadd.f32	s13, s4, s14
 800903c:	ee32 2a47 	vsub.f32	s4, s4, s14
 8009040:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8009044:	ee79 4a22 	vadd.f32	s9, s18, s5
 8009048:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800904c:	ee79 2a62 	vsub.f32	s5, s18, s5
 8009050:	ed8c 7a02 	vstr	s14, [ip, #8]
 8009054:	ed94 7a01 	vldr	s14, [r4, #4]
 8009058:	edd3 8a01 	vldr	s17, [r3, #4]
 800905c:	ee34 7a87 	vadd.f32	s14, s9, s14
 8009060:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8009064:	ee37 7a28 	vadd.f32	s14, s14, s17
 8009068:	ee32 9a60 	vsub.f32	s18, s4, s1
 800906c:	ed8c 7a01 	vstr	s14, [ip, #4]
 8009070:	ed1b 7a01 	vldr	s14, [fp, #-4]
 8009074:	ed1b aa02 	vldr	s20, [fp, #-8]
 8009078:	ee73 8a22 	vadd.f32	s17, s6, s5
 800907c:	ee39 9a05 	vadd.f32	s18, s18, s10
 8009080:	ee7a aac1 	vsub.f32	s21, s21, s2
 8009084:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009088:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800908c:	ee69 ba07 	vmul.f32	s23, s18, s14
 8009090:	ee6a aa87 	vmul.f32	s21, s21, s14
 8009094:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8009098:	ee63 ca87 	vmul.f32	s25, s7, s14
 800909c:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80090a0:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80090a4:	ee68 8a87 	vmul.f32	s17, s17, s14
 80090a8:	ee73 3aea 	vsub.f32	s7, s7, s21
 80090ac:	ee78 8a89 	vadd.f32	s17, s17, s18
 80090b0:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80090b4:	ee3b aaca 	vsub.f32	s20, s23, s20
 80090b8:	ee34 4a67 	vsub.f32	s8, s8, s15
 80090bc:	ee76 6acb 	vsub.f32	s13, s13, s22
 80090c0:	ee36 6a48 	vsub.f32	s12, s12, s16
 80090c4:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80090c8:	ed05 7a02 	vstr	s14, [r5, #-8]
 80090cc:	ed45 3a01 	vstr	s7, [r5, #-4]
 80090d0:	edc4 8a01 	vstr	s17, [r4, #4]
 80090d4:	ed84 aa02 	vstr	s20, [r4, #8]
 80090d8:	ed5a 3a04 	vldr	s7, [sl, #-16]
 80090dc:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80090e0:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80090e4:	ed5a 6a03 	vldr	s13, [sl, #-12]
 80090e8:	ee34 4a61 	vsub.f32	s8, s8, s3
 80090ec:	ee36 6a41 	vsub.f32	s12, s12, s2
 80090f0:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80090f4:	ee66 9a26 	vmul.f32	s19, s12, s13
 80090f8:	ee24 9a23 	vmul.f32	s18, s8, s7
 80090fc:	ee26 6a23 	vmul.f32	s12, s12, s7
 8009100:	ee24 4a26 	vmul.f32	s8, s8, s13
 8009104:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009108:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800910c:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8009110:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009114:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009118:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800911c:	ee79 3a29 	vadd.f32	s7, s18, s19
 8009120:	ee75 6a60 	vsub.f32	s13, s10, s1
 8009124:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8009128:	ee77 7a80 	vadd.f32	s15, s15, s0
 800912c:	ed47 3a02 	vstr	s7, [r7, #-8]
 8009130:	ed07 6a01 	vstr	s12, [r7, #-4]
 8009134:	ed86 7a01 	vstr	s14, [r6, #4]
 8009138:	ed86 4a02 	vstr	s8, [r6, #8]
 800913c:	ee35 6a81 	vadd.f32	s12, s11, s2
 8009140:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8009144:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 8009148:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 800914c:	ee33 3a62 	vsub.f32	s6, s6, s5
 8009150:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8009154:	ee67 2a26 	vmul.f32	s5, s14, s13
 8009158:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800915c:	ee26 5a25 	vmul.f32	s10, s12, s11
 8009160:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009164:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009168:	ee27 7a25 	vmul.f32	s14, s14, s11
 800916c:	ee63 6a26 	vmul.f32	s13, s6, s13
 8009170:	ee23 3a25 	vmul.f32	s6, s6, s11
 8009174:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009178:	ee75 5a24 	vadd.f32	s11, s10, s9
 800917c:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8009180:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009184:	3901      	subs	r1, #1
 8009186:	ed42 5a02 	vstr	s11, [r2, #-8]
 800918a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800918e:	f10e 0e08 	add.w	lr, lr, #8
 8009192:	ed83 3a02 	vstr	s6, [r3, #8]
 8009196:	ed83 7a01 	vstr	s14, [r3, #4]
 800919a:	f1ac 0c08 	sub.w	ip, ip, #8
 800919e:	f10b 0b08 	add.w	fp, fp, #8
 80091a2:	f105 0508 	add.w	r5, r5, #8
 80091a6:	f1a4 0408 	sub.w	r4, r4, #8
 80091aa:	f10a 0a10 	add.w	sl, sl, #16
 80091ae:	f107 0708 	add.w	r7, r7, #8
 80091b2:	f1a6 0608 	sub.w	r6, r6, #8
 80091b6:	f109 0918 	add.w	r9, r9, #24
 80091ba:	f102 0208 	add.w	r2, r2, #8
 80091be:	f1a3 0308 	sub.w	r3, r3, #8
 80091c2:	f47f aefd 	bne.w	8008fc0 <arm_cfft_radix8by4_f32+0x124>
 80091c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80091c8:	9902      	ldr	r1, [sp, #8]
 80091ca:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80091ce:	9102      	str	r1, [sp, #8]
 80091d0:	9901      	ldr	r1, [sp, #4]
 80091d2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80091d6:	9101      	str	r1, [sp, #4]
 80091d8:	9906      	ldr	r1, [sp, #24]
 80091da:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80091de:	9106      	str	r1, [sp, #24]
 80091e0:	9903      	ldr	r1, [sp, #12]
 80091e2:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80091e6:	9103      	str	r1, [sp, #12]
 80091e8:	9905      	ldr	r1, [sp, #20]
 80091ea:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80091ee:	9105      	str	r1, [sp, #20]
 80091f0:	9904      	ldr	r1, [sp, #16]
 80091f2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80091f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80091fa:	9204      	str	r2, [sp, #16]
 80091fc:	9a00      	ldr	r2, [sp, #0]
 80091fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	9902      	ldr	r1, [sp, #8]
 8009206:	9d05      	ldr	r5, [sp, #20]
 8009208:	ed91 4a00 	vldr	s8, [r1]
 800920c:	edd5 6a00 	vldr	s13, [r5]
 8009210:	9b06      	ldr	r3, [sp, #24]
 8009212:	9c04      	ldr	r4, [sp, #16]
 8009214:	edd3 7a00 	vldr	s15, [r3]
 8009218:	ed94 3a00 	vldr	s6, [r4]
 800921c:	edd5 4a01 	vldr	s9, [r5, #4]
 8009220:	edd1 3a01 	vldr	s7, [r1, #4]
 8009224:	ed94 2a01 	vldr	s4, [r4, #4]
 8009228:	ed93 7a01 	vldr	s14, [r3, #4]
 800922c:	9a01      	ldr	r2, [sp, #4]
 800922e:	ee34 6a26 	vadd.f32	s12, s8, s13
 8009232:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8009236:	ee37 5a86 	vadd.f32	s10, s15, s12
 800923a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800923e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009242:	ee74 6a66 	vsub.f32	s13, s8, s13
 8009246:	ed81 5a00 	vstr	s10, [r1]
 800924a:	ed93 5a01 	vldr	s10, [r3, #4]
 800924e:	edd4 4a01 	vldr	s9, [r4, #4]
 8009252:	ee35 5a85 	vadd.f32	s10, s11, s10
 8009256:	ee37 4a26 	vadd.f32	s8, s14, s13
 800925a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800925e:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8009262:	ed81 5a01 	vstr	s10, [r1, #4]
 8009266:	edd2 1a00 	vldr	s3, [r2]
 800926a:	edd2 2a01 	vldr	s5, [r2, #4]
 800926e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8009272:	ee34 5a83 	vadd.f32	s10, s9, s6
 8009276:	ee34 4a42 	vsub.f32	s8, s8, s4
 800927a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800927e:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009282:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009286:	ee65 2a22 	vmul.f32	s5, s10, s5
 800928a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800928e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009292:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009296:	edc3 2a00 	vstr	s5, [r3]
 800929a:	ed83 5a01 	vstr	s10, [r3, #4]
 800929e:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80092a2:	9b03      	ldr	r3, [sp, #12]
 80092a4:	ee36 6a43 	vsub.f32	s12, s12, s6
 80092a8:	ed93 4a01 	vldr	s8, [r3, #4]
 80092ac:	ed93 5a00 	vldr	s10, [r3]
 80092b0:	9b00      	ldr	r3, [sp, #0]
 80092b2:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80092b6:	ee66 4a05 	vmul.f32	s9, s12, s10
 80092ba:	ee25 5a85 	vmul.f32	s10, s11, s10
 80092be:	ee26 6a04 	vmul.f32	s12, s12, s8
 80092c2:	ee65 5a84 	vmul.f32	s11, s11, s8
 80092c6:	ee35 6a46 	vsub.f32	s12, s10, s12
 80092ca:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80092ce:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80092d2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80092d6:	ed85 6a01 	vstr	s12, [r5, #4]
 80092da:	edc5 5a00 	vstr	s11, [r5]
 80092de:	edd3 5a01 	vldr	s11, [r3, #4]
 80092e2:	edd3 6a00 	vldr	s13, [r3]
 80092e6:	ee37 7a02 	vadd.f32	s14, s14, s4
 80092ea:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80092ee:	ee27 6a26 	vmul.f32	s12, s14, s13
 80092f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80092f6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80092fa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80092fe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009302:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009306:	ed84 7a01 	vstr	s14, [r4, #4]
 800930a:	edc4 7a00 	vstr	s15, [r4]
 800930e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009310:	9100      	str	r1, [sp, #0]
 8009312:	6862      	ldr	r2, [r4, #4]
 8009314:	2304      	movs	r3, #4
 8009316:	f000 f901 	bl	800951c <arm_radix8_butterfly_f32>
 800931a:	9807      	ldr	r0, [sp, #28]
 800931c:	9900      	ldr	r1, [sp, #0]
 800931e:	6862      	ldr	r2, [r4, #4]
 8009320:	2304      	movs	r3, #4
 8009322:	f000 f8fb 	bl	800951c <arm_radix8_butterfly_f32>
 8009326:	9808      	ldr	r0, [sp, #32]
 8009328:	9900      	ldr	r1, [sp, #0]
 800932a:	6862      	ldr	r2, [r4, #4]
 800932c:	2304      	movs	r3, #4
 800932e:	f000 f8f5 	bl	800951c <arm_radix8_butterfly_f32>
 8009332:	9900      	ldr	r1, [sp, #0]
 8009334:	6862      	ldr	r2, [r4, #4]
 8009336:	4640      	mov	r0, r8
 8009338:	2304      	movs	r3, #4
 800933a:	b00d      	add	sp, #52	@ 0x34
 800933c:	ecbd 8b0a 	vpop	{d8-d12}
 8009340:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009344:	f000 b8ea 	b.w	800951c <arm_radix8_butterfly_f32>

08009348 <arm_cfft_f32>:
 8009348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800934c:	2a01      	cmp	r2, #1
 800934e:	8805      	ldrh	r5, [r0, #0]
 8009350:	4607      	mov	r7, r0
 8009352:	4690      	mov	r8, r2
 8009354:	460c      	mov	r4, r1
 8009356:	4699      	mov	r9, r3
 8009358:	d05c      	beq.n	8009414 <arm_cfft_f32+0xcc>
 800935a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800935e:	d054      	beq.n	800940a <arm_cfft_f32+0xc2>
 8009360:	d810      	bhi.n	8009384 <arm_cfft_f32+0x3c>
 8009362:	2d40      	cmp	r5, #64	@ 0x40
 8009364:	d015      	beq.n	8009392 <arm_cfft_f32+0x4a>
 8009366:	d94c      	bls.n	8009402 <arm_cfft_f32+0xba>
 8009368:	2d80      	cmp	r5, #128	@ 0x80
 800936a:	d103      	bne.n	8009374 <arm_cfft_f32+0x2c>
 800936c:	4621      	mov	r1, r4
 800936e:	4638      	mov	r0, r7
 8009370:	f7ff fcc2 	bl	8008cf8 <arm_cfft_radix8by2_f32>
 8009374:	f1b9 0f00 	cmp.w	r9, #0
 8009378:	d114      	bne.n	80093a4 <arm_cfft_f32+0x5c>
 800937a:	f1b8 0f01 	cmp.w	r8, #1
 800937e:	d019      	beq.n	80093b4 <arm_cfft_f32+0x6c>
 8009380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009384:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8009388:	d03f      	beq.n	800940a <arm_cfft_f32+0xc2>
 800938a:	d933      	bls.n	80093f4 <arm_cfft_f32+0xac>
 800938c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8009390:	d1f0      	bne.n	8009374 <arm_cfft_f32+0x2c>
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	2301      	movs	r3, #1
 8009396:	4629      	mov	r1, r5
 8009398:	4620      	mov	r0, r4
 800939a:	f000 f8bf 	bl	800951c <arm_radix8_butterfly_f32>
 800939e:	f1b9 0f00 	cmp.w	r9, #0
 80093a2:	d0ea      	beq.n	800937a <arm_cfft_f32+0x32>
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	89b9      	ldrh	r1, [r7, #12]
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 f845 	bl	8009438 <arm_bitreversal_32>
 80093ae:	f1b8 0f01 	cmp.w	r8, #1
 80093b2:	d1e5      	bne.n	8009380 <arm_cfft_f32+0x38>
 80093b4:	ee07 5a90 	vmov	s15, r5
 80093b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80093c4:	2d00      	cmp	r5, #0
 80093c6:	d0db      	beq.n	8009380 <arm_cfft_f32+0x38>
 80093c8:	f104 0108 	add.w	r1, r4, #8
 80093cc:	2300      	movs	r3, #0
 80093ce:	3301      	adds	r3, #1
 80093d0:	429d      	cmp	r5, r3
 80093d2:	f101 0108 	add.w	r1, r1, #8
 80093d6:	ed11 7a04 	vldr	s14, [r1, #-16]
 80093da:	ed51 7a03 	vldr	s15, [r1, #-12]
 80093de:	ee27 7a26 	vmul.f32	s14, s14, s13
 80093e2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80093e6:	ed01 7a04 	vstr	s14, [r1, #-16]
 80093ea:	ed41 7a03 	vstr	s15, [r1, #-12]
 80093ee:	d1ee      	bne.n	80093ce <arm_cfft_f32+0x86>
 80093f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093f4:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80093f8:	d0cb      	beq.n	8009392 <arm_cfft_f32+0x4a>
 80093fa:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80093fe:	d0b5      	beq.n	800936c <arm_cfft_f32+0x24>
 8009400:	e7b8      	b.n	8009374 <arm_cfft_f32+0x2c>
 8009402:	2d10      	cmp	r5, #16
 8009404:	d0b2      	beq.n	800936c <arm_cfft_f32+0x24>
 8009406:	2d20      	cmp	r5, #32
 8009408:	d1b4      	bne.n	8009374 <arm_cfft_f32+0x2c>
 800940a:	4621      	mov	r1, r4
 800940c:	4638      	mov	r0, r7
 800940e:	f7ff fd45 	bl	8008e9c <arm_cfft_radix8by4_f32>
 8009412:	e7af      	b.n	8009374 <arm_cfft_f32+0x2c>
 8009414:	b16d      	cbz	r5, 8009432 <arm_cfft_f32+0xea>
 8009416:	310c      	adds	r1, #12
 8009418:	2600      	movs	r6, #0
 800941a:	ed51 7a02 	vldr	s15, [r1, #-8]
 800941e:	3601      	adds	r6, #1
 8009420:	eef1 7a67 	vneg.f32	s15, s15
 8009424:	42b5      	cmp	r5, r6
 8009426:	ed41 7a02 	vstr	s15, [r1, #-8]
 800942a:	f101 0108 	add.w	r1, r1, #8
 800942e:	d1f4      	bne.n	800941a <arm_cfft_f32+0xd2>
 8009430:	e793      	b.n	800935a <arm_cfft_f32+0x12>
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0a4      	beq.n	8009380 <arm_cfft_f32+0x38>
 8009436:	e7b5      	b.n	80093a4 <arm_cfft_f32+0x5c>

08009438 <arm_bitreversal_32>:
 8009438:	b1e9      	cbz	r1, 8009476 <arm_bitreversal_32+0x3e>
 800943a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800943c:	2500      	movs	r5, #0
 800943e:	f102 0e02 	add.w	lr, r2, #2
 8009442:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8009446:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800944a:	08a4      	lsrs	r4, r4, #2
 800944c:	089b      	lsrs	r3, r3, #2
 800944e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8009452:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8009456:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800945a:	00a6      	lsls	r6, r4, #2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8009462:	3304      	adds	r3, #4
 8009464:	1d34      	adds	r4, r6, #4
 8009466:	3502      	adds	r5, #2
 8009468:	58c6      	ldr	r6, [r0, r3]
 800946a:	5907      	ldr	r7, [r0, r4]
 800946c:	50c7      	str	r7, [r0, r3]
 800946e:	428d      	cmp	r5, r1
 8009470:	5106      	str	r6, [r0, r4]
 8009472:	d3e6      	bcc.n	8009442 <arm_bitreversal_32+0xa>
 8009474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009476:	4770      	bx	lr

08009478 <arm_cfft_init_f32>:
 8009478:	4603      	mov	r3, r0
 800947a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800947e:	f04f 0000 	mov.w	r0, #0
 8009482:	b410      	push	{r4}
 8009484:	8019      	strh	r1, [r3, #0]
 8009486:	6058      	str	r0, [r3, #4]
 8009488:	d033      	beq.n	80094f2 <arm_cfft_init_f32+0x7a>
 800948a:	d918      	bls.n	80094be <arm_cfft_init_f32+0x46>
 800948c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009490:	d027      	beq.n	80094e2 <arm_cfft_init_f32+0x6a>
 8009492:	d90c      	bls.n	80094ae <arm_cfft_init_f32+0x36>
 8009494:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009498:	d11e      	bne.n	80094d8 <arm_cfft_init_f32+0x60>
 800949a:	4a17      	ldr	r2, [pc, #92]	@ (80094f8 <arm_cfft_init_f32+0x80>)
 800949c:	8994      	ldrh	r4, [r2, #12]
 800949e:	819c      	strh	r4, [r3, #12]
 80094a0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80094a4:	e9c3 2101 	strd	r2, r1, [r3, #4]
 80094a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80094b2:	d018      	beq.n	80094e6 <arm_cfft_init_f32+0x6e>
 80094b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80094b8:	d10e      	bne.n	80094d8 <arm_cfft_init_f32+0x60>
 80094ba:	4a10      	ldr	r2, [pc, #64]	@ (80094fc <arm_cfft_init_f32+0x84>)
 80094bc:	e7ee      	b.n	800949c <arm_cfft_init_f32+0x24>
 80094be:	2940      	cmp	r1, #64	@ 0x40
 80094c0:	d013      	beq.n	80094ea <arm_cfft_init_f32+0x72>
 80094c2:	d903      	bls.n	80094cc <arm_cfft_init_f32+0x54>
 80094c4:	2980      	cmp	r1, #128	@ 0x80
 80094c6:	d107      	bne.n	80094d8 <arm_cfft_init_f32+0x60>
 80094c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009500 <arm_cfft_init_f32+0x88>)
 80094ca:	e7e7      	b.n	800949c <arm_cfft_init_f32+0x24>
 80094cc:	2910      	cmp	r1, #16
 80094ce:	d00e      	beq.n	80094ee <arm_cfft_init_f32+0x76>
 80094d0:	2920      	cmp	r1, #32
 80094d2:	d101      	bne.n	80094d8 <arm_cfft_init_f32+0x60>
 80094d4:	4a0b      	ldr	r2, [pc, #44]	@ (8009504 <arm_cfft_init_f32+0x8c>)
 80094d6:	e7e1      	b.n	800949c <arm_cfft_init_f32+0x24>
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295
 80094dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	4a09      	ldr	r2, [pc, #36]	@ (8009508 <arm_cfft_init_f32+0x90>)
 80094e4:	e7da      	b.n	800949c <arm_cfft_init_f32+0x24>
 80094e6:	4a09      	ldr	r2, [pc, #36]	@ (800950c <arm_cfft_init_f32+0x94>)
 80094e8:	e7d8      	b.n	800949c <arm_cfft_init_f32+0x24>
 80094ea:	4a09      	ldr	r2, [pc, #36]	@ (8009510 <arm_cfft_init_f32+0x98>)
 80094ec:	e7d6      	b.n	800949c <arm_cfft_init_f32+0x24>
 80094ee:	4a09      	ldr	r2, [pc, #36]	@ (8009514 <arm_cfft_init_f32+0x9c>)
 80094f0:	e7d4      	b.n	800949c <arm_cfft_init_f32+0x24>
 80094f2:	4a09      	ldr	r2, [pc, #36]	@ (8009518 <arm_cfft_init_f32+0xa0>)
 80094f4:	e7d2      	b.n	800949c <arm_cfft_init_f32+0x24>
 80094f6:	bf00      	nop
 80094f8:	080273c8 	.word	0x080273c8
 80094fc:	08027368 	.word	0x08027368
 8009500:	08027378 	.word	0x08027378
 8009504:	080273b8 	.word	0x080273b8
 8009508:	08027398 	.word	0x08027398
 800950c:	080273d8 	.word	0x080273d8
 8009510:	080273e8 	.word	0x080273e8
 8009514:	08027388 	.word	0x08027388
 8009518:	080273a8 	.word	0x080273a8

0800951c <arm_radix8_butterfly_f32>:
 800951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009520:	ed2d 8b10 	vpush	{d8-d15}
 8009524:	b093      	sub	sp, #76	@ 0x4c
 8009526:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800952a:	4603      	mov	r3, r0
 800952c:	3304      	adds	r3, #4
 800952e:	ed9f bac0 	vldr	s22, [pc, #768]	@ 8009830 <arm_radix8_butterfly_f32+0x314>
 8009532:	9010      	str	r0, [sp, #64]	@ 0x40
 8009534:	468b      	mov	fp, r1
 8009536:	9311      	str	r3, [sp, #68]	@ 0x44
 8009538:	4689      	mov	r9, r1
 800953a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800953c:	ea4f 05db 	mov.w	r5, fp, lsr #3
 8009540:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8009544:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 8009548:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 800954c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8009550:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8009554:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8009558:	9100      	str	r1, [sp, #0]
 800955a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800955e:	f108 0004 	add.w	r0, r8, #4
 8009562:	f10e 0104 	add.w	r1, lr, #4
 8009566:	462e      	mov	r6, r5
 8009568:	4420      	add	r0, r4
 800956a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800956e:	4421      	add	r1, r4
 8009570:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8009574:	960d      	str	r6, [sp, #52]	@ 0x34
 8009576:	9402      	str	r4, [sp, #8]
 8009578:	012c      	lsls	r4, r5, #4
 800957a:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 800957e:	9403      	str	r4, [sp, #12]
 8009580:	00ec      	lsls	r4, r5, #3
 8009582:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009584:	9404      	str	r4, [sp, #16]
 8009586:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800958a:	9405      	str	r4, [sp, #20]
 800958c:	016c      	lsls	r4, r5, #5
 800958e:	9401      	str	r4, [sp, #4]
 8009590:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8009592:	9c00      	ldr	r4, [sp, #0]
 8009594:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 8009598:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800959c:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80095a0:	f04f 0c00 	mov.w	ip, #0
 80095a4:	edd6 6a00 	vldr	s13, [r6]
 80095a8:	edd7 1a00 	vldr	s3, [r7]
 80095ac:	ed15 aa01 	vldr	s20, [r5, #-4]
 80095b0:	edd2 5a00 	vldr	s11, [r2]
 80095b4:	ed51 9a01 	vldr	s19, [r1, #-4]
 80095b8:	ed94 6a00 	vldr	s12, [r4]
 80095bc:	ed50 7a01 	vldr	s15, [r0, #-4]
 80095c0:	ed93 3a00 	vldr	s6, [r3]
 80095c4:	ee39 0a86 	vadd.f32	s0, s19, s12
 80095c8:	ee33 2a21 	vadd.f32	s4, s6, s3
 80095cc:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80095d0:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80095d4:	ee35 7a02 	vadd.f32	s14, s10, s4
 80095d8:	ee34 4a80 	vadd.f32	s8, s9, s0
 80095dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80095e0:	ee74 6a07 	vadd.f32	s13, s8, s14
 80095e4:	ee34 4a47 	vsub.f32	s8, s8, s14
 80095e8:	ed45 6a01 	vstr	s13, [r5, #-4]
 80095ec:	ed82 4a00 	vstr	s8, [r2]
 80095f0:	edd0 6a00 	vldr	s13, [r0]
 80095f4:	ed96 9a01 	vldr	s18, [r6, #4]
 80095f8:	edd3 2a01 	vldr	s5, [r3, #4]
 80095fc:	edd7 8a01 	vldr	s17, [r7, #4]
 8009600:	edd5 0a00 	vldr	s1, [r5]
 8009604:	edd2 3a01 	vldr	s7, [r2, #4]
 8009608:	ed94 8a01 	vldr	s16, [r4, #4]
 800960c:	ed91 7a00 	vldr	s14, [r1]
 8009610:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009614:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8009618:	ee72 aae8 	vsub.f32	s21, s5, s17
 800961c:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8009620:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8009624:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009628:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800962c:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8009630:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8009634:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8009638:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800963c:	ee77 0a08 	vadd.f32	s1, s14, s16
 8009640:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8009644:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009648:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800964c:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8009650:	ee76 6a89 	vadd.f32	s13, s13, s18
 8009654:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8009658:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800965c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009660:	ee35 5a42 	vsub.f32	s10, s10, s4
 8009664:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8009668:	ee33 2a20 	vadd.f32	s4, s6, s1
 800966c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009670:	ee33 3a60 	vsub.f32	s6, s6, s1
 8009674:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8009678:	ee77 0a01 	vadd.f32	s1, s14, s2
 800967c:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8009680:	ee37 7a41 	vsub.f32	s14, s14, s2
 8009684:	ee73 1a84 	vadd.f32	s3, s7, s8
 8009688:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800968c:	ee76 3a27 	vadd.f32	s7, s12, s15
 8009690:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009694:	ee32 8a00 	vadd.f32	s16, s4, s0
 8009698:	ee33 1a45 	vsub.f32	s2, s6, s10
 800969c:	ee32 2a40 	vsub.f32	s4, s4, s0
 80096a0:	ee35 5a03 	vadd.f32	s10, s10, s6
 80096a4:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80096a8:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80096ac:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80096b0:	ee34 6a67 	vsub.f32	s12, s8, s15
 80096b4:	ee75 4a87 	vadd.f32	s9, s11, s14
 80096b8:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80096bc:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80096c0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80096c4:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80096c8:	44dc      	add	ip, fp
 80096ca:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80096ce:	45e1      	cmp	r9, ip
 80096d0:	ed85 8a00 	vstr	s16, [r5]
 80096d4:	ed82 2a01 	vstr	s4, [r2, #4]
 80096d8:	4455      	add	r5, sl
 80096da:	ed01 0a01 	vstr	s0, [r1, #-4]
 80096de:	4452      	add	r2, sl
 80096e0:	edc4 6a00 	vstr	s13, [r4]
 80096e4:	ed81 1a00 	vstr	s2, [r1]
 80096e8:	ed84 5a01 	vstr	s10, [r4, #4]
 80096ec:	4451      	add	r1, sl
 80096ee:	ed00 3a01 	vstr	s6, [r0, #-4]
 80096f2:	4454      	add	r4, sl
 80096f4:	edc7 2a00 	vstr	s5, [r7]
 80096f8:	edc6 4a00 	vstr	s9, [r6]
 80096fc:	ed83 7a00 	vstr	s14, [r3]
 8009700:	edc0 5a00 	vstr	s11, [r0]
 8009704:	edc7 3a01 	vstr	s7, [r7, #4]
 8009708:	4450      	add	r0, sl
 800970a:	ed86 6a01 	vstr	s12, [r6, #4]
 800970e:	4457      	add	r7, sl
 8009710:	edc3 7a01 	vstr	s15, [r3, #4]
 8009714:	4456      	add	r6, sl
 8009716:	4453      	add	r3, sl
 8009718:	f63f af44 	bhi.w	80095a4 <arm_radix8_butterfly_f32+0x88>
 800971c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800971e:	2b07      	cmp	r3, #7
 8009720:	f240 81c3 	bls.w	8009aaa <arm_radix8_butterfly_f32+0x58e>
 8009724:	9805      	ldr	r0, [sp, #20]
 8009726:	9a01      	ldr	r2, [sp, #4]
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	9d04      	ldr	r5, [sp, #16]
 800972c:	9902      	ldr	r1, [sp, #8]
 800972e:	f100 0c08 	add.w	ip, r0, #8
 8009732:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009734:	3208      	adds	r2, #8
 8009736:	1882      	adds	r2, r0, r2
 8009738:	3308      	adds	r3, #8
 800973a:	920a      	str	r2, [sp, #40]	@ 0x28
 800973c:	4602      	mov	r2, r0
 800973e:	18d3      	adds	r3, r2, r3
 8009740:	3108      	adds	r1, #8
 8009742:	3508      	adds	r5, #8
 8009744:	1851      	adds	r1, r2, r1
 8009746:	9307      	str	r3, [sp, #28]
 8009748:	4613      	mov	r3, r2
 800974a:	442a      	add	r2, r5
 800974c:	9206      	str	r2, [sp, #24]
 800974e:	461a      	mov	r2, r3
 8009750:	4462      	add	r2, ip
 8009752:	f10e 0e0c 	add.w	lr, lr, #12
 8009756:	9205      	str	r2, [sp, #20]
 8009758:	461a      	mov	r2, r3
 800975a:	4472      	add	r2, lr
 800975c:	f108 0808 	add.w	r8, r8, #8
 8009760:	330c      	adds	r3, #12
 8009762:	4440      	add	r0, r8
 8009764:	f04f 0e00 	mov.w	lr, #0
 8009768:	9203      	str	r2, [sp, #12]
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	465a      	mov	r2, fp
 800976e:	464b      	mov	r3, r9
 8009770:	46f3      	mov	fp, lr
 8009772:	46d1      	mov	r9, sl
 8009774:	9009      	str	r0, [sp, #36]	@ 0x24
 8009776:	9108      	str	r1, [sp, #32]
 8009778:	f04f 0801 	mov.w	r8, #1
 800977c:	469a      	mov	sl, r3
 800977e:	4696      	mov	lr, r2
 8009780:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009782:	449b      	add	fp, r3
 8009784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009786:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800978a:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800978e:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 8009792:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8009796:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 800979a:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 800979e:	930c      	str	r3, [sp, #48]	@ 0x30
 80097a0:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 80097a4:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 80097a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80097aa:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 80097ae:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 80097b2:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 80097b6:	9202      	str	r2, [sp, #8]
 80097b8:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	4613      	mov	r3, r2
 80097c0:	edd3 da01 	vldr	s27, [r3, #4]
 80097c4:	9b01      	ldr	r3, [sp, #4]
 80097c6:	edd0 7a00 	vldr	s15, [r0]
 80097ca:	ed93 da01 	vldr	s26, [r3, #4]
 80097ce:	9b02      	ldr	r3, [sp, #8]
 80097d0:	edcd 7a02 	vstr	s15, [sp, #8]
 80097d4:	ed93 ca01 	vldr	s24, [r3, #4]
 80097d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097da:	eddc ca01 	vldr	s25, [ip, #4]
 80097de:	edd3 7a00 	vldr	s15, [r3]
 80097e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097e4:	edcd 7a01 	vstr	s15, [sp, #4]
 80097e8:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80097ec:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 80097f0:	9200      	str	r2, [sp, #0]
 80097f2:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 80097f6:	edd3 7a00 	vldr	s15, [r3]
 80097fa:	ed92 fa01 	vldr	s30, [r2, #4]
 80097fe:	9a00      	ldr	r2, [sp, #0]
 8009800:	edd1 ea01 	vldr	s29, [r1, #4]
 8009804:	ed92 ea01 	vldr	s28, [r2, #4]
 8009808:	edd7 ba00 	vldr	s23, [r7]
 800980c:	edd6 aa00 	vldr	s21, [r6]
 8009810:	ed95 aa00 	vldr	s20, [r5]
 8009814:	edd4 9a00 	vldr	s19, [r4]
 8009818:	edcd 7a00 	vstr	s15, [sp]
 800981c:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8009820:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8009824:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8009828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800982c:	46c4      	mov	ip, r8
 800982e:	e001      	b.n	8009834 <arm_radix8_butterfly_f32+0x318>
 8009830:	3f3504f3 	.word	0x3f3504f3
 8009834:	ed91 6a00 	vldr	s12, [r1]
 8009838:	ed93 5a00 	vldr	s10, [r3]
 800983c:	edd0 fa00 	vldr	s31, [r0]
 8009840:	edd4 7a00 	vldr	s15, [r4]
 8009844:	ed95 7a00 	vldr	s14, [r5]
 8009848:	ed56 3a01 	vldr	s7, [r6, #-4]
 800984c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8009850:	ed92 2a00 	vldr	s4, [r2]
 8009854:	ed96 0a00 	vldr	s0, [r6]
 8009858:	ee33 8a85 	vadd.f32	s16, s7, s10
 800985c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009860:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8009864:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009868:	ee78 1a04 	vadd.f32	s3, s16, s8
 800986c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009870:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009874:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009878:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800987c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8009880:	edd4 8a01 	vldr	s17, [r4, #4]
 8009884:	ed92 9a01 	vldr	s18, [r2, #4]
 8009888:	edd7 0a00 	vldr	s1, [r7]
 800988c:	edd1 2a01 	vldr	s5, [r1, #4]
 8009890:	ed95 7a01 	vldr	s14, [r5, #4]
 8009894:	ed93 6a01 	vldr	s12, [r3, #4]
 8009898:	edd0 5a01 	vldr	s11, [r0, #4]
 800989c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80098a0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80098a4:	ee39 5a62 	vsub.f32	s10, s18, s5
 80098a8:	ee78 fac7 	vsub.f32	s31, s17, s14
 80098ac:	ee38 4a44 	vsub.f32	s8, s16, s8
 80098b0:	ee38 7a87 	vadd.f32	s14, s17, s14
 80098b4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80098b8:	ee79 2a22 	vadd.f32	s5, s18, s5
 80098bc:	ee32 9a27 	vadd.f32	s18, s4, s15
 80098c0:	ee72 7a67 	vsub.f32	s15, s4, s15
 80098c4:	ee30 2a06 	vadd.f32	s4, s0, s12
 80098c8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80098cc:	ee71 4a64 	vsub.f32	s9, s2, s9
 80098d0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80098d4:	ee32 1a08 	vadd.f32	s2, s4, s16
 80098d8:	ee72 fa87 	vadd.f32	s31, s5, s14
 80098dc:	ee32 2a48 	vsub.f32	s4, s4, s16
 80098e0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80098e4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80098e8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80098ec:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80098f0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80098f4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80098f8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80098fc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009900:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009904:	ee74 0a22 	vadd.f32	s1, s8, s5
 8009908:	ee36 0a28 	vadd.f32	s0, s12, s17
 800990c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009910:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009914:	ee32 4a64 	vsub.f32	s8, s4, s9
 8009918:	ee73 8a09 	vadd.f32	s17, s6, s18
 800991c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8009920:	ee33 9a49 	vsub.f32	s18, s6, s18
 8009924:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8009928:	ee35 3a85 	vadd.f32	s6, s11, s10
 800992c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8009930:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8009934:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009938:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800993c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8009940:	ee35 8a03 	vadd.f32	s16, s10, s6
 8009944:	ee38 0a80 	vadd.f32	s0, s17, s0
 8009948:	ee73 3a82 	vadd.f32	s7, s7, s4
 800994c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8009950:	ed9d 2a00 	vldr	s4, [sp]
 8009954:	eddd 1a01 	vldr	s3, [sp, #4]
 8009958:	ee35 5a43 	vsub.f32	s10, s10, s6
 800995c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8009960:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8009964:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8009968:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800996c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8009970:	ee76 5a49 	vsub.f32	s11, s12, s18
 8009974:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8009978:	ee39 6a06 	vadd.f32	s12, s18, s12
 800997c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8009980:	ee21 4a84 	vmul.f32	s8, s3, s8
 8009984:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8009988:	ee22 7a07 	vmul.f32	s14, s4, s14
 800998c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8009990:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009994:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8009998:	ee31 1a09 	vadd.f32	s2, s2, s18
 800999c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80099a0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80099a4:	ee74 0a60 	vsub.f32	s1, s8, s1
 80099a8:	ee37 7a48 	vsub.f32	s14, s14, s16
 80099ac:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80099b0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80099b4:	ee72 1a21 	vadd.f32	s3, s4, s3
 80099b8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80099bc:	ee38 2a89 	vadd.f32	s4, s17, s18
 80099c0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80099c4:	ee38 8a04 	vadd.f32	s16, s16, s8
 80099c8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80099cc:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80099d0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80099d4:	eddd 5a02 	vldr	s11, [sp, #8]
 80099d8:	edc6 fa00 	vstr	s31, [r6]
 80099dc:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80099e0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80099e4:	ee30 0a45 	vsub.f32	s0, s0, s10
 80099e8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80099ec:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80099f0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80099f4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80099f8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80099fc:	ee25 6a86 	vmul.f32	s12, s11, s12
 8009a00:	ee74 4a89 	vadd.f32	s9, s9, s18
 8009a04:	ee34 3a43 	vsub.f32	s6, s8, s6
 8009a08:	ee78 8a85 	vadd.f32	s17, s17, s10
 8009a0c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009a10:	44f4      	add	ip, lr
 8009a12:	45e2      	cmp	sl, ip
 8009a14:	edc3 3a00 	vstr	s7, [r3]
 8009a18:	edc3 6a01 	vstr	s13, [r3, #4]
 8009a1c:	444e      	add	r6, r9
 8009a1e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8009a22:	edc7 0a00 	vstr	s1, [r7]
 8009a26:	444b      	add	r3, r9
 8009a28:	ed80 2a00 	vstr	s4, [r0]
 8009a2c:	edc0 2a01 	vstr	s5, [r0, #4]
 8009a30:	444f      	add	r7, r9
 8009a32:	edc2 1a00 	vstr	s3, [r2]
 8009a36:	ed82 7a01 	vstr	s14, [r2, #4]
 8009a3a:	4448      	add	r0, r9
 8009a3c:	ed85 8a00 	vstr	s16, [r5]
 8009a40:	ed85 0a01 	vstr	s0, [r5, #4]
 8009a44:	444a      	add	r2, r9
 8009a46:	edc1 4a00 	vstr	s9, [r1]
 8009a4a:	444d      	add	r5, r9
 8009a4c:	ed81 3a01 	vstr	s6, [r1, #4]
 8009a50:	edc4 8a00 	vstr	s17, [r4]
 8009a54:	ed84 6a01 	vstr	s12, [r4, #4]
 8009a58:	4449      	add	r1, r9
 8009a5a:	444c      	add	r4, r9
 8009a5c:	f63f aeea 	bhi.w	8009834 <arm_radix8_butterfly_f32+0x318>
 8009a60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a62:	3308      	adds	r3, #8
 8009a64:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a68:	3308      	adds	r3, #8
 8009a6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a6c:	9b08      	ldr	r3, [sp, #32]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	9308      	str	r3, [sp, #32]
 8009a72:	9b07      	ldr	r3, [sp, #28]
 8009a74:	3308      	adds	r3, #8
 8009a76:	9307      	str	r3, [sp, #28]
 8009a78:	9b06      	ldr	r3, [sp, #24]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	9306      	str	r3, [sp, #24]
 8009a7e:	9b05      	ldr	r3, [sp, #20]
 8009a80:	3308      	adds	r3, #8
 8009a82:	9305      	str	r3, [sp, #20]
 8009a84:	9b04      	ldr	r3, [sp, #16]
 8009a86:	3308      	adds	r3, #8
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	9b03      	ldr	r3, [sp, #12]
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	9303      	str	r3, [sp, #12]
 8009a90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a92:	f108 0801 	add.w	r8, r8, #1
 8009a96:	4543      	cmp	r3, r8
 8009a98:	f47f ae72 	bne.w	8009780 <arm_radix8_butterfly_f32+0x264>
 8009a9c:	469b      	mov	fp, r3
 8009a9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aa0:	00db      	lsls	r3, r3, #3
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	46d1      	mov	r9, sl
 8009aa6:	930e      	str	r3, [sp, #56]	@ 0x38
 8009aa8:	e547      	b.n	800953a <arm_radix8_butterfly_f32+0x1e>
 8009aaa:	b013      	add	sp, #76	@ 0x4c
 8009aac:	ecbd 8b10 	vpop	{d8-d15}
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ab4 <memset>:
 8009ab4:	4402      	add	r2, r0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d100      	bne.n	8009abe <memset+0xa>
 8009abc:	4770      	bx	lr
 8009abe:	f803 1b01 	strb.w	r1, [r3], #1
 8009ac2:	e7f9      	b.n	8009ab8 <memset+0x4>

08009ac4 <_reclaim_reent>:
 8009ac4:	4b29      	ldr	r3, [pc, #164]	@ (8009b6c <_reclaim_reent+0xa8>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4283      	cmp	r3, r0
 8009aca:	b570      	push	{r4, r5, r6, lr}
 8009acc:	4604      	mov	r4, r0
 8009ace:	d04b      	beq.n	8009b68 <_reclaim_reent+0xa4>
 8009ad0:	69c3      	ldr	r3, [r0, #28]
 8009ad2:	b1ab      	cbz	r3, 8009b00 <_reclaim_reent+0x3c>
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	b16b      	cbz	r3, 8009af4 <_reclaim_reent+0x30>
 8009ad8:	2500      	movs	r5, #0
 8009ada:	69e3      	ldr	r3, [r4, #28]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	5959      	ldr	r1, [r3, r5]
 8009ae0:	2900      	cmp	r1, #0
 8009ae2:	d13b      	bne.n	8009b5c <_reclaim_reent+0x98>
 8009ae4:	3504      	adds	r5, #4
 8009ae6:	2d80      	cmp	r5, #128	@ 0x80
 8009ae8:	d1f7      	bne.n	8009ada <_reclaim_reent+0x16>
 8009aea:	69e3      	ldr	r3, [r4, #28]
 8009aec:	4620      	mov	r0, r4
 8009aee:	68d9      	ldr	r1, [r3, #12]
 8009af0:	f000 f878 	bl	8009be4 <_free_r>
 8009af4:	69e3      	ldr	r3, [r4, #28]
 8009af6:	6819      	ldr	r1, [r3, #0]
 8009af8:	b111      	cbz	r1, 8009b00 <_reclaim_reent+0x3c>
 8009afa:	4620      	mov	r0, r4
 8009afc:	f000 f872 	bl	8009be4 <_free_r>
 8009b00:	6961      	ldr	r1, [r4, #20]
 8009b02:	b111      	cbz	r1, 8009b0a <_reclaim_reent+0x46>
 8009b04:	4620      	mov	r0, r4
 8009b06:	f000 f86d 	bl	8009be4 <_free_r>
 8009b0a:	69e1      	ldr	r1, [r4, #28]
 8009b0c:	b111      	cbz	r1, 8009b14 <_reclaim_reent+0x50>
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f000 f868 	bl	8009be4 <_free_r>
 8009b14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009b16:	b111      	cbz	r1, 8009b1e <_reclaim_reent+0x5a>
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 f863 	bl	8009be4 <_free_r>
 8009b1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b20:	b111      	cbz	r1, 8009b28 <_reclaim_reent+0x64>
 8009b22:	4620      	mov	r0, r4
 8009b24:	f000 f85e 	bl	8009be4 <_free_r>
 8009b28:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009b2a:	b111      	cbz	r1, 8009b32 <_reclaim_reent+0x6e>
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f000 f859 	bl	8009be4 <_free_r>
 8009b32:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009b34:	b111      	cbz	r1, 8009b3c <_reclaim_reent+0x78>
 8009b36:	4620      	mov	r0, r4
 8009b38:	f000 f854 	bl	8009be4 <_free_r>
 8009b3c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009b3e:	b111      	cbz	r1, 8009b46 <_reclaim_reent+0x82>
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 f84f 	bl	8009be4 <_free_r>
 8009b46:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009b48:	b111      	cbz	r1, 8009b50 <_reclaim_reent+0x8c>
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f000 f84a 	bl	8009be4 <_free_r>
 8009b50:	6a23      	ldr	r3, [r4, #32]
 8009b52:	b14b      	cbz	r3, 8009b68 <_reclaim_reent+0xa4>
 8009b54:	4620      	mov	r0, r4
 8009b56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b5a:	4718      	bx	r3
 8009b5c:	680e      	ldr	r6, [r1, #0]
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 f840 	bl	8009be4 <_free_r>
 8009b64:	4631      	mov	r1, r6
 8009b66:	e7bb      	b.n	8009ae0 <_reclaim_reent+0x1c>
 8009b68:	bd70      	pop	{r4, r5, r6, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000014 	.word	0x20000014

08009b70 <__errno>:
 8009b70:	4b01      	ldr	r3, [pc, #4]	@ (8009b78 <__errno+0x8>)
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	20000014 	.word	0x20000014

08009b7c <__libc_init_array>:
 8009b7c:	b570      	push	{r4, r5, r6, lr}
 8009b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8009bb4 <__libc_init_array+0x38>)
 8009b80:	4c0d      	ldr	r4, [pc, #52]	@ (8009bb8 <__libc_init_array+0x3c>)
 8009b82:	1b64      	subs	r4, r4, r5
 8009b84:	10a4      	asrs	r4, r4, #2
 8009b86:	2600      	movs	r6, #0
 8009b88:	42a6      	cmp	r6, r4
 8009b8a:	d109      	bne.n	8009ba0 <__libc_init_array+0x24>
 8009b8c:	4d0b      	ldr	r5, [pc, #44]	@ (8009bbc <__libc_init_array+0x40>)
 8009b8e:	4c0c      	ldr	r4, [pc, #48]	@ (8009bc0 <__libc_init_array+0x44>)
 8009b90:	f000 f984 	bl	8009e9c <_init>
 8009b94:	1b64      	subs	r4, r4, r5
 8009b96:	10a4      	asrs	r4, r4, #2
 8009b98:	2600      	movs	r6, #0
 8009b9a:	42a6      	cmp	r6, r4
 8009b9c:	d105      	bne.n	8009baa <__libc_init_array+0x2e>
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba4:	4798      	blx	r3
 8009ba6:	3601      	adds	r6, #1
 8009ba8:	e7ee      	b.n	8009b88 <__libc_init_array+0xc>
 8009baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bae:	4798      	blx	r3
 8009bb0:	3601      	adds	r6, #1
 8009bb2:	e7f2      	b.n	8009b9a <__libc_init_array+0x1e>
 8009bb4:	080273f8 	.word	0x080273f8
 8009bb8:	080273f8 	.word	0x080273f8
 8009bbc:	080273f8 	.word	0x080273f8
 8009bc0:	080273fc 	.word	0x080273fc

08009bc4 <__retarget_lock_acquire_recursive>:
 8009bc4:	4770      	bx	lr

08009bc6 <__retarget_lock_release_recursive>:
 8009bc6:	4770      	bx	lr

08009bc8 <memcpy>:
 8009bc8:	440a      	add	r2, r1
 8009bca:	4291      	cmp	r1, r2
 8009bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bd0:	d100      	bne.n	8009bd4 <memcpy+0xc>
 8009bd2:	4770      	bx	lr
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bde:	4291      	cmp	r1, r2
 8009be0:	d1f9      	bne.n	8009bd6 <memcpy+0xe>
 8009be2:	bd10      	pop	{r4, pc}

08009be4 <_free_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	4605      	mov	r5, r0
 8009be8:	2900      	cmp	r1, #0
 8009bea:	d041      	beq.n	8009c70 <_free_r+0x8c>
 8009bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf0:	1f0c      	subs	r4, r1, #4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	bfb8      	it	lt
 8009bf6:	18e4      	addlt	r4, r4, r3
 8009bf8:	f000 f83e 	bl	8009c78 <__malloc_lock>
 8009bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8009c74 <_free_r+0x90>)
 8009bfe:	6813      	ldr	r3, [r2, #0]
 8009c00:	b933      	cbnz	r3, 8009c10 <_free_r+0x2c>
 8009c02:	6063      	str	r3, [r4, #4]
 8009c04:	6014      	str	r4, [r2, #0]
 8009c06:	4628      	mov	r0, r5
 8009c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c0c:	f000 b83a 	b.w	8009c84 <__malloc_unlock>
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	d908      	bls.n	8009c26 <_free_r+0x42>
 8009c14:	6820      	ldr	r0, [r4, #0]
 8009c16:	1821      	adds	r1, r4, r0
 8009c18:	428b      	cmp	r3, r1
 8009c1a:	bf01      	itttt	eq
 8009c1c:	6819      	ldreq	r1, [r3, #0]
 8009c1e:	685b      	ldreq	r3, [r3, #4]
 8009c20:	1809      	addeq	r1, r1, r0
 8009c22:	6021      	streq	r1, [r4, #0]
 8009c24:	e7ed      	b.n	8009c02 <_free_r+0x1e>
 8009c26:	461a      	mov	r2, r3
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	b10b      	cbz	r3, 8009c30 <_free_r+0x4c>
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	d9fa      	bls.n	8009c26 <_free_r+0x42>
 8009c30:	6811      	ldr	r1, [r2, #0]
 8009c32:	1850      	adds	r0, r2, r1
 8009c34:	42a0      	cmp	r0, r4
 8009c36:	d10b      	bne.n	8009c50 <_free_r+0x6c>
 8009c38:	6820      	ldr	r0, [r4, #0]
 8009c3a:	4401      	add	r1, r0
 8009c3c:	1850      	adds	r0, r2, r1
 8009c3e:	4283      	cmp	r3, r0
 8009c40:	6011      	str	r1, [r2, #0]
 8009c42:	d1e0      	bne.n	8009c06 <_free_r+0x22>
 8009c44:	6818      	ldr	r0, [r3, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	6053      	str	r3, [r2, #4]
 8009c4a:	4408      	add	r0, r1
 8009c4c:	6010      	str	r0, [r2, #0]
 8009c4e:	e7da      	b.n	8009c06 <_free_r+0x22>
 8009c50:	d902      	bls.n	8009c58 <_free_r+0x74>
 8009c52:	230c      	movs	r3, #12
 8009c54:	602b      	str	r3, [r5, #0]
 8009c56:	e7d6      	b.n	8009c06 <_free_r+0x22>
 8009c58:	6820      	ldr	r0, [r4, #0]
 8009c5a:	1821      	adds	r1, r4, r0
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	bf04      	itt	eq
 8009c60:	6819      	ldreq	r1, [r3, #0]
 8009c62:	685b      	ldreq	r3, [r3, #4]
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	bf04      	itt	eq
 8009c68:	1809      	addeq	r1, r1, r0
 8009c6a:	6021      	streq	r1, [r4, #0]
 8009c6c:	6054      	str	r4, [r2, #4]
 8009c6e:	e7ca      	b.n	8009c06 <_free_r+0x22>
 8009c70:	bd38      	pop	{r3, r4, r5, pc}
 8009c72:	bf00      	nop
 8009c74:	2000a0ac 	.word	0x2000a0ac

08009c78 <__malloc_lock>:
 8009c78:	4801      	ldr	r0, [pc, #4]	@ (8009c80 <__malloc_lock+0x8>)
 8009c7a:	f7ff bfa3 	b.w	8009bc4 <__retarget_lock_acquire_recursive>
 8009c7e:	bf00      	nop
 8009c80:	2000a0a8 	.word	0x2000a0a8

08009c84 <__malloc_unlock>:
 8009c84:	4801      	ldr	r0, [pc, #4]	@ (8009c8c <__malloc_unlock+0x8>)
 8009c86:	f7ff bf9e 	b.w	8009bc6 <__retarget_lock_release_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	2000a0a8 	.word	0x2000a0a8

08009c90 <sqrt>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	ed2d 8b02 	vpush	{d8}
 8009c96:	ec55 4b10 	vmov	r4, r5, d0
 8009c9a:	f000 f825 	bl	8009ce8 <__ieee754_sqrt>
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	eeb0 8a40 	vmov.f32	s16, s0
 8009caa:	eef0 8a60 	vmov.f32	s17, s1
 8009cae:	f7f6 feed 	bl	8000a8c <__aeabi_dcmpun>
 8009cb2:	b990      	cbnz	r0, 8009cda <sqrt+0x4a>
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	4620      	mov	r0, r4
 8009cba:	4629      	mov	r1, r5
 8009cbc:	f7f6 febe 	bl	8000a3c <__aeabi_dcmplt>
 8009cc0:	b158      	cbz	r0, 8009cda <sqrt+0x4a>
 8009cc2:	f7ff ff55 	bl	8009b70 <__errno>
 8009cc6:	2321      	movs	r3, #33	@ 0x21
 8009cc8:	6003      	str	r3, [r0, #0]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	2300      	movs	r3, #0
 8009cce:	4610      	mov	r0, r2
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	f7f6 fd6b 	bl	80007ac <__aeabi_ddiv>
 8009cd6:	ec41 0b18 	vmov	d8, r0, r1
 8009cda:	eeb0 0a48 	vmov.f32	s0, s16
 8009cde:	eef0 0a68 	vmov.f32	s1, s17
 8009ce2:	ecbd 8b02 	vpop	{d8}
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}

08009ce8 <__ieee754_sqrt>:
 8009ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	4a68      	ldr	r2, [pc, #416]	@ (8009e90 <__ieee754_sqrt+0x1a8>)
 8009cee:	ec55 4b10 	vmov	r4, r5, d0
 8009cf2:	43aa      	bics	r2, r5
 8009cf4:	462b      	mov	r3, r5
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	d110      	bne.n	8009d1c <__ieee754_sqrt+0x34>
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	f7f6 fc2a 	bl	8000558 <__aeabi_dmul>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	4620      	mov	r0, r4
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	f7f6 fa6e 	bl	80001ec <__adddf3>
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	ec45 4b10 	vmov	d0, r4, r5
 8009d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1c:	2d00      	cmp	r5, #0
 8009d1e:	dc0e      	bgt.n	8009d3e <__ieee754_sqrt+0x56>
 8009d20:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009d24:	4322      	orrs	r2, r4
 8009d26:	d0f5      	beq.n	8009d14 <__ieee754_sqrt+0x2c>
 8009d28:	b19d      	cbz	r5, 8009d52 <__ieee754_sqrt+0x6a>
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	4629      	mov	r1, r5
 8009d30:	f7f6 fa5a 	bl	80001e8 <__aeabi_dsub>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	f7f6 fd38 	bl	80007ac <__aeabi_ddiv>
 8009d3c:	e7e8      	b.n	8009d10 <__ieee754_sqrt+0x28>
 8009d3e:	152a      	asrs	r2, r5, #20
 8009d40:	d115      	bne.n	8009d6e <__ieee754_sqrt+0x86>
 8009d42:	2000      	movs	r0, #0
 8009d44:	e009      	b.n	8009d5a <__ieee754_sqrt+0x72>
 8009d46:	0acb      	lsrs	r3, r1, #11
 8009d48:	3a15      	subs	r2, #21
 8009d4a:	0549      	lsls	r1, r1, #21
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0fa      	beq.n	8009d46 <__ieee754_sqrt+0x5e>
 8009d50:	e7f7      	b.n	8009d42 <__ieee754_sqrt+0x5a>
 8009d52:	462a      	mov	r2, r5
 8009d54:	e7fa      	b.n	8009d4c <__ieee754_sqrt+0x64>
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	3001      	adds	r0, #1
 8009d5a:	02dc      	lsls	r4, r3, #11
 8009d5c:	d5fb      	bpl.n	8009d56 <__ieee754_sqrt+0x6e>
 8009d5e:	1e44      	subs	r4, r0, #1
 8009d60:	1b12      	subs	r2, r2, r4
 8009d62:	f1c0 0420 	rsb	r4, r0, #32
 8009d66:	fa21 f404 	lsr.w	r4, r1, r4
 8009d6a:	4323      	orrs	r3, r4
 8009d6c:	4081      	lsls	r1, r0
 8009d6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d72:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d7a:	07d2      	lsls	r2, r2, #31
 8009d7c:	bf5c      	itt	pl
 8009d7e:	005b      	lslpl	r3, r3, #1
 8009d80:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009d84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d88:	bf58      	it	pl
 8009d8a:	0049      	lslpl	r1, r1, #1
 8009d8c:	2600      	movs	r6, #0
 8009d8e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009d92:	106d      	asrs	r5, r5, #1
 8009d94:	0049      	lsls	r1, r1, #1
 8009d96:	2016      	movs	r0, #22
 8009d98:	4632      	mov	r2, r6
 8009d9a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009d9e:	1917      	adds	r7, r2, r4
 8009da0:	429f      	cmp	r7, r3
 8009da2:	bfde      	ittt	le
 8009da4:	193a      	addle	r2, r7, r4
 8009da6:	1bdb      	suble	r3, r3, r7
 8009da8:	1936      	addle	r6, r6, r4
 8009daa:	0fcf      	lsrs	r7, r1, #31
 8009dac:	3801      	subs	r0, #1
 8009dae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009db2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009db6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009dba:	d1f0      	bne.n	8009d9e <__ieee754_sqrt+0xb6>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	2720      	movs	r7, #32
 8009dc0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	eb00 0e0c 	add.w	lr, r0, ip
 8009dca:	db02      	blt.n	8009dd2 <__ieee754_sqrt+0xea>
 8009dcc:	d113      	bne.n	8009df6 <__ieee754_sqrt+0x10e>
 8009dce:	458e      	cmp	lr, r1
 8009dd0:	d811      	bhi.n	8009df6 <__ieee754_sqrt+0x10e>
 8009dd2:	f1be 0f00 	cmp.w	lr, #0
 8009dd6:	eb0e 000c 	add.w	r0, lr, ip
 8009dda:	da42      	bge.n	8009e62 <__ieee754_sqrt+0x17a>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	db40      	blt.n	8009e62 <__ieee754_sqrt+0x17a>
 8009de0:	f102 0801 	add.w	r8, r2, #1
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	458e      	cmp	lr, r1
 8009de8:	bf88      	it	hi
 8009dea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009dee:	eba1 010e 	sub.w	r1, r1, lr
 8009df2:	4464      	add	r4, ip
 8009df4:	4642      	mov	r2, r8
 8009df6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009dfa:	3f01      	subs	r7, #1
 8009dfc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009e00:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009e04:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009e08:	d1dc      	bne.n	8009dc4 <__ieee754_sqrt+0xdc>
 8009e0a:	4319      	orrs	r1, r3
 8009e0c:	d01b      	beq.n	8009e46 <__ieee754_sqrt+0x15e>
 8009e0e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009e94 <__ieee754_sqrt+0x1ac>
 8009e12:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009e98 <__ieee754_sqrt+0x1b0>
 8009e16:	e9da 0100 	ldrd	r0, r1, [sl]
 8009e1a:	e9db 2300 	ldrd	r2, r3, [fp]
 8009e1e:	f7f6 f9e3 	bl	80001e8 <__aeabi_dsub>
 8009e22:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	f7f6 fe0f 	bl	8000a50 <__aeabi_dcmple>
 8009e32:	b140      	cbz	r0, 8009e46 <__ieee754_sqrt+0x15e>
 8009e34:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009e38:	e9da 0100 	ldrd	r0, r1, [sl]
 8009e3c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009e40:	d111      	bne.n	8009e66 <__ieee754_sqrt+0x17e>
 8009e42:	3601      	adds	r6, #1
 8009e44:	463c      	mov	r4, r7
 8009e46:	1072      	asrs	r2, r6, #1
 8009e48:	0863      	lsrs	r3, r4, #1
 8009e4a:	07f1      	lsls	r1, r6, #31
 8009e4c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009e50:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009e54:	bf48      	it	mi
 8009e56:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009e5a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009e5e:	4618      	mov	r0, r3
 8009e60:	e756      	b.n	8009d10 <__ieee754_sqrt+0x28>
 8009e62:	4690      	mov	r8, r2
 8009e64:	e7be      	b.n	8009de4 <__ieee754_sqrt+0xfc>
 8009e66:	f7f6 f9c1 	bl	80001ec <__adddf3>
 8009e6a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4640      	mov	r0, r8
 8009e74:	4649      	mov	r1, r9
 8009e76:	f7f6 fde1 	bl	8000a3c <__aeabi_dcmplt>
 8009e7a:	b120      	cbz	r0, 8009e86 <__ieee754_sqrt+0x19e>
 8009e7c:	1ca0      	adds	r0, r4, #2
 8009e7e:	bf08      	it	eq
 8009e80:	3601      	addeq	r6, #1
 8009e82:	3402      	adds	r4, #2
 8009e84:	e7df      	b.n	8009e46 <__ieee754_sqrt+0x15e>
 8009e86:	1c63      	adds	r3, r4, #1
 8009e88:	f023 0401 	bic.w	r4, r3, #1
 8009e8c:	e7db      	b.n	8009e46 <__ieee754_sqrt+0x15e>
 8009e8e:	bf00      	nop
 8009e90:	7ff00000 	.word	0x7ff00000
 8009e94:	20000070 	.word	0x20000070
 8009e98:	20000068 	.word	0x20000068

08009e9c <_init>:
 8009e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9e:	bf00      	nop
 8009ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea2:	bc08      	pop	{r3}
 8009ea4:	469e      	mov	lr, r3
 8009ea6:	4770      	bx	lr

08009ea8 <_fini>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	bf00      	nop
 8009eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eae:	bc08      	pop	{r3}
 8009eb0:	469e      	mov	lr, r3
 8009eb2:	4770      	bx	lr
