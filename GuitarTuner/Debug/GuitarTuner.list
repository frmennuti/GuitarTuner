
GuitarTuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007d84  08007d84  00008d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e2c  08007e2c  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  08007e2c  08007e2c  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e2c  08007e2c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e2c  08007e2c  00008e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e30  08007e30  00008e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007e34  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          00004d48  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004da8  20004da8  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c7ed  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f2  00000000  00000000  0002587d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001670  00000000  00000000  00029170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118b  00000000  00000000  0002a7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000037f7  00000000  00000000  0002b96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c37a  00000000  00000000  0002f162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcf03  00000000  00000000  0004b4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001283df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061ec  00000000  00000000  00128424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0012e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d6c 	.word	0x08007d6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007d6c 	.word	0x08007d6c

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fc9a 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f82e 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f9ba 	bl	8000564 <MX_GPIO_Init>
  MX_DMA_Init();
 80001f0:	f000 f99a 	bl	8000528 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 f968 	bl	80004c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001f8:	f000 f888 	bl	800030c <MX_ADC1_Init>
  MX_TIM6_Init();
 80001fc:	f000 f8f8 	bl	80003f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000200:	f000 f92c 	bl	800045c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000204:	f004 fdee 	bl	8004de4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DMATask */
  DMATaskHandle = osThreadNew(StartDMATask, NULL, &DMATask_attributes);
 8000208:	4a09      	ldr	r2, [pc, #36]	@ (8000230 <main+0x50>)
 800020a:	2100      	movs	r1, #0
 800020c:	4809      	ldr	r0, [pc, #36]	@ (8000234 <main+0x54>)
 800020e:	f004 fe51 	bl	8004eb4 <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a08      	ldr	r2, [pc, #32]	@ (8000238 <main+0x58>)
 8000216:	6013      	str	r3, [r2, #0]

  /* creation of fftTask */
  fftTaskHandle = osThreadNew(StartfftTaskTask, NULL, &fftTask_attributes);
 8000218:	4a08      	ldr	r2, [pc, #32]	@ (800023c <main+0x5c>)
 800021a:	2100      	movs	r1, #0
 800021c:	4808      	ldr	r0, [pc, #32]	@ (8000240 <main+0x60>)
 800021e:	f004 fe49 	bl	8004eb4 <osThreadNew>
 8000222:	4603      	mov	r3, r0
 8000224:	4a07      	ldr	r2, [pc, #28]	@ (8000244 <main+0x64>)
 8000226:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000228:	f004 fe10 	bl	8004e4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022c:	bf00      	nop
 800022e:	e7fd      	b.n	800022c <main+0x4c>
 8000230:	08007dac 	.word	0x08007dac
 8000234:	08000671 	.word	0x08000671
 8000238:	20000230 	.word	0x20000230
 800023c:	08007dd0 	.word	0x08007dd0
 8000240:	080006f5 	.word	0x080006f5
 8000244:	20000234 	.word	0x20000234

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b0a6      	sub	sp, #152	@ 0x98
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000252:	2228      	movs	r2, #40	@ 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f007 fca0 	bl	8007b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2258      	movs	r2, #88	@ 0x58
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f007 fc92 	bl	8007b9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000278:	2302      	movs	r3, #2
 800027a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000280:	2310      	movs	r3, #16
 8000282:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000290:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000294:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000298:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 f8ec 	bl	8002484 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002b2:	f000 fa4b 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ba:	2302      	movs	r3, #2
 80002bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002d0:	2102      	movs	r1, #2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 f92a 	bl	800352c <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002de:	f000 fa35 	bl	800074c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80002e2:	2382      	movs	r3, #130	@ 0x82
 80002e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4618      	mov	r0, r3
 80002f4:	f003 fb6c 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002fe:	f000 fa25 	bl	800074c <Error_Handler>
  }
}
 8000302:	bf00      	nop
 8000304:	3798      	adds	r7, #152	@ 0x98
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b08a      	sub	sp, #40	@ 0x28
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000312:	f107 031c 	add.w	r3, r7, #28
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
 800032c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800032e:	4b2f      	ldr	r3, [pc, #188]	@ (80003ec <MX_ADC1_Init+0xe0>)
 8000330:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000334:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000336:	4b2d      	ldr	r3, [pc, #180]	@ (80003ec <MX_ADC1_Init+0xe0>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800033c:	4b2b      	ldr	r3, [pc, #172]	@ (80003ec <MX_ADC1_Init+0xe0>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000342:	4b2a      	ldr	r3, [pc, #168]	@ (80003ec <MX_ADC1_Init+0xe0>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000348:	4b28      	ldr	r3, [pc, #160]	@ (80003ec <MX_ADC1_Init+0xe0>)
 800034a:	2200      	movs	r2, #0
 800034c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034e:	4b27      	ldr	r3, [pc, #156]	@ (80003ec <MX_ADC1_Init+0xe0>)
 8000350:	2200      	movs	r2, #0
 8000352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000356:	4b25      	ldr	r3, [pc, #148]	@ (80003ec <MX_ADC1_Init+0xe0>)
 8000358:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800035c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800035e:	4b23      	ldr	r3, [pc, #140]	@ (80003ec <MX_ADC1_Init+0xe0>)
 8000360:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000366:	4b21      	ldr	r3, [pc, #132]	@ (80003ec <MX_ADC1_Init+0xe0>)
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800036c:	4b1f      	ldr	r3, [pc, #124]	@ (80003ec <MX_ADC1_Init+0xe0>)
 800036e:	2201      	movs	r2, #1
 8000370:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000372:	4b1e      	ldr	r3, [pc, #120]	@ (80003ec <MX_ADC1_Init+0xe0>)
 8000374:	2201      	movs	r2, #1
 8000376:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800037a:	4b1c      	ldr	r3, [pc, #112]	@ (80003ec <MX_ADC1_Init+0xe0>)
 800037c:	2204      	movs	r2, #4
 800037e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000380:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <MX_ADC1_Init+0xe0>)
 8000382:	2200      	movs	r2, #0
 8000384:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000386:	4b19      	ldr	r3, [pc, #100]	@ (80003ec <MX_ADC1_Init+0xe0>)
 8000388:	2200      	movs	r2, #0
 800038a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800038c:	4817      	ldr	r0, [pc, #92]	@ (80003ec <MX_ADC1_Init+0xe0>)
 800038e:	f000 fc05 	bl	8000b9c <HAL_ADC_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000398:	f000 f9d8 	bl	800074c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800039c:	2300      	movs	r3, #0
 800039e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003a0:	f107 031c 	add.w	r3, r7, #28
 80003a4:	4619      	mov	r1, r3
 80003a6:	4811      	ldr	r0, [pc, #68]	@ (80003ec <MX_ADC1_Init+0xe0>)
 80003a8:	f001 f9f8 	bl	800179c <HAL_ADCEx_MultiModeConfigChannel>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80003b2:	f000 f9cb 	bl	800074c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4619      	mov	r1, r3
 80003d2:	4806      	ldr	r0, [pc, #24]	@ (80003ec <MX_ADC1_Init+0xe0>)
 80003d4:	f000 fef8 	bl	80011c8 <HAL_ADC_ConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80003de:	f000 f9b5 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	3728      	adds	r7, #40	@ 0x28
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000007c 	.word	0x2000007c

080003f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000400:	4b14      	ldr	r3, [pc, #80]	@ (8000454 <MX_TIM6_Init+0x64>)
 8000402:	4a15      	ldr	r2, [pc, #84]	@ (8000458 <MX_TIM6_Init+0x68>)
 8000404:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000406:	4b13      	ldr	r3, [pc, #76]	@ (8000454 <MX_TIM6_Init+0x64>)
 8000408:	2247      	movs	r2, #71	@ 0x47
 800040a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_TIM6_Init+0x64>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 195-1;
 8000412:	4b10      	ldr	r3, [pc, #64]	@ (8000454 <MX_TIM6_Init+0x64>)
 8000414:	22c2      	movs	r2, #194	@ 0xc2
 8000416:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000418:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_TIM6_Init+0x64>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800041e:	480d      	ldr	r0, [pc, #52]	@ (8000454 <MX_TIM6_Init+0x64>)
 8000420:	f003 fcf4 	bl	8003e0c <HAL_TIM_Base_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800042a:	f000 f98f 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800042e:	2320      	movs	r3, #32
 8000430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	4806      	ldr	r0, [pc, #24]	@ (8000454 <MX_TIM6_Init+0x64>)
 800043c:	f003 ffea 	bl	8004414 <HAL_TIMEx_MasterConfigSynchronization>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000446:	f000 f981 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000110 	.word	0x20000110
 8000458:	40001000 	.word	0x40001000

0800045c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800046c:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <MX_TIM7_Init+0x64>)
 800046e:	4a15      	ldr	r2, [pc, #84]	@ (80004c4 <MX_TIM7_Init+0x68>)
 8000470:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 8000472:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <MX_TIM7_Init+0x64>)
 8000474:	2201      	movs	r2, #1
 8000476:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000478:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <MX_TIM7_Init+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 36-1;
 800047e:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <MX_TIM7_Init+0x64>)
 8000480:	2223      	movs	r2, #35	@ 0x23
 8000482:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000484:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <MX_TIM7_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800048a:	480d      	ldr	r0, [pc, #52]	@ (80004c0 <MX_TIM7_Init+0x64>)
 800048c:	f003 fcbe 	bl	8003e0c <HAL_TIM_Base_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000496:	f000 f959 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4619      	mov	r1, r3
 80004a6:	4806      	ldr	r0, [pc, #24]	@ (80004c0 <MX_TIM7_Init+0x64>)
 80004a8:	f003 ffb4 	bl	8004414 <HAL_TIMEx_MasterConfigSynchronization>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80004b2:	f000 f94b 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	2000015c 	.word	0x2000015c
 80004c4:	40001400 	.word	0x40001400

080004c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004cc:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <MX_USART2_UART_Init+0x58>)
 80004ce:	4a15      	ldr	r2, [pc, #84]	@ (8000524 <MX_USART2_UART_Init+0x5c>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004d2:	4b13      	ldr	r3, [pc, #76]	@ (8000520 <MX_USART2_UART_Init+0x58>)
 80004d4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80004d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <MX_USART2_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <MX_USART2_UART_Init+0x58>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <MX_USART2_UART_Init+0x58>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f8:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <MX_USART2_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000504:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <MX_USART2_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	@ (8000520 <MX_USART2_UART_Init+0x58>)
 800050c:	f004 f82c 	bl	8004568 <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000516:	f000 f919 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200001a8 	.word	0x200001a8
 8000524:	40004400 	.word	0x40004400

08000528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052e:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <MX_DMA_Init+0x38>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <MX_DMA_Init+0x38>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <MX_DMA_Init+0x38>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2105      	movs	r1, #5
 800054a:	200b      	movs	r0, #11
 800054c:	f001 fc00 	bl	8001d50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000550:	200b      	movs	r0, #11
 8000552:	f001 fc19 	bl	8001d88 <HAL_NVIC_EnableIRQ>

}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b2b      	ldr	r3, [pc, #172]	@ (8000628 <MX_GPIO_Init+0xc4>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a2a      	ldr	r2, [pc, #168]	@ (8000628 <MX_GPIO_Init+0xc4>)
 8000580:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b28      	ldr	r3, [pc, #160]	@ (8000628 <MX_GPIO_Init+0xc4>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000592:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <MX_GPIO_Init+0xc4>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a24      	ldr	r2, [pc, #144]	@ (8000628 <MX_GPIO_Init+0xc4>)
 8000598:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <MX_GPIO_Init+0xc4>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <MX_GPIO_Init+0xc4>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000628 <MX_GPIO_Init+0xc4>)
 80005b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000628 <MX_GPIO_Init+0xc4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <MX_GPIO_Init+0xc4>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a18      	ldr	r2, [pc, #96]	@ (8000628 <MX_GPIO_Init+0xc4>)
 80005c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <MX_GPIO_Init+0xc4>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trace0_Pin|Trace1_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2160      	movs	r1, #96	@ 0x60
 80005de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e2:	f001 ff1d 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	480b      	ldr	r0, [pc, #44]	@ (800062c <MX_GPIO_Init+0xc8>)
 80005fe:	f001 fd85 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : Trace0_Pin Trace1_Pin */
  GPIO_InitStruct.Pin = Trace0_Pin|Trace1_Pin;
 8000602:	2360      	movs	r3, #96	@ 0x60
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061c:	f001 fd76 	bl	800210c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	@ 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000
 800062c:	48000800 	.word	0x48000800

08000630 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Notify the task that the transmission is complete. */
	vTaskNotifyGiveFromISR( DMATaskHandle, pdFALSE );
 8000638:	4b04      	ldr	r3, [pc, #16]	@ (800064c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fa6e 	bl	8006b20 <vTaskNotifyGiveFromISR>
	//HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000230 	.word	0x20000230

08000650 <HAL_ADC_ConvCpltCallback>:
void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Notify the task that the transmission is complete. */
	vTaskNotifyGiveFromISR( DMATaskHandle, pdFALSE );
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <HAL_ADC_ConvCpltCallback+0x1c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 fa5e 	bl	8006b20 <vTaskNotifyGiveFromISR>
	//HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000230 	.word	0x20000230

08000670 <StartDMATask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDMATask */
void StartDMATask(void *argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint32_t DMAnotificationValue;

  HAL_ADC_Start_DMA(&hadc1, buffer_adc, ADC_BUFFER_LENGTH);
 8000678:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800067c:	4917      	ldr	r1, [pc, #92]	@ (80006dc <StartDMATask+0x6c>)
 800067e:	4818      	ldr	r0, [pc, #96]	@ (80006e0 <StartDMATask+0x70>)
 8000680:	f000 fc86 	bl	8000f90 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim6);
 8000684:	4817      	ldr	r0, [pc, #92]	@ (80006e4 <StartDMATask+0x74>)
 8000686:	f003 fc19 	bl	8003ebc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 800068a:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <StartDMATask+0x78>)
 800068c:	f003 fc16 	bl	8003ebc <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	  DMAnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	2001      	movs	r0, #1
 8000696:	f006 f949 	bl	800692c <ulTaskNotifyTake>
 800069a:	60f8      	str	r0, [r7, #12]

	  if(DMAnotificationValue == 1)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d116      	bne.n	80006d0 <StartDMATask+0x60>
	  {
		  HAL_GPIO_WritePin(GPIOA, Trace0_Pin, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006aa:	f001 feb9 	bl	8002420 <HAL_GPIO_WritePin>
		  memcpy(park_buffer, buffer_adc, sizeof(uint32_t)*PARK_BUFFER_LENGTH);
 80006ae:	4a0f      	ldr	r2, [pc, #60]	@ (80006ec <StartDMATask+0x7c>)
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <StartDMATask+0x6c>)
 80006b2:	4610      	mov	r0, r2
 80006b4:	4619      	mov	r1, r3
 80006b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ba:	461a      	mov	r2, r3
 80006bc:	f007 faf2 	bl	8007ca4 <memcpy>
		  xTaskNotifyGive(fftTaskHandle);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <StartDMATask+0x80>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2100      	movs	r1, #0
 80006ca:	f006 f97b 	bl	80069c4 <xTaskGenericNotify>
 80006ce:	e7df      	b.n	8000690 <StartDMATask+0x20>
	  }
	  else
		  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 80006d0:	2140      	movs	r1, #64	@ 0x40
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d6:	f001 febb 	bl	8002450 <HAL_GPIO_TogglePin>
	  DMAnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80006da:	e7d9      	b.n	8000690 <StartDMATask+0x20>
 80006dc:	20000238 	.word	0x20000238
 80006e0:	2000007c 	.word	0x2000007c
 80006e4:	20000110 	.word	0x20000110
 80006e8:	2000015c 	.word	0x2000015c
 80006ec:	20002238 	.word	0x20002238
 80006f0:	20000234 	.word	0x20000234

080006f4 <StartfftTaskTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartfftTaskTask */
void StartfftTaskTask(void *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartfftTaskTask */
  uint32_t fftnotificationValue;
  /* Infinite loop */
  for(;;)
  {
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000700:	2001      	movs	r0, #1
 8000702:	f006 f913 	bl	800692c <ulTaskNotifyTake>
 8000706:	60f8      	str	r0, [r7, #12]

	  if(fftnotificationValue == 1)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d106      	bne.n	800071c <StartfftTaskTask+0x28>
	  {
		  HAL_GPIO_WritePin(GPIOA, Trace0_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2120      	movs	r1, #32
 8000712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000716:	f001 fe83 	bl	8002420 <HAL_GPIO_WritePin>
 800071a:	e7ef      	b.n	80006fc <StartfftTaskTask+0x8>

		  //copiare da park a fft_buffer
		  //eseguire la fft
	  }
	  else
		  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 800071c:	2140      	movs	r1, #64	@ 0x40
 800071e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000722:	f001 fe95 	bl	8002450 <HAL_GPIO_TogglePin>
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000726:	e7e9      	b.n	80006fc <StartfftTaskTask+0x8>

08000728 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a04      	ldr	r2, [pc, #16]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d101      	bne.n	800073e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800073a:	f000 fa05 	bl	8000b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40012c00 	.word	0x40012c00

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <Error_Handler+0x8>

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <HAL_MspInit+0x4c>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a10      	ldr	r2, [pc, #64]	@ (80007a4 <HAL_MspInit+0x4c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <HAL_MspInit+0x4c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <HAL_MspInit+0x4c>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_MspInit+0x4c>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	210f      	movs	r1, #15
 8000792:	f06f 0001 	mvn.w	r0, #1
 8000796:	f001 fadb 	bl	8001d50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007c8:	d14c      	bne.n	8000864 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007ca:	4b28      	ldr	r3, [pc, #160]	@ (800086c <HAL_ADC_MspInit+0xc4>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a27      	ldr	r2, [pc, #156]	@ (800086c <HAL_ADC_MspInit+0xc4>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b25      	ldr	r3, [pc, #148]	@ (800086c <HAL_ADC_MspInit+0xc4>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b22      	ldr	r3, [pc, #136]	@ (800086c <HAL_ADC_MspInit+0xc4>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a21      	ldr	r2, [pc, #132]	@ (800086c <HAL_ADC_MspInit+0xc4>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <HAL_ADC_MspInit+0xc4>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007fa:	2301      	movs	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fe:	2303      	movs	r3, #3
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000810:	f001 fc7c 	bl	800210c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <HAL_ADC_MspInit+0xc8>)
 8000816:	4a17      	ldr	r2, [pc, #92]	@ (8000874 <HAL_ADC_MspInit+0xcc>)
 8000818:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <HAL_ADC_MspInit+0xc8>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <HAL_ADC_MspInit+0xc8>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_ADC_MspInit+0xc8>)
 8000828:	2280      	movs	r2, #128	@ 0x80
 800082a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800082c:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <HAL_ADC_MspInit+0xc8>)
 800082e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000832:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <HAL_ADC_MspInit+0xc8>)
 8000836:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800083a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <HAL_ADC_MspInit+0xc8>)
 800083e:	2220      	movs	r2, #32
 8000840:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HAL_ADC_MspInit+0xc8>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000848:	4809      	ldr	r0, [pc, #36]	@ (8000870 <HAL_ADC_MspInit+0xc8>)
 800084a:	f001 faab 	bl	8001da4 <HAL_DMA_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000854:	f7ff ff7a 	bl	800074c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <HAL_ADC_MspInit+0xc8>)
 800085c:	639a      	str	r2, [r3, #56]	@ 0x38
 800085e:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <HAL_ADC_MspInit+0xc8>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	@ 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	200000cc 	.word	0x200000cc
 8000874:	40020008 	.word	0x40020008

08000878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a13      	ldr	r2, [pc, #76]	@ (80008d4 <HAL_TIM_Base_MspInit+0x5c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d10c      	bne.n	80008a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800088a:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a12      	ldr	r2, [pc, #72]	@ (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 8000890:	f043 0310 	orr.w	r3, r3, #16
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80008a2:	e010      	b.n	80008c6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <HAL_TIM_Base_MspInit+0x64>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d10b      	bne.n	80008c6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a09      	ldr	r2, [pc, #36]	@ (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 80008b4:	f043 0320 	orr.w	r3, r3, #32
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40001000 	.word	0x40001000
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40001400 	.word	0x40001400

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a17      	ldr	r2, [pc, #92]	@ (800095c <HAL_UART_MspInit+0x7c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d128      	bne.n	8000954 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <HAL_UART_MspInit+0x80>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a16      	ldr	r2, [pc, #88]	@ (8000960 <HAL_UART_MspInit+0x80>)
 8000908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <HAL_UART_MspInit+0x80>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <HAL_UART_MspInit+0x80>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a10      	ldr	r2, [pc, #64]	@ (8000960 <HAL_UART_MspInit+0x80>)
 8000920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <HAL_UART_MspInit+0x80>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000932:	230c      	movs	r3, #12
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000942:	2307      	movs	r3, #7
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000950:	f001 fbdc 	bl	800210c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	@ 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40004400 	.word	0x40004400
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	@ 0x30
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000974:	4b2e      	ldr	r3, [pc, #184]	@ (8000a30 <HAL_InitTick+0xcc>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a2d      	ldr	r2, [pc, #180]	@ (8000a30 <HAL_InitTick+0xcc>)
 800097a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <HAL_InitTick+0xcc>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800098c:	f107 020c 	add.w	r2, r7, #12
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f002 ffe8 	bl	800396c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800099c:	f002 ffc4 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 80009a0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a4:	4a23      	ldr	r2, [pc, #140]	@ (8000a34 <HAL_InitTick+0xd0>)
 80009a6:	fba2 2303 	umull	r2, r3, r2, r3
 80009aa:	0c9b      	lsrs	r3, r3, #18
 80009ac:	3b01      	subs	r3, #1
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009b0:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <HAL_InitTick+0xd4>)
 80009b2:	4a22      	ldr	r2, [pc, #136]	@ (8000a3c <HAL_InitTick+0xd8>)
 80009b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009b6:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <HAL_InitTick+0xd4>)
 80009b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009be:	4a1e      	ldr	r2, [pc, #120]	@ (8000a38 <HAL_InitTick+0xd4>)
 80009c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <HAL_InitTick+0xd4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <HAL_InitTick+0xd4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <HAL_InitTick+0xd4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009d6:	4818      	ldr	r0, [pc, #96]	@ (8000a38 <HAL_InitTick+0xd4>)
 80009d8:	f003 fa18 	bl	8003e0c <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d11b      	bne.n	8000a22 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009ea:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <HAL_InitTick+0xd4>)
 80009ec:	f003 face 	bl	8003f8c <HAL_TIM_Base_Start_IT>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d111      	bne.n	8000a22 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009fe:	2019      	movs	r0, #25
 8000a00:	f001 f9c2 	bl	8001d88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	d808      	bhi.n	8000a1c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	2019      	movs	r0, #25
 8000a10:	f001 f99e 	bl	8001d50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a14:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <HAL_InitTick+0xdc>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e002      	b.n	8000a22 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3730      	adds	r7, #48	@ 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000
 8000a34:	431bde83 	.word	0x431bde83
 8000a38:	20003238 	.word	0x20003238
 8000a3c:	40012c00 	.word	0x40012c00
 8000a40:	20000004 	.word	0x20000004

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <NMI_Handler+0x4>

08000a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <DMA1_Channel1_IRQHandler+0x10>)
 8000a82:	f001 fa35 	bl	8001ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200000cc 	.word	0x200000cc

08000a90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a96:	f003 fae9 	bl	800406c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20003238 	.word	0x20003238

08000aa4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b00 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000acc:	f7ff ffea 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <LoopForever+0xe>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b14 <LoopForever+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f007 f8af 	bl	8007c58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afa:	f7ff fb71 	bl	80001e0 <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b0c:	08007e34 	.word	0x08007e34
  ldr r2, =_sbss
 8000b10:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b14:	20004da8 	.word	0x20004da8

08000b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_2_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <HAL_Init+0x28>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_Init+0x28>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f001 f904 	bl	8001d3a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	200f      	movs	r0, #15
 8000b34:	f7ff ff16 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fe0e 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20003284 	.word	0x20003284

08000b70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b74:	4b03      	ldr	r3, [pc, #12]	@ (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20003284 	.word	0x20003284

08000b88 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09a      	sub	sp, #104	@ 0x68
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e1e3      	b.n	8000f84 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d176      	bne.n	8000cbc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d152      	bne.n	8000c7c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fdd9 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d13b      	bne.n	8000c7c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 ff85 	bl	8001b14 <ADC_Disable>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d12f      	bne.n	8000c7c <HAL_ADC_Init+0xe0>
 8000c1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d12b      	bne.n	8000c7c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c28:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c2c:	f023 0302 	bic.w	r3, r3, #2
 8000c30:	f043 0202 	orr.w	r2, r3, #2
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000c46:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000c56:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c58:	4b92      	ldr	r3, [pc, #584]	@ (8000ea4 <HAL_ADC_Init+0x308>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a92      	ldr	r2, [pc, #584]	@ (8000ea8 <HAL_ADC_Init+0x30c>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	0c9a      	lsrs	r2, r3, #18
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c6e:	e002      	b.n	8000c76 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f9      	bne.n	8000c70 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d007      	beq.n	8000c9a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c98:	d110      	bne.n	8000cbc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	f023 0312 	bic.w	r3, r3, #18
 8000ca2:	f043 0210 	orr.w	r2, r3, #16
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	f043 0201 	orr.w	r2, r3, #1
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f040 8150 	bne.w	8000f6a <HAL_ADC_Init+0x3ce>
 8000cca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 814b 	bne.w	8000f6a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f040 8143 	bne.w	8000f6a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000cec:	f043 0202 	orr.w	r2, r3, #2
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cfc:	d004      	beq.n	8000d08 <HAL_ADC_Init+0x16c>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a6a      	ldr	r2, [pc, #424]	@ (8000eac <HAL_ADC_Init+0x310>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d101      	bne.n	8000d0c <HAL_ADC_Init+0x170>
 8000d08:	4b69      	ldr	r3, [pc, #420]	@ (8000eb0 <HAL_ADC_Init+0x314>)
 8000d0a:	e000      	b.n	8000d0e <HAL_ADC_Init+0x172>
 8000d0c:	4b69      	ldr	r3, [pc, #420]	@ (8000eb4 <HAL_ADC_Init+0x318>)
 8000d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d18:	d102      	bne.n	8000d20 <HAL_ADC_Init+0x184>
 8000d1a:	4b64      	ldr	r3, [pc, #400]	@ (8000eac <HAL_ADC_Init+0x310>)
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	e01a      	b.n	8000d56 <HAL_ADC_Init+0x1ba>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a61      	ldr	r2, [pc, #388]	@ (8000eac <HAL_ADC_Init+0x310>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d103      	bne.n	8000d32 <HAL_ADC_Init+0x196>
 8000d2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	e011      	b.n	8000d56 <HAL_ADC_Init+0x1ba>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a60      	ldr	r2, [pc, #384]	@ (8000eb8 <HAL_ADC_Init+0x31c>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d102      	bne.n	8000d42 <HAL_ADC_Init+0x1a6>
 8000d3c:	4b5f      	ldr	r3, [pc, #380]	@ (8000ebc <HAL_ADC_Init+0x320>)
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	e009      	b.n	8000d56 <HAL_ADC_Init+0x1ba>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a5d      	ldr	r2, [pc, #372]	@ (8000ebc <HAL_ADC_Init+0x320>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d102      	bne.n	8000d52 <HAL_ADC_Init+0x1b6>
 8000d4c:	4b5a      	ldr	r3, [pc, #360]	@ (8000eb8 <HAL_ADC_Init+0x31c>)
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	e001      	b.n	8000d56 <HAL_ADC_Init+0x1ba>
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d108      	bne.n	8000d76 <HAL_ADC_Init+0x1da>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d101      	bne.n	8000d76 <HAL_ADC_Init+0x1da>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <HAL_ADC_Init+0x1dc>
 8000d76:	2300      	movs	r3, #0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d11c      	bne.n	8000db6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d010      	beq.n	8000da4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d107      	bne.n	8000d9e <HAL_ADC_Init+0x202>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d101      	bne.n	8000d9e <HAL_ADC_Init+0x202>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <HAL_ADC_Init+0x204>
 8000d9e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d108      	bne.n	8000db6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000da4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000db4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7e5b      	ldrb	r3, [r3, #25]
 8000dba:	035b      	lsls	r3, r3, #13
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000dc0:	2a01      	cmp	r2, #1
 8000dc2:	d002      	beq.n	8000dca <HAL_ADC_Init+0x22e>
 8000dc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dc8:	e000      	b.n	8000dcc <HAL_ADC_Init+0x230>
 8000dca:	2200      	movs	r2, #0
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d11b      	bne.n	8000e22 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7e5b      	ldrb	r3, [r3, #25]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d109      	bne.n	8000e06 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df6:	3b01      	subs	r3, #1
 8000df8:	045a      	lsls	r2, r3, #17
 8000dfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e02:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e04:	e00d      	b.n	8000e22 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000e0e:	f043 0220 	orr.w	r2, r3, #32
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	f043 0201 	orr.w	r2, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d054      	beq.n	8000ed4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a22      	ldr	r2, [pc, #136]	@ (8000eb8 <HAL_ADC_Init+0x31c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d004      	beq.n	8000e3e <HAL_ADC_Init+0x2a2>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a20      	ldr	r2, [pc, #128]	@ (8000ebc <HAL_ADC_Init+0x320>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d140      	bne.n	8000ec0 <HAL_ADC_Init+0x324>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e42:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000e46:	d02a      	beq.n	8000e9e <HAL_ADC_Init+0x302>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e50:	d022      	beq.n	8000e98 <HAL_ADC_Init+0x2fc>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e56:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000e5a:	d01a      	beq.n	8000e92 <HAL_ADC_Init+0x2f6>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e60:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000e64:	d012      	beq.n	8000e8c <HAL_ADC_Init+0x2f0>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e6a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000e6e:	d00a      	beq.n	8000e86 <HAL_ADC_Init+0x2ea>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e74:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000e78:	d002      	beq.n	8000e80 <HAL_ADC_Init+0x2e4>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e7e:	e023      	b.n	8000ec8 <HAL_ADC_Init+0x32c>
 8000e80:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e84:	e020      	b.n	8000ec8 <HAL_ADC_Init+0x32c>
 8000e86:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e8a:	e01d      	b.n	8000ec8 <HAL_ADC_Init+0x32c>
 8000e8c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000e90:	e01a      	b.n	8000ec8 <HAL_ADC_Init+0x32c>
 8000e92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e96:	e017      	b.n	8000ec8 <HAL_ADC_Init+0x32c>
 8000e98:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000e9c:	e014      	b.n	8000ec8 <HAL_ADC_Init+0x32c>
 8000e9e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000ea2:	e011      	b.n	8000ec8 <HAL_ADC_Init+0x32c>
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	431bde83 	.word	0x431bde83
 8000eac:	50000100 	.word	0x50000100
 8000eb0:	50000300 	.word	0x50000300
 8000eb4:	50000700 	.word	0x50000700
 8000eb8:	50000400 	.word	0x50000400
 8000ebc:	50000500 	.word	0x50000500
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d114      	bne.n	8000f0c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ef0:	f023 0302 	bic.w	r3, r3, #2
 8000ef4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7e1b      	ldrb	r3, [r3, #24]
 8000efa:	039a      	lsls	r2, r3, #14
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4313      	orrs	r3, r2
 8000f06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <HAL_ADC_Init+0x3f0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	6812      	ldr	r2, [r2, #0]
 8000f1a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d10c      	bne.n	8000f42 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f023 010f 	bic.w	r1, r3, #15
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	1e5a      	subs	r2, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f40:	e007      	b.n	8000f52 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 020f 	bic.w	r2, r2, #15
 8000f50:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	f023 0303 	bic.w	r3, r3, #3
 8000f60:	f043 0201 	orr.w	r2, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f68:	e00a      	b.n	8000f80 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	f023 0312 	bic.w	r3, r3, #18
 8000f72:	f043 0210 	orr.w	r2, r3, #16
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3768      	adds	r7, #104	@ 0x68
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	fff0c007 	.word	0xfff0c007

08000f90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f040 80f7 	bne.w	800119e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d101      	bne.n	8000fbe <HAL_ADC_Start_DMA+0x2e>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e0f2      	b.n	80011a4 <HAL_ADC_Start_DMA+0x214>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fce:	d004      	beq.n	8000fda <HAL_ADC_Start_DMA+0x4a>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a75      	ldr	r2, [pc, #468]	@ (80011ac <HAL_ADC_Start_DMA+0x21c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d109      	bne.n	8000fee <HAL_ADC_Start_DMA+0x5e>
 8000fda:	4b75      	ldr	r3, [pc, #468]	@ (80011b0 <HAL_ADC_Start_DMA+0x220>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2301      	moveq	r3, #1
 8000fe8:	2300      	movne	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	e008      	b.n	8001000 <HAL_ADC_Start_DMA+0x70>
 8000fee:	4b71      	ldr	r3, [pc, #452]	@ (80011b4 <HAL_ADC_Start_DMA+0x224>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bf0c      	ite	eq
 8000ffa:	2301      	moveq	r3, #1
 8000ffc:	2300      	movne	r3, #0
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80c5 	beq.w	8001190 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 fd20 	bl	8001a4c <ADC_Enable>
 800100c:	4603      	mov	r3, r0
 800100e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f040 80b7 	bne.w	8001186 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001034:	d004      	beq.n	8001040 <HAL_ADC_Start_DMA+0xb0>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a5c      	ldr	r2, [pc, #368]	@ (80011ac <HAL_ADC_Start_DMA+0x21c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d106      	bne.n	800104e <HAL_ADC_Start_DMA+0xbe>
 8001040:	4b5b      	ldr	r3, [pc, #364]	@ (80011b0 <HAL_ADC_Start_DMA+0x220>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	2b00      	cmp	r3, #0
 800104a:	d010      	beq.n	800106e <HAL_ADC_Start_DMA+0xde>
 800104c:	e005      	b.n	800105a <HAL_ADC_Start_DMA+0xca>
 800104e:	4b59      	ldr	r3, [pc, #356]	@ (80011b4 <HAL_ADC_Start_DMA+0x224>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	2b00      	cmp	r3, #0
 8001058:	d009      	beq.n	800106e <HAL_ADC_Start_DMA+0xde>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001062:	d004      	beq.n	800106e <HAL_ADC_Start_DMA+0xde>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a53      	ldr	r2, [pc, #332]	@ (80011b8 <HAL_ADC_Start_DMA+0x228>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d115      	bne.n	800109a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d036      	beq.n	80010f6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001090:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001098:	e02d      	b.n	80010f6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010ae:	d004      	beq.n	80010ba <HAL_ADC_Start_DMA+0x12a>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a3d      	ldr	r2, [pc, #244]	@ (80011ac <HAL_ADC_Start_DMA+0x21c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d10a      	bne.n	80010d0 <HAL_ADC_Start_DMA+0x140>
 80010ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bf14      	ite	ne
 80010c8:	2301      	movne	r3, #1
 80010ca:	2300      	moveq	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	e008      	b.n	80010e2 <HAL_ADC_Start_DMA+0x152>
 80010d0:	4b39      	ldr	r3, [pc, #228]	@ (80011b8 <HAL_ADC_Start_DMA+0x228>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf14      	ite	ne
 80010dc:	2301      	movne	r3, #1
 80010de:	2300      	moveq	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d007      	beq.n	80010f6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001102:	d106      	bne.n	8001112 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001108:	f023 0206 	bic.w	r2, r3, #6
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001110:	e002      	b.n	8001118 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001124:	4a25      	ldr	r2, [pc, #148]	@ (80011bc <HAL_ADC_Start_DMA+0x22c>)
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800112c:	4a24      	ldr	r2, [pc, #144]	@ (80011c0 <HAL_ADC_Start_DMA+0x230>)
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001134:	4a23      	ldr	r2, [pc, #140]	@ (80011c4 <HAL_ADC_Start_DMA+0x234>)
 8001136:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	221c      	movs	r2, #28
 800113e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0210 	orr.w	r2, r2, #16
 800114e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3340      	adds	r3, #64	@ 0x40
 800116a:	4619      	mov	r1, r3
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f000 fe5f 	bl	8001e32 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0204 	orr.w	r2, r2, #4
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	e00d      	b.n	80011a2 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800118e:	e008      	b.n	80011a2 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800119c:	e001      	b.n	80011a2 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800119e:	2302      	movs	r3, #2
 80011a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	50000100 	.word	0x50000100
 80011b0:	50000300 	.word	0x50000300
 80011b4:	50000700 	.word	0x50000700
 80011b8:	50000400 	.word	0x50000400
 80011bc:	08001981 	.word	0x08001981
 80011c0:	080019fb 	.word	0x080019fb
 80011c4:	08001a17 	.word	0x08001a17

080011c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b09b      	sub	sp, #108	@ 0x6c
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x22>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e2c8      	b.n	800177c <HAL_ADC_ConfigChannel+0x5b4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f040 82ac 	bne.w	800175a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d81c      	bhi.n	8001244 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	461a      	mov	r2, r3
 800121e:	231f      	movs	r3, #31
 8001220:	4093      	lsls	r3, r2
 8001222:	43db      	mvns	r3, r3
 8001224:	4019      	ands	r1, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	631a      	str	r2, [r3, #48]	@ 0x30
 8001242:	e063      	b.n	800130c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d81e      	bhi.n	800128a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	3b1e      	subs	r3, #30
 8001260:	221f      	movs	r2, #31
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	4019      	ands	r1, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	3b1e      	subs	r3, #30
 800127c:	fa00 f203 	lsl.w	r2, r0, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	635a      	str	r2, [r3, #52]	@ 0x34
 8001288:	e040      	b.n	800130c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b0e      	cmp	r3, #14
 8001290:	d81e      	bhi.n	80012d0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	3b3c      	subs	r3, #60	@ 0x3c
 80012a6:	221f      	movs	r2, #31
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	4019      	ands	r1, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	3b3c      	subs	r3, #60	@ 0x3c
 80012c2:	fa00 f203 	lsl.w	r2, r0, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80012ce:	e01d      	b.n	800130c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	3b5a      	subs	r3, #90	@ 0x5a
 80012e4:	221f      	movs	r2, #31
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	4019      	ands	r1, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	3b5a      	subs	r3, #90	@ 0x5a
 8001300:	fa00 f203 	lsl.w	r2, r0, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b00      	cmp	r3, #0
 8001318:	f040 80e5 	bne.w	80014e6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b09      	cmp	r3, #9
 8001322:	d91c      	bls.n	800135e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6999      	ldr	r1, [r3, #24]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	3b1e      	subs	r3, #30
 8001336:	2207      	movs	r2, #7
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	4019      	ands	r1, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	6898      	ldr	r0, [r3, #8]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	3b1e      	subs	r3, #30
 8001350:	fa00 f203 	lsl.w	r2, r0, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	619a      	str	r2, [r3, #24]
 800135c:	e019      	b.n	8001392 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6959      	ldr	r1, [r3, #20]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	2207      	movs	r2, #7
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	4019      	ands	r1, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6898      	ldr	r0, [r3, #8]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	fa00 f203 	lsl.w	r2, r0, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d84f      	bhi.n	8001454 <HAL_ADC_ConfigChannel+0x28c>
 80013b4:	a201      	add	r2, pc, #4	@ (adr r2, 80013bc <HAL_ADC_ConfigChannel+0x1f4>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	080013cd 	.word	0x080013cd
 80013c0:	080013ef 	.word	0x080013ef
 80013c4:	08001411 	.word	0x08001411
 80013c8:	08001433 	.word	0x08001433
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013d2:	4b99      	ldr	r3, [pc, #612]	@ (8001638 <HAL_ADC_ConfigChannel+0x470>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	0691      	lsls	r1, r2, #26
 80013dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013de:	430a      	orrs	r2, r1
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013ea:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013ec:	e07b      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80013f4:	4b90      	ldr	r3, [pc, #576]	@ (8001638 <HAL_ADC_ConfigChannel+0x470>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	0691      	lsls	r1, r2, #26
 80013fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001400:	430a      	orrs	r2, r1
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800140c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800140e:	e06a      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001416:	4b88      	ldr	r3, [pc, #544]	@ (8001638 <HAL_ADC_ConfigChannel+0x470>)
 8001418:	4013      	ands	r3, r2
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	0691      	lsls	r1, r2, #26
 8001420:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001422:	430a      	orrs	r2, r1
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800142e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001430:	e059      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001438:	4b7f      	ldr	r3, [pc, #508]	@ (8001638 <HAL_ADC_ConfigChannel+0x470>)
 800143a:	4013      	ands	r3, r2
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	0691      	lsls	r1, r2, #26
 8001442:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001444:	430a      	orrs	r2, r1
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001450:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001452:	e048      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800145a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	069b      	lsls	r3, r3, #26
 8001464:	429a      	cmp	r2, r3
 8001466:	d107      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001476:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800147e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	069b      	lsls	r3, r3, #26
 8001488:	429a      	cmp	r2, r3
 800148a:	d107      	bne.n	800149c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800149a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80014a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	069b      	lsls	r3, r3, #26
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d107      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014be:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	069b      	lsls	r3, r3, #26
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d107      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014e2:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80014e4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x33e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x33e>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_ADC_ConfigChannel+0x340>
 8001506:	2300      	movs	r3, #0
 8001508:	2b00      	cmp	r3, #0
 800150a:	f040 8131 	bne.w	8001770 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d00f      	beq.n	8001536 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2201      	movs	r2, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43da      	mvns	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	400a      	ands	r2, r1
 8001530:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001534:	e049      	b.n	80015ca <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2201      	movs	r2, #1
 8001544:	409a      	lsls	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b09      	cmp	r3, #9
 8001556:	d91c      	bls.n	8001592 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6999      	ldr	r1, [r3, #24]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	3b1b      	subs	r3, #27
 800156a:	2207      	movs	r2, #7
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	4019      	ands	r1, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6898      	ldr	r0, [r3, #8]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	3b1b      	subs	r3, #27
 8001584:	fa00 f203 	lsl.w	r2, r0, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	619a      	str	r2, [r3, #24]
 8001590:	e01b      	b.n	80015ca <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6959      	ldr	r1, [r3, #20]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	2207      	movs	r2, #7
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	4019      	ands	r1, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6898      	ldr	r0, [r3, #8]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	fa00 f203 	lsl.w	r2, r0, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015d2:	d004      	beq.n	80015de <HAL_ADC_ConfigChannel+0x416>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a18      	ldr	r2, [pc, #96]	@ (800163c <HAL_ADC_ConfigChannel+0x474>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d101      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x41a>
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <HAL_ADC_ConfigChannel+0x478>)
 80015e0:	e000      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x41c>
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_ADC_ConfigChannel+0x47c>)
 80015e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d105      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d015      	beq.n	8001626 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015fe:	2b11      	cmp	r3, #17
 8001600:	d105      	bne.n	800160e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001612:	2b12      	cmp	r3, #18
 8001614:	f040 80ac 	bne.w	8001770 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001620:	2b00      	cmp	r3, #0
 8001622:	f040 80a5 	bne.w	8001770 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800162e:	d10b      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x480>
 8001630:	4b02      	ldr	r3, [pc, #8]	@ (800163c <HAL_ADC_ConfigChannel+0x474>)
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	e023      	b.n	800167e <HAL_ADC_ConfigChannel+0x4b6>
 8001636:	bf00      	nop
 8001638:	83fff000 	.word	0x83fff000
 800163c:	50000100 	.word	0x50000100
 8001640:	50000300 	.word	0x50000300
 8001644:	50000700 	.word	0x50000700
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a4e      	ldr	r2, [pc, #312]	@ (8001788 <HAL_ADC_ConfigChannel+0x5c0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d103      	bne.n	800165a <HAL_ADC_ConfigChannel+0x492>
 8001652:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	e011      	b.n	800167e <HAL_ADC_ConfigChannel+0x4b6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a4b      	ldr	r2, [pc, #300]	@ (800178c <HAL_ADC_ConfigChannel+0x5c4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d102      	bne.n	800166a <HAL_ADC_ConfigChannel+0x4a2>
 8001664:	4b4a      	ldr	r3, [pc, #296]	@ (8001790 <HAL_ADC_ConfigChannel+0x5c8>)
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e009      	b.n	800167e <HAL_ADC_ConfigChannel+0x4b6>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a48      	ldr	r2, [pc, #288]	@ (8001790 <HAL_ADC_ConfigChannel+0x5c8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d102      	bne.n	800167a <HAL_ADC_ConfigChannel+0x4b2>
 8001674:	4b45      	ldr	r3, [pc, #276]	@ (800178c <HAL_ADC_ConfigChannel+0x5c4>)
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e001      	b.n	800167e <HAL_ADC_ConfigChannel+0x4b6>
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d108      	bne.n	800169e <HAL_ADC_ConfigChannel+0x4d6>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_ADC_ConfigChannel+0x4d6>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x4d8>
 800169e:	2300      	movs	r3, #0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d150      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016a4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d010      	beq.n	80016cc <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x4fe>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x4fe>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x500>
 80016c6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d13c      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b10      	cmp	r3, #16
 80016d2:	d11d      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x548>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016dc:	d118      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016e8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <HAL_ADC_ConfigChannel+0x5cc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001798 <HAL_ADC_ConfigChannel+0x5d0>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	0c9a      	lsrs	r2, r3, #18
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001700:	e002      	b.n	8001708 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3b01      	subs	r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f9      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800170e:	e02e      	b.n	800176e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b11      	cmp	r3, #17
 8001716:	d10b      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x568>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001720:	d106      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800172a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800172c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800172e:	e01e      	b.n	800176e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b12      	cmp	r3, #18
 8001736:	d11a      	bne.n	800176e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001738:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001742:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001744:	e013      	b.n	800176e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f043 0220 	orr.w	r2, r3, #32
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001758:	e00a      	b.n	8001770 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f043 0220 	orr.w	r2, r3, #32
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800176c:	e000      	b.n	8001770 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800176e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001778:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800177c:	4618      	mov	r0, r3
 800177e:	376c      	adds	r7, #108	@ 0x6c
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	50000100 	.word	0x50000100
 800178c:	50000400 	.word	0x50000400
 8001790:	50000500 	.word	0x50000500
 8001794:	20000000 	.word	0x20000000
 8001798:	431bde83 	.word	0x431bde83

0800179c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800179c:	b480      	push	{r7}
 800179e:	b099      	sub	sp, #100	@ 0x64
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017b4:	d102      	bne.n	80017bc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80017b6:	4b6d      	ldr	r3, [pc, #436]	@ (800196c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	e01a      	b.n	80017f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6a      	ldr	r2, [pc, #424]	@ (800196c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d103      	bne.n	80017ce <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80017c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	e011      	b.n	80017f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a67      	ldr	r2, [pc, #412]	@ (8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d102      	bne.n	80017de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80017d8:	4b66      	ldr	r3, [pc, #408]	@ (8001974 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	e009      	b.n	80017f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a64      	ldr	r2, [pc, #400]	@ (8001974 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d102      	bne.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80017e8:	4b61      	ldr	r3, [pc, #388]	@ (8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	e001      	b.n	80017f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0b0      	b.n	800195e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001806:	2302      	movs	r3, #2
 8001808:	e0a9      	b.n	800195e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	f040 808d 	bne.w	800193c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 8086 	bne.w	800193c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001838:	d004      	beq.n	8001844 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a4b      	ldr	r2, [pc, #300]	@ (800196c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001844:	4b4c      	ldr	r3, [pc, #304]	@ (8001978 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001846:	e000      	b.n	800184a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001848:	4b4c      	ldr	r3, [pc, #304]	@ (800197c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800184a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d040      	beq.n	80018d6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001854:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001866:	035b      	lsls	r3, r3, #13
 8001868:	430b      	orrs	r3, r1
 800186a:	431a      	orrs	r2, r3
 800186c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800186e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001890:	2300      	movs	r3, #0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d15c      	bne.n	8001950 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80018b2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d14b      	bne.n	8001950 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80018c0:	f023 030f 	bic.w	r3, r3, #15
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	6811      	ldr	r1, [r2, #0]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	6892      	ldr	r2, [r2, #8]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	431a      	orrs	r2, r3
 80018d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018d2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018d4:	e03c      	b.n	8001950 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80018d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018e0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d108      	bne.n	8001902 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001902:	2300      	movs	r3, #0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d123      	bne.n	8001950 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d107      	bne.n	8001924 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001924:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001926:	2b00      	cmp	r3, #0
 8001928:	d112      	bne.n	8001950 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800192a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001932:	f023 030f 	bic.w	r3, r3, #15
 8001936:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001938:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800193a:	e009      	b.n	8001950 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	f043 0220 	orr.w	r2, r3, #32
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800194e:	e000      	b.n	8001952 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001950:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800195a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800195e:	4618      	mov	r0, r3
 8001960:	3764      	adds	r7, #100	@ 0x64
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	50000100 	.word	0x50000100
 8001970:	50000400 	.word	0x50000400
 8001974:	50000500 	.word	0x50000500
 8001978:	50000300 	.word	0x50000300
 800197c:	50000700 	.word	0x50000700

08001980 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001996:	2b00      	cmp	r3, #0
 8001998:	d126      	bne.n	80019e8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d115      	bne.n	80019e0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d111      	bne.n	80019e0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7fe fe35 	bl	8000650 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019e6:	e004      	b.n	80019f2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7fe fe11 	bl	8000630 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a34:	f043 0204 	orr.w	r2, r3, #4
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f7ff f8a3 	bl	8000b88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <ADC_Enable+0x2c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <ADC_Enable+0x2c>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <ADC_Enable+0x2e>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d143      	bne.n	8001b06 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b22      	ldr	r3, [pc, #136]	@ (8001b10 <ADC_Enable+0xc4>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00d      	beq.n	8001aa8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f043 0210 	orr.w	r2, r3, #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e02f      	b.n	8001b08 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001ab8:	f7ff f85a 	bl	8000b70 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001abe:	e01b      	b.n	8001af8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ac0:	f7ff f856 	bl	8000b70 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d914      	bls.n	8001af8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d00d      	beq.n	8001af8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	f043 0210 	orr.w	r2, r3, #16
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e007      	b.n	8001b08 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d1dc      	bne.n	8001ac0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	8000003f 	.word	0x8000003f

08001b14 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d108      	bne.n	8001b40 <ADC_Disable+0x2c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <ADC_Disable+0x2c>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <ADC_Disable+0x2e>
 8001b40:	2300      	movs	r3, #0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d047      	beq.n	8001bd6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030d 	and.w	r3, r3, #13
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d10f      	bne.n	8001b74 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0202 	orr.w	r2, r2, #2
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b6c:	f7ff f800 	bl	8000b70 <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b72:	e029      	b.n	8001bc8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	f043 0210 	orr.w	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e023      	b.n	8001bd8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b90:	f7fe ffee 	bl	8000b70 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d914      	bls.n	8001bc8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d10d      	bne.n	8001bc8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f043 0210 	orr.w	r2, r3, #16
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e007      	b.n	8001bd8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d0dc      	beq.n	8001b90 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <__NVIC_GetPriorityGrouping+0x18>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 0307 	and.w	r3, r3, #7
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db0b      	blt.n	8001c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	f003 021f 	and.w	r2, r3, #31
 8001c5c:	4907      	ldr	r1, [pc, #28]	@ (8001c7c <__NVIC_EnableIRQ+0x38>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	2001      	movs	r0, #1
 8001c66:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100

08001c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	db0a      	blt.n	8001caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	490c      	ldr	r1, [pc, #48]	@ (8001ccc <__NVIC_SetPriority+0x4c>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca8:	e00a      	b.n	8001cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4908      	ldr	r1, [pc, #32]	@ (8001cd0 <__NVIC_SetPriority+0x50>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	761a      	strb	r2, [r3, #24]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000e100 	.word	0xe000e100
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	@ 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f1c3 0307 	rsb	r3, r3, #7
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	bf28      	it	cs
 8001cf2:	2304      	movcs	r3, #4
 8001cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d902      	bls.n	8001d04 <NVIC_EncodePriority+0x30>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3b03      	subs	r3, #3
 8001d02:	e000      	b.n	8001d06 <NVIC_EncodePriority+0x32>
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	4313      	orrs	r3, r2
         );
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	@ 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ff4c 	bl	8001be0 <__NVIC_SetPriorityGrouping>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d62:	f7ff ff61 	bl	8001c28 <__NVIC_GetPriorityGrouping>
 8001d66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	6978      	ldr	r0, [r7, #20]
 8001d6e:	f7ff ffb1 	bl	8001cd4 <NVIC_EncodePriority>
 8001d72:	4602      	mov	r2, r0
 8001d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff80 	bl	8001c80 <__NVIC_SetPriority>
}
 8001d80:	bf00      	nop
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff54 	bl	8001c44 <__NVIC_EnableIRQ>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e037      	b.n	8001e2a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001dd0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001dd4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f941 	bl	8002094 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_DMA_Start_IT+0x20>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e04a      	b.n	8001ee8 <HAL_DMA_Start_IT+0xb6>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d13a      	bne.n	8001eda <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f8d4 	bl	8002036 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 020e 	orr.w	r2, r2, #14
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e00f      	b.n	8001ec8 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 020a 	orr.w	r2, r2, #10
 8001eb6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0204 	bic.w	r2, r2, #4
 8001ec6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e005      	b.n	8001ee6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d024      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x72>
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01f      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0204 	bic.w	r2, r2, #4
 8001f3e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f48:	2104      	movs	r1, #4
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d06a      	beq.n	800202e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f60:	e065      	b.n	800202e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	2202      	movs	r2, #2
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d02c      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xdc>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d027      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0320 	and.w	r3, r3, #32
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10b      	bne.n	8001fa2 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 020a 	bic.w	r2, r2, #10
 8001f98:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001faa:	2102      	movs	r1, #2
 8001fac:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d035      	beq.n	800202e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001fca:	e030      	b.n	800202e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d028      	beq.n	800202e <HAL_DMA_IRQHandler+0x13e>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d023      	beq.n	800202e <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 020e 	bic.w	r2, r2, #14
 8001ff4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffe:	2101      	movs	r1, #1
 8002000:	fa01 f202 	lsl.w	r2, r1, r2
 8002004:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
    }
  }
}
 800202c:	e7ff      	b.n	800202e <HAL_DMA_IRQHandler+0x13e>
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b10      	cmp	r3, #16
 8002062:	d108      	bne.n	8002076 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002074:	e007      	b.n	8002086 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	60da      	str	r2, [r3, #12]
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <DMA_CalcBaseAndBitshift+0x60>)
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d80f      	bhi.n	80020c8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <DMA_CalcBaseAndBitshift+0x64>)
 80020b0:	4413      	add	r3, r2
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <DMA_CalcBaseAndBitshift+0x68>)
 80020b4:	fba2 2303 	umull	r2, r3, r2, r3
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	009a      	lsls	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002100 <DMA_CalcBaseAndBitshift+0x6c>)
 80020c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80020c6:	e00e      	b.n	80020e6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <DMA_CalcBaseAndBitshift+0x70>)
 80020d0:	4413      	add	r3, r2
 80020d2:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <DMA_CalcBaseAndBitshift+0x68>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	009a      	lsls	r2, r3, #2
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a09      	ldr	r2, [pc, #36]	@ (8002108 <DMA_CalcBaseAndBitshift+0x74>)
 80020e4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40020407 	.word	0x40020407
 80020f8:	bffdfff8 	.word	0xbffdfff8
 80020fc:	cccccccd 	.word	0xcccccccd
 8002100:	40020000 	.word	0x40020000
 8002104:	bffdfbf8 	.word	0xbffdfbf8
 8002108:	40020400 	.word	0x40020400

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211a:	e160      	b.n	80023de <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2101      	movs	r1, #1
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8152 	beq.w	80023d8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d005      	beq.n	800214c <HAL_GPIO_Init+0x40>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d130      	bne.n	80021ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002182:	2201      	movs	r2, #1
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 0201 	and.w	r2, r3, #1
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d017      	beq.n	80021ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	2203      	movs	r2, #3
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d123      	bne.n	800223e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	08da      	lsrs	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3208      	adds	r2, #8
 80021fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	6939      	ldr	r1, [r7, #16]
 800223a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0203 	and.w	r2, r3, #3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 80ac 	beq.w	80023d8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002280:	4b5e      	ldr	r3, [pc, #376]	@ (80023fc <HAL_GPIO_Init+0x2f0>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a5d      	ldr	r2, [pc, #372]	@ (80023fc <HAL_GPIO_Init+0x2f0>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b5b      	ldr	r3, [pc, #364]	@ (80023fc <HAL_GPIO_Init+0x2f0>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002298:	4a59      	ldr	r2, [pc, #356]	@ (8002400 <HAL_GPIO_Init+0x2f4>)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022c2:	d025      	beq.n	8002310 <HAL_GPIO_Init+0x204>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a4f      	ldr	r2, [pc, #316]	@ (8002404 <HAL_GPIO_Init+0x2f8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d01f      	beq.n	800230c <HAL_GPIO_Init+0x200>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a4e      	ldr	r2, [pc, #312]	@ (8002408 <HAL_GPIO_Init+0x2fc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d019      	beq.n	8002308 <HAL_GPIO_Init+0x1fc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a4d      	ldr	r2, [pc, #308]	@ (800240c <HAL_GPIO_Init+0x300>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d013      	beq.n	8002304 <HAL_GPIO_Init+0x1f8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a4c      	ldr	r2, [pc, #304]	@ (8002410 <HAL_GPIO_Init+0x304>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00d      	beq.n	8002300 <HAL_GPIO_Init+0x1f4>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a4b      	ldr	r2, [pc, #300]	@ (8002414 <HAL_GPIO_Init+0x308>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d007      	beq.n	80022fc <HAL_GPIO_Init+0x1f0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002418 <HAL_GPIO_Init+0x30c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_GPIO_Init+0x1ec>
 80022f4:	2306      	movs	r3, #6
 80022f6:	e00c      	b.n	8002312 <HAL_GPIO_Init+0x206>
 80022f8:	2307      	movs	r3, #7
 80022fa:	e00a      	b.n	8002312 <HAL_GPIO_Init+0x206>
 80022fc:	2305      	movs	r3, #5
 80022fe:	e008      	b.n	8002312 <HAL_GPIO_Init+0x206>
 8002300:	2304      	movs	r3, #4
 8002302:	e006      	b.n	8002312 <HAL_GPIO_Init+0x206>
 8002304:	2303      	movs	r3, #3
 8002306:	e004      	b.n	8002312 <HAL_GPIO_Init+0x206>
 8002308:	2302      	movs	r3, #2
 800230a:	e002      	b.n	8002312 <HAL_GPIO_Init+0x206>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_GPIO_Init+0x206>
 8002310:	2300      	movs	r3, #0
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	f002 0203 	and.w	r2, r2, #3
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	4093      	lsls	r3, r2
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002322:	4937      	ldr	r1, [pc, #220]	@ (8002400 <HAL_GPIO_Init+0x2f4>)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002330:	4b3a      	ldr	r3, [pc, #232]	@ (800241c <HAL_GPIO_Init+0x310>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002354:	4a31      	ldr	r2, [pc, #196]	@ (800241c <HAL_GPIO_Init+0x310>)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800235a:	4b30      	ldr	r3, [pc, #192]	@ (800241c <HAL_GPIO_Init+0x310>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800237e:	4a27      	ldr	r2, [pc, #156]	@ (800241c <HAL_GPIO_Init+0x310>)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002384:	4b25      	ldr	r3, [pc, #148]	@ (800241c <HAL_GPIO_Init+0x310>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023a8:	4a1c      	ldr	r2, [pc, #112]	@ (800241c <HAL_GPIO_Init+0x310>)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ae:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <HAL_GPIO_Init+0x310>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023d2:	4a12      	ldr	r2, [pc, #72]	@ (800241c <HAL_GPIO_Init+0x310>)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f47f ae97 	bne.w	800211c <HAL_GPIO_Init+0x10>
  }
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000
 8002404:	48000400 	.word	0x48000400
 8002408:	48000800 	.word	0x48000800
 800240c:	48000c00 	.word	0x48000c00
 8002410:	48001000 	.word	0x48001000
 8002414:	48001400 	.word	0x48001400
 8002418:	48001800 	.word	0x48001800
 800241c:	40010400 	.word	0x40010400

08002420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
 800242c:	4613      	mov	r3, r2
 800242e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002430:	787b      	ldrb	r3, [r7, #1]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800243c:	e002      	b.n	8002444 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43d9      	mvns	r1, r3
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	400b      	ands	r3, r1
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800248a:	af00      	add	r7, sp, #0
 800248c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002490:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002494:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f001 b83a 	b.w	800351e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 816f 	beq.w	800279e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024c0:	4bb5      	ldr	r3, [pc, #724]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d00c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024cc:	4bb2      	ldr	r3, [pc, #712]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d15c      	bne.n	8002592 <HAL_RCC_OscConfig+0x10e>
 80024d8:	4baf      	ldr	r3, [pc, #700]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e4:	d155      	bne.n	8002592 <HAL_RCC_OscConfig+0x10e>
 80024e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ea:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_RCC_OscConfig+0x94>
 8002512:	4ba1      	ldr	r3, [pc, #644]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	e015      	b.n	8002544 <HAL_RCC_OscConfig+0xc0>
 8002518:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800251c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800252c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002530:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002534:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002540:	4b95      	ldr	r3, [pc, #596]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002548:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800254c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002550:	fa92 f2a2 	rbit	r2, r2
 8002554:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002558:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800255c:	fab2 f282 	clz	r2, r2
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f042 0220 	orr.w	r2, r2, #32
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f002 021f 	and.w	r2, r2, #31
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8111 	beq.w	800279c <HAL_RCC_OscConfig+0x318>
 800257a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 8108 	bne.w	800279c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	f000 bfc6 	b.w	800351e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002596:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x12e>
 80025a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a7b      	ldr	r2, [pc, #492]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e036      	b.n	8002620 <HAL_RCC_OscConfig+0x19c>
 80025b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x158>
 80025c2:	4b75      	ldr	r3, [pc, #468]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a74      	ldr	r2, [pc, #464]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80025c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b72      	ldr	r3, [pc, #456]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a71      	ldr	r2, [pc, #452]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80025d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e021      	b.n	8002620 <HAL_RCC_OscConfig+0x19c>
 80025dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x184>
 80025ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a69      	ldr	r2, [pc, #420]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b67      	ldr	r3, [pc, #412]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a66      	ldr	r2, [pc, #408]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0x19c>
 8002608:	4b63      	ldr	r3, [pc, #396]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a62      	ldr	r2, [pc, #392]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b60      	ldr	r3, [pc, #384]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a5f      	ldr	r2, [pc, #380]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800261e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002620:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002624:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d059      	beq.n	80026e4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fa9e 	bl	8000b70 <HAL_GetTick>
 8002634:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800263a:	f7fe fa99 	bl	8000b70 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	@ 0x64
 8002648:	d902      	bls.n	8002650 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	f000 bf67 	b.w	800351e <HAL_RCC_OscConfig+0x109a>
 8002650:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002654:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002664:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d102      	bne.n	8002682 <HAL_RCC_OscConfig+0x1fe>
 800267c:	4b46      	ldr	r3, [pc, #280]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x22a>
 8002682:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002686:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002696:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800269a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800269e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80026aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026b2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80026b6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80026ba:	fa92 f2a2 	rbit	r2, r2
 80026be:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80026c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80026c6:	fab2 f282 	clz	r2, r2
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f042 0220 	orr.w	r2, r2, #32
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	f002 021f 	and.w	r2, r2, #31
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f202 	lsl.w	r2, r1, r2
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ab      	beq.n	800263a <HAL_RCC_OscConfig+0x1b6>
 80026e2:	e05c      	b.n	800279e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fa44 	bl	8000b70 <HAL_GetTick>
 80026e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ee:	f7fe fa3f 	bl	8000b70 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d902      	bls.n	8002704 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	f000 bf0d 	b.w	800351e <HAL_RCC_OscConfig+0x109a>
 8002704:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002708:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002718:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d102      	bne.n	8002736 <HAL_RCC_OscConfig+0x2b2>
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	e015      	b.n	8002762 <HAL_RCC_OscConfig+0x2de>
 8002736:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800273a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800274a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800274e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002752:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800275e:	4b0e      	ldr	r3, [pc, #56]	@ (8002798 <HAL_RCC_OscConfig+0x314>)
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002766:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800276a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800276e:	fa92 f2a2 	rbit	r2, r2
 8002772:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002776:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800277a:	fab2 f282 	clz	r2, r2
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f042 0220 	orr.w	r2, r2, #32
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f002 021f 	and.w	r2, r2, #31
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f202 	lsl.w	r2, r1, r2
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ab      	bne.n	80026ee <HAL_RCC_OscConfig+0x26a>
 8002796:	e002      	b.n	800279e <HAL_RCC_OscConfig+0x31a>
 8002798:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 817f 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027b4:	4ba7      	ldr	r3, [pc, #668]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00c      	beq.n	80027da <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027c0:	4ba4      	ldr	r3, [pc, #656]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d173      	bne.n	80028b4 <HAL_RCC_OscConfig+0x430>
 80027cc:	4ba1      	ldr	r3, [pc, #644]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80027d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027d8:	d16c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x430>
 80027da:	2302      	movs	r3, #2
 80027dc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80027ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d102      	bne.n	800280a <HAL_RCC_OscConfig+0x386>
 8002804:	4b93      	ldr	r3, [pc, #588]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	e013      	b.n	8002832 <HAL_RCC_OscConfig+0x3ae>
 800280a:	2302      	movs	r3, #2
 800280c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800281c:	2302      	movs	r3, #2
 800281e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002822:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800282e:	4b89      	ldr	r3, [pc, #548]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	2202      	movs	r2, #2
 8002834:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002838:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800283c:	fa92 f2a2 	rbit	r2, r2
 8002840:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002844:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f042 0220 	orr.w	r2, r2, #32
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f002 021f 	and.w	r2, r2, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCC_OscConfig+0x3f6>
 8002864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002868:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d002      	beq.n	800287a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	f000 be52 	b.w	800351e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b76      	ldr	r3, [pc, #472]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002886:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	21f8      	movs	r1, #248	@ 0xf8
 8002890:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002898:	fa91 f1a1 	rbit	r1, r1
 800289c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80028a0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80028a4:	fab1 f181 	clz	r1, r1
 80028a8:	b2c9      	uxtb	r1, r1
 80028aa:	408b      	lsls	r3, r1
 80028ac:	4969      	ldr	r1, [pc, #420]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b2:	e0fe      	b.n	8002ab2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8088 	beq.w	80029d6 <HAL_RCC_OscConfig+0x552>
 80028c6:	2301      	movs	r3, #1
 80028c8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80028d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	461a      	mov	r2, r3
 80028ee:	2301      	movs	r3, #1
 80028f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe f93d 	bl	8000b70 <HAL_GetTick>
 80028f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fc:	f7fe f938 	bl	8000b70 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d902      	bls.n	8002912 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	f000 be06 	b.w	800351e <HAL_RCC_OscConfig+0x109a>
 8002912:	2302      	movs	r3, #2
 8002914:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002924:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d102      	bne.n	8002942 <HAL_RCC_OscConfig+0x4be>
 800293c:	4b45      	ldr	r3, [pc, #276]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	e013      	b.n	800296a <HAL_RCC_OscConfig+0x4e6>
 8002942:	2302      	movs	r3, #2
 8002944:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002954:	2302      	movs	r3, #2
 8002956:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800295a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002966:	4b3b      	ldr	r3, [pc, #236]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	2202      	movs	r2, #2
 800296c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002970:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002974:	fa92 f2a2 	rbit	r2, r2
 8002978:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800297c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002980:	fab2 f282 	clz	r2, r2
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f042 0220 	orr.w	r2, r2, #32
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f002 021f 	and.w	r2, r2, #31
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f202 	lsl.w	r2, r1, r2
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0af      	beq.n	80028fc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	21f8      	movs	r1, #248	@ 0xf8
 80029b2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80029ba:	fa91 f1a1 	rbit	r1, r1
 80029be:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80029c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80029c6:	fab1 f181 	clz	r1, r1
 80029ca:	b2c9      	uxtb	r1, r1
 80029cc:	408b      	lsls	r3, r1
 80029ce:	4921      	ldr	r1, [pc, #132]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	e06d      	b.n	8002ab2 <HAL_RCC_OscConfig+0x62e>
 80029d6:	2301      	movs	r3, #1
 80029d8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80029e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029f6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	461a      	mov	r2, r3
 80029fe:	2300      	movs	r3, #0
 8002a00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe f8b5 	bl	8000b70 <HAL_GetTick>
 8002a06:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7fe f8b0 	bl	8000b70 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d902      	bls.n	8002a22 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	f000 bd7e 	b.w	800351e <HAL_RCC_OscConfig+0x109a>
 8002a22:	2302      	movs	r3, #2
 8002a24:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002a34:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <HAL_RCC_OscConfig+0x5d4>
 8002a4c:	4b01      	ldr	r3, [pc, #4]	@ (8002a54 <HAL_RCC_OscConfig+0x5d0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	e016      	b.n	8002a80 <HAL_RCC_OscConfig+0x5fc>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a70:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a7c:	4bbf      	ldr	r3, [pc, #764]	@ (8002d7c <HAL_RCC_OscConfig+0x8f8>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	2202      	movs	r2, #2
 8002a82:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002a86:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002a8a:	fa92 f2a2 	rbit	r2, r2
 8002a8e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002a92:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ac      	bne.n	8002a0c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8113 	beq.w	8002cee <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002acc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d07c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x74e>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002aea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	4ba2      	ldr	r3, [pc, #648]	@ (8002d80 <HAL_RCC_OscConfig+0x8fc>)
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	461a      	mov	r2, r3
 8002afe:	2301      	movs	r3, #1
 8002b00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7fe f835 	bl	8000b70 <HAL_GetTick>
 8002b06:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0c:	f7fe f830 	bl	8000b70 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d902      	bls.n	8002b22 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	f000 bcfe 	b.w	800351e <HAL_RCC_OscConfig+0x109a>
 8002b22:	2302      	movs	r3, #2
 8002b24:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b2c:	fa93 f2a3 	rbit	r2, r3
 8002b30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b34:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b42:	2202      	movs	r2, #2
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	fa93 f2a3 	rbit	r2, r3
 8002b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b66:	2202      	movs	r2, #2
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	fa93 f2a3 	rbit	r2, r3
 8002b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002b80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	4b7e      	ldr	r3, [pc, #504]	@ (8002d7c <HAL_RCC_OscConfig+0x8f8>)
 8002b84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b8e:	2102      	movs	r1, #2
 8002b90:	6019      	str	r1, [r3, #0]
 8002b92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f1a3 	rbit	r1, r3
 8002ba0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ba8:	6019      	str	r1, [r3, #0]
  return result;
 8002baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d09d      	beq.n	8002b0c <HAL_RCC_OscConfig+0x688>
 8002bd0:	e08d      	b.n	8002cee <HAL_RCC_OscConfig+0x86a>
 8002bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fa93 f2a3 	rbit	r2, r3
 8002bec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002bf4:	601a      	str	r2, [r3, #0]
  return result;
 8002bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002bfe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	4b5d      	ldr	r3, [pc, #372]	@ (8002d80 <HAL_RCC_OscConfig+0x8fc>)
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2300      	movs	r3, #0
 8002c12:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fd ffac 	bl	8000b70 <HAL_GetTick>
 8002c18:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1e:	f7fd ffa7 	bl	8000b70 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	f000 bc75 	b.w	800351e <HAL_RCC_OscConfig+0x109a>
 8002c34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c38:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c44:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c52:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c60:	2202      	movs	r2, #2
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	fa93 f2a3 	rbit	r2, r3
 8002c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c76:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c80:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c84:	2202      	movs	r2, #2
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	fa93 f2a3 	rbit	r2, r3
 8002c96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c9a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002c9e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	4b36      	ldr	r3, [pc, #216]	@ (8002d7c <HAL_RCC_OscConfig+0x8f8>)
 8002ca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cac:	2102      	movs	r1, #2
 8002cae:	6019      	str	r1, [r3, #0]
 8002cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fa93 f1a3 	rbit	r1, r3
 8002cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cc6:	6019      	str	r1, [r3, #0]
  return result;
 8002cc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ccc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d197      	bne.n	8002c1e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 81a5 	beq.w	800304e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d7c <HAL_RCC_OscConfig+0x8f8>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d116      	bne.n	8002d44 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <HAL_RCC_OscConfig+0x8f8>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <HAL_RCC_OscConfig+0x8f8>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d20:	61d3      	str	r3, [r2, #28]
 8002d22:	4b16      	ldr	r3, [pc, #88]	@ (8002d7c <HAL_RCC_OscConfig+0x8f8>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d3c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <HAL_RCC_OscConfig+0x900>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d121      	bne.n	8002d94 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <HAL_RCC_OscConfig+0x900>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0b      	ldr	r2, [pc, #44]	@ (8002d84 <HAL_RCC_OscConfig+0x900>)
 8002d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5c:	f7fd ff08 	bl	8000b70 <HAL_GetTick>
 8002d60:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	e010      	b.n	8002d88 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7fd ff03 	bl	8000b70 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	@ 0x64
 8002d74:	d908      	bls.n	8002d88 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e3d1      	b.n	800351e <HAL_RCC_OscConfig+0x109a>
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	10908120 	.word	0x10908120
 8002d84:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	4b8d      	ldr	r3, [pc, #564]	@ (8002fc0 <HAL_RCC_OscConfig+0xb3c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0e8      	beq.n	8002d66 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x92e>
 8002da4:	4b87      	ldr	r3, [pc, #540]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4a86      	ldr	r2, [pc, #536]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6213      	str	r3, [r2, #32]
 8002db0:	e035      	b.n	8002e1e <HAL_RCC_OscConfig+0x99a>
 8002db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x958>
 8002dc2:	4b80      	ldr	r3, [pc, #512]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a7f      	ldr	r2, [pc, #508]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6213      	str	r3, [r2, #32]
 8002dce:	4b7d      	ldr	r3, [pc, #500]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4a7c      	ldr	r2, [pc, #496]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	6213      	str	r3, [r2, #32]
 8002dda:	e020      	b.n	8002e1e <HAL_RCC_OscConfig+0x99a>
 8002ddc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d10c      	bne.n	8002e06 <HAL_RCC_OscConfig+0x982>
 8002dec:	4b75      	ldr	r3, [pc, #468]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a74      	ldr	r2, [pc, #464]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002df2:	f043 0304 	orr.w	r3, r3, #4
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	4b72      	ldr	r3, [pc, #456]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4a71      	ldr	r2, [pc, #452]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6213      	str	r3, [r2, #32]
 8002e04:	e00b      	b.n	8002e1e <HAL_RCC_OscConfig+0x99a>
 8002e06:	4b6f      	ldr	r3, [pc, #444]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	6213      	str	r3, [r2, #32]
 8002e12:	4b6c      	ldr	r3, [pc, #432]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4a6b      	ldr	r2, [pc, #428]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002e18:	f023 0304 	bic.w	r3, r3, #4
 8002e1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8081 	beq.w	8002f32 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fd fe9e 	bl	8000b70 <HAL_GetTick>
 8002e34:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	e00b      	b.n	8002e52 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fd fe99 	bl	8000b70 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e365      	b.n	800351e <HAL_RCC_OscConfig+0x109a>
 8002e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e56:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e62:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e70:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e7a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002e7e:	2202      	movs	r2, #2
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e86:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	fa93 f2a3 	rbit	r2, r3
 8002e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e94:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002e98:	601a      	str	r2, [r3, #0]
  return result;
 8002e9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e9e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ea2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f043 0302 	orr.w	r3, r3, #2
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d102      	bne.n	8002ebe <HAL_RCC_OscConfig+0xa3a>
 8002eb8:	4b42      	ldr	r3, [pc, #264]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	e013      	b.n	8002ee6 <HAL_RCC_OscConfig+0xa62>
 8002ebe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ece:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002edc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	4b38      	ldr	r3, [pc, #224]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002eea:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002eee:	2102      	movs	r1, #2
 8002ef0:	6011      	str	r1, [r2, #0]
 8002ef2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ef6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	fa92 f1a2 	rbit	r1, r2
 8002f00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f04:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002f08:	6011      	str	r1, [r2, #0]
  return result;
 8002f0a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f0e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	fab2 f282 	clz	r2, r2
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f002 021f 	and.w	r2, r2, #31
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d084      	beq.n	8002e3a <HAL_RCC_OscConfig+0x9b6>
 8002f30:	e083      	b.n	800303a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f32:	f7fd fe1d 	bl	8000b70 <HAL_GetTick>
 8002f36:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7fd fe18 	bl	8000b70 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e2e4      	b.n	800351e <HAL_RCC_OscConfig+0x109a>
 8002f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f58:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f64:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f72:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002f80:	2202      	movs	r2, #2
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f88:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f96:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002f9a:	601a      	str	r2, [r3, #0]
  return result;
 8002f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002fa4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d106      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xb44>
 8002fba:	4b02      	ldr	r3, [pc, #8]	@ (8002fc4 <HAL_RCC_OscConfig+0xb40>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	e017      	b.n	8002ff0 <HAL_RCC_OscConfig+0xb6c>
 8002fc0:	40007000 	.word	0x40007000
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fcc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	fa93 f2a3 	rbit	r2, r3
 8002fe2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	4bb3      	ldr	r3, [pc, #716]	@ (80032bc <HAL_RCC_OscConfig+0xe38>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ff4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	6011      	str	r1, [r2, #0]
 8002ffc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003000:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	fa92 f1a2 	rbit	r1, r2
 800300a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800300e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003012:	6011      	str	r1, [r2, #0]
  return result;
 8003014:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003018:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	fab2 f282 	clz	r2, r2
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	f002 021f 	and.w	r2, r2, #31
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f202 	lsl.w	r2, r1, r2
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d180      	bne.n	8002f3c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800303a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003042:	4b9e      	ldr	r3, [pc, #632]	@ (80032bc <HAL_RCC_OscConfig+0xe38>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	4a9d      	ldr	r2, [pc, #628]	@ (80032bc <HAL_RCC_OscConfig+0xe38>)
 8003048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003052:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 825e 	beq.w	800351c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003060:	4b96      	ldr	r3, [pc, #600]	@ (80032bc <HAL_RCC_OscConfig+0xe38>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	f000 821f 	beq.w	80034ac <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003072:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b02      	cmp	r3, #2
 800307c:	f040 8170 	bne.w	8003360 <HAL_RCC_OscConfig+0xedc>
 8003080:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003084:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003088:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800308c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003092:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	fa93 f2a3 	rbit	r2, r3
 800309c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80030a4:	601a      	str	r2, [r3, #0]
  return result;
 80030a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80030ae:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	461a      	mov	r2, r3
 80030c2:	2300      	movs	r3, #0
 80030c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fd fd53 	bl	8000b70 <HAL_GetTick>
 80030ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ce:	e009      	b.n	80030e4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fd fd4e 	bl	8000b70 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e21c      	b.n	800351e <HAL_RCC_OscConfig+0x109a>
 80030e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80030ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fa93 f2a3 	rbit	r2, r3
 8003100:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003104:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003108:	601a      	str	r2, [r3, #0]
  return result;
 800310a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800310e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003112:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d102      	bne.n	800312e <HAL_RCC_OscConfig+0xcaa>
 8003128:	4b64      	ldr	r3, [pc, #400]	@ (80032bc <HAL_RCC_OscConfig+0xe38>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	e027      	b.n	800317e <HAL_RCC_OscConfig+0xcfa>
 800312e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003132:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003136:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800313a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003140:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800314e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003158:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800315c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003166:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003174:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	4b50      	ldr	r3, [pc, #320]	@ (80032bc <HAL_RCC_OscConfig+0xe38>)
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003182:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003186:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800318a:	6011      	str	r1, [r2, #0]
 800318c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003190:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	fa92 f1a2 	rbit	r1, r2
 800319a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800319e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80031a2:	6011      	str	r1, [r2, #0]
  return result;
 80031a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031a8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	fab2 f282 	clz	r2, r2
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f042 0220 	orr.w	r2, r2, #32
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	f002 021f 	and.w	r2, r2, #31
 80031be:	2101      	movs	r1, #1
 80031c0:	fa01 f202 	lsl.w	r2, r1, r2
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d182      	bne.n	80030d0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ca:	4b3c      	ldr	r3, [pc, #240]	@ (80032bc <HAL_RCC_OscConfig+0xe38>)
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	f023 020f 	bic.w	r2, r3, #15
 80031d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	4937      	ldr	r1, [pc, #220]	@ (80032bc <HAL_RCC_OscConfig+0xe38>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80031e4:	4b35      	ldr	r3, [pc, #212]	@ (80032bc <HAL_RCC_OscConfig+0xe38>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80031ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a19      	ldr	r1, [r3, #32]
 80031f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	430b      	orrs	r3, r1
 8003206:	492d      	ldr	r1, [pc, #180]	@ (80032bc <HAL_RCC_OscConfig+0xe38>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
 800320c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003210:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003214:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800321e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	fa93 f2a3 	rbit	r2, r3
 8003228:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800322c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003230:	601a      	str	r2, [r3, #0]
  return result;
 8003232:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003236:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800323a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003246:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	461a      	mov	r2, r3
 800324e:	2301      	movs	r3, #1
 8003250:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7fd fc8d 	bl	8000b70 <HAL_GetTick>
 8003256:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800325a:	e009      	b.n	8003270 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325c:	f7fd fc88 	bl	8000b70 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e156      	b.n	800351e <HAL_RCC_OscConfig+0x109a>
 8003270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003274:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003278:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800327c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003282:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fa93 f2a3 	rbit	r2, r3
 800328c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003290:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003294:	601a      	str	r2, [r3, #0]
  return result;
 8003296:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800329a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800329e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d105      	bne.n	80032c0 <HAL_RCC_OscConfig+0xe3c>
 80032b4:	4b01      	ldr	r3, [pc, #4]	@ (80032bc <HAL_RCC_OscConfig+0xe38>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	e02a      	b.n	8003310 <HAL_RCC_OscConfig+0xe8c>
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
 80032c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032d2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f2a3 	rbit	r2, r3
 80032dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ea:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80032ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	fa93 f2a3 	rbit	r2, r3
 8003302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003306:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	4b86      	ldr	r3, [pc, #536]	@ (8003528 <HAL_RCC_OscConfig+0x10a4>)
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003314:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003318:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800331c:	6011      	str	r1, [r2, #0]
 800331e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003322:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	fa92 f1a2 	rbit	r1, r2
 800332c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003330:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003334:	6011      	str	r1, [r2, #0]
  return result;
 8003336:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800333a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	fab2 f282 	clz	r2, r2
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f042 0220 	orr.w	r2, r2, #32
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	f002 021f 	and.w	r2, r2, #31
 8003350:	2101      	movs	r1, #1
 8003352:	fa01 f202 	lsl.w	r2, r1, r2
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	f43f af7f 	beq.w	800325c <HAL_RCC_OscConfig+0xdd8>
 800335e:	e0dd      	b.n	800351c <HAL_RCC_OscConfig+0x1098>
 8003360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003364:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003368:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800336c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003372:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	fa93 f2a3 	rbit	r2, r3
 800337c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003380:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003384:	601a      	str	r2, [r3, #0]
  return result;
 8003386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800338a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800338e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800339a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	461a      	mov	r2, r3
 80033a2:	2300      	movs	r3, #0
 80033a4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a6:	f7fd fbe3 	bl	8000b70 <HAL_GetTick>
 80033aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ae:	e009      	b.n	80033c4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fd fbde 	bl	8000b70 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e0ac      	b.n	800351e <HAL_RCC_OscConfig+0x109a>
 80033c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80033cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	fa93 f2a3 	rbit	r2, r3
 80033e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80033e8:	601a      	str	r2, [r3, #0]
  return result;
 80033ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80033f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	d102      	bne.n	800340e <HAL_RCC_OscConfig+0xf8a>
 8003408:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_RCC_OscConfig+0x10a4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	e027      	b.n	800345e <HAL_RCC_OscConfig+0xfda>
 800340e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003412:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003416:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800341a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003420:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800342e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003438:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800343c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003446:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f2a3 	rbit	r2, r3
 8003450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003454:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	4b33      	ldr	r3, [pc, #204]	@ (8003528 <HAL_RCC_OscConfig+0x10a4>)
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003462:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003466:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800346a:	6011      	str	r1, [r2, #0]
 800346c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003470:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	fa92 f1a2 	rbit	r1, r2
 800347a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800347e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003482:	6011      	str	r1, [r2, #0]
  return result;
 8003484:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003488:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	fab2 f282 	clz	r2, r2
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	2101      	movs	r1, #1
 80034a0:	fa01 f202 	lsl.w	r2, r1, r2
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d182      	bne.n	80033b0 <HAL_RCC_OscConfig+0xf2c>
 80034aa:	e037      	b.n	800351c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e02e      	b.n	800351e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034c0:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_RCC_OscConfig+0x10a4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80034c8:	4b17      	ldr	r3, [pc, #92]	@ (8003528 <HAL_RCC_OscConfig+0x10a4>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80034d4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80034d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d117      	bne.n	8003518 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80034e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80034ec:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d10b      	bne.n	8003518 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003504:	f003 020f 	and.w	r2, r3, #15
 8003508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800350c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000

0800352c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b09e      	sub	sp, #120	@ 0x78
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e162      	b.n	800380a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b90      	ldr	r3, [pc, #576]	@ (8003788 <HAL_RCC_ClockConfig+0x25c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d910      	bls.n	8003574 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b8d      	ldr	r3, [pc, #564]	@ (8003788 <HAL_RCC_ClockConfig+0x25c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 0207 	bic.w	r2, r3, #7
 800355a:	498b      	ldr	r1, [pc, #556]	@ (8003788 <HAL_RCC_ClockConfig+0x25c>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b89      	ldr	r3, [pc, #548]	@ (8003788 <HAL_RCC_ClockConfig+0x25c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e14a      	b.n	800380a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b82      	ldr	r3, [pc, #520]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	497f      	ldr	r1, [pc, #508]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80dc 	beq.w	8003758 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d13c      	bne.n	8003622 <HAL_RCC_ClockConfig+0xf6>
 80035a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035ac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80035b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d102      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xa6>
 80035cc:	4b6f      	ldr	r3, [pc, #444]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	e00f      	b.n	80035f2 <HAL_RCC_ClockConfig+0xc6>
 80035d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	667b      	str	r3, [r7, #100]	@ 0x64
 80035e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80035e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035ee:	4b67      	ldr	r3, [pc, #412]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035fa:	fa92 f2a2 	rbit	r2, r2
 80035fe:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003600:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003602:	fab2 f282 	clz	r2, r2
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	f042 0220 	orr.w	r2, r2, #32
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f002 021f 	and.w	r2, r2, #31
 8003612:	2101      	movs	r1, #1
 8003614:	fa01 f202 	lsl.w	r2, r1, r2
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d17b      	bne.n	8003716 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0f3      	b.n	800380a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d13c      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x178>
 800362a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800362e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d102      	bne.n	8003654 <HAL_RCC_ClockConfig+0x128>
 800364e:	4b4f      	ldr	r3, [pc, #316]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	e00f      	b.n	8003674 <HAL_RCC_ClockConfig+0x148>
 8003654:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003658:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	647b      	str	r3, [r7, #68]	@ 0x44
 8003662:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003666:	643b      	str	r3, [r7, #64]	@ 0x40
 8003668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003670:	4b46      	ldr	r3, [pc, #280]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003678:	63ba      	str	r2, [r7, #56]	@ 0x38
 800367a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800367c:	fa92 f2a2 	rbit	r2, r2
 8003680:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	f042 0220 	orr.w	r2, r2, #32
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	f002 021f 	and.w	r2, r2, #31
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d13a      	bne.n	8003716 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0b2      	b.n	800380a <HAL_RCC_ClockConfig+0x2de>
 80036a4:	2302      	movs	r3, #2
 80036a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d102      	bne.n	80036cc <HAL_RCC_ClockConfig+0x1a0>
 80036c6:	4b31      	ldr	r3, [pc, #196]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	e00d      	b.n	80036e8 <HAL_RCC_ClockConfig+0x1bc>
 80036cc:	2302      	movs	r3, #2
 80036ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d8:	2302      	movs	r3, #2
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	61fb      	str	r3, [r7, #28]
 80036e4:	4b29      	ldr	r3, [pc, #164]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	2202      	movs	r2, #2
 80036ea:	61ba      	str	r2, [r7, #24]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	fa92 f2a2 	rbit	r2, r2
 80036f2:	617a      	str	r2, [r7, #20]
  return result;
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	fab2 f282 	clz	r2, r2
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	f042 0220 	orr.w	r2, r2, #32
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	f002 021f 	and.w	r2, r2, #31
 8003706:	2101      	movs	r1, #1
 8003708:	fa01 f202 	lsl.w	r2, r1, r2
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e079      	b.n	800380a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b1d      	ldr	r3, [pc, #116]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	491a      	ldr	r1, [pc, #104]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003728:	f7fd fa22 	bl	8000b70 <HAL_GetTick>
 800372c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fd fa1e 	bl	8000b70 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e061      	b.n	800380a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b11      	ldr	r3, [pc, #68]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003758:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <HAL_RCC_ClockConfig+0x25c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d214      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b08      	ldr	r3, [pc, #32]	@ (8003788 <HAL_RCC_ClockConfig+0x25c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 0207 	bic.w	r2, r3, #7
 800376e:	4906      	ldr	r1, [pc, #24]	@ (8003788 <HAL_RCC_ClockConfig+0x25c>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b04      	ldr	r3, [pc, #16]	@ (8003788 <HAL_RCC_ClockConfig+0x25c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e040      	b.n	800380a <HAL_RCC_ClockConfig+0x2de>
 8003788:	40022000 	.word	0x40022000
 800378c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379c:	4b1d      	ldr	r3, [pc, #116]	@ (8003814 <HAL_RCC_ClockConfig+0x2e8>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	491a      	ldr	r1, [pc, #104]	@ (8003814 <HAL_RCC_ClockConfig+0x2e8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ba:	4b16      	ldr	r3, [pc, #88]	@ (8003814 <HAL_RCC_ClockConfig+0x2e8>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4912      	ldr	r1, [pc, #72]	@ (8003814 <HAL_RCC_ClockConfig+0x2e8>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037ce:	f000 f829 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 80037d2:	4601      	mov	r1, r0
 80037d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <HAL_RCC_ClockConfig+0x2e8>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037dc:	22f0      	movs	r2, #240	@ 0xf0
 80037de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	fa92 f2a2 	rbit	r2, r2
 80037e6:	60fa      	str	r2, [r7, #12]
  return result;
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	fab2 f282 	clz	r2, r2
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	40d3      	lsrs	r3, r2
 80037f2:	4a09      	ldr	r2, [pc, #36]	@ (8003818 <HAL_RCC_ClockConfig+0x2ec>)
 80037f4:	5cd3      	ldrb	r3, [r2, r3]
 80037f6:	fa21 f303 	lsr.w	r3, r1, r3
 80037fa:	4a08      	ldr	r2, [pc, #32]	@ (800381c <HAL_RCC_ClockConfig+0x2f0>)
 80037fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80037fe:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <HAL_RCC_ClockConfig+0x2f4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd f8ae 	bl	8000964 <HAL_InitTick>
  
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3778      	adds	r7, #120	@ 0x78
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	08007df4 	.word	0x08007df4
 800381c:	20000000 	.word	0x20000000
 8003820:	20000004 	.word	0x20000004

08003824 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800383e:	4b1f      	ldr	r3, [pc, #124]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b04      	cmp	r3, #4
 800384c:	d002      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x30>
 800384e:	2b08      	cmp	r3, #8
 8003850:	d003      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0x36>
 8003852:	e029      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003854:	4b1a      	ldr	r3, [pc, #104]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003856:	613b      	str	r3, [r7, #16]
      break;
 8003858:	e029      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	0c9b      	lsrs	r3, r3, #18
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	4a18      	ldr	r2, [pc, #96]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003868:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x98>)
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	4a15      	ldr	r2, [pc, #84]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003872:	5cd3      	ldrb	r3, [r2, r3]
 8003874:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003880:	4a0f      	ldr	r2, [pc, #60]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	fbb2 f2f3 	udiv	r2, r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	e007      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003892:	4a0b      	ldr	r2, [pc, #44]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	fbb2 f2f3 	udiv	r2, r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	fb02 f303 	mul.w	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	613b      	str	r3, [r7, #16]
      break;
 80038a6:	e002      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038aa:	613b      	str	r3, [r7, #16]
      break;
 80038ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ae:	693b      	ldr	r3, [r7, #16]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	371c      	adds	r7, #28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	40021000 	.word	0x40021000
 80038c0:	007a1200 	.word	0x007a1200
 80038c4:	08007e0c 	.word	0x08007e0c
 80038c8:	08007e1c 	.word	0x08007e1c

080038cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d0:	4b03      	ldr	r3, [pc, #12]	@ (80038e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000000 	.word	0x20000000

080038e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80038ea:	f7ff ffef 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 80038ee:	4601      	mov	r1, r0
 80038f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003920 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038f8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80038fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	fa92 f2a2 	rbit	r2, r2
 8003904:	603a      	str	r2, [r7, #0]
  return result;
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	fab2 f282 	clz	r2, r2
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	40d3      	lsrs	r3, r2
 8003910:	4a04      	ldr	r2, [pc, #16]	@ (8003924 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003912:	5cd3      	ldrb	r3, [r2, r3]
 8003914:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	08007e04 	.word	0x08007e04

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800392e:	f7ff ffcd 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 8003932:	4601      	mov	r1, r0
 8003934:	4b0b      	ldr	r3, [pc, #44]	@ (8003964 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800393c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003940:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	fa92 f2a2 	rbit	r2, r2
 8003948:	603a      	str	r2, [r7, #0]
  return result;
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	fab2 f282 	clz	r2, r2
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	40d3      	lsrs	r3, r2
 8003954:	4a04      	ldr	r2, [pc, #16]	@ (8003968 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	08007e04 	.word	0x08007e04

0800396c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	220f      	movs	r2, #15
 800397a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800397c:	4b12      	ldr	r3, [pc, #72]	@ (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0203 	and.w	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003988:	4b0f      	ldr	r3, [pc, #60]	@ (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003994:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039a0:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	08db      	lsrs	r3, r3, #3
 80039a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80039ae:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <HAL_RCC_GetClockConfig+0x60>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0207 	and.w	r2, r3, #7
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	601a      	str	r2, [r3, #0]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40022000 	.word	0x40022000

080039d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b092      	sub	sp, #72	@ 0x48
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80d4 	beq.w	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f4:	4b4e      	ldr	r3, [pc, #312]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10e      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a00:	4b4b      	ldr	r3, [pc, #300]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	4a4a      	ldr	r2, [pc, #296]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	61d3      	str	r3, [r2, #28]
 8003a0c:	4b48      	ldr	r3, [pc, #288]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	4b45      	ldr	r3, [pc, #276]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d118      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2a:	4b42      	ldr	r3, [pc, #264]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a41      	ldr	r2, [pc, #260]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a36:	f7fd f89b 	bl	8000b70 <HAL_GetTick>
 8003a3a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	e008      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3e:	f7fd f897 	bl	8000b70 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b64      	cmp	r3, #100	@ 0x64
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e1d6      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	4b38      	ldr	r3, [pc, #224]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a5c:	4b34      	ldr	r3, [pc, #208]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8084 	beq.w	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d07c      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b26      	ldr	r3, [pc, #152]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003aae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2300      	movs	r3, #0
 8003acc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ace:	4a18      	ldr	r2, [pc, #96]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d04b      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ade:	f7fd f847 	bl	8000b70 <HAL_GetTick>
 8003ae2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd f843 	bl	8000b70 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e180      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003afc:	2302      	movs	r3, #2
 8003afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b08:	2302      	movs	r3, #2
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	61fb      	str	r3, [r7, #28]
  return result;
 8003b14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f043 0302 	orr.w	r3, r3, #2
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d108      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b2a:	4b01      	ldr	r3, [pc, #4]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	e00d      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40007000 	.word	0x40007000
 8003b38:	10908100 	.word	0x10908100
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	4b9a      	ldr	r3, [pc, #616]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	613a      	str	r2, [r7, #16]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	fa92 f2a2 	rbit	r2, r2
 8003b56:	60fa      	str	r2, [r7, #12]
  return result;
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	fab2 f282 	clz	r2, r2
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	f002 021f 	and.w	r2, r2, #31
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0b7      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b76:	4b8f      	ldr	r3, [pc, #572]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	498c      	ldr	r1, [pc, #560]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b90:	4b88      	ldr	r3, [pc, #544]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	4a87      	ldr	r2, [pc, #540]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ba8:	4b82      	ldr	r3, [pc, #520]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bac:	f023 0203 	bic.w	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	497f      	ldr	r1, [pc, #508]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bc6:	4b7b      	ldr	r3, [pc, #492]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4978      	ldr	r1, [pc, #480]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003be4:	4b73      	ldr	r3, [pc, #460]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	4970      	ldr	r1, [pc, #448]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c02:	4b6c      	ldr	r3, [pc, #432]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	f023 0210 	bic.w	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	4969      	ldr	r1, [pc, #420]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c20:	4b64      	ldr	r3, [pc, #400]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	4961      	ldr	r1, [pc, #388]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	f023 0220 	bic.w	r2, r3, #32
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	495a      	ldr	r1, [pc, #360]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c5c:	4b55      	ldr	r3, [pc, #340]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	4952      	ldr	r1, [pc, #328]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	494b      	ldr	r1, [pc, #300]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c98:	4b46      	ldr	r3, [pc, #280]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	4943      	ldr	r1, [pc, #268]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	493c      	ldr	r1, [pc, #240]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cd4:	4b37      	ldr	r3, [pc, #220]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	4934      	ldr	r1, [pc, #208]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003cf2:	4b30      	ldr	r3, [pc, #192]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf6:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	492d      	ldr	r1, [pc, #180]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d10:	4b28      	ldr	r3, [pc, #160]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1c:	4925      	ldr	r1, [pc, #148]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d2e:	4b21      	ldr	r3, [pc, #132]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	491e      	ldr	r1, [pc, #120]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003d4c:	4b19      	ldr	r3, [pc, #100]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	4916      	ldr	r1, [pc, #88]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003d6a:	4b12      	ldr	r3, [pc, #72]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d76:	490f      	ldr	r1, [pc, #60]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d88:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d94:	4907      	ldr	r1, [pc, #28]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00c      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003da6:	4b03      	ldr	r3, [pc, #12]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003daa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	e002      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dba:	4913      	ldr	r1, [pc, #76]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd8:	490b      	ldr	r1, [pc, #44]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003dea:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df6:	4904      	ldr	r1, [pc, #16]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3748      	adds	r7, #72	@ 0x48
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000

08003e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e049      	b.n	8003eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fc fd20 	bl	8000878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f000 fa38 	bl	80042c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d001      	beq.n	8003ed4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e047      	b.n	8003f64 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a23      	ldr	r2, [pc, #140]	@ (8003f70 <HAL_TIM_Base_Start+0xb4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01d      	beq.n	8003f22 <HAL_TIM_Base_Start+0x66>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eee:	d018      	beq.n	8003f22 <HAL_TIM_Base_Start+0x66>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f74 <HAL_TIM_Base_Start+0xb8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_TIM_Base_Start+0x66>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1e      	ldr	r2, [pc, #120]	@ (8003f78 <HAL_TIM_Base_Start+0xbc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_TIM_Base_Start+0x66>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1c      	ldr	r2, [pc, #112]	@ (8003f7c <HAL_TIM_Base_Start+0xc0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_TIM_Base_Start+0x66>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1b      	ldr	r2, [pc, #108]	@ (8003f80 <HAL_TIM_Base_Start+0xc4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_TIM_Base_Start+0x66>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a19      	ldr	r2, [pc, #100]	@ (8003f84 <HAL_TIM_Base_Start+0xc8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d115      	bne.n	8003f4e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	4b17      	ldr	r3, [pc, #92]	@ (8003f88 <HAL_TIM_Base_Start+0xcc>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b06      	cmp	r3, #6
 8003f32:	d015      	beq.n	8003f60 <HAL_TIM_Base_Start+0xa4>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3a:	d011      	beq.n	8003f60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4c:	e008      	b.n	8003f60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0201 	orr.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e000      	b.n	8003f62 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40013400 	.word	0x40013400
 8003f80:	40014000 	.word	0x40014000
 8003f84:	40015000 	.word	0x40015000
 8003f88:	00010007 	.word	0x00010007

08003f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d001      	beq.n	8003fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e04f      	b.n	8004044 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a23      	ldr	r2, [pc, #140]	@ (8004050 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01d      	beq.n	8004002 <HAL_TIM_Base_Start_IT+0x76>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fce:	d018      	beq.n	8004002 <HAL_TIM_Base_Start_IT+0x76>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8004054 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <HAL_TIM_Base_Start_IT+0x76>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1e      	ldr	r2, [pc, #120]	@ (8004058 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_TIM_Base_Start_IT+0x76>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800405c <HAL_TIM_Base_Start_IT+0xd0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_TIM_Base_Start_IT+0x76>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8004060 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_TIM_Base_Start_IT+0x76>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a19      	ldr	r2, [pc, #100]	@ (8004064 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d115      	bne.n	800402e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	4b17      	ldr	r3, [pc, #92]	@ (8004068 <HAL_TIM_Base_Start_IT+0xdc>)
 800400a:	4013      	ands	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b06      	cmp	r3, #6
 8004012:	d015      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0xb4>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800401a:	d011      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402c:	e008      	b.n	8004040 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e000      	b.n	8004042 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004040:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800
 800405c:	40013400 	.word	0x40013400
 8004060:	40014000 	.word	0x40014000
 8004064:	40015000 	.word	0x40015000
 8004068:	00010007 	.word	0x00010007

0800406c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d020      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01b      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0202 	mvn.w	r2, #2
 80040a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8e4 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8d6 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f8e7 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d020      	beq.n	800411c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01b      	beq.n	800411c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0204 	mvn.w	r2, #4
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f8be 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f8b0 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f8c1 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d020      	beq.n	8004168 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01b      	beq.n	8004168 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0208 	mvn.w	r2, #8
 8004138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2204      	movs	r2, #4
 800413e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f898 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f88a 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f89b 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d020      	beq.n	80041b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01b      	beq.n	80041b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0210 	mvn.w	r2, #16
 8004184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2208      	movs	r2, #8
 800418a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f872 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 80041a0:	e005      	b.n	80041ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f864 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f875 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00c      	beq.n	80041d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0201 	mvn.w	r2, #1
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fc faa8 	bl	8000728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00c      	beq.n	80041fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f9a2 	bl	8004540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00c      	beq.n	8004220 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f99a 	bl	8004554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800423c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f834 	bl	80042ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0220 	mvn.w	r2, #32
 8004260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f962 	bl	800452c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a48      	ldr	r2, [pc, #288]	@ (80043f4 <TIM_Base_SetConfig+0x134>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042de:	d00f      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a45      	ldr	r2, [pc, #276]	@ (80043f8 <TIM_Base_SetConfig+0x138>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00b      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a44      	ldr	r2, [pc, #272]	@ (80043fc <TIM_Base_SetConfig+0x13c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a43      	ldr	r2, [pc, #268]	@ (8004400 <TIM_Base_SetConfig+0x140>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a42      	ldr	r2, [pc, #264]	@ (8004404 <TIM_Base_SetConfig+0x144>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d108      	bne.n	8004312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a37      	ldr	r2, [pc, #220]	@ (80043f4 <TIM_Base_SetConfig+0x134>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01f      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004320:	d01b      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a34      	ldr	r2, [pc, #208]	@ (80043f8 <TIM_Base_SetConfig+0x138>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d017      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a33      	ldr	r2, [pc, #204]	@ (80043fc <TIM_Base_SetConfig+0x13c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a32      	ldr	r2, [pc, #200]	@ (8004400 <TIM_Base_SetConfig+0x140>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00f      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a32      	ldr	r2, [pc, #200]	@ (8004408 <TIM_Base_SetConfig+0x148>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00b      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a31      	ldr	r2, [pc, #196]	@ (800440c <TIM_Base_SetConfig+0x14c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d007      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a30      	ldr	r2, [pc, #192]	@ (8004410 <TIM_Base_SetConfig+0x150>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d003      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a2b      	ldr	r2, [pc, #172]	@ (8004404 <TIM_Base_SetConfig+0x144>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d108      	bne.n	800436c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a18      	ldr	r2, [pc, #96]	@ (80043f4 <TIM_Base_SetConfig+0x134>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d013      	beq.n	80043c0 <TIM_Base_SetConfig+0x100>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a19      	ldr	r2, [pc, #100]	@ (8004400 <TIM_Base_SetConfig+0x140>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00f      	beq.n	80043c0 <TIM_Base_SetConfig+0x100>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a19      	ldr	r2, [pc, #100]	@ (8004408 <TIM_Base_SetConfig+0x148>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00b      	beq.n	80043c0 <TIM_Base_SetConfig+0x100>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a18      	ldr	r2, [pc, #96]	@ (800440c <TIM_Base_SetConfig+0x14c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d007      	beq.n	80043c0 <TIM_Base_SetConfig+0x100>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a17      	ldr	r2, [pc, #92]	@ (8004410 <TIM_Base_SetConfig+0x150>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_Base_SetConfig+0x100>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a12      	ldr	r2, [pc, #72]	@ (8004404 <TIM_Base_SetConfig+0x144>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d103      	bne.n	80043c8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d105      	bne.n	80043e6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f023 0201 	bic.w	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	611a      	str	r2, [r3, #16]
  }
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40013400 	.word	0x40013400
 8004404:	40015000 	.word	0x40015000
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400
 8004410:	40014800 	.word	0x40014800

08004414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004428:	2302      	movs	r3, #2
 800442a:	e06d      	b.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a30      	ldr	r2, [pc, #192]	@ (8004514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d009      	beq.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2f      	ldr	r2, [pc, #188]	@ (8004518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d004      	beq.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2d      	ldr	r2, [pc, #180]	@ (800451c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d108      	bne.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004470:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1e      	ldr	r2, [pc, #120]	@ (8004514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d01d      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a8:	d018      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004520 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004524 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a15      	ldr	r2, [pc, #84]	@ (8004518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a16      	ldr	r2, [pc, #88]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a11      	ldr	r2, [pc, #68]	@ (800451c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10c      	bne.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40013400 	.word	0x40013400
 800451c:	40015000 	.word	0x40015000
 8004520:	40000400 	.word	0x40000400
 8004524:	40000800 	.word	0x40000800
 8004528:	40014000 	.word	0x40014000

0800452c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e040      	b.n	80045fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fc f9a8 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2224      	movs	r2, #36	@ 0x24
 8004594:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f9fc 	bl	80049ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f825 	bl	8004604 <UART_SetConfig>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e01b      	b.n	80045fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fa7b 	bl	8004af0 <UART_CheckIdleState>
 80045fa:	4603      	mov	r3, r0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b92      	ldr	r3, [pc, #584]	@ (8004878 <UART_SetConfig+0x274>)
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	6979      	ldr	r1, [r7, #20]
 8004638:	430b      	orrs	r3, r1
 800463a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a80      	ldr	r2, [pc, #512]	@ (800487c <UART_SetConfig+0x278>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d120      	bne.n	80046c2 <UART_SetConfig+0xbe>
 8004680:	4b7f      	ldr	r3, [pc, #508]	@ (8004880 <UART_SetConfig+0x27c>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	2b03      	cmp	r3, #3
 800468a:	d817      	bhi.n	80046bc <UART_SetConfig+0xb8>
 800468c:	a201      	add	r2, pc, #4	@ (adr r2, 8004694 <UART_SetConfig+0x90>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046a5 	.word	0x080046a5
 8004698:	080046b1 	.word	0x080046b1
 800469c:	080046b7 	.word	0x080046b7
 80046a0:	080046ab 	.word	0x080046ab
 80046a4:	2301      	movs	r3, #1
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e0b5      	b.n	8004816 <UART_SetConfig+0x212>
 80046aa:	2302      	movs	r3, #2
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	e0b2      	b.n	8004816 <UART_SetConfig+0x212>
 80046b0:	2304      	movs	r3, #4
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e0af      	b.n	8004816 <UART_SetConfig+0x212>
 80046b6:	2308      	movs	r3, #8
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e0ac      	b.n	8004816 <UART_SetConfig+0x212>
 80046bc:	2310      	movs	r3, #16
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e0a9      	b.n	8004816 <UART_SetConfig+0x212>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a6f      	ldr	r2, [pc, #444]	@ (8004884 <UART_SetConfig+0x280>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d124      	bne.n	8004716 <UART_SetConfig+0x112>
 80046cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004880 <UART_SetConfig+0x27c>)
 80046ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046d8:	d011      	beq.n	80046fe <UART_SetConfig+0xfa>
 80046da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046de:	d817      	bhi.n	8004710 <UART_SetConfig+0x10c>
 80046e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046e4:	d011      	beq.n	800470a <UART_SetConfig+0x106>
 80046e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046ea:	d811      	bhi.n	8004710 <UART_SetConfig+0x10c>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <UART_SetConfig+0xf4>
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f4:	d006      	beq.n	8004704 <UART_SetConfig+0x100>
 80046f6:	e00b      	b.n	8004710 <UART_SetConfig+0x10c>
 80046f8:	2300      	movs	r3, #0
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e08b      	b.n	8004816 <UART_SetConfig+0x212>
 80046fe:	2302      	movs	r3, #2
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e088      	b.n	8004816 <UART_SetConfig+0x212>
 8004704:	2304      	movs	r3, #4
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e085      	b.n	8004816 <UART_SetConfig+0x212>
 800470a:	2308      	movs	r3, #8
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e082      	b.n	8004816 <UART_SetConfig+0x212>
 8004710:	2310      	movs	r3, #16
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e07f      	b.n	8004816 <UART_SetConfig+0x212>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a5b      	ldr	r2, [pc, #364]	@ (8004888 <UART_SetConfig+0x284>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d124      	bne.n	800476a <UART_SetConfig+0x166>
 8004720:	4b57      	ldr	r3, [pc, #348]	@ (8004880 <UART_SetConfig+0x27c>)
 8004722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004724:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004728:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800472c:	d011      	beq.n	8004752 <UART_SetConfig+0x14e>
 800472e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004732:	d817      	bhi.n	8004764 <UART_SetConfig+0x160>
 8004734:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004738:	d011      	beq.n	800475e <UART_SetConfig+0x15a>
 800473a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800473e:	d811      	bhi.n	8004764 <UART_SetConfig+0x160>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <UART_SetConfig+0x148>
 8004744:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004748:	d006      	beq.n	8004758 <UART_SetConfig+0x154>
 800474a:	e00b      	b.n	8004764 <UART_SetConfig+0x160>
 800474c:	2300      	movs	r3, #0
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e061      	b.n	8004816 <UART_SetConfig+0x212>
 8004752:	2302      	movs	r3, #2
 8004754:	77fb      	strb	r3, [r7, #31]
 8004756:	e05e      	b.n	8004816 <UART_SetConfig+0x212>
 8004758:	2304      	movs	r3, #4
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e05b      	b.n	8004816 <UART_SetConfig+0x212>
 800475e:	2308      	movs	r3, #8
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e058      	b.n	8004816 <UART_SetConfig+0x212>
 8004764:	2310      	movs	r3, #16
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e055      	b.n	8004816 <UART_SetConfig+0x212>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a47      	ldr	r2, [pc, #284]	@ (800488c <UART_SetConfig+0x288>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d124      	bne.n	80047be <UART_SetConfig+0x1ba>
 8004774:	4b42      	ldr	r3, [pc, #264]	@ (8004880 <UART_SetConfig+0x27c>)
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800477c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004780:	d011      	beq.n	80047a6 <UART_SetConfig+0x1a2>
 8004782:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004786:	d817      	bhi.n	80047b8 <UART_SetConfig+0x1b4>
 8004788:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800478c:	d011      	beq.n	80047b2 <UART_SetConfig+0x1ae>
 800478e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004792:	d811      	bhi.n	80047b8 <UART_SetConfig+0x1b4>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <UART_SetConfig+0x19c>
 8004798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800479c:	d006      	beq.n	80047ac <UART_SetConfig+0x1a8>
 800479e:	e00b      	b.n	80047b8 <UART_SetConfig+0x1b4>
 80047a0:	2300      	movs	r3, #0
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e037      	b.n	8004816 <UART_SetConfig+0x212>
 80047a6:	2302      	movs	r3, #2
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e034      	b.n	8004816 <UART_SetConfig+0x212>
 80047ac:	2304      	movs	r3, #4
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e031      	b.n	8004816 <UART_SetConfig+0x212>
 80047b2:	2308      	movs	r3, #8
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e02e      	b.n	8004816 <UART_SetConfig+0x212>
 80047b8:	2310      	movs	r3, #16
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e02b      	b.n	8004816 <UART_SetConfig+0x212>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a33      	ldr	r2, [pc, #204]	@ (8004890 <UART_SetConfig+0x28c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d124      	bne.n	8004812 <UART_SetConfig+0x20e>
 80047c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004880 <UART_SetConfig+0x27c>)
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047cc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80047d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047d4:	d011      	beq.n	80047fa <UART_SetConfig+0x1f6>
 80047d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047da:	d817      	bhi.n	800480c <UART_SetConfig+0x208>
 80047dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047e0:	d011      	beq.n	8004806 <UART_SetConfig+0x202>
 80047e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047e6:	d811      	bhi.n	800480c <UART_SetConfig+0x208>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <UART_SetConfig+0x1f0>
 80047ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047f0:	d006      	beq.n	8004800 <UART_SetConfig+0x1fc>
 80047f2:	e00b      	b.n	800480c <UART_SetConfig+0x208>
 80047f4:	2300      	movs	r3, #0
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e00d      	b.n	8004816 <UART_SetConfig+0x212>
 80047fa:	2302      	movs	r3, #2
 80047fc:	77fb      	strb	r3, [r7, #31]
 80047fe:	e00a      	b.n	8004816 <UART_SetConfig+0x212>
 8004800:	2304      	movs	r3, #4
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e007      	b.n	8004816 <UART_SetConfig+0x212>
 8004806:	2308      	movs	r3, #8
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e004      	b.n	8004816 <UART_SetConfig+0x212>
 800480c:	2310      	movs	r3, #16
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e001      	b.n	8004816 <UART_SetConfig+0x212>
 8004812:	2310      	movs	r3, #16
 8004814:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800481e:	d16b      	bne.n	80048f8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004820:	7ffb      	ldrb	r3, [r7, #31]
 8004822:	2b08      	cmp	r3, #8
 8004824:	d838      	bhi.n	8004898 <UART_SetConfig+0x294>
 8004826:	a201      	add	r2, pc, #4	@ (adr r2, 800482c <UART_SetConfig+0x228>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004851 	.word	0x08004851
 8004830:	08004859 	.word	0x08004859
 8004834:	08004861 	.word	0x08004861
 8004838:	08004899 	.word	0x08004899
 800483c:	08004867 	.word	0x08004867
 8004840:	08004899 	.word	0x08004899
 8004844:	08004899 	.word	0x08004899
 8004848:	08004899 	.word	0x08004899
 800484c:	0800486f 	.word	0x0800486f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004850:	f7ff f848 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 8004854:	61b8      	str	r0, [r7, #24]
        break;
 8004856:	e024      	b.n	80048a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004858:	f7ff f866 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 800485c:	61b8      	str	r0, [r7, #24]
        break;
 800485e:	e020      	b.n	80048a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004860:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <UART_SetConfig+0x290>)
 8004862:	61bb      	str	r3, [r7, #24]
        break;
 8004864:	e01d      	b.n	80048a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004866:	f7fe ffdd 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 800486a:	61b8      	str	r0, [r7, #24]
        break;
 800486c:	e019      	b.n	80048a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004872:	61bb      	str	r3, [r7, #24]
        break;
 8004874:	e015      	b.n	80048a2 <UART_SetConfig+0x29e>
 8004876:	bf00      	nop
 8004878:	efff69f3 	.word	0xefff69f3
 800487c:	40013800 	.word	0x40013800
 8004880:	40021000 	.word	0x40021000
 8004884:	40004400 	.word	0x40004400
 8004888:	40004800 	.word	0x40004800
 800488c:	40004c00 	.word	0x40004c00
 8004890:	40005000 	.word	0x40005000
 8004894:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	77bb      	strb	r3, [r7, #30]
        break;
 80048a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d073      	beq.n	8004990 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	005a      	lsls	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	441a      	add	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b0f      	cmp	r3, #15
 80048c2:	d916      	bls.n	80048f2 <UART_SetConfig+0x2ee>
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ca:	d212      	bcs.n	80048f2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f023 030f 	bic.w	r3, r3, #15
 80048d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	89fb      	ldrh	r3, [r7, #14]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	89fa      	ldrh	r2, [r7, #14]
 80048ee:	60da      	str	r2, [r3, #12]
 80048f0:	e04e      	b.n	8004990 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	77bb      	strb	r3, [r7, #30]
 80048f6:	e04b      	b.n	8004990 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048f8:	7ffb      	ldrb	r3, [r7, #31]
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d827      	bhi.n	800494e <UART_SetConfig+0x34a>
 80048fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004904 <UART_SetConfig+0x300>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004929 	.word	0x08004929
 8004908:	08004931 	.word	0x08004931
 800490c:	08004939 	.word	0x08004939
 8004910:	0800494f 	.word	0x0800494f
 8004914:	0800493f 	.word	0x0800493f
 8004918:	0800494f 	.word	0x0800494f
 800491c:	0800494f 	.word	0x0800494f
 8004920:	0800494f 	.word	0x0800494f
 8004924:	08004947 	.word	0x08004947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004928:	f7fe ffdc 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 800492c:	61b8      	str	r0, [r7, #24]
        break;
 800492e:	e013      	b.n	8004958 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004930:	f7fe fffa 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8004934:	61b8      	str	r0, [r7, #24]
        break;
 8004936:	e00f      	b.n	8004958 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004938:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <UART_SetConfig+0x3a4>)
 800493a:	61bb      	str	r3, [r7, #24]
        break;
 800493c:	e00c      	b.n	8004958 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800493e:	f7fe ff71 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 8004942:	61b8      	str	r0, [r7, #24]
        break;
 8004944:	e008      	b.n	8004958 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800494a:	61bb      	str	r3, [r7, #24]
        break;
 800494c:	e004      	b.n	8004958 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	77bb      	strb	r3, [r7, #30]
        break;
 8004956:	bf00      	nop
    }

    if (pclk != 0U)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d018      	beq.n	8004990 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	085a      	lsrs	r2, r3, #1
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	441a      	add	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b0f      	cmp	r3, #15
 8004976:	d909      	bls.n	800498c <UART_SetConfig+0x388>
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800497e:	d205      	bcs.n	800498c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	b29a      	uxth	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	e001      	b.n	8004990 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800499c:	7fbb      	ldrb	r3, [r7, #30]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	007a1200 	.word	0x007a1200

080049ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01a      	beq.n	8004ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aaa:	d10a      	bne.n	8004ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b098      	sub	sp, #96	@ 0x60
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b00:	f7fc f836 	bl	8000b70 <HAL_GetTick>
 8004b04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d12e      	bne.n	8004b72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f88c 	bl	8004c40 <UART_WaitOnFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d021      	beq.n	8004b72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b42:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e6      	bne.n	8004b2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e062      	b.n	8004c38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d149      	bne.n	8004c14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f856 	bl	8004c40 <UART_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d03c      	beq.n	8004c14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e6      	bne.n	8004b9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3308      	adds	r3, #8
 8004bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bec:	61fa      	str	r2, [r7, #28]
 8004bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	69b9      	ldr	r1, [r7, #24]
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e5      	bne.n	8004bcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e011      	b.n	8004c38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3758      	adds	r7, #88	@ 0x58
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c50:	e04f      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d04b      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5a:	f7fb ff89 	bl	8000b70 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d302      	bcc.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e04e      	b.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d037      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b80      	cmp	r3, #128	@ 0x80
 8004c86:	d034      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b40      	cmp	r3, #64	@ 0x40
 8004c8c:	d031      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d110      	bne.n	8004cbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f838 	bl	8004d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2208      	movs	r2, #8
 8004cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e029      	b.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ccc:	d111      	bne.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f81e 	bl	8004d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e00f      	b.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d0a0      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b095      	sub	sp, #84	@ 0x54
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e6      	bne.n	8004d22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3308      	adds	r3, #8
 8004d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e5      	bne.n	8004d54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d118      	bne.n	8004dc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	e853 3f00 	ldrex	r3, [r3]
 8004d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f023 0310 	bic.w	r3, r3, #16
 8004da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db2:	6979      	ldr	r1, [r7, #20]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	e841 2300 	strex	r3, r2, [r1]
 8004dba:	613b      	str	r3, [r7, #16]
   return(result);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e6      	bne.n	8004d90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004dd6:	bf00      	nop
 8004dd8:	3754      	adds	r7, #84	@ 0x54
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dea:	f3ef 8305 	mrs	r3, IPSR
 8004dee:	60bb      	str	r3, [r7, #8]
  return(result);
 8004df0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10f      	bne.n	8004e16 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfa:	607b      	str	r3, [r7, #4]
  return(result);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <osKernelInitialize+0x32>
 8004e02:	4b11      	ldr	r3, [pc, #68]	@ (8004e48 <osKernelInitialize+0x64>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d109      	bne.n	8004e1e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004e16:	f06f 0305 	mvn.w	r3, #5
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e00c      	b.n	8004e38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e48 <osKernelInitialize+0x64>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d105      	bne.n	8004e32 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004e26:	4b08      	ldr	r3, [pc, #32]	@ (8004e48 <osKernelInitialize+0x64>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e002      	b.n	8004e38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004e32:	f04f 33ff 	mov.w	r3, #4294967295
 8004e36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e38:	68fb      	ldr	r3, [r7, #12]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	20003288 	.word	0x20003288

08004e4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e52:	f3ef 8305 	mrs	r3, IPSR
 8004e56:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e62:	607b      	str	r3, [r7, #4]
  return(result);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <osKernelStart+0x32>
 8004e6a:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <osKernelStart+0x64>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d109      	bne.n	8004e86 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e72:	f3ef 8311 	mrs	r3, BASEPRI
 8004e76:	603b      	str	r3, [r7, #0]
  return(result);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004e7e:	f06f 0305 	mvn.w	r3, #5
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e00e      	b.n	8004ea4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e86:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <osKernelStart+0x64>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d107      	bne.n	8004e9e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004e8e:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <osKernelStart+0x64>)
 8004e90:	2202      	movs	r2, #2
 8004e92:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004e94:	f001 f84c 	bl	8005f30 <vTaskStartScheduler>
      stat = osOK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e002      	b.n	8004ea4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20003288 	.word	0x20003288

08004eb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b092      	sub	sp, #72	@ 0x48
 8004eb8:	af04      	add	r7, sp, #16
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec4:	f3ef 8305 	mrs	r3, IPSR
 8004ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f040 8094 	bne.w	8004ffa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed6:	623b      	str	r3, [r7, #32]
  return(result);
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f040 808d 	bne.w	8004ffa <osThreadNew+0x146>
 8004ee0:	4b48      	ldr	r3, [pc, #288]	@ (8005004 <osThreadNew+0x150>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d106      	bne.n	8004ef6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8004eec:	61fb      	str	r3, [r7, #28]
  return(result);
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 8082 	bne.w	8004ffa <osThreadNew+0x146>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d07e      	beq.n	8004ffa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004efc:	2380      	movs	r3, #128	@ 0x80
 8004efe:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004f00:	2318      	movs	r3, #24
 8004f02:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004f04:	2300      	movs	r3, #0
 8004f06:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004f08:	f107 031b 	add.w	r3, r7, #27
 8004f0c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8004f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f12:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d045      	beq.n	8004fa6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <osThreadNew+0x74>
        name = attr->name;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <osThreadNew+0x9a>
 8004f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3e:	2b38      	cmp	r3, #56	@ 0x38
 8004f40:	d805      	bhi.n	8004f4e <osThreadNew+0x9a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <osThreadNew+0x9e>
        return (NULL);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e054      	b.n	8004ffc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	089b      	lsrs	r3, r3, #2
 8004f60:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00e      	beq.n	8004f88 <osThreadNew+0xd4>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004f70:	d90a      	bls.n	8004f88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d006      	beq.n	8004f88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <osThreadNew+0xd4>
        mem = 1;
 8004f82:	2301      	movs	r3, #1
 8004f84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f86:	e010      	b.n	8004faa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10c      	bne.n	8004faa <osThreadNew+0xf6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d108      	bne.n	8004faa <osThreadNew+0xf6>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d104      	bne.n	8004faa <osThreadNew+0xf6>
          mem = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fa4:	e001      	b.n	8004faa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8004faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d110      	bne.n	8004fd2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fb8:	9202      	str	r2, [sp, #8]
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fc4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fdfe 	bl	8005bc8 <xTaskCreateStatic>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	e013      	b.n	8004ffa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d110      	bne.n	8004ffa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	f107 0314 	add.w	r3, r7, #20
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fe4b 	bl	8005c86 <xTaskCreate>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <osThreadNew+0x146>
          hTask = NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ffa:	697b      	ldr	r3, [r7, #20]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3738      	adds	r7, #56	@ 0x38
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20003288 	.word	0x20003288

08005008 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a07      	ldr	r2, [pc, #28]	@ (8005034 <vApplicationGetIdleTaskMemory+0x2c>)
 8005018:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4a06      	ldr	r2, [pc, #24]	@ (8005038 <vApplicationGetIdleTaskMemory+0x30>)
 800501e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2280      	movs	r2, #128	@ 0x80
 8005024:	601a      	str	r2, [r3, #0]
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	2000328c 	.word	0x2000328c
 8005038:	20003334 	.word	0x20003334

0800503c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4a07      	ldr	r2, [pc, #28]	@ (8005068 <vApplicationGetTimerTaskMemory+0x2c>)
 800504c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4a06      	ldr	r2, [pc, #24]	@ (800506c <vApplicationGetTimerTaskMemory+0x30>)
 8005052:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800505a:	601a      	str	r2, [r3, #0]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	20003534 	.word	0x20003534
 800506c:	200035dc 	.word	0x200035dc

08005070 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f103 0208 	add.w	r2, r3, #8
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f04f 32ff 	mov.w	r2, #4294967295
 8005088:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f103 0208 	add.w	r2, r3, #8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f103 0208 	add.w	r2, r3, #8
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	601a      	str	r2, [r3, #0]
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d103      	bne.n	8005132 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e00c      	b.n	800514c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3308      	adds	r3, #8
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	e002      	b.n	8005140 <vListInsert+0x2e>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	429a      	cmp	r2, r3
 800514a:	d2f6      	bcs.n	800513a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]
}
 8005178:	bf00      	nop
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6892      	ldr	r2, [r2, #8]
 800519a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6852      	ldr	r2, [r2, #4]
 80051a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d103      	bne.n	80051b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10b      	bne.n	8005204 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	e7fd      	b.n	8005200 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005204:	f002 f9c8 	bl	8007598 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005210:	68f9      	ldr	r1, [r7, #12]
 8005212:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005214:	fb01 f303 	mul.w	r3, r1, r3
 8005218:	441a      	add	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005234:	3b01      	subs	r3, #1
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	441a      	add	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	22ff      	movs	r2, #255	@ 0xff
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	22ff      	movs	r2, #255	@ 0xff
 8005250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d114      	bne.n	8005284 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01a      	beq.n	8005298 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3310      	adds	r3, #16
 8005266:	4618      	mov	r0, r3
 8005268:	f001 f906 	bl	8006478 <xTaskRemoveFromEventList>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d012      	beq.n	8005298 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005272:	4b0d      	ldr	r3, [pc, #52]	@ (80052a8 <xQueueGenericReset+0xd0>)
 8005274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	e009      	b.n	8005298 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3310      	adds	r3, #16
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff fef1 	bl	8005070 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3324      	adds	r3, #36	@ 0x24
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff feec 	bl	8005070 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005298:	f002 f9b0 	bl	80075fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800529c:	2301      	movs	r3, #1
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08e      	sub	sp, #56	@ 0x38
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10b      	bne.n	80052f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	e7fd      	b.n	80052f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <xQueueGenericCreateStatic+0x56>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <xQueueGenericCreateStatic+0x5a>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <xQueueGenericCreateStatic+0x5c>
 8005306:	2300      	movs	r3, #0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10b      	bne.n	8005324 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	623b      	str	r3, [r7, #32]
}
 800531e:	bf00      	nop
 8005320:	bf00      	nop
 8005322:	e7fd      	b.n	8005320 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d102      	bne.n	8005330 <xQueueGenericCreateStatic+0x84>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <xQueueGenericCreateStatic+0x88>
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <xQueueGenericCreateStatic+0x8a>
 8005334:	2300      	movs	r3, #0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10b      	bne.n	8005352 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	61fb      	str	r3, [r7, #28]
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	e7fd      	b.n	800534e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005352:	2350      	movs	r3, #80	@ 0x50
 8005354:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b50      	cmp	r3, #80	@ 0x50
 800535a:	d00b      	beq.n	8005374 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	61bb      	str	r3, [r7, #24]
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	e7fd      	b.n	8005370 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800537e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005386:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	4613      	mov	r3, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f805 	bl	80053a4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800539a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800539c:	4618      	mov	r0, r3
 800539e:	3730      	adds	r7, #48	@ 0x30
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	e002      	b.n	80053c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053d2:	2101      	movs	r1, #1
 80053d4:	69b8      	ldr	r0, [r7, #24]
 80053d6:	f7ff feff 	bl	80051d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	78fa      	ldrb	r2, [r7, #3]
 80053de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08e      	sub	sp, #56	@ 0x38
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053fa:	2300      	movs	r3, #0
 80053fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <xQueueGenericSend+0x34>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <xQueueGenericSend+0x42>
 8005426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <xQueueGenericSend+0x46>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <xQueueGenericSend+0x48>
 8005432:	2300      	movs	r3, #0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10b      	bne.n	8005450 <xQueueGenericSend+0x64>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800544a:	bf00      	nop
 800544c:	bf00      	nop
 800544e:	e7fd      	b.n	800544c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d103      	bne.n	800545e <xQueueGenericSend+0x72>
 8005456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <xQueueGenericSend+0x76>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <xQueueGenericSend+0x78>
 8005462:	2300      	movs	r3, #0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10b      	bne.n	8005480 <xQueueGenericSend+0x94>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	623b      	str	r3, [r7, #32]
}
 800547a:	bf00      	nop
 800547c:	bf00      	nop
 800547e:	e7fd      	b.n	800547c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005480:	f001 f9c6 	bl	8006810 <xTaskGetSchedulerState>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d102      	bne.n	8005490 <xQueueGenericSend+0xa4>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <xQueueGenericSend+0xa8>
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <xQueueGenericSend+0xaa>
 8005494:	2300      	movs	r3, #0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <xQueueGenericSend+0xc6>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	61fb      	str	r3, [r7, #28]
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	e7fd      	b.n	80054ae <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054b2:	f002 f871 	bl	8007598 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <xQueueGenericSend+0xdc>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d129      	bne.n	800551c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054ce:	f000 fa0d 	bl	80058ec <prvCopyDataToQueue>
 80054d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d010      	beq.n	80054fe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	3324      	adds	r3, #36	@ 0x24
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 ffc9 	bl	8006478 <xTaskRemoveFromEventList>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d013      	beq.n	8005514 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054ec:	4b3f      	ldr	r3, [pc, #252]	@ (80055ec <xQueueGenericSend+0x200>)
 80054ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	e00a      	b.n	8005514 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005504:	4b39      	ldr	r3, [pc, #228]	@ (80055ec <xQueueGenericSend+0x200>)
 8005506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005514:	f002 f872 	bl	80075fc <vPortExitCritical>
				return pdPASS;
 8005518:	2301      	movs	r3, #1
 800551a:	e063      	b.n	80055e4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d103      	bne.n	800552a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005522:	f002 f86b 	bl	80075fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005526:	2300      	movs	r3, #0
 8005528:	e05c      	b.n	80055e4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800552a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552c:	2b00      	cmp	r3, #0
 800552e:	d106      	bne.n	800553e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	4618      	mov	r0, r3
 8005536:	f001 f803 	bl	8006540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800553a:	2301      	movs	r3, #1
 800553c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800553e:	f002 f85d 	bl	80075fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005542:	f000 fd65 	bl	8006010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005546:	f002 f827 	bl	8007598 <vPortEnterCritical>
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005550:	b25b      	sxtb	r3, r3
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005556:	d103      	bne.n	8005560 <xQueueGenericSend+0x174>
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005566:	b25b      	sxtb	r3, r3
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d103      	bne.n	8005576 <xQueueGenericSend+0x18a>
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005576:	f002 f841 	bl	80075fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800557a:	1d3a      	adds	r2, r7, #4
 800557c:	f107 0314 	add.w	r3, r7, #20
 8005580:	4611      	mov	r1, r2
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fff2 	bl	800656c <xTaskCheckForTimeOut>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d124      	bne.n	80055d8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800558e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005590:	f000 faa4 	bl	8005adc <prvIsQueueFull>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d018      	beq.n	80055cc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	3310      	adds	r3, #16
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	4611      	mov	r1, r2
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 ff16 	bl	80063d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055aa:	f000 fa2f 	bl	8005a0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055ae:	f000 fd3d 	bl	800602c <xTaskResumeAll>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f47f af7c 	bne.w	80054b2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80055ba:	4b0c      	ldr	r3, [pc, #48]	@ (80055ec <xQueueGenericSend+0x200>)
 80055bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	e772      	b.n	80054b2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055ce:	f000 fa1d 	bl	8005a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055d2:	f000 fd2b 	bl	800602c <xTaskResumeAll>
 80055d6:	e76c      	b.n	80054b2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055da:	f000 fa17 	bl	8005a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055de:	f000 fd25 	bl	800602c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055e2:	2300      	movs	r3, #0
		}
	}
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3738      	adds	r7, #56	@ 0x38
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	e000ed04 	.word	0xe000ed04

080055f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	@ 0x38
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10b      	bne.n	8005620 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d103      	bne.n	800562e <xQueueGenericSendFromISR+0x3e>
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <xQueueGenericSendFromISR+0x42>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <xQueueGenericSendFromISR+0x44>
 8005632:	2300      	movs	r3, #0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	623b      	str	r3, [r7, #32]
}
 800564a:	bf00      	nop
 800564c:	bf00      	nop
 800564e:	e7fd      	b.n	800564c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d103      	bne.n	800565e <xQueueGenericSendFromISR+0x6e>
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <xQueueGenericSendFromISR+0x72>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <xQueueGenericSendFromISR+0x74>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	61fb      	str	r3, [r7, #28]
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005680:	f002 f86a 	bl	8007758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005684:	f3ef 8211 	mrs	r2, BASEPRI
 8005688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	61ba      	str	r2, [r7, #24]
 800569a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800569c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800569e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d302      	bcc.n	80056b2 <xQueueGenericSendFromISR+0xc2>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d12c      	bne.n	800570c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056c2:	f000 f913 	bl	80058ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	d112      	bne.n	80056f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d016      	beq.n	8005706 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	3324      	adds	r3, #36	@ 0x24
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fecb 	bl	8006478 <xTaskRemoveFromEventList>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00e      	beq.n	8005706 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	e007      	b.n	8005706 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056fa:	3301      	adds	r3, #1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	b25a      	sxtb	r2, r3
 8005700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005706:	2301      	movs	r3, #1
 8005708:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800570a:	e001      	b.n	8005710 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800570c:	2300      	movs	r3, #0
 800570e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005712:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800571a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800571c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800571e:	4618      	mov	r0, r3
 8005720:	3738      	adds	r7, #56	@ 0x38
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08c      	sub	sp, #48	@ 0x30
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005734:	2300      	movs	r3, #0
 8005736:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10b      	bne.n	800575a <xQueueReceive+0x32>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	623b      	str	r3, [r7, #32]
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	e7fd      	b.n	8005756 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d103      	bne.n	8005768 <xQueueReceive+0x40>
 8005760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <xQueueReceive+0x44>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <xQueueReceive+0x46>
 800576c:	2300      	movs	r3, #0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10b      	bne.n	800578a <xQueueReceive+0x62>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	61fb      	str	r3, [r7, #28]
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	e7fd      	b.n	8005786 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800578a:	f001 f841 	bl	8006810 <xTaskGetSchedulerState>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <xQueueReceive+0x72>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <xQueueReceive+0x76>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xQueueReceive+0x78>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10b      	bne.n	80057bc <xQueueReceive+0x94>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	61bb      	str	r3, [r7, #24]
}
 80057b6:	bf00      	nop
 80057b8:	bf00      	nop
 80057ba:	e7fd      	b.n	80057b8 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80057bc:	f001 feec 	bl	8007598 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01f      	beq.n	800580c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057d0:	f000 f8f6 	bl	80059c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	1e5a      	subs	r2, r3, #1
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00f      	beq.n	8005804 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e6:	3310      	adds	r3, #16
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fe45 	bl	8006478 <xTaskRemoveFromEventList>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057f4:	4b3c      	ldr	r3, [pc, #240]	@ (80058e8 <xQueueReceive+0x1c0>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005804:	f001 fefa 	bl	80075fc <vPortExitCritical>
				return pdPASS;
 8005808:	2301      	movs	r3, #1
 800580a:	e069      	b.n	80058e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005812:	f001 fef3 	bl	80075fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005816:	2300      	movs	r3, #0
 8005818:	e062      	b.n	80058e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800581a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005820:	f107 0310 	add.w	r3, r7, #16
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fe8b 	bl	8006540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800582a:	2301      	movs	r3, #1
 800582c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800582e:	f001 fee5 	bl	80075fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005832:	f000 fbed 	bl	8006010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005836:	f001 feaf 	bl	8007598 <vPortEnterCritical>
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005840:	b25b      	sxtb	r3, r3
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d103      	bne.n	8005850 <xQueueReceive+0x128>
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005856:	b25b      	sxtb	r3, r3
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d103      	bne.n	8005866 <xQueueReceive+0x13e>
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005866:	f001 fec9 	bl	80075fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800586a:	1d3a      	adds	r2, r7, #4
 800586c:	f107 0310 	add.w	r3, r7, #16
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fe7a 	bl	800656c <xTaskCheckForTimeOut>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d123      	bne.n	80058c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800587e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005880:	f000 f916 	bl	8005ab0 <prvIsQueueEmpty>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d017      	beq.n	80058ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	3324      	adds	r3, #36	@ 0x24
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fd9e 	bl	80063d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800589a:	f000 f8b7 	bl	8005a0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800589e:	f000 fbc5 	bl	800602c <xTaskResumeAll>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d189      	bne.n	80057bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80058a8:	4b0f      	ldr	r3, [pc, #60]	@ (80058e8 <xQueueReceive+0x1c0>)
 80058aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	e780      	b.n	80057bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058bc:	f000 f8a6 	bl	8005a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058c0:	f000 fbb4 	bl	800602c <xTaskResumeAll>
 80058c4:	e77a      	b.n	80057bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058c8:	f000 f8a0 	bl	8005a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058cc:	f000 fbae 	bl	800602c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058d2:	f000 f8ed 	bl	8005ab0 <prvIsQueueEmpty>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f43f af6f 	beq.w	80057bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3730      	adds	r7, #48	@ 0x30
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005900:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10d      	bne.n	8005926 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d14d      	bne.n	80059ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 ff98 	bl	800684c <xTaskPriorityDisinherit>
 800591c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	605a      	str	r2, [r3, #4]
 8005924:	e043      	b.n	80059ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d119      	bne.n	8005960 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6898      	ldr	r0, [r3, #8]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005934:	461a      	mov	r2, r3
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	f002 f9b4 	bl	8007ca4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005944:	441a      	add	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	429a      	cmp	r2, r3
 8005954:	d32b      	bcc.n	80059ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	609a      	str	r2, [r3, #8]
 800595e:	e026      	b.n	80059ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68d8      	ldr	r0, [r3, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005968:	461a      	mov	r2, r3
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	f002 f99a 	bl	8007ca4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	425b      	negs	r3, r3
 800597a:	441a      	add	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d207      	bcs.n	800599c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	425b      	negs	r3, r3
 8005996:	441a      	add	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d105      	bne.n	80059ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80059b6:	697b      	ldr	r3, [r7, #20]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d018      	beq.n	8005a04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	441a      	add	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68da      	ldr	r2, [r3, #12]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d303      	bcc.n	80059f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68d9      	ldr	r1, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	461a      	mov	r2, r3
 80059fe:	6838      	ldr	r0, [r7, #0]
 8005a00:	f002 f950 	bl	8007ca4 <memcpy>
	}
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a14:	f001 fdc0 	bl	8007598 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a20:	e011      	b.n	8005a46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d012      	beq.n	8005a50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3324      	adds	r3, #36	@ 0x24
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fd22 	bl	8006478 <xTaskRemoveFromEventList>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a3a:	f000 fdfb 	bl	8006634 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	dce9      	bgt.n	8005a22 <prvUnlockQueue+0x16>
 8005a4e:	e000      	b.n	8005a52 <prvUnlockQueue+0x46>
					break;
 8005a50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	22ff      	movs	r2, #255	@ 0xff
 8005a56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005a5a:	f001 fdcf 	bl	80075fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a5e:	f001 fd9b 	bl	8007598 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a6a:	e011      	b.n	8005a90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d012      	beq.n	8005a9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3310      	adds	r3, #16
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fcfd 	bl	8006478 <xTaskRemoveFromEventList>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a84:	f000 fdd6 	bl	8006634 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a88:	7bbb      	ldrb	r3, [r7, #14]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	dce9      	bgt.n	8005a6c <prvUnlockQueue+0x60>
 8005a98:	e000      	b.n	8005a9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	22ff      	movs	r2, #255	@ 0xff
 8005aa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005aa4:	f001 fdaa 	bl	80075fc <vPortExitCritical>
}
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ab8:	f001 fd6e 	bl	8007598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d102      	bne.n	8005aca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e001      	b.n	8005ace <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ace:	f001 fd95 	bl	80075fc <vPortExitCritical>

	return xReturn;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ae4:	f001 fd58 	bl	8007598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d102      	bne.n	8005afa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	e001      	b.n	8005afe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005afe:	f001 fd7d 	bl	80075fc <vPortExitCritical>

	return xReturn;
 8005b02:	68fb      	ldr	r3, [r7, #12]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	e014      	b.n	8005b46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8005b5c <vQueueAddToRegistry+0x50>)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10b      	bne.n	8005b40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b28:	490c      	ldr	r1, [pc, #48]	@ (8005b5c <vQueueAddToRegistry+0x50>)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b32:	4a0a      	ldr	r2, [pc, #40]	@ (8005b5c <vQueueAddToRegistry+0x50>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4413      	add	r3, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b3e:	e006      	b.n	8005b4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b07      	cmp	r3, #7
 8005b4a:	d9e7      	bls.n	8005b1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	200039dc 	.word	0x200039dc

08005b60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b70:	f001 fd12 	bl	8007598 <vPortEnterCritical>
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b7a:	b25b      	sxtb	r3, r3
 8005b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b80:	d103      	bne.n	8005b8a <vQueueWaitForMessageRestricted+0x2a>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b90:	b25b      	sxtb	r3, r3
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	d103      	bne.n	8005ba0 <vQueueWaitForMessageRestricted+0x40>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ba0:	f001 fd2c 	bl	80075fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	3324      	adds	r3, #36	@ 0x24
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fc33 	bl	8006420 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005bba:	6978      	ldr	r0, [r7, #20]
 8005bbc:	f7ff ff26 	bl	8005a0c <prvUnlockQueue>
	}
 8005bc0:	bf00      	nop
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08e      	sub	sp, #56	@ 0x38
 8005bcc:	af04      	add	r7, sp, #16
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	623b      	str	r3, [r7, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	bf00      	nop
 8005bf2:	e7fd      	b.n	8005bf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10b      	bne.n	8005c12 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	61fb      	str	r3, [r7, #28]
}
 8005c0c:	bf00      	nop
 8005c0e:	bf00      	nop
 8005c10:	e7fd      	b.n	8005c0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c12:	23a8      	movs	r3, #168	@ 0xa8
 8005c14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2ba8      	cmp	r3, #168	@ 0xa8
 8005c1a:	d00b      	beq.n	8005c34 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	61bb      	str	r3, [r7, #24]
}
 8005c2e:	bf00      	nop
 8005c30:	bf00      	nop
 8005c32:	e7fd      	b.n	8005c30 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01e      	beq.n	8005c78 <xTaskCreateStatic+0xb0>
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01b      	beq.n	8005c78 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c48:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c52:	2300      	movs	r3, #0
 8005c54:	9303      	str	r3, [sp, #12]
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	9302      	str	r3, [sp, #8]
 8005c5a:	f107 0314 	add.w	r3, r7, #20
 8005c5e:	9301      	str	r3, [sp, #4]
 8005c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f850 	bl	8005d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c72:	f000 f8ed 	bl	8005e50 <prvAddNewTaskToReadyList>
 8005c76:	e001      	b.n	8005c7c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c7c:	697b      	ldr	r3, [r7, #20]
	}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3728      	adds	r7, #40	@ 0x28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b08c      	sub	sp, #48	@ 0x30
 8005c8a:	af04      	add	r7, sp, #16
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 fd9e 	bl	80077dc <pvPortMalloc>
 8005ca0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00e      	beq.n	8005cc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ca8:	20a8      	movs	r0, #168	@ 0xa8
 8005caa:	f001 fd97 	bl	80077dc <pvPortMalloc>
 8005cae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cbc:	e005      	b.n	8005cca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cbe:	6978      	ldr	r0, [r7, #20]
 8005cc0:	f001 fe54 	bl	800796c <vPortFree>
 8005cc4:	e001      	b.n	8005cca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d017      	beq.n	8005d00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cd8:	88fa      	ldrh	r2, [r7, #6]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	9303      	str	r3, [sp, #12]
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	9302      	str	r3, [sp, #8]
 8005ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f80e 	bl	8005d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cf4:	69f8      	ldr	r0, [r7, #28]
 8005cf6:	f000 f8ab 	bl	8005e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	e002      	b.n	8005d06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d00:	f04f 33ff 	mov.w	r3, #4294967295
 8005d04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d06:	69bb      	ldr	r3, [r7, #24]
	}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	461a      	mov	r2, r3
 8005d28:	21a5      	movs	r1, #165	@ 0xa5
 8005d2a:	f001 ff37 	bl	8007b9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f023 0307 	bic.w	r3, r3, #7
 8005d46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00b      	beq.n	8005d6a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	617b      	str	r3, [r7, #20]
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	e7fd      	b.n	8005d66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	e012      	b.n	8005d96 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	7819      	ldrb	r1, [r3, #0]
 8005d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3334      	adds	r3, #52	@ 0x34
 8005d80:	460a      	mov	r2, r1
 8005d82:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d006      	beq.n	8005d9e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	3301      	adds	r3, #1
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	2b0f      	cmp	r3, #15
 8005d9a:	d9e9      	bls.n	8005d70 <prvInitialiseNewTask+0x60>
 8005d9c:	e000      	b.n	8005da0 <prvInitialiseNewTask+0x90>
		{
			break;
 8005d9e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005daa:	2b37      	cmp	r3, #55	@ 0x37
 8005dac:	d901      	bls.n	8005db2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dae:	2337      	movs	r3, #55	@ 0x37
 8005db0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005db6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dbc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff f971 	bl	80050b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	3318      	adds	r3, #24
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff f96c 	bl	80050b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ddc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e00:	3354      	adds	r3, #84	@ 0x54
 8005e02:	224c      	movs	r2, #76	@ 0x4c
 8005e04:	2100      	movs	r1, #0
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 fec8 	bl	8007b9c <memset>
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005e44 <prvInitialiseNewTask+0x134>)
 8005e10:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	4a0c      	ldr	r2, [pc, #48]	@ (8005e48 <prvInitialiseNewTask+0x138>)
 8005e16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e4c <prvInitialiseNewTask+0x13c>)
 8005e1c:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	68f9      	ldr	r1, [r7, #12]
 8005e22:	69b8      	ldr	r0, [r7, #24]
 8005e24:	f001 fa88 	bl	8007338 <pxPortInitialiseStack>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e3a:	bf00      	nop
 8005e3c:	3720      	adds	r7, #32
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20004c68 	.word	0x20004c68
 8005e48:	20004cd0 	.word	0x20004cd0
 8005e4c:	20004d38 	.word	0x20004d38

08005e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e58:	f001 fb9e 	bl	8007598 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8005f14 <prvAddNewTaskToReadyList+0xc4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3301      	adds	r3, #1
 8005e62:	4a2c      	ldr	r2, [pc, #176]	@ (8005f14 <prvAddNewTaskToReadyList+0xc4>)
 8005e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e66:	4b2c      	ldr	r3, [pc, #176]	@ (8005f18 <prvAddNewTaskToReadyList+0xc8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d109      	bne.n	8005e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005f18 <prvAddNewTaskToReadyList+0xc8>)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e74:	4b27      	ldr	r3, [pc, #156]	@ (8005f14 <prvAddNewTaskToReadyList+0xc4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d110      	bne.n	8005e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e7c:	f000 fbfe 	bl	800667c <prvInitialiseTaskLists>
 8005e80:	e00d      	b.n	8005e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e82:	4b26      	ldr	r3, [pc, #152]	@ (8005f1c <prvAddNewTaskToReadyList+0xcc>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d109      	bne.n	8005e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e8a:	4b23      	ldr	r3, [pc, #140]	@ (8005f18 <prvAddNewTaskToReadyList+0xc8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d802      	bhi.n	8005e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e98:	4a1f      	ldr	r2, [pc, #124]	@ (8005f18 <prvAddNewTaskToReadyList+0xc8>)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e9e:	4b20      	ldr	r3, [pc, #128]	@ (8005f20 <prvAddNewTaskToReadyList+0xd0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8005f20 <prvAddNewTaskToReadyList+0xd0>)
 8005ea6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f20 <prvAddNewTaskToReadyList+0xd0>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f24 <prvAddNewTaskToReadyList+0xd4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d903      	bls.n	8005ec4 <prvAddNewTaskToReadyList+0x74>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec0:	4a18      	ldr	r2, [pc, #96]	@ (8005f24 <prvAddNewTaskToReadyList+0xd4>)
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4a15      	ldr	r2, [pc, #84]	@ (8005f28 <prvAddNewTaskToReadyList+0xd8>)
 8005ed2:	441a      	add	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f7ff f8f5 	bl	80050ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ee0:	f001 fb8c 	bl	80075fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <prvAddNewTaskToReadyList+0xcc>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00e      	beq.n	8005f0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005eec:	4b0a      	ldr	r3, [pc, #40]	@ (8005f18 <prvAddNewTaskToReadyList+0xc8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d207      	bcs.n	8005f0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005efa:	4b0c      	ldr	r3, [pc, #48]	@ (8005f2c <prvAddNewTaskToReadyList+0xdc>)
 8005efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20003ef0 	.word	0x20003ef0
 8005f18:	20003a1c 	.word	0x20003a1c
 8005f1c:	20003efc 	.word	0x20003efc
 8005f20:	20003f0c 	.word	0x20003f0c
 8005f24:	20003ef8 	.word	0x20003ef8
 8005f28:	20003a20 	.word	0x20003a20
 8005f2c:	e000ed04 	.word	0xe000ed04

08005f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	@ 0x28
 8005f34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f3e:	463a      	mov	r2, r7
 8005f40:	1d39      	adds	r1, r7, #4
 8005f42:	f107 0308 	add.w	r3, r7, #8
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff f85e 	bl	8005008 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	9202      	str	r2, [sp, #8]
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	2300      	movs	r3, #0
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	460a      	mov	r2, r1
 8005f5e:	4924      	ldr	r1, [pc, #144]	@ (8005ff0 <vTaskStartScheduler+0xc0>)
 8005f60:	4824      	ldr	r0, [pc, #144]	@ (8005ff4 <vTaskStartScheduler+0xc4>)
 8005f62:	f7ff fe31 	bl	8005bc8 <xTaskCreateStatic>
 8005f66:	4603      	mov	r3, r0
 8005f68:	4a23      	ldr	r2, [pc, #140]	@ (8005ff8 <vTaskStartScheduler+0xc8>)
 8005f6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f6c:	4b22      	ldr	r3, [pc, #136]	@ (8005ff8 <vTaskStartScheduler+0xc8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f74:	2301      	movs	r3, #1
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e001      	b.n	8005f7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d102      	bne.n	8005f8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f84:	f000 feb8 	bl	8006cf8 <xTimerCreateTimerTask>
 8005f88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d11b      	bne.n	8005fc8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	613b      	str	r3, [r7, #16]
}
 8005fa2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fa4:	4b15      	ldr	r3, [pc, #84]	@ (8005ffc <vTaskStartScheduler+0xcc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3354      	adds	r3, #84	@ 0x54
 8005faa:	4a15      	ldr	r2, [pc, #84]	@ (8006000 <vTaskStartScheduler+0xd0>)
 8005fac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005fae:	4b15      	ldr	r3, [pc, #84]	@ (8006004 <vTaskStartScheduler+0xd4>)
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fb6:	4b14      	ldr	r3, [pc, #80]	@ (8006008 <vTaskStartScheduler+0xd8>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005fbc:	4b13      	ldr	r3, [pc, #76]	@ (800600c <vTaskStartScheduler+0xdc>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fc2:	f001 fa45 	bl	8007450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fc6:	e00f      	b.n	8005fe8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d10b      	bne.n	8005fe8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	60fb      	str	r3, [r7, #12]
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	e7fd      	b.n	8005fe4 <vTaskStartScheduler+0xb4>
}
 8005fe8:	bf00      	nop
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	08007d94 	.word	0x08007d94
 8005ff4:	0800664d 	.word	0x0800664d
 8005ff8:	20003f14 	.word	0x20003f14
 8005ffc:	20003a1c 	.word	0x20003a1c
 8006000:	20000010 	.word	0x20000010
 8006004:	20003f10 	.word	0x20003f10
 8006008:	20003efc 	.word	0x20003efc
 800600c:	20003ef4 	.word	0x20003ef4

08006010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006014:	4b04      	ldr	r3, [pc, #16]	@ (8006028 <vTaskSuspendAll+0x18>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3301      	adds	r3, #1
 800601a:	4a03      	ldr	r2, [pc, #12]	@ (8006028 <vTaskSuspendAll+0x18>)
 800601c:	6013      	str	r3, [r2, #0]
}
 800601e:	bf00      	nop
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	20003f18 	.word	0x20003f18

0800602c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006036:	2300      	movs	r3, #0
 8006038:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800603a:	4b42      	ldr	r3, [pc, #264]	@ (8006144 <xTaskResumeAll+0x118>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10b      	bne.n	800605a <xTaskResumeAll+0x2e>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	603b      	str	r3, [r7, #0]
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	e7fd      	b.n	8006056 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800605a:	f001 fa9d 	bl	8007598 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800605e:	4b39      	ldr	r3, [pc, #228]	@ (8006144 <xTaskResumeAll+0x118>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3b01      	subs	r3, #1
 8006064:	4a37      	ldr	r2, [pc, #220]	@ (8006144 <xTaskResumeAll+0x118>)
 8006066:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006068:	4b36      	ldr	r3, [pc, #216]	@ (8006144 <xTaskResumeAll+0x118>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d162      	bne.n	8006136 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006070:	4b35      	ldr	r3, [pc, #212]	@ (8006148 <xTaskResumeAll+0x11c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d05e      	beq.n	8006136 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006078:	e02f      	b.n	80060da <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800607a:	4b34      	ldr	r3, [pc, #208]	@ (800614c <xTaskResumeAll+0x120>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3318      	adds	r3, #24
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff f87c 	bl	8005184 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3304      	adds	r3, #4
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff f877 	bl	8005184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609a:	4b2d      	ldr	r3, [pc, #180]	@ (8006150 <xTaskResumeAll+0x124>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d903      	bls.n	80060aa <xTaskResumeAll+0x7e>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006150 <xTaskResumeAll+0x124>)
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4a27      	ldr	r2, [pc, #156]	@ (8006154 <xTaskResumeAll+0x128>)
 80060b8:	441a      	add	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	3304      	adds	r3, #4
 80060be:	4619      	mov	r1, r3
 80060c0:	4610      	mov	r0, r2
 80060c2:	f7ff f802 	bl	80050ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ca:	4b23      	ldr	r3, [pc, #140]	@ (8006158 <xTaskResumeAll+0x12c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d302      	bcc.n	80060da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80060d4:	4b21      	ldr	r3, [pc, #132]	@ (800615c <xTaskResumeAll+0x130>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060da:	4b1c      	ldr	r3, [pc, #112]	@ (800614c <xTaskResumeAll+0x120>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1cb      	bne.n	800607a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060e8:	f000 fb6c 	bl	80067c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006160 <xTaskResumeAll+0x134>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d010      	beq.n	800611a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060f8:	f000 f846 	bl	8006188 <xTaskIncrementTick>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006102:	4b16      	ldr	r3, [pc, #88]	@ (800615c <xTaskResumeAll+0x130>)
 8006104:	2201      	movs	r2, #1
 8006106:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3b01      	subs	r3, #1
 800610c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f1      	bne.n	80060f8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006114:	4b12      	ldr	r3, [pc, #72]	@ (8006160 <xTaskResumeAll+0x134>)
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800611a:	4b10      	ldr	r3, [pc, #64]	@ (800615c <xTaskResumeAll+0x130>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006122:	2301      	movs	r3, #1
 8006124:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006126:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <xTaskResumeAll+0x138>)
 8006128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006136:	f001 fa61 	bl	80075fc <vPortExitCritical>

	return xAlreadyYielded;
 800613a:	68bb      	ldr	r3, [r7, #8]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20003f18 	.word	0x20003f18
 8006148:	20003ef0 	.word	0x20003ef0
 800614c:	20003eb0 	.word	0x20003eb0
 8006150:	20003ef8 	.word	0x20003ef8
 8006154:	20003a20 	.word	0x20003a20
 8006158:	20003a1c 	.word	0x20003a1c
 800615c:	20003f04 	.word	0x20003f04
 8006160:	20003f00 	.word	0x20003f00
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800616e:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <xTaskGetTickCount+0x1c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006174:	687b      	ldr	r3, [r7, #4]
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20003ef4 	.word	0x20003ef4

08006188 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006192:	4b52      	ldr	r3, [pc, #328]	@ (80062dc <xTaskIncrementTick+0x154>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f040 808f 	bne.w	80062ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800619c:	4b50      	ldr	r3, [pc, #320]	@ (80062e0 <xTaskIncrementTick+0x158>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3301      	adds	r3, #1
 80061a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061a4:	4a4e      	ldr	r2, [pc, #312]	@ (80062e0 <xTaskIncrementTick+0x158>)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d121      	bne.n	80061f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80061b0:	4b4c      	ldr	r3, [pc, #304]	@ (80062e4 <xTaskIncrementTick+0x15c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00b      	beq.n	80061d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	603b      	str	r3, [r7, #0]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <xTaskIncrementTick+0x46>
 80061d2:	4b44      	ldr	r3, [pc, #272]	@ (80062e4 <xTaskIncrementTick+0x15c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	4b43      	ldr	r3, [pc, #268]	@ (80062e8 <xTaskIncrementTick+0x160>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a41      	ldr	r2, [pc, #260]	@ (80062e4 <xTaskIncrementTick+0x15c>)
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	4a41      	ldr	r2, [pc, #260]	@ (80062e8 <xTaskIncrementTick+0x160>)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	4b41      	ldr	r3, [pc, #260]	@ (80062ec <xTaskIncrementTick+0x164>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3301      	adds	r3, #1
 80061ec:	4a3f      	ldr	r2, [pc, #252]	@ (80062ec <xTaskIncrementTick+0x164>)
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	f000 fae8 	bl	80067c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061f4:	4b3e      	ldr	r3, [pc, #248]	@ (80062f0 <xTaskIncrementTick+0x168>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d34e      	bcc.n	800629c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061fe:	4b39      	ldr	r3, [pc, #228]	@ (80062e4 <xTaskIncrementTick+0x15c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <xTaskIncrementTick+0x84>
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <xTaskIncrementTick+0x86>
 800620c:	2300      	movs	r3, #0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d004      	beq.n	800621c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006212:	4b37      	ldr	r3, [pc, #220]	@ (80062f0 <xTaskIncrementTick+0x168>)
 8006214:	f04f 32ff 	mov.w	r2, #4294967295
 8006218:	601a      	str	r2, [r3, #0]
					break;
 800621a:	e03f      	b.n	800629c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800621c:	4b31      	ldr	r3, [pc, #196]	@ (80062e4 <xTaskIncrementTick+0x15c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	429a      	cmp	r2, r3
 8006232:	d203      	bcs.n	800623c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006234:	4a2e      	ldr	r2, [pc, #184]	@ (80062f0 <xTaskIncrementTick+0x168>)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6013      	str	r3, [r2, #0]
						break;
 800623a:	e02f      	b.n	800629c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	3304      	adds	r3, #4
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe ff9f 	bl	8005184 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624a:	2b00      	cmp	r3, #0
 800624c:	d004      	beq.n	8006258 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	3318      	adds	r3, #24
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe ff96 	bl	8005184 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800625c:	4b25      	ldr	r3, [pc, #148]	@ (80062f4 <xTaskIncrementTick+0x16c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d903      	bls.n	800626c <xTaskIncrementTick+0xe4>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	4a22      	ldr	r2, [pc, #136]	@ (80062f4 <xTaskIncrementTick+0x16c>)
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4a1f      	ldr	r2, [pc, #124]	@ (80062f8 <xTaskIncrementTick+0x170>)
 800627a:	441a      	add	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	3304      	adds	r3, #4
 8006280:	4619      	mov	r1, r3
 8006282:	4610      	mov	r0, r2
 8006284:	f7fe ff21 	bl	80050ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628c:	4b1b      	ldr	r3, [pc, #108]	@ (80062fc <xTaskIncrementTick+0x174>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006292:	429a      	cmp	r2, r3
 8006294:	d3b3      	bcc.n	80061fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006296:	2301      	movs	r3, #1
 8006298:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800629a:	e7b0      	b.n	80061fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800629c:	4b17      	ldr	r3, [pc, #92]	@ (80062fc <xTaskIncrementTick+0x174>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a2:	4915      	ldr	r1, [pc, #84]	@ (80062f8 <xTaskIncrementTick+0x170>)
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	440b      	add	r3, r1
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d907      	bls.n	80062c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80062b4:	2301      	movs	r3, #1
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	e004      	b.n	80062c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80062ba:	4b11      	ldr	r3, [pc, #68]	@ (8006300 <xTaskIncrementTick+0x178>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3301      	adds	r3, #1
 80062c0:	4a0f      	ldr	r2, [pc, #60]	@ (8006300 <xTaskIncrementTick+0x178>)
 80062c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80062c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006304 <xTaskIncrementTick+0x17c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80062cc:	2301      	movs	r3, #1
 80062ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80062d0:	697b      	ldr	r3, [r7, #20]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20003f18 	.word	0x20003f18
 80062e0:	20003ef4 	.word	0x20003ef4
 80062e4:	20003ea8 	.word	0x20003ea8
 80062e8:	20003eac 	.word	0x20003eac
 80062ec:	20003f08 	.word	0x20003f08
 80062f0:	20003f10 	.word	0x20003f10
 80062f4:	20003ef8 	.word	0x20003ef8
 80062f8:	20003a20 	.word	0x20003a20
 80062fc:	20003a1c 	.word	0x20003a1c
 8006300:	20003f00 	.word	0x20003f00
 8006304:	20003f04 	.word	0x20003f04

08006308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800630e:	4b2b      	ldr	r3, [pc, #172]	@ (80063bc <vTaskSwitchContext+0xb4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006316:	4b2a      	ldr	r3, [pc, #168]	@ (80063c0 <vTaskSwitchContext+0xb8>)
 8006318:	2201      	movs	r2, #1
 800631a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800631c:	e047      	b.n	80063ae <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800631e:	4b28      	ldr	r3, [pc, #160]	@ (80063c0 <vTaskSwitchContext+0xb8>)
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006324:	4b27      	ldr	r3, [pc, #156]	@ (80063c4 <vTaskSwitchContext+0xbc>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	e011      	b.n	8006350 <vTaskSwitchContext+0x48>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <vTaskSwitchContext+0x42>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	607b      	str	r3, [r7, #4]
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop
 8006348:	e7fd      	b.n	8006346 <vTaskSwitchContext+0x3e>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3b01      	subs	r3, #1
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	491d      	ldr	r1, [pc, #116]	@ (80063c8 <vTaskSwitchContext+0xc0>)
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0e3      	beq.n	800632c <vTaskSwitchContext+0x24>
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4613      	mov	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4a16      	ldr	r2, [pc, #88]	@ (80063c8 <vTaskSwitchContext+0xc0>)
 8006370:	4413      	add	r3, r2
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	605a      	str	r2, [r3, #4]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	3308      	adds	r3, #8
 8006386:	429a      	cmp	r2, r3
 8006388:	d104      	bne.n	8006394 <vTaskSwitchContext+0x8c>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	605a      	str	r2, [r3, #4]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	4a0c      	ldr	r2, [pc, #48]	@ (80063cc <vTaskSwitchContext+0xc4>)
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4a09      	ldr	r2, [pc, #36]	@ (80063c4 <vTaskSwitchContext+0xbc>)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063a4:	4b09      	ldr	r3, [pc, #36]	@ (80063cc <vTaskSwitchContext+0xc4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3354      	adds	r3, #84	@ 0x54
 80063aa:	4a09      	ldr	r2, [pc, #36]	@ (80063d0 <vTaskSwitchContext+0xc8>)
 80063ac:	6013      	str	r3, [r2, #0]
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20003f18 	.word	0x20003f18
 80063c0:	20003f04 	.word	0x20003f04
 80063c4:	20003ef8 	.word	0x20003ef8
 80063c8:	20003a20 	.word	0x20003a20
 80063cc:	20003a1c 	.word	0x20003a1c
 80063d0:	20000010 	.word	0x20000010

080063d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	60fb      	str	r3, [r7, #12]
}
 80063f6:	bf00      	nop
 80063f8:	bf00      	nop
 80063fa:	e7fd      	b.n	80063f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063fc:	4b07      	ldr	r3, [pc, #28]	@ (800641c <vTaskPlaceOnEventList+0x48>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3318      	adds	r3, #24
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7fe fe84 	bl	8005112 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800640a:	2101      	movs	r1, #1
 800640c:	6838      	ldr	r0, [r7, #0]
 800640e:	f000 fc1f 	bl	8006c50 <prvAddCurrentTaskToDelayedList>
}
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20003a1c 	.word	0x20003a1c

08006420 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	617b      	str	r3, [r7, #20]
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800644a:	4b0a      	ldr	r3, [pc, #40]	@ (8006474 <vTaskPlaceOnEventListRestricted+0x54>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3318      	adds	r3, #24
 8006450:	4619      	mov	r1, r3
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7fe fe39 	bl	80050ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800645e:	f04f 33ff 	mov.w	r3, #4294967295
 8006462:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	68b8      	ldr	r0, [r7, #8]
 8006468:	f000 fbf2 	bl	8006c50 <prvAddCurrentTaskToDelayedList>
	}
 800646c:	bf00      	nop
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20003a1c 	.word	0x20003a1c

08006478 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	60fb      	str	r3, [r7, #12]
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	3318      	adds	r3, #24
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe fe6a 	bl	8005184 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006528 <xTaskRemoveFromEventList+0xb0>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d11d      	bne.n	80064f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe fe61 	bl	8005184 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c6:	4b19      	ldr	r3, [pc, #100]	@ (800652c <xTaskRemoveFromEventList+0xb4>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d903      	bls.n	80064d6 <xTaskRemoveFromEventList+0x5e>
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d2:	4a16      	ldr	r2, [pc, #88]	@ (800652c <xTaskRemoveFromEventList+0xb4>)
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4a13      	ldr	r2, [pc, #76]	@ (8006530 <xTaskRemoveFromEventList+0xb8>)
 80064e4:	441a      	add	r2, r3
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f7fe fdec 	bl	80050ca <vListInsertEnd>
 80064f2:	e005      	b.n	8006500 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	3318      	adds	r3, #24
 80064f8:	4619      	mov	r1, r3
 80064fa:	480e      	ldr	r0, [pc, #56]	@ (8006534 <xTaskRemoveFromEventList+0xbc>)
 80064fc:	f7fe fde5 	bl	80050ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006504:	4b0c      	ldr	r3, [pc, #48]	@ (8006538 <xTaskRemoveFromEventList+0xc0>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650a:	429a      	cmp	r2, r3
 800650c:	d905      	bls.n	800651a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800650e:	2301      	movs	r3, #1
 8006510:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006512:	4b0a      	ldr	r3, [pc, #40]	@ (800653c <xTaskRemoveFromEventList+0xc4>)
 8006514:	2201      	movs	r2, #1
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	e001      	b.n	800651e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800651e:	697b      	ldr	r3, [r7, #20]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20003f18 	.word	0x20003f18
 800652c:	20003ef8 	.word	0x20003ef8
 8006530:	20003a20 	.word	0x20003a20
 8006534:	20003eb0 	.word	0x20003eb0
 8006538:	20003a1c 	.word	0x20003a1c
 800653c:	20003f04 	.word	0x20003f04

08006540 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006548:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <vTaskInternalSetTimeOutState+0x24>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006550:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <vTaskInternalSetTimeOutState+0x28>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	605a      	str	r2, [r3, #4]
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	20003f08 	.word	0x20003f08
 8006568:	20003ef4 	.word	0x20003ef4

0800656c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	613b      	str	r3, [r7, #16]
}
 800658e:	bf00      	nop
 8006590:	bf00      	nop
 8006592:	e7fd      	b.n	8006590 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10b      	bne.n	80065b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	60fb      	str	r3, [r7, #12]
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	e7fd      	b.n	80065ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80065b2:	f000 fff1 	bl	8007598 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065b6:	4b1d      	ldr	r3, [pc, #116]	@ (800662c <xTaskCheckForTimeOut+0xc0>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d102      	bne.n	80065d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	e023      	b.n	800661e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <xTaskCheckForTimeOut+0xc4>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d007      	beq.n	80065f2 <xTaskCheckForTimeOut+0x86>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d302      	bcc.n	80065f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065ec:	2301      	movs	r3, #1
 80065ee:	61fb      	str	r3, [r7, #28]
 80065f0:	e015      	b.n	800661e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d20b      	bcs.n	8006614 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	1ad2      	subs	r2, r2, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff ff99 	bl	8006540 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800660e:	2300      	movs	r3, #0
 8006610:	61fb      	str	r3, [r7, #28]
 8006612:	e004      	b.n	800661e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800661a:	2301      	movs	r3, #1
 800661c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800661e:	f000 ffed 	bl	80075fc <vPortExitCritical>

	return xReturn;
 8006622:	69fb      	ldr	r3, [r7, #28]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3720      	adds	r7, #32
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20003ef4 	.word	0x20003ef4
 8006630:	20003f08 	.word	0x20003f08

08006634 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006638:	4b03      	ldr	r3, [pc, #12]	@ (8006648 <vTaskMissedYield+0x14>)
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]
}
 800663e:	bf00      	nop
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	20003f04 	.word	0x20003f04

0800664c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006654:	f000 f852 	bl	80066fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006658:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <prvIdleTask+0x28>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d9f9      	bls.n	8006654 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006660:	4b05      	ldr	r3, [pc, #20]	@ (8006678 <prvIdleTask+0x2c>)
 8006662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006670:	e7f0      	b.n	8006654 <prvIdleTask+0x8>
 8006672:	bf00      	nop
 8006674:	20003a20 	.word	0x20003a20
 8006678:	e000ed04 	.word	0xe000ed04

0800667c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006682:	2300      	movs	r3, #0
 8006684:	607b      	str	r3, [r7, #4]
 8006686:	e00c      	b.n	80066a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4a12      	ldr	r2, [pc, #72]	@ (80066dc <prvInitialiseTaskLists+0x60>)
 8006694:	4413      	add	r3, r2
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe fcea 	bl	8005070 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3301      	adds	r3, #1
 80066a0:	607b      	str	r3, [r7, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b37      	cmp	r3, #55	@ 0x37
 80066a6:	d9ef      	bls.n	8006688 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066a8:	480d      	ldr	r0, [pc, #52]	@ (80066e0 <prvInitialiseTaskLists+0x64>)
 80066aa:	f7fe fce1 	bl	8005070 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066ae:	480d      	ldr	r0, [pc, #52]	@ (80066e4 <prvInitialiseTaskLists+0x68>)
 80066b0:	f7fe fcde 	bl	8005070 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066b4:	480c      	ldr	r0, [pc, #48]	@ (80066e8 <prvInitialiseTaskLists+0x6c>)
 80066b6:	f7fe fcdb 	bl	8005070 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066ba:	480c      	ldr	r0, [pc, #48]	@ (80066ec <prvInitialiseTaskLists+0x70>)
 80066bc:	f7fe fcd8 	bl	8005070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066c0:	480b      	ldr	r0, [pc, #44]	@ (80066f0 <prvInitialiseTaskLists+0x74>)
 80066c2:	f7fe fcd5 	bl	8005070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066c6:	4b0b      	ldr	r3, [pc, #44]	@ (80066f4 <prvInitialiseTaskLists+0x78>)
 80066c8:	4a05      	ldr	r2, [pc, #20]	@ (80066e0 <prvInitialiseTaskLists+0x64>)
 80066ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066cc:	4b0a      	ldr	r3, [pc, #40]	@ (80066f8 <prvInitialiseTaskLists+0x7c>)
 80066ce:	4a05      	ldr	r2, [pc, #20]	@ (80066e4 <prvInitialiseTaskLists+0x68>)
 80066d0:	601a      	str	r2, [r3, #0]
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20003a20 	.word	0x20003a20
 80066e0:	20003e80 	.word	0x20003e80
 80066e4:	20003e94 	.word	0x20003e94
 80066e8:	20003eb0 	.word	0x20003eb0
 80066ec:	20003ec4 	.word	0x20003ec4
 80066f0:	20003edc 	.word	0x20003edc
 80066f4:	20003ea8 	.word	0x20003ea8
 80066f8:	20003eac 	.word	0x20003eac

080066fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006702:	e019      	b.n	8006738 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006704:	f000 ff48 	bl	8007598 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006708:	4b10      	ldr	r3, [pc, #64]	@ (800674c <prvCheckTasksWaitingTermination+0x50>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3304      	adds	r3, #4
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe fd35 	bl	8005184 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800671a:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <prvCheckTasksWaitingTermination+0x54>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3b01      	subs	r3, #1
 8006720:	4a0b      	ldr	r2, [pc, #44]	@ (8006750 <prvCheckTasksWaitingTermination+0x54>)
 8006722:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006724:	4b0b      	ldr	r3, [pc, #44]	@ (8006754 <prvCheckTasksWaitingTermination+0x58>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3b01      	subs	r3, #1
 800672a:	4a0a      	ldr	r2, [pc, #40]	@ (8006754 <prvCheckTasksWaitingTermination+0x58>)
 800672c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800672e:	f000 ff65 	bl	80075fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f810 	bl	8006758 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006738:	4b06      	ldr	r3, [pc, #24]	@ (8006754 <prvCheckTasksWaitingTermination+0x58>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e1      	bne.n	8006704 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20003ec4 	.word	0x20003ec4
 8006750:	20003ef0 	.word	0x20003ef0
 8006754:	20003ed8 	.word	0x20003ed8

08006758 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3354      	adds	r3, #84	@ 0x54
 8006764:	4618      	mov	r0, r3
 8006766:	f001 fa21 	bl	8007bac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006770:	2b00      	cmp	r3, #0
 8006772:	d108      	bne.n	8006786 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006778:	4618      	mov	r0, r3
 800677a:	f001 f8f7 	bl	800796c <vPortFree>
				vPortFree( pxTCB );
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 f8f4 	bl	800796c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006784:	e019      	b.n	80067ba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800678c:	2b01      	cmp	r3, #1
 800678e:	d103      	bne.n	8006798 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 f8eb 	bl	800796c <vPortFree>
	}
 8006796:	e010      	b.n	80067ba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d00b      	beq.n	80067ba <prvDeleteTCB+0x62>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	60fb      	str	r3, [r7, #12]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <prvDeleteTCB+0x5e>
	}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006808 <prvResetNextTaskUnblockTime+0x44>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <prvResetNextTaskUnblockTime+0x14>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <prvResetNextTaskUnblockTime+0x16>
 80067d8:	2300      	movs	r3, #0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067de:	4b0b      	ldr	r3, [pc, #44]	@ (800680c <prvResetNextTaskUnblockTime+0x48>)
 80067e0:	f04f 32ff 	mov.w	r2, #4294967295
 80067e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067e6:	e008      	b.n	80067fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067e8:	4b07      	ldr	r3, [pc, #28]	@ (8006808 <prvResetNextTaskUnblockTime+0x44>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4a05      	ldr	r2, [pc, #20]	@ (800680c <prvResetNextTaskUnblockTime+0x48>)
 80067f8:	6013      	str	r3, [r2, #0]
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	20003ea8 	.word	0x20003ea8
 800680c:	20003f10 	.word	0x20003f10

08006810 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006816:	4b0b      	ldr	r3, [pc, #44]	@ (8006844 <xTaskGetSchedulerState+0x34>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800681e:	2301      	movs	r3, #1
 8006820:	607b      	str	r3, [r7, #4]
 8006822:	e008      	b.n	8006836 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006824:	4b08      	ldr	r3, [pc, #32]	@ (8006848 <xTaskGetSchedulerState+0x38>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800682c:	2302      	movs	r3, #2
 800682e:	607b      	str	r3, [r7, #4]
 8006830:	e001      	b.n	8006836 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006832:	2300      	movs	r3, #0
 8006834:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006836:	687b      	ldr	r3, [r7, #4]
	}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	20003efc 	.word	0x20003efc
 8006848:	20003f18 	.word	0x20003f18

0800684c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d058      	beq.n	8006914 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006862:	4b2f      	ldr	r3, [pc, #188]	@ (8006920 <xTaskPriorityDisinherit+0xd4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	429a      	cmp	r2, r3
 800686a:	d00b      	beq.n	8006884 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60fb      	str	r3, [r7, #12]
}
 800687e:	bf00      	nop
 8006880:	bf00      	nop
 8006882:	e7fd      	b.n	8006880 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10b      	bne.n	80068a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60bb      	str	r3, [r7, #8]
}
 800689e:	bf00      	nop
 80068a0:	bf00      	nop
 80068a2:	e7fd      	b.n	80068a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068a8:	1e5a      	subs	r2, r3, #1
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d02c      	beq.n	8006914 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d128      	bne.n	8006914 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	3304      	adds	r3, #4
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe fc5c 	bl	8005184 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006924 <xTaskPriorityDisinherit+0xd8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d903      	bls.n	80068f4 <xTaskPriorityDisinherit+0xa8>
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006924 <xTaskPriorityDisinherit+0xd8>)
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4a09      	ldr	r2, [pc, #36]	@ (8006928 <xTaskPriorityDisinherit+0xdc>)
 8006902:	441a      	add	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	3304      	adds	r3, #4
 8006908:	4619      	mov	r1, r3
 800690a:	4610      	mov	r0, r2
 800690c:	f7fe fbdd 	bl	80050ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006910:	2301      	movs	r3, #1
 8006912:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006914:	697b      	ldr	r3, [r7, #20]
	}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20003a1c 	.word	0x20003a1c
 8006924:	20003ef8 	.word	0x20003ef8
 8006928:	20003a20 	.word	0x20003a20

0800692c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006936:	f000 fe2f 	bl	8007598 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800693a:	4b20      	ldr	r3, [pc, #128]	@ (80069bc <ulTaskNotifyTake+0x90>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d113      	bne.n	800696e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006946:	4b1d      	ldr	r3, [pc, #116]	@ (80069bc <ulTaskNotifyTake+0x90>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006956:	2101      	movs	r1, #1
 8006958:	6838      	ldr	r0, [r7, #0]
 800695a:	f000 f979 	bl	8006c50 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800695e:	4b18      	ldr	r3, [pc, #96]	@ (80069c0 <ulTaskNotifyTake+0x94>)
 8006960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800696e:	f000 fe45 	bl	80075fc <vPortExitCritical>

		taskENTER_CRITICAL();
 8006972:	f000 fe11 	bl	8007598 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006976:	4b11      	ldr	r3, [pc, #68]	@ (80069bc <ulTaskNotifyTake+0x90>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800697e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00e      	beq.n	80069a4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800698c:	4b0b      	ldr	r3, [pc, #44]	@ (80069bc <ulTaskNotifyTake+0x90>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2200      	movs	r2, #0
 8006992:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8006996:	e005      	b.n	80069a4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006998:	4b08      	ldr	r3, [pc, #32]	@ (80069bc <ulTaskNotifyTake+0x90>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	3a01      	subs	r2, #1
 80069a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069a4:	4b05      	ldr	r3, [pc, #20]	@ (80069bc <ulTaskNotifyTake+0x90>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80069ae:	f000 fe25 	bl	80075fc <vPortExitCritical>

		return ulReturn;
 80069b2:	68fb      	ldr	r3, [r7, #12]
	}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20003a1c 	.word	0x20003a1c
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08a      	sub	sp, #40	@ 0x28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	4613      	mov	r3, r2
 80069d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80069d4:	2301      	movs	r3, #1
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <xTaskGenericNotify+0x32>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	61bb      	str	r3, [r7, #24]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80069fa:	f000 fdcd 	bl	8007598 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006a14:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d82e      	bhi.n	8006a82 <xTaskGenericNotify+0xbe>
 8006a24:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <xTaskGenericNotify+0x68>)
 8006a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2a:	bf00      	nop
 8006a2c:	08006a83 	.word	0x08006a83
 8006a30:	08006a41 	.word	0x08006a41
 8006a34:	08006a53 	.word	0x08006a53
 8006a38:	08006a63 	.word	0x08006a63
 8006a3c:	08006a6d 	.word	0x08006a6d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006a50:	e017      	b.n	8006a82 <xTaskGenericNotify+0xbe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006a60:	e00f      	b.n	8006a82 <xTaskGenericNotify+0xbe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006a6a:	e00a      	b.n	8006a82 <xTaskGenericNotify+0xbe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006a6c:	7ffb      	ldrb	r3, [r7, #31]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d004      	beq.n	8006a7c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006a7a:	e001      	b.n	8006a80 <xTaskGenericNotify+0xbc>
						xReturn = pdFAIL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006a80:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a82:	7ffb      	ldrb	r3, [r7, #31]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d13b      	bne.n	8006b00 <xTaskGenericNotify+0x13c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fb79 	bl	8005184 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a96:	4b1e      	ldr	r3, [pc, #120]	@ (8006b10 <xTaskGenericNotify+0x14c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d903      	bls.n	8006aa6 <xTaskGenericNotify+0xe2>
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b10 <xTaskGenericNotify+0x14c>)
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4a18      	ldr	r2, [pc, #96]	@ (8006b14 <xTaskGenericNotify+0x150>)
 8006ab4:	441a      	add	r2, r3
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4619      	mov	r1, r3
 8006abc:	4610      	mov	r0, r2
 8006abe:	f7fe fb04 	bl	80050ca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00b      	beq.n	8006ae2 <xTaskGenericNotify+0x11e>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	617b      	str	r3, [r7, #20]
}
 8006adc:	bf00      	nop
 8006ade:	bf00      	nop
 8006ae0:	e7fd      	b.n	8006ade <xTaskGenericNotify+0x11a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8006b18 <xTaskGenericNotify+0x154>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d907      	bls.n	8006b00 <xTaskGenericNotify+0x13c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006af0:	4b0a      	ldr	r3, [pc, #40]	@ (8006b1c <xTaskGenericNotify+0x158>)
 8006af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006b00:	f000 fd7c 	bl	80075fc <vPortExitCritical>

		return xReturn;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3728      	adds	r7, #40	@ 0x28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20003ef8 	.word	0x20003ef8
 8006b14:	20003a20 	.word	0x20003a20
 8006b18:	20003a1c 	.word	0x20003a1c
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08a      	sub	sp, #40	@ 0x28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10b      	bne.n	8006b48 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	61bb      	str	r3, [r7, #24]
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	e7fd      	b.n	8006b44 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b48:	f000 fe06 	bl	8007758 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8006b50:	f3ef 8211 	mrs	r2, BASEPRI
 8006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	617a      	str	r2, [r7, #20]
 8006b66:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006b68:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b6a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006b72:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006b8a:	7ffb      	ldrb	r3, [r7, #31]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d148      	bne.n	8006c22 <vTaskNotifyGiveFromISR+0x102>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00b      	beq.n	8006bb0 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	60fb      	str	r3, [r7, #12]
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	e7fd      	b.n	8006bac <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bb0:	4b21      	ldr	r3, [pc, #132]	@ (8006c38 <vTaskNotifyGiveFromISR+0x118>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d11d      	bne.n	8006bf4 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fe fae1 	bl	8005184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c3c <vTaskNotifyGiveFromISR+0x11c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d903      	bls.n	8006bd6 <vTaskNotifyGiveFromISR+0xb6>
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c3c <vTaskNotifyGiveFromISR+0x11c>)
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4a17      	ldr	r2, [pc, #92]	@ (8006c40 <vTaskNotifyGiveFromISR+0x120>)
 8006be4:	441a      	add	r2, r3
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	3304      	adds	r3, #4
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f7fe fa6c 	bl	80050ca <vListInsertEnd>
 8006bf2:	e005      	b.n	8006c00 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	3318      	adds	r3, #24
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4812      	ldr	r0, [pc, #72]	@ (8006c44 <vTaskNotifyGiveFromISR+0x124>)
 8006bfc:	f7fe fa65 	bl	80050ca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c04:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <vTaskNotifyGiveFromISR+0x128>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d909      	bls.n	8006c22 <vTaskNotifyGiveFromISR+0x102>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2201      	movs	r2, #1
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	e002      	b.n	8006c22 <vTaskNotifyGiveFromISR+0x102>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c4c <vTaskNotifyGiveFromISR+0x12c>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f383 8811 	msr	BASEPRI, r3
}
 8006c2c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006c2e:	bf00      	nop
 8006c30:	3728      	adds	r7, #40	@ 0x28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20003f18 	.word	0x20003f18
 8006c3c:	20003ef8 	.word	0x20003ef8
 8006c40:	20003a20 	.word	0x20003a20
 8006c44:	20003eb0 	.word	0x20003eb0
 8006c48:	20003a1c 	.word	0x20003a1c
 8006c4c:	20003f04 	.word	0x20003f04

08006c50 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c5a:	4b21      	ldr	r3, [pc, #132]	@ (8006ce0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c60:	4b20      	ldr	r3, [pc, #128]	@ (8006ce4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3304      	adds	r3, #4
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe fa8c 	bl	8005184 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c72:	d10a      	bne.n	8006c8a <prvAddCurrentTaskToDelayedList+0x3a>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4619      	mov	r1, r3
 8006c82:	4819      	ldr	r0, [pc, #100]	@ (8006ce8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c84:	f7fe fa21 	bl	80050ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c88:	e026      	b.n	8006cd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4413      	add	r3, r2
 8006c90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c92:	4b14      	ldr	r3, [pc, #80]	@ (8006ce4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d209      	bcs.n	8006cb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ca2:	4b12      	ldr	r3, [pc, #72]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3304      	adds	r3, #4
 8006cac:	4619      	mov	r1, r3
 8006cae:	4610      	mov	r0, r2
 8006cb0:	f7fe fa2f 	bl	8005112 <vListInsert>
}
 8006cb4:	e010      	b.n	8006cd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f7fe fa25 	bl	8005112 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d202      	bcs.n	8006cd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cd2:	4a08      	ldr	r2, [pc, #32]	@ (8006cf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	6013      	str	r3, [r2, #0]
}
 8006cd8:	bf00      	nop
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	20003ef4 	.word	0x20003ef4
 8006ce4:	20003a1c 	.word	0x20003a1c
 8006ce8:	20003edc 	.word	0x20003edc
 8006cec:	20003eac 	.word	0x20003eac
 8006cf0:	20003ea8 	.word	0x20003ea8
 8006cf4:	20003f10 	.word	0x20003f10

08006cf8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	@ 0x28
 8006cfc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d02:	f000 fad9 	bl	80072b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d06:	4b1d      	ldr	r3, [pc, #116]	@ (8006d7c <xTimerCreateTimerTask+0x84>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d021      	beq.n	8006d52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d16:	1d3a      	adds	r2, r7, #4
 8006d18:	f107 0108 	add.w	r1, r7, #8
 8006d1c:	f107 030c 	add.w	r3, r7, #12
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fe f98b 	bl	800503c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	9202      	str	r2, [sp, #8]
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	2302      	movs	r3, #2
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	2300      	movs	r3, #0
 8006d36:	460a      	mov	r2, r1
 8006d38:	4911      	ldr	r1, [pc, #68]	@ (8006d80 <xTimerCreateTimerTask+0x88>)
 8006d3a:	4812      	ldr	r0, [pc, #72]	@ (8006d84 <xTimerCreateTimerTask+0x8c>)
 8006d3c:	f7fe ff44 	bl	8005bc8 <xTaskCreateStatic>
 8006d40:	4603      	mov	r3, r0
 8006d42:	4a11      	ldr	r2, [pc, #68]	@ (8006d88 <xTimerCreateTimerTask+0x90>)
 8006d44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d46:	4b10      	ldr	r3, [pc, #64]	@ (8006d88 <xTimerCreateTimerTask+0x90>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10b      	bne.n	8006d70 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	613b      	str	r3, [r7, #16]
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	e7fd      	b.n	8006d6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d70:	697b      	ldr	r3, [r7, #20]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20003f4c 	.word	0x20003f4c
 8006d80:	08007d9c 	.word	0x08007d9c
 8006d84:	08006ead 	.word	0x08006ead
 8006d88:	20003f50 	.word	0x20003f50

08006d8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	@ 0x28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10b      	bne.n	8006dbc <xTimerGenericCommand+0x30>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	623b      	str	r3, [r7, #32]
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dbc:	4b19      	ldr	r3, [pc, #100]	@ (8006e24 <xTimerGenericCommand+0x98>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d02a      	beq.n	8006e1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b05      	cmp	r3, #5
 8006dd4:	dc18      	bgt.n	8006e08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dd6:	f7ff fd1b 	bl	8006810 <xTaskGetSchedulerState>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d109      	bne.n	8006df4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006de0:	4b10      	ldr	r3, [pc, #64]	@ (8006e24 <xTimerGenericCommand+0x98>)
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	f107 0110 	add.w	r1, r7, #16
 8006de8:	2300      	movs	r3, #0
 8006dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dec:	f7fe fafe 	bl	80053ec <xQueueGenericSend>
 8006df0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006df2:	e012      	b.n	8006e1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006df4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <xTimerGenericCommand+0x98>)
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	f107 0110 	add.w	r1, r7, #16
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f7fe faf4 	bl	80053ec <xQueueGenericSend>
 8006e04:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e06:	e008      	b.n	8006e1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e08:	4b06      	ldr	r3, [pc, #24]	@ (8006e24 <xTimerGenericCommand+0x98>)
 8006e0a:	6818      	ldr	r0, [r3, #0]
 8006e0c:	f107 0110 	add.w	r1, r7, #16
 8006e10:	2300      	movs	r3, #0
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	f7fe fbec 	bl	80055f0 <xQueueGenericSendFromISR>
 8006e18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3728      	adds	r7, #40	@ 0x28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20003f4c 	.word	0x20003f4c

08006e28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e32:	4b1d      	ldr	r3, [pc, #116]	@ (8006ea8 <prvProcessExpiredTimer+0x80>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fe f99f 	bl	8005184 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d123      	bne.n	8006e96 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	18d1      	adds	r1, r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	6978      	ldr	r0, [r7, #20]
 8006e5c:	f000 f8cc 	bl	8006ff8 <prvInsertTimerInActiveList>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d017      	beq.n	8006e96 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e66:	2300      	movs	r3, #0
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6978      	ldr	r0, [r7, #20]
 8006e72:	f7ff ff8b 	bl	8006d8c <xTimerGenericCommand>
 8006e76:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10b      	bne.n	8006e96 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	60fb      	str	r3, [r7, #12]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9a:	6978      	ldr	r0, [r7, #20]
 8006e9c:	4798      	blx	r3
}
 8006e9e:	bf00      	nop
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20003f44 	.word	0x20003f44

08006eac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eb4:	f107 0308 	add.w	r3, r7, #8
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 f859 	bl	8006f70 <prvGetNextExpireTime>
 8006ebe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f805 	bl	8006ed4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006eca:	f000 f8d7 	bl	800707c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ece:	bf00      	nop
 8006ed0:	e7f0      	b.n	8006eb4 <prvTimerTask+0x8>
	...

08006ed4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ede:	f7ff f897 	bl	8006010 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ee2:	f107 0308 	add.w	r3, r7, #8
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f866 	bl	8006fb8 <prvSampleTimeNow>
 8006eec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d130      	bne.n	8006f56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <prvProcessTimerOrBlockTask+0x3c>
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d806      	bhi.n	8006f10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f02:	f7ff f893 	bl	800602c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f06:	68f9      	ldr	r1, [r7, #12]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff ff8d 	bl	8006e28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f0e:	e024      	b.n	8006f5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d008      	beq.n	8006f28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f16:	4b13      	ldr	r3, [pc, #76]	@ (8006f64 <prvProcessTimerOrBlockTask+0x90>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	bf0c      	ite	eq
 8006f20:	2301      	moveq	r3, #1
 8006f22:	2300      	movne	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f28:	4b0f      	ldr	r3, [pc, #60]	@ (8006f68 <prvProcessTimerOrBlockTask+0x94>)
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	4619      	mov	r1, r3
 8006f36:	f7fe fe13 	bl	8005b60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f3a:	f7ff f877 	bl	800602c <xTaskResumeAll>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f44:	4b09      	ldr	r3, [pc, #36]	@ (8006f6c <prvProcessTimerOrBlockTask+0x98>)
 8006f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	f3bf 8f6f 	isb	sy
}
 8006f54:	e001      	b.n	8006f5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f56:	f7ff f869 	bl	800602c <xTaskResumeAll>
}
 8006f5a:	bf00      	nop
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20003f48 	.word	0x20003f48
 8006f68:	20003f4c 	.word	0x20003f4c
 8006f6c:	e000ed04 	.word	0xe000ed04

08006f70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f78:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb4 <prvGetNextExpireTime+0x44>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d105      	bne.n	8006fa2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f96:	4b07      	ldr	r3, [pc, #28]	@ (8006fb4 <prvGetNextExpireTime+0x44>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	e001      	b.n	8006fa6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	20003f44 	.word	0x20003f44

08006fb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fc0:	f7ff f8d2 	bl	8006168 <xTaskGetTickCount>
 8006fc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff4 <prvSampleTimeNow+0x3c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d205      	bcs.n	8006fdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fd0:	f000 f910 	bl	80071f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e002      	b.n	8006fe2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fe2:	4a04      	ldr	r2, [pc, #16]	@ (8006ff4 <prvSampleTimeNow+0x3c>)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20003f54 	.word	0x20003f54

08006ff8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	429a      	cmp	r2, r3
 800701c:	d812      	bhi.n	8007044 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	1ad2      	subs	r2, r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	429a      	cmp	r2, r3
 800702a:	d302      	bcc.n	8007032 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	e01b      	b.n	800706a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007032:	4b10      	ldr	r3, [pc, #64]	@ (8007074 <prvInsertTimerInActiveList+0x7c>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3304      	adds	r3, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f7fe f868 	bl	8005112 <vListInsert>
 8007042:	e012      	b.n	800706a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d206      	bcs.n	800705a <prvInsertTimerInActiveList+0x62>
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d302      	bcc.n	800705a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007054:	2301      	movs	r3, #1
 8007056:	617b      	str	r3, [r7, #20]
 8007058:	e007      	b.n	800706a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800705a:	4b07      	ldr	r3, [pc, #28]	@ (8007078 <prvInsertTimerInActiveList+0x80>)
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3304      	adds	r3, #4
 8007062:	4619      	mov	r1, r3
 8007064:	4610      	mov	r0, r2
 8007066:	f7fe f854 	bl	8005112 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800706a:	697b      	ldr	r3, [r7, #20]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20003f48 	.word	0x20003f48
 8007078:	20003f44 	.word	0x20003f44

0800707c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08e      	sub	sp, #56	@ 0x38
 8007080:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007082:	e0a5      	b.n	80071d0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	da19      	bge.n	80070be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800708a:	1d3b      	adds	r3, r7, #4
 800708c:	3304      	adds	r3, #4
 800708e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	61fb      	str	r3, [r7, #28]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b4:	6850      	ldr	r0, [r2, #4]
 80070b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b8:	6892      	ldr	r2, [r2, #8]
 80070ba:	4611      	mov	r1, r2
 80070bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f2c0 8085 	blt.w	80071d0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d4:	3304      	adds	r3, #4
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fe f854 	bl	8005184 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070dc:	463b      	mov	r3, r7
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff ff6a 	bl	8006fb8 <prvSampleTimeNow>
 80070e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b09      	cmp	r3, #9
 80070ea:	d86c      	bhi.n	80071c6 <prvProcessReceivedCommands+0x14a>
 80070ec:	a201      	add	r2, pc, #4	@ (adr r2, 80070f4 <prvProcessReceivedCommands+0x78>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	0800711d 	.word	0x0800711d
 80070f8:	0800711d 	.word	0x0800711d
 80070fc:	0800711d 	.word	0x0800711d
 8007100:	080071c7 	.word	0x080071c7
 8007104:	0800717b 	.word	0x0800717b
 8007108:	080071b5 	.word	0x080071b5
 800710c:	0800711d 	.word	0x0800711d
 8007110:	0800711d 	.word	0x0800711d
 8007114:	080071c7 	.word	0x080071c7
 8007118:	0800717b 	.word	0x0800717b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	18d1      	adds	r1, r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800712a:	f7ff ff65 	bl	8006ff8 <prvInsertTimerInActiveList>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d04a      	beq.n	80071ca <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800713a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d142      	bne.n	80071ca <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	441a      	add	r2, r3
 800714c:	2300      	movs	r3, #0
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	2300      	movs	r3, #0
 8007152:	2100      	movs	r1, #0
 8007154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007156:	f7ff fe19 	bl	8006d8c <xTimerGenericCommand>
 800715a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d133      	bne.n	80071ca <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	61bb      	str	r3, [r7, #24]
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop
 8007178:	e7fd      	b.n	8007176 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10b      	bne.n	80071a0 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	617b      	str	r3, [r7, #20]
}
 800719a:	bf00      	nop
 800719c:	bf00      	nop
 800719e:	e7fd      	b.n	800719c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	699a      	ldr	r2, [r3, #24]
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	18d1      	adds	r1, r2, r3
 80071a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071ae:	f7ff ff23 	bl	8006ff8 <prvInsertTimerInActiveList>
					break;
 80071b2:	e00d      	b.n	80071d0 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80071b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d107      	bne.n	80071ce <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80071be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071c0:	f000 fbd4 	bl	800796c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071c4:	e003      	b.n	80071ce <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80071c6:	bf00      	nop
 80071c8:	e002      	b.n	80071d0 <prvProcessReceivedCommands+0x154>
					break;
 80071ca:	bf00      	nop
 80071cc:	e000      	b.n	80071d0 <prvProcessReceivedCommands+0x154>
					break;
 80071ce:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071d0:	4b07      	ldr	r3, [pc, #28]	@ (80071f0 <prvProcessReceivedCommands+0x174>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	1d39      	adds	r1, r7, #4
 80071d6:	2200      	movs	r2, #0
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe faa5 	bl	8005728 <xQueueReceive>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f47f af4f 	bne.w	8007084 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80071e6:	bf00      	nop
 80071e8:	bf00      	nop
 80071ea:	3730      	adds	r7, #48	@ 0x30
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20003f4c 	.word	0x20003f4c

080071f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071fa:	e046      	b.n	800728a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071fc:	4b2c      	ldr	r3, [pc, #176]	@ (80072b0 <prvSwitchTimerLists+0xbc>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007206:	4b2a      	ldr	r3, [pc, #168]	@ (80072b0 <prvSwitchTimerLists+0xbc>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3304      	adds	r3, #4
 8007214:	4618      	mov	r0, r3
 8007216:	f7fd ffb5 	bl	8005184 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d12f      	bne.n	800728a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4413      	add	r3, r2
 8007232:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	429a      	cmp	r2, r3
 800723a:	d90e      	bls.n	800725a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007248:	4b19      	ldr	r3, [pc, #100]	@ (80072b0 <prvSwitchTimerLists+0xbc>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3304      	adds	r3, #4
 8007250:	4619      	mov	r1, r3
 8007252:	4610      	mov	r0, r2
 8007254:	f7fd ff5d 	bl	8005112 <vListInsert>
 8007258:	e017      	b.n	800728a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800725a:	2300      	movs	r3, #0
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	2300      	movs	r3, #0
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	2100      	movs	r1, #0
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f7ff fd91 	bl	8006d8c <xTimerGenericCommand>
 800726a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <prvSwitchTimerLists+0x96>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	603b      	str	r3, [r7, #0]
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	e7fd      	b.n	8007286 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800728a:	4b09      	ldr	r3, [pc, #36]	@ (80072b0 <prvSwitchTimerLists+0xbc>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1b3      	bne.n	80071fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007294:	4b06      	ldr	r3, [pc, #24]	@ (80072b0 <prvSwitchTimerLists+0xbc>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800729a:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <prvSwitchTimerLists+0xc0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a04      	ldr	r2, [pc, #16]	@ (80072b0 <prvSwitchTimerLists+0xbc>)
 80072a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072a2:	4a04      	ldr	r2, [pc, #16]	@ (80072b4 <prvSwitchTimerLists+0xc0>)
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	6013      	str	r3, [r2, #0]
}
 80072a8:	bf00      	nop
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20003f44 	.word	0x20003f44
 80072b4:	20003f48 	.word	0x20003f48

080072b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072be:	f000 f96b 	bl	8007598 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072c2:	4b15      	ldr	r3, [pc, #84]	@ (8007318 <prvCheckForValidListAndQueue+0x60>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d120      	bne.n	800730c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072ca:	4814      	ldr	r0, [pc, #80]	@ (800731c <prvCheckForValidListAndQueue+0x64>)
 80072cc:	f7fd fed0 	bl	8005070 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072d0:	4813      	ldr	r0, [pc, #76]	@ (8007320 <prvCheckForValidListAndQueue+0x68>)
 80072d2:	f7fd fecd 	bl	8005070 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072d6:	4b13      	ldr	r3, [pc, #76]	@ (8007324 <prvCheckForValidListAndQueue+0x6c>)
 80072d8:	4a10      	ldr	r2, [pc, #64]	@ (800731c <prvCheckForValidListAndQueue+0x64>)
 80072da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072dc:	4b12      	ldr	r3, [pc, #72]	@ (8007328 <prvCheckForValidListAndQueue+0x70>)
 80072de:	4a10      	ldr	r2, [pc, #64]	@ (8007320 <prvCheckForValidListAndQueue+0x68>)
 80072e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072e2:	2300      	movs	r3, #0
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	4b11      	ldr	r3, [pc, #68]	@ (800732c <prvCheckForValidListAndQueue+0x74>)
 80072e8:	4a11      	ldr	r2, [pc, #68]	@ (8007330 <prvCheckForValidListAndQueue+0x78>)
 80072ea:	2110      	movs	r1, #16
 80072ec:	200a      	movs	r0, #10
 80072ee:	f7fd ffdd 	bl	80052ac <xQueueGenericCreateStatic>
 80072f2:	4603      	mov	r3, r0
 80072f4:	4a08      	ldr	r2, [pc, #32]	@ (8007318 <prvCheckForValidListAndQueue+0x60>)
 80072f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072f8:	4b07      	ldr	r3, [pc, #28]	@ (8007318 <prvCheckForValidListAndQueue+0x60>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007300:	4b05      	ldr	r3, [pc, #20]	@ (8007318 <prvCheckForValidListAndQueue+0x60>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	490b      	ldr	r1, [pc, #44]	@ (8007334 <prvCheckForValidListAndQueue+0x7c>)
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fc00 	bl	8005b0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800730c:	f000 f976 	bl	80075fc <vPortExitCritical>
}
 8007310:	bf00      	nop
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20003f4c 	.word	0x20003f4c
 800731c:	20003f1c 	.word	0x20003f1c
 8007320:	20003f30 	.word	0x20003f30
 8007324:	20003f44 	.word	0x20003f44
 8007328:	20003f48 	.word	0x20003f48
 800732c:	20003ff8 	.word	0x20003ff8
 8007330:	20003f58 	.word	0x20003f58
 8007334:	08007da4 	.word	0x08007da4

08007338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3b04      	subs	r3, #4
 8007348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3b04      	subs	r3, #4
 8007356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f023 0201 	bic.w	r2, r3, #1
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3b04      	subs	r3, #4
 8007366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007368:	4a0c      	ldr	r2, [pc, #48]	@ (800739c <pxPortInitialiseStack+0x64>)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3b14      	subs	r3, #20
 8007372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3b04      	subs	r3, #4
 800737e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f06f 0202 	mvn.w	r2, #2
 8007386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3b20      	subs	r3, #32
 800738c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800738e:	68fb      	ldr	r3, [r7, #12]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	080073a1 	.word	0x080073a1

080073a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073aa:	4b13      	ldr	r3, [pc, #76]	@ (80073f8 <prvTaskExitError+0x58>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b2:	d00b      	beq.n	80073cc <prvTaskExitError+0x2c>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	60fb      	str	r3, [r7, #12]
}
 80073c6:	bf00      	nop
 80073c8:	bf00      	nop
 80073ca:	e7fd      	b.n	80073c8 <prvTaskExitError+0x28>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	60bb      	str	r3, [r7, #8]
}
 80073de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073e0:	bf00      	nop
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0fc      	beq.n	80073e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	2000000c 	.word	0x2000000c
 80073fc:	00000000 	.word	0x00000000

08007400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007400:	4b07      	ldr	r3, [pc, #28]	@ (8007420 <pxCurrentTCBConst2>)
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	6808      	ldr	r0, [r1, #0]
 8007406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740a:	f380 8809 	msr	PSP, r0
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f380 8811 	msr	BASEPRI, r0
 800741a:	4770      	bx	lr
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst2>:
 8007420:	20003a1c 	.word	0x20003a1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007428:	4808      	ldr	r0, [pc, #32]	@ (800744c <prvPortStartFirstTask+0x24>)
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	6800      	ldr	r0, [r0, #0]
 800742e:	f380 8808 	msr	MSP, r0
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8814 	msr	CONTROL, r0
 800743a:	b662      	cpsie	i
 800743c:	b661      	cpsie	f
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	df00      	svc	0
 8007448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800744a:	bf00      	nop
 800744c:	e000ed08 	.word	0xe000ed08

08007450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007456:	4b47      	ldr	r3, [pc, #284]	@ (8007574 <xPortStartScheduler+0x124>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a47      	ldr	r2, [pc, #284]	@ (8007578 <xPortStartScheduler+0x128>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d10b      	bne.n	8007478 <xPortStartScheduler+0x28>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	613b      	str	r3, [r7, #16]
}
 8007472:	bf00      	nop
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007478:	4b3e      	ldr	r3, [pc, #248]	@ (8007574 <xPortStartScheduler+0x124>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a3f      	ldr	r2, [pc, #252]	@ (800757c <xPortStartScheduler+0x12c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d10b      	bne.n	800749a <xPortStartScheduler+0x4a>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	60fb      	str	r3, [r7, #12]
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	e7fd      	b.n	8007496 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800749a:	4b39      	ldr	r3, [pc, #228]	@ (8007580 <xPortStartScheduler+0x130>)
 800749c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	22ff      	movs	r2, #255	@ 0xff
 80074aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	4b31      	ldr	r3, [pc, #196]	@ (8007584 <xPortStartScheduler+0x134>)
 80074c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074c2:	4b31      	ldr	r3, [pc, #196]	@ (8007588 <xPortStartScheduler+0x138>)
 80074c4:	2207      	movs	r2, #7
 80074c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074c8:	e009      	b.n	80074de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80074ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007588 <xPortStartScheduler+0x138>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007588 <xPortStartScheduler+0x138>)
 80074d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074de:	78fb      	ldrb	r3, [r7, #3]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e6:	2b80      	cmp	r3, #128	@ 0x80
 80074e8:	d0ef      	beq.n	80074ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074ea:	4b27      	ldr	r3, [pc, #156]	@ (8007588 <xPortStartScheduler+0x138>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f1c3 0307 	rsb	r3, r3, #7
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d00b      	beq.n	800750e <xPortStartScheduler+0xbe>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	60bb      	str	r3, [r7, #8]
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	e7fd      	b.n	800750a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800750e:	4b1e      	ldr	r3, [pc, #120]	@ (8007588 <xPortStartScheduler+0x138>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	4a1c      	ldr	r2, [pc, #112]	@ (8007588 <xPortStartScheduler+0x138>)
 8007516:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007518:	4b1b      	ldr	r3, [pc, #108]	@ (8007588 <xPortStartScheduler+0x138>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007520:	4a19      	ldr	r2, [pc, #100]	@ (8007588 <xPortStartScheduler+0x138>)
 8007522:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800752c:	4b17      	ldr	r3, [pc, #92]	@ (800758c <xPortStartScheduler+0x13c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a16      	ldr	r2, [pc, #88]	@ (800758c <xPortStartScheduler+0x13c>)
 8007532:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007536:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007538:	4b14      	ldr	r3, [pc, #80]	@ (800758c <xPortStartScheduler+0x13c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a13      	ldr	r2, [pc, #76]	@ (800758c <xPortStartScheduler+0x13c>)
 800753e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007542:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007544:	f000 f8da 	bl	80076fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007548:	4b11      	ldr	r3, [pc, #68]	@ (8007590 <xPortStartScheduler+0x140>)
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800754e:	f000 f8f9 	bl	8007744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007552:	4b10      	ldr	r3, [pc, #64]	@ (8007594 <xPortStartScheduler+0x144>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a0f      	ldr	r2, [pc, #60]	@ (8007594 <xPortStartScheduler+0x144>)
 8007558:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800755c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800755e:	f7ff ff63 	bl	8007428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007562:	f7fe fed1 	bl	8006308 <vTaskSwitchContext>
	prvTaskExitError();
 8007566:	f7ff ff1b 	bl	80073a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	e000ed00 	.word	0xe000ed00
 8007578:	410fc271 	.word	0x410fc271
 800757c:	410fc270 	.word	0x410fc270
 8007580:	e000e400 	.word	0xe000e400
 8007584:	20004048 	.word	0x20004048
 8007588:	2000404c 	.word	0x2000404c
 800758c:	e000ed20 	.word	0xe000ed20
 8007590:	2000000c 	.word	0x2000000c
 8007594:	e000ef34 	.word	0xe000ef34

08007598 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	607b      	str	r3, [r7, #4]
}
 80075b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075b2:	4b10      	ldr	r3, [pc, #64]	@ (80075f4 <vPortEnterCritical+0x5c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3301      	adds	r3, #1
 80075b8:	4a0e      	ldr	r2, [pc, #56]	@ (80075f4 <vPortEnterCritical+0x5c>)
 80075ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075bc:	4b0d      	ldr	r3, [pc, #52]	@ (80075f4 <vPortEnterCritical+0x5c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d110      	bne.n	80075e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075c4:	4b0c      	ldr	r3, [pc, #48]	@ (80075f8 <vPortEnterCritical+0x60>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	603b      	str	r3, [r7, #0]
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	e7fd      	b.n	80075e2 <vPortEnterCritical+0x4a>
	}
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	2000000c 	.word	0x2000000c
 80075f8:	e000ed04 	.word	0xe000ed04

080075fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007602:	4b12      	ldr	r3, [pc, #72]	@ (800764c <vPortExitCritical+0x50>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10b      	bne.n	8007622 <vPortExitCritical+0x26>
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	607b      	str	r3, [r7, #4]
}
 800761c:	bf00      	nop
 800761e:	bf00      	nop
 8007620:	e7fd      	b.n	800761e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007622:	4b0a      	ldr	r3, [pc, #40]	@ (800764c <vPortExitCritical+0x50>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3b01      	subs	r3, #1
 8007628:	4a08      	ldr	r2, [pc, #32]	@ (800764c <vPortExitCritical+0x50>)
 800762a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800762c:	4b07      	ldr	r3, [pc, #28]	@ (800764c <vPortExitCritical+0x50>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d105      	bne.n	8007640 <vPortExitCritical+0x44>
 8007634:	2300      	movs	r3, #0
 8007636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f383 8811 	msr	BASEPRI, r3
}
 800763e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	2000000c 	.word	0x2000000c

08007650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007650:	f3ef 8009 	mrs	r0, PSP
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4b15      	ldr	r3, [pc, #84]	@ (80076b0 <pxCurrentTCBConst>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	f01e 0f10 	tst.w	lr, #16
 8007660:	bf08      	it	eq
 8007662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	6010      	str	r0, [r2, #0]
 800766c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007670:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007674:	f380 8811 	msr	BASEPRI, r0
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f7fe fe42 	bl	8006308 <vTaskSwitchContext>
 8007684:	f04f 0000 	mov.w	r0, #0
 8007688:	f380 8811 	msr	BASEPRI, r0
 800768c:	bc09      	pop	{r0, r3}
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	6808      	ldr	r0, [r1, #0]
 8007692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007696:	f01e 0f10 	tst.w	lr, #16
 800769a:	bf08      	it	eq
 800769c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076a0:	f380 8809 	msr	PSP, r0
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w

080076b0 <pxCurrentTCBConst>:
 80076b0:	20003a1c 	.word	0x20003a1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	607b      	str	r3, [r7, #4]
}
 80076d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076d2:	f7fe fd59 	bl	8006188 <xTaskIncrementTick>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076dc:	4b06      	ldr	r3, [pc, #24]	@ (80076f8 <SysTick_Handler+0x40>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f383 8811 	msr	BASEPRI, r3
}
 80076ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007700:	4b0b      	ldr	r3, [pc, #44]	@ (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007706:	4b0b      	ldr	r3, [pc, #44]	@ (8007734 <vPortSetupTimerInterrupt+0x38>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800770c:	4b0a      	ldr	r3, [pc, #40]	@ (8007738 <vPortSetupTimerInterrupt+0x3c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0a      	ldr	r2, [pc, #40]	@ (800773c <vPortSetupTimerInterrupt+0x40>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	4a09      	ldr	r2, [pc, #36]	@ (8007740 <vPortSetupTimerInterrupt+0x44>)
 800771a:	3b01      	subs	r3, #1
 800771c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800771e:	4b04      	ldr	r3, [pc, #16]	@ (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007720:	2207      	movs	r2, #7
 8007722:	601a      	str	r2, [r3, #0]
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	e000e010 	.word	0xe000e010
 8007734:	e000e018 	.word	0xe000e018
 8007738:	20000000 	.word	0x20000000
 800773c:	10624dd3 	.word	0x10624dd3
 8007740:	e000e014 	.word	0xe000e014

08007744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007744:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007754 <vPortEnableVFP+0x10>
 8007748:	6801      	ldr	r1, [r0, #0]
 800774a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800774e:	6001      	str	r1, [r0, #0]
 8007750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007752:	bf00      	nop
 8007754:	e000ed88 	.word	0xe000ed88

08007758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800775e:	f3ef 8305 	mrs	r3, IPSR
 8007762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b0f      	cmp	r3, #15
 8007768:	d915      	bls.n	8007796 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800776a:	4a18      	ldr	r2, [pc, #96]	@ (80077cc <vPortValidateInterruptPriority+0x74>)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007774:	4b16      	ldr	r3, [pc, #88]	@ (80077d0 <vPortValidateInterruptPriority+0x78>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	7afa      	ldrb	r2, [r7, #11]
 800777a:	429a      	cmp	r2, r3
 800777c:	d20b      	bcs.n	8007796 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
}
 8007790:	bf00      	nop
 8007792:	bf00      	nop
 8007794:	e7fd      	b.n	8007792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007796:	4b0f      	ldr	r3, [pc, #60]	@ (80077d4 <vPortValidateInterruptPriority+0x7c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800779e:	4b0e      	ldr	r3, [pc, #56]	@ (80077d8 <vPortValidateInterruptPriority+0x80>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d90b      	bls.n	80077be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	603b      	str	r3, [r7, #0]
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	e7fd      	b.n	80077ba <vPortValidateInterruptPriority+0x62>
	}
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	e000e3f0 	.word	0xe000e3f0
 80077d0:	20004048 	.word	0x20004048
 80077d4:	e000ed0c 	.word	0xe000ed0c
 80077d8:	2000404c 	.word	0x2000404c

080077dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	@ 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077e8:	f7fe fc12 	bl	8006010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077ec:	4b5a      	ldr	r3, [pc, #360]	@ (8007958 <pvPortMalloc+0x17c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077f4:	f000 f916 	bl	8007a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077f8:	4b58      	ldr	r3, [pc, #352]	@ (800795c <pvPortMalloc+0x180>)
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4013      	ands	r3, r2
 8007800:	2b00      	cmp	r3, #0
 8007802:	f040 8090 	bne.w	8007926 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01e      	beq.n	800784a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800780c:	2208      	movs	r2, #8
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4413      	add	r3, r2
 8007812:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	2b00      	cmp	r3, #0
 800781c:	d015      	beq.n	800784a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f023 0307 	bic.w	r3, r3, #7
 8007824:	3308      	adds	r3, #8
 8007826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <pvPortMalloc+0x6e>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	617b      	str	r3, [r7, #20]
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	e7fd      	b.n	8007846 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d06a      	beq.n	8007926 <pvPortMalloc+0x14a>
 8007850:	4b43      	ldr	r3, [pc, #268]	@ (8007960 <pvPortMalloc+0x184>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	429a      	cmp	r2, r3
 8007858:	d865      	bhi.n	8007926 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800785a:	4b42      	ldr	r3, [pc, #264]	@ (8007964 <pvPortMalloc+0x188>)
 800785c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800785e:	4b41      	ldr	r3, [pc, #260]	@ (8007964 <pvPortMalloc+0x188>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007864:	e004      	b.n	8007870 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	429a      	cmp	r2, r3
 8007878:	d903      	bls.n	8007882 <pvPortMalloc+0xa6>
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1f1      	bne.n	8007866 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007882:	4b35      	ldr	r3, [pc, #212]	@ (8007958 <pvPortMalloc+0x17c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007888:	429a      	cmp	r2, r3
 800788a:	d04c      	beq.n	8007926 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2208      	movs	r2, #8
 8007892:	4413      	add	r3, r2
 8007894:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	1ad2      	subs	r2, r2, r3
 80078a6:	2308      	movs	r3, #8
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d920      	bls.n	80078f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <pvPortMalloc+0xfc>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	613b      	str	r3, [r7, #16]
}
 80078d2:	bf00      	nop
 80078d4:	bf00      	nop
 80078d6:	e7fd      	b.n	80078d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078ea:	69b8      	ldr	r0, [r7, #24]
 80078ec:	f000 f8fc 	bl	8007ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007960 <pvPortMalloc+0x184>)
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	4a19      	ldr	r2, [pc, #100]	@ (8007960 <pvPortMalloc+0x184>)
 80078fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078fe:	4b18      	ldr	r3, [pc, #96]	@ (8007960 <pvPortMalloc+0x184>)
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	4b19      	ldr	r3, [pc, #100]	@ (8007968 <pvPortMalloc+0x18c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d203      	bcs.n	8007912 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800790a:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <pvPortMalloc+0x184>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a16      	ldr	r2, [pc, #88]	@ (8007968 <pvPortMalloc+0x18c>)
 8007910:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	4b11      	ldr	r3, [pc, #68]	@ (800795c <pvPortMalloc+0x180>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	431a      	orrs	r2, r3
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007926:	f7fe fb81 	bl	800602c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00b      	beq.n	800794c <pvPortMalloc+0x170>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	60fb      	str	r3, [r7, #12]
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	e7fd      	b.n	8007948 <pvPortMalloc+0x16c>
	return pvReturn;
 800794c:	69fb      	ldr	r3, [r7, #28]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3728      	adds	r7, #40	@ 0x28
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20004c58 	.word	0x20004c58
 800795c:	20004c64 	.word	0x20004c64
 8007960:	20004c5c 	.word	0x20004c5c
 8007964:	20004c50 	.word	0x20004c50
 8007968:	20004c60 	.word	0x20004c60

0800796c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d04a      	beq.n	8007a14 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800797e:	2308      	movs	r3, #8
 8007980:	425b      	negs	r3, r3
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4413      	add	r3, r2
 8007986:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	4b22      	ldr	r3, [pc, #136]	@ (8007a1c <vPortFree+0xb0>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4013      	ands	r3, r2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <vPortFree+0x46>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	60fb      	str	r3, [r7, #12]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00b      	beq.n	80079d2 <vPortFree+0x66>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	60bb      	str	r3, [r7, #8]
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	e7fd      	b.n	80079ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	4b11      	ldr	r3, [pc, #68]	@ (8007a1c <vPortFree+0xb0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d019      	beq.n	8007a14 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d115      	bne.n	8007a14 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	4b0b      	ldr	r3, [pc, #44]	@ (8007a1c <vPortFree+0xb0>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	43db      	mvns	r3, r3
 80079f2:	401a      	ands	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079f8:	f7fe fb0a 	bl	8006010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	4b07      	ldr	r3, [pc, #28]	@ (8007a20 <vPortFree+0xb4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	4a06      	ldr	r2, [pc, #24]	@ (8007a20 <vPortFree+0xb4>)
 8007a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a0a:	6938      	ldr	r0, [r7, #16]
 8007a0c:	f000 f86c 	bl	8007ae8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a10:	f7fe fb0c 	bl	800602c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a14:	bf00      	nop
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20004c64 	.word	0x20004c64
 8007a20:	20004c5c 	.word	0x20004c5c

08007a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a30:	4b27      	ldr	r3, [pc, #156]	@ (8007ad0 <prvHeapInit+0xac>)
 8007a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3307      	adds	r3, #7
 8007a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad0 <prvHeapInit+0xac>)
 8007a54:	4413      	add	r3, r2
 8007a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ad4 <prvHeapInit+0xb0>)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a62:	4b1c      	ldr	r3, [pc, #112]	@ (8007ad4 <prvHeapInit+0xb0>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a70:	2208      	movs	r2, #8
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0307 	bic.w	r3, r3, #7
 8007a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4a15      	ldr	r2, [pc, #84]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a86:	4b14      	ldr	r3, [pc, #80]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a8e:	4b12      	ldr	r3, [pc, #72]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8007adc <prvHeapInit+0xb8>)
 8007ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4a09      	ldr	r2, [pc, #36]	@ (8007ae0 <prvHeapInit+0xbc>)
 8007aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007abc:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <prvHeapInit+0xc0>)
 8007abe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	20004050 	.word	0x20004050
 8007ad4:	20004c50 	.word	0x20004c50
 8007ad8:	20004c58 	.word	0x20004c58
 8007adc:	20004c60 	.word	0x20004c60
 8007ae0:	20004c5c 	.word	0x20004c5c
 8007ae4:	20004c64 	.word	0x20004c64

08007ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007af0:	4b28      	ldr	r3, [pc, #160]	@ (8007b94 <prvInsertBlockIntoFreeList+0xac>)
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e002      	b.n	8007afc <prvInsertBlockIntoFreeList+0x14>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d8f7      	bhi.n	8007af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4413      	add	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d108      	bne.n	8007b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	441a      	add	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d118      	bne.n	8007b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4b15      	ldr	r3, [pc, #84]	@ (8007b98 <prvInsertBlockIntoFreeList+0xb0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d00d      	beq.n	8007b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e008      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b66:	4b0c      	ldr	r3, [pc, #48]	@ (8007b98 <prvInsertBlockIntoFreeList+0xb0>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e003      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d002      	beq.n	8007b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b86:	bf00      	nop
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	20004c50 	.word	0x20004c50
 8007b98:	20004c58 	.word	0x20004c58

08007b9c <memset>:
 8007b9c:	4402      	add	r2, r0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d100      	bne.n	8007ba6 <memset+0xa>
 8007ba4:	4770      	bx	lr
 8007ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8007baa:	e7f9      	b.n	8007ba0 <memset+0x4>

08007bac <_reclaim_reent>:
 8007bac:	4b29      	ldr	r3, [pc, #164]	@ (8007c54 <_reclaim_reent+0xa8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4283      	cmp	r3, r0
 8007bb2:	b570      	push	{r4, r5, r6, lr}
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	d04b      	beq.n	8007c50 <_reclaim_reent+0xa4>
 8007bb8:	69c3      	ldr	r3, [r0, #28]
 8007bba:	b1ab      	cbz	r3, 8007be8 <_reclaim_reent+0x3c>
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	b16b      	cbz	r3, 8007bdc <_reclaim_reent+0x30>
 8007bc0:	2500      	movs	r5, #0
 8007bc2:	69e3      	ldr	r3, [r4, #28]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	5959      	ldr	r1, [r3, r5]
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	d13b      	bne.n	8007c44 <_reclaim_reent+0x98>
 8007bcc:	3504      	adds	r5, #4
 8007bce:	2d80      	cmp	r5, #128	@ 0x80
 8007bd0:	d1f7      	bne.n	8007bc2 <_reclaim_reent+0x16>
 8007bd2:	69e3      	ldr	r3, [r4, #28]
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	68d9      	ldr	r1, [r3, #12]
 8007bd8:	f000 f872 	bl	8007cc0 <_free_r>
 8007bdc:	69e3      	ldr	r3, [r4, #28]
 8007bde:	6819      	ldr	r1, [r3, #0]
 8007be0:	b111      	cbz	r1, 8007be8 <_reclaim_reent+0x3c>
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 f86c 	bl	8007cc0 <_free_r>
 8007be8:	6961      	ldr	r1, [r4, #20]
 8007bea:	b111      	cbz	r1, 8007bf2 <_reclaim_reent+0x46>
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 f867 	bl	8007cc0 <_free_r>
 8007bf2:	69e1      	ldr	r1, [r4, #28]
 8007bf4:	b111      	cbz	r1, 8007bfc <_reclaim_reent+0x50>
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 f862 	bl	8007cc0 <_free_r>
 8007bfc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007bfe:	b111      	cbz	r1, 8007c06 <_reclaim_reent+0x5a>
 8007c00:	4620      	mov	r0, r4
 8007c02:	f000 f85d 	bl	8007cc0 <_free_r>
 8007c06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c08:	b111      	cbz	r1, 8007c10 <_reclaim_reent+0x64>
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f000 f858 	bl	8007cc0 <_free_r>
 8007c10:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c12:	b111      	cbz	r1, 8007c1a <_reclaim_reent+0x6e>
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 f853 	bl	8007cc0 <_free_r>
 8007c1a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c1c:	b111      	cbz	r1, 8007c24 <_reclaim_reent+0x78>
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 f84e 	bl	8007cc0 <_free_r>
 8007c24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c26:	b111      	cbz	r1, 8007c2e <_reclaim_reent+0x82>
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 f849 	bl	8007cc0 <_free_r>
 8007c2e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c30:	b111      	cbz	r1, 8007c38 <_reclaim_reent+0x8c>
 8007c32:	4620      	mov	r0, r4
 8007c34:	f000 f844 	bl	8007cc0 <_free_r>
 8007c38:	6a23      	ldr	r3, [r4, #32]
 8007c3a:	b14b      	cbz	r3, 8007c50 <_reclaim_reent+0xa4>
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c42:	4718      	bx	r3
 8007c44:	680e      	ldr	r6, [r1, #0]
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 f83a 	bl	8007cc0 <_free_r>
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	e7bb      	b.n	8007bc8 <_reclaim_reent+0x1c>
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	bf00      	nop
 8007c54:	20000010 	.word	0x20000010

08007c58 <__libc_init_array>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8007c90 <__libc_init_array+0x38>)
 8007c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8007c94 <__libc_init_array+0x3c>)
 8007c5e:	1b64      	subs	r4, r4, r5
 8007c60:	10a4      	asrs	r4, r4, #2
 8007c62:	2600      	movs	r6, #0
 8007c64:	42a6      	cmp	r6, r4
 8007c66:	d109      	bne.n	8007c7c <__libc_init_array+0x24>
 8007c68:	4d0b      	ldr	r5, [pc, #44]	@ (8007c98 <__libc_init_array+0x40>)
 8007c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8007c9c <__libc_init_array+0x44>)
 8007c6c:	f000 f87e 	bl	8007d6c <_init>
 8007c70:	1b64      	subs	r4, r4, r5
 8007c72:	10a4      	asrs	r4, r4, #2
 8007c74:	2600      	movs	r6, #0
 8007c76:	42a6      	cmp	r6, r4
 8007c78:	d105      	bne.n	8007c86 <__libc_init_array+0x2e>
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
 8007c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c80:	4798      	blx	r3
 8007c82:	3601      	adds	r6, #1
 8007c84:	e7ee      	b.n	8007c64 <__libc_init_array+0xc>
 8007c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8a:	4798      	blx	r3
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	e7f2      	b.n	8007c76 <__libc_init_array+0x1e>
 8007c90:	08007e2c 	.word	0x08007e2c
 8007c94:	08007e2c 	.word	0x08007e2c
 8007c98:	08007e2c 	.word	0x08007e2c
 8007c9c:	08007e30 	.word	0x08007e30

08007ca0 <__retarget_lock_acquire_recursive>:
 8007ca0:	4770      	bx	lr

08007ca2 <__retarget_lock_release_recursive>:
 8007ca2:	4770      	bx	lr

08007ca4 <memcpy>:
 8007ca4:	440a      	add	r2, r1
 8007ca6:	4291      	cmp	r1, r2
 8007ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cac:	d100      	bne.n	8007cb0 <memcpy+0xc>
 8007cae:	4770      	bx	lr
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cba:	4291      	cmp	r1, r2
 8007cbc:	d1f9      	bne.n	8007cb2 <memcpy+0xe>
 8007cbe:	bd10      	pop	{r4, pc}

08007cc0 <_free_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	2900      	cmp	r1, #0
 8007cc6:	d041      	beq.n	8007d4c <_free_r+0x8c>
 8007cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ccc:	1f0c      	subs	r4, r1, #4
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	bfb8      	it	lt
 8007cd2:	18e4      	addlt	r4, r4, r3
 8007cd4:	f000 f83e 	bl	8007d54 <__malloc_lock>
 8007cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d50 <_free_r+0x90>)
 8007cda:	6813      	ldr	r3, [r2, #0]
 8007cdc:	b933      	cbnz	r3, 8007cec <_free_r+0x2c>
 8007cde:	6063      	str	r3, [r4, #4]
 8007ce0:	6014      	str	r4, [r2, #0]
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ce8:	f000 b83a 	b.w	8007d60 <__malloc_unlock>
 8007cec:	42a3      	cmp	r3, r4
 8007cee:	d908      	bls.n	8007d02 <_free_r+0x42>
 8007cf0:	6820      	ldr	r0, [r4, #0]
 8007cf2:	1821      	adds	r1, r4, r0
 8007cf4:	428b      	cmp	r3, r1
 8007cf6:	bf01      	itttt	eq
 8007cf8:	6819      	ldreq	r1, [r3, #0]
 8007cfa:	685b      	ldreq	r3, [r3, #4]
 8007cfc:	1809      	addeq	r1, r1, r0
 8007cfe:	6021      	streq	r1, [r4, #0]
 8007d00:	e7ed      	b.n	8007cde <_free_r+0x1e>
 8007d02:	461a      	mov	r2, r3
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	b10b      	cbz	r3, 8007d0c <_free_r+0x4c>
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	d9fa      	bls.n	8007d02 <_free_r+0x42>
 8007d0c:	6811      	ldr	r1, [r2, #0]
 8007d0e:	1850      	adds	r0, r2, r1
 8007d10:	42a0      	cmp	r0, r4
 8007d12:	d10b      	bne.n	8007d2c <_free_r+0x6c>
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	4401      	add	r1, r0
 8007d18:	1850      	adds	r0, r2, r1
 8007d1a:	4283      	cmp	r3, r0
 8007d1c:	6011      	str	r1, [r2, #0]
 8007d1e:	d1e0      	bne.n	8007ce2 <_free_r+0x22>
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	6053      	str	r3, [r2, #4]
 8007d26:	4408      	add	r0, r1
 8007d28:	6010      	str	r0, [r2, #0]
 8007d2a:	e7da      	b.n	8007ce2 <_free_r+0x22>
 8007d2c:	d902      	bls.n	8007d34 <_free_r+0x74>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	602b      	str	r3, [r5, #0]
 8007d32:	e7d6      	b.n	8007ce2 <_free_r+0x22>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	1821      	adds	r1, r4, r0
 8007d38:	428b      	cmp	r3, r1
 8007d3a:	bf04      	itt	eq
 8007d3c:	6819      	ldreq	r1, [r3, #0]
 8007d3e:	685b      	ldreq	r3, [r3, #4]
 8007d40:	6063      	str	r3, [r4, #4]
 8007d42:	bf04      	itt	eq
 8007d44:	1809      	addeq	r1, r1, r0
 8007d46:	6021      	streq	r1, [r4, #0]
 8007d48:	6054      	str	r4, [r2, #4]
 8007d4a:	e7ca      	b.n	8007ce2 <_free_r+0x22>
 8007d4c:	bd38      	pop	{r3, r4, r5, pc}
 8007d4e:	bf00      	nop
 8007d50:	20004da4 	.word	0x20004da4

08007d54 <__malloc_lock>:
 8007d54:	4801      	ldr	r0, [pc, #4]	@ (8007d5c <__malloc_lock+0x8>)
 8007d56:	f7ff bfa3 	b.w	8007ca0 <__retarget_lock_acquire_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	20004da0 	.word	0x20004da0

08007d60 <__malloc_unlock>:
 8007d60:	4801      	ldr	r0, [pc, #4]	@ (8007d68 <__malloc_unlock+0x8>)
 8007d62:	f7ff bf9e 	b.w	8007ca2 <__retarget_lock_release_recursive>
 8007d66:	bf00      	nop
 8007d68:	20004da0 	.word	0x20004da0

08007d6c <_init>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr

08007d78 <_fini>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr
