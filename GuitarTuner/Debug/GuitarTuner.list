
GuitarTuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d4c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d510  08008eec  08008eec  00009eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080263fc  080263fc  00028060  2**0
                  CONTENTS
  4 .ARM          00000000  080263fc  080263fc  00028060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080263fc  080263fc  00028060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080263fc  080263fc  000273fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026400  08026400  00027400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08026404  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00028060  2**0
                  CONTENTS
 10 .bss          00008d60  20000060  20000060  00028060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008dc0  20008dc0  00028060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00028060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029982  00000000  00000000  00028090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ae6  00000000  00000000  00051a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d0  00000000  00000000  000564f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118c  00000000  00000000  00057cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004051  00000000  00000000  00058e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f432  00000000  00000000  0005cea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e013b  00000000  00000000  0007c2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0015c412  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065bc  00000000  00000000  0015c4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00162a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002fbb  00000000  00000000  00162af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000d0  00000000  00000000  00165aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ed4 	.word	0x08008ed4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08008ed4 	.word	0x08008ed4

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fcd0 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f836 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f9c2 	bl	8000574 <MX_GPIO_Init>
  MX_DMA_Init();
 80001f0:	f000 f9a2 	bl	8000538 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 f970 	bl	80004d8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001f8:	f000 f890 	bl	800031c <MX_ADC1_Init>
  MX_TIM6_Init();
 80001fc:	f000 f900 	bl	8000400 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000200:	f000 f934 	bl	800046c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_LENGTH);
 8000204:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000208:	480c      	ldr	r0, [pc, #48]	@ (800023c <main+0x5c>)
 800020a:	f007 fd97 	bl	8007d3c <arm_rfft_fast_init_f32>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800020e:	f004 fe1f 	bl	8004e50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DMATask */
  DMATaskHandle = osThreadNew(StartDMATask, NULL, &DMATask_attributes);
 8000212:	4a0b      	ldr	r2, [pc, #44]	@ (8000240 <main+0x60>)
 8000214:	2100      	movs	r1, #0
 8000216:	480b      	ldr	r0, [pc, #44]	@ (8000244 <main+0x64>)
 8000218:	f004 fe82 	bl	8004f20 <osThreadNew>
 800021c:	4603      	mov	r3, r0
 800021e:	4a0a      	ldr	r2, [pc, #40]	@ (8000248 <main+0x68>)
 8000220:	6013      	str	r3, [r2, #0]

  /* creation of fftTask */
  fftTaskHandle = osThreadNew(StartfftTaskTask, NULL, &fftTask_attributes);
 8000222:	4a0a      	ldr	r2, [pc, #40]	@ (800024c <main+0x6c>)
 8000224:	2100      	movs	r1, #0
 8000226:	480a      	ldr	r0, [pc, #40]	@ (8000250 <main+0x70>)
 8000228:	f004 fe7a 	bl	8004f20 <osThreadNew>
 800022c:	4603      	mov	r3, r0
 800022e:	4a09      	ldr	r2, [pc, #36]	@ (8000254 <main+0x74>)
 8000230:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000232:	f004 fe41 	bl	8004eb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000236:	bf00      	nop
 8000238:	e7fd      	b.n	8000236 <main+0x56>
 800023a:	bf00      	nop
 800023c:	20007238 	.word	0x20007238
 8000240:	08008f14 	.word	0x08008f14
 8000244:	08000681 	.word	0x08000681
 8000248:	20000230 	.word	0x20000230
 800024c:	08008f38 	.word	0x08008f38
 8000250:	08000705 	.word	0x08000705
 8000254:	20000234 	.word	0x20000234

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b0a6      	sub	sp, #152	@ 0x98
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000262:	2228      	movs	r2, #40	@ 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f008 fd4c 	bl	8008d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2258      	movs	r2, #88	@ 0x58
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f008 fd3e 	bl	8008d04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000288:	2302      	movs	r3, #2
 800028a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000290:	2310      	movs	r3, #16
 8000292:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 f91a 	bl	80024f0 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c2:	f000 fa79 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ca:	2302      	movs	r3, #2
 80002cc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002e0:	2102      	movs	r1, #2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 f958 	bl	8003598 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ee:	f000 fa63 	bl	80007b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80002f2:	2382      	movs	r3, #130	@ 0x82
 80002f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4618      	mov	r0, r3
 8000304:	f003 fb9a 	bl	8003a3c <HAL_RCCEx_PeriphCLKConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800030e:	f000 fa53 	bl	80007b8 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3798      	adds	r7, #152	@ 0x98
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08a      	sub	sp, #40	@ 0x28
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000322:	f107 031c 	add.w	r3, r7, #28
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
 800033c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800033e:	4b2f      	ldr	r3, [pc, #188]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000340:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000344:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000346:	4b2d      	ldr	r3, [pc, #180]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000348:	2200      	movs	r2, #0
 800034a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800034c:	4b2b      	ldr	r3, [pc, #172]	@ (80003fc <MX_ADC1_Init+0xe0>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000352:	4b2a      	ldr	r3, [pc, #168]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000358:	4b28      	ldr	r3, [pc, #160]	@ (80003fc <MX_ADC1_Init+0xe0>)
 800035a:	2200      	movs	r2, #0
 800035c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035e:	4b27      	ldr	r3, [pc, #156]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000360:	2200      	movs	r2, #0
 8000362:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000366:	4b25      	ldr	r3, [pc, #148]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800036c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800036e:	4b23      	ldr	r3, [pc, #140]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000370:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8000374:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000376:	4b21      	ldr	r3, [pc, #132]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800037c:	4b1f      	ldr	r3, [pc, #124]	@ (80003fc <MX_ADC1_Init+0xe0>)
 800037e:	2201      	movs	r2, #1
 8000380:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000382:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000384:	2201      	movs	r2, #1
 8000386:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800038a:	4b1c      	ldr	r3, [pc, #112]	@ (80003fc <MX_ADC1_Init+0xe0>)
 800038c:	2204      	movs	r2, #4
 800038e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000390:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000392:	2200      	movs	r2, #0
 8000394:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000396:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <MX_ADC1_Init+0xe0>)
 8000398:	2200      	movs	r2, #0
 800039a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800039c:	4817      	ldr	r0, [pc, #92]	@ (80003fc <MX_ADC1_Init+0xe0>)
 800039e:	f000 fc33 	bl	8000c08 <HAL_ADC_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80003a8:	f000 fa06 	bl	80007b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003b0:	f107 031c 	add.w	r3, r7, #28
 80003b4:	4619      	mov	r1, r3
 80003b6:	4811      	ldr	r0, [pc, #68]	@ (80003fc <MX_ADC1_Init+0xe0>)
 80003b8:	f001 fa26 	bl	8001808 <HAL_ADCEx_MultiModeConfigChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80003c2:	f000 f9f9 	bl	80007b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ce:	2300      	movs	r3, #0
 80003d0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4806      	ldr	r0, [pc, #24]	@ (80003fc <MX_ADC1_Init+0xe0>)
 80003e4:	f000 ff26 	bl	8001234 <HAL_ADC_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80003ee:	f000 f9e3 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	3728      	adds	r7, #40	@ 0x28
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000007c 	.word	0x2000007c

08000400 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000412:	4a15      	ldr	r2, [pc, #84]	@ (8000468 <MX_TIM6_Init+0x68>)
 8000414:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000418:	2247      	movs	r2, #71	@ 0x47
 800041a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <MX_TIM6_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 195-1;
 8000422:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000424:	22c2      	movs	r2, #194	@ 0xc2
 8000426:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000428:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_TIM6_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800042e:	480d      	ldr	r0, [pc, #52]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000430:	f003 fd22 	bl	8003e78 <HAL_TIM_Base_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800043a:	f000 f9bd 	bl	80007b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800043e:	2320      	movs	r3, #32
 8000440:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	4619      	mov	r1, r3
 800044a:	4806      	ldr	r0, [pc, #24]	@ (8000464 <MX_TIM6_Init+0x64>)
 800044c:	f004 f818 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000456:	f000 f9af 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000110 	.word	0x20000110
 8000468:	40001000 	.word	0x40001000

0800046c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800047c:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <MX_TIM7_Init+0x64>)
 800047e:	4a15      	ldr	r2, [pc, #84]	@ (80004d4 <MX_TIM7_Init+0x68>)
 8000480:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 8000482:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <MX_TIM7_Init+0x64>)
 8000484:	2201      	movs	r2, #1
 8000486:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000488:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <MX_TIM7_Init+0x64>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 36-1;
 800048e:	4b10      	ldr	r3, [pc, #64]	@ (80004d0 <MX_TIM7_Init+0x64>)
 8000490:	2223      	movs	r2, #35	@ 0x23
 8000492:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000494:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <MX_TIM7_Init+0x64>)
 8000496:	2200      	movs	r2, #0
 8000498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800049a:	480d      	ldr	r0, [pc, #52]	@ (80004d0 <MX_TIM7_Init+0x64>)
 800049c:	f003 fcec 	bl	8003e78 <HAL_TIM_Base_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80004a6:	f000 f987 	bl	80007b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004aa:	2300      	movs	r3, #0
 80004ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4619      	mov	r1, r3
 80004b6:	4806      	ldr	r0, [pc, #24]	@ (80004d0 <MX_TIM7_Init+0x64>)
 80004b8:	f003 ffe2 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80004c2:	f000 f979 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	2000015c 	.word	0x2000015c
 80004d4:	40001400 	.word	0x40001400

080004d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004dc:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004de:	4a15      	ldr	r2, [pc, #84]	@ (8000534 <MX_USART2_UART_Init+0x5c>)
 80004e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004e2:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004e4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80004e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ea:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 80004fe:	220c      	movs	r2, #12
 8000500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000502:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000508:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800050e:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800051a:	4805      	ldr	r0, [pc, #20]	@ (8000530 <MX_USART2_UART_Init+0x58>)
 800051c:	f004 f85a 	bl	80045d4 <HAL_UART_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000526:	f000 f947 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200001a8 	.word	0x200001a8
 8000534:	40004400 	.word	0x40004400

08000538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <MX_DMA_Init+0x38>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a0b      	ldr	r2, [pc, #44]	@ (8000570 <MX_DMA_Init+0x38>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_DMA_Init+0x38>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2105      	movs	r1, #5
 800055a:	200b      	movs	r0, #11
 800055c:	f001 fc2e 	bl	8001dbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000560:	200b      	movs	r0, #11
 8000562:	f001 fc47 	bl	8001df4 <HAL_NVIC_EnableIRQ>

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	@ 0x28
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b2b      	ldr	r3, [pc, #172]	@ (8000638 <MX_GPIO_Init+0xc4>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a2a      	ldr	r2, [pc, #168]	@ (8000638 <MX_GPIO_Init+0xc4>)
 8000590:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <MX_GPIO_Init+0xc4>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a24      	ldr	r2, [pc, #144]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a1e      	ldr	r2, [pc, #120]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a18      	ldr	r2, [pc, #96]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <MX_GPIO_Init+0xc4>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trace0_Pin|Trace1_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2160      	movs	r1, #96	@ 0x60
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f2:	f001 ff4b 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005fc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	480b      	ldr	r0, [pc, #44]	@ (800063c <MX_GPIO_Init+0xc8>)
 800060e:	f001 fdb3 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trace0_Pin Trace1_Pin */
  GPIO_InitStruct.Pin = Trace0_Pin|Trace1_Pin;
 8000612:	2360      	movs	r3, #96	@ 0x60
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062c:	f001 fda4 	bl	8002178 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	@ 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	48000800 	.word	0x48000800

08000640 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Notify the task that the transmission is complete. */
	vTaskNotifyGiveFromISR( DMATaskHandle, pdFALSE );
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fa9c 	bl	8006b8c <vTaskNotifyGiveFromISR>
	//HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000230 	.word	0x20000230

08000660 <HAL_ADC_ConvCpltCallback>:
void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Notify the task that the transmission is complete. */
	vTaskNotifyGiveFromISR( DMATaskHandle, pdFALSE );
 8000668:	4b04      	ldr	r3, [pc, #16]	@ (800067c <HAL_ADC_ConvCpltCallback+0x1c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 fa8c 	bl	8006b8c <vTaskNotifyGiveFromISR>
	//HAL_GPIO_TogglePin(GPIOA, Trace0_Pin);
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000230 	.word	0x20000230

08000680 <StartDMATask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDMATask */
void StartDMATask(void *argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint32_t DMAnotificationValue;

  HAL_ADC_Start_DMA(&hadc1, buffer_adc, ADC_BUFFER_LENGTH);
 8000688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068c:	4917      	ldr	r1, [pc, #92]	@ (80006ec <StartDMATask+0x6c>)
 800068e:	4818      	ldr	r0, [pc, #96]	@ (80006f0 <StartDMATask+0x70>)
 8000690:	f000 fcb4 	bl	8000ffc <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim6);
 8000694:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <StartDMATask+0x74>)
 8000696:	f003 fc47 	bl	8003f28 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 800069a:	4817      	ldr	r0, [pc, #92]	@ (80006f8 <StartDMATask+0x78>)
 800069c:	f003 fc44 	bl	8003f28 <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	  DMAnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	2001      	movs	r0, #1
 80006a6:	f006 f977 	bl	8006998 <ulTaskNotifyTake>
 80006aa:	60f8      	str	r0, [r7, #12]

	  if(DMAnotificationValue == 1)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d116      	bne.n	80006e0 <StartDMATask+0x60>
	  {
		  HAL_GPIO_WritePin(GPIOA, Trace0_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2120      	movs	r1, #32
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f001 fee7 	bl	800248c <HAL_GPIO_WritePin>
		  memcpy(park_buffer, buffer_adc, sizeof(uint32_t)*PARK_BUFFER_LENGTH);
 80006be:	4a0f      	ldr	r2, [pc, #60]	@ (80006fc <StartDMATask+0x7c>)
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <StartDMATask+0x6c>)
 80006c2:	4610      	mov	r0, r2
 80006c4:	4619      	mov	r1, r3
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	461a      	mov	r2, r3
 80006cc:	f008 fb9e 	bl	8008e0c <memcpy>
		  xTaskNotifyGive(fftTaskHandle);
 80006d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <StartDMATask+0x80>)
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	2300      	movs	r3, #0
 80006d6:	2202      	movs	r2, #2
 80006d8:	2100      	movs	r1, #0
 80006da:	f006 f9a9 	bl	8006a30 <xTaskGenericNotify>
 80006de:	e7df      	b.n	80006a0 <StartDMATask+0x20>
	  }
	  else
		  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 80006e0:	2140      	movs	r1, #64	@ 0x40
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e6:	f001 fee9 	bl	80024bc <HAL_GPIO_TogglePin>
	  DMAnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80006ea:	e7d9      	b.n	80006a0 <StartDMATask+0x20>
 80006ec:	20000238 	.word	0x20000238
 80006f0:	2000007c 	.word	0x2000007c
 80006f4:	20000110 	.word	0x20000110
 80006f8:	2000015c 	.word	0x2000015c
 80006fc:	20002238 	.word	0x20002238
 8000700:	20000234 	.word	0x20000234

08000704 <StartfftTaskTask>:
#define INITIALIZATION		0U
#define FIRST_HALF			1U
#define SECOND_HALF			2U

void StartfftTaskTask(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t fftnotificationValue;
  uint32_t cnt;
  /* Infinite loop */
  for(;;)
  {
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	2001      	movs	r0, #1
 8000712:	f006 f941 	bl	8006998 <ulTaskNotifyTake>
 8000716:	60b8      	str	r0, [r7, #8]

	  if(fftnotificationValue == 1)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d12a      	bne.n	8000774 <StartfftTaskTask+0x70>
	  {
		  HAL_GPIO_WritePin(GPIOA, Trace0_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f001 feb1 	bl	800248c <HAL_GPIO_WritePin>

		  // Sposta la parte "vecchia" (primi 1024 campioni) nella seconda metà del buffer FFT
		  memcpy(&fft_buffer[PARK_BUFFER_LENGTH], fft_buffer, PARK_BUFFER_LENGTH * sizeof(float));
 800072a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800072e:	4914      	ldr	r1, [pc, #80]	@ (8000780 <StartfftTaskTask+0x7c>)
 8000730:	4814      	ldr	r0, [pc, #80]	@ (8000784 <StartfftTaskTask+0x80>)
 8000732:	f008 fb6b 	bl	8008e0c <memcpy>

		  // Copia e converte i nuovi campioni da uint32_t a float
		  for (cnt = 0; cnt < PARK_BUFFER_LENGTH; cnt++)
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	e010      	b.n	800075e <StartfftTaskTask+0x5a>
		  {
			  fft_buffer[cnt] = (float)park_buffer[cnt];  // Conversione da uint32_t a float
 800073c:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <StartfftTaskTask+0x84>)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000744:	ee07 3a90 	vmov	s15, r3
 8000748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800074c:	4a0c      	ldr	r2, [pc, #48]	@ (8000780 <StartfftTaskTask+0x7c>)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	edc3 7a00 	vstr	s15, [r3]
		  for (cnt = 0; cnt < PARK_BUFFER_LENGTH; cnt++)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000764:	d3ea      	bcc.n	800073c <StartfftTaskTask+0x38>
		  }

		  //eseguire la fft
		  arm_rfft_fast_f32(&fftHandler, fft_buffer, fft_buffer_result, 0);
 8000766:	2300      	movs	r3, #0
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <StartfftTaskTask+0x88>)
 800076a:	4905      	ldr	r1, [pc, #20]	@ (8000780 <StartfftTaskTask+0x7c>)
 800076c:	4808      	ldr	r0, [pc, #32]	@ (8000790 <StartfftTaskTask+0x8c>)
 800076e:	f007 fbcf 	bl	8007f10 <arm_rfft_fast_f32>
 8000772:	e7cb      	b.n	800070c <StartfftTaskTask+0x8>
	  }
	  else
		  HAL_GPIO_TogglePin(GPIOA, Trace1_Pin);
 8000774:	2140      	movs	r1, #64	@ 0x40
 8000776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077a:	f001 fe9f 	bl	80024bc <HAL_GPIO_TogglePin>
	  fftnotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800077e:	e7c5      	b.n	800070c <StartfftTaskTask+0x8>
 8000780:	20003238 	.word	0x20003238
 8000784:	20004238 	.word	0x20004238
 8000788:	20002238 	.word	0x20002238
 800078c:	20005238 	.word	0x20005238
 8000790:	20007238 	.word	0x20007238

08000794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d101      	bne.n	80007aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a6:	f000 fa05 	bl	8000bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40012c00 	.word	0x40012c00

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <Error_Handler+0x8>

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <HAL_MspInit+0x4c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a10      	ldr	r2, [pc, #64]	@ (8000810 <HAL_MspInit+0x4c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <HAL_MspInit+0x4c>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <HAL_MspInit+0x4c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <HAL_MspInit+0x4c>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	210f      	movs	r1, #15
 80007fe:	f06f 0001 	mvn.w	r0, #1
 8000802:	f001 fadb 	bl	8001dbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000834:	d14c      	bne.n	80008d0 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000836:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <HAL_ADC_MspInit+0xc4>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a27      	ldr	r2, [pc, #156]	@ (80008d8 <HAL_ADC_MspInit+0xc4>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000840:	6153      	str	r3, [r2, #20]
 8000842:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <HAL_ADC_MspInit+0xc4>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b22      	ldr	r3, [pc, #136]	@ (80008d8 <HAL_ADC_MspInit+0xc4>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a21      	ldr	r2, [pc, #132]	@ (80008d8 <HAL_ADC_MspInit+0xc4>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000858:	6153      	str	r3, [r2, #20]
 800085a:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <HAL_ADC_MspInit+0xc4>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000866:	2301      	movs	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086a:	2303      	movs	r3, #3
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087c:	f001 fc7c 	bl	8002178 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000880:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <HAL_ADC_MspInit+0xc8>)
 8000882:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <HAL_ADC_MspInit+0xcc>)
 8000884:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_ADC_MspInit+0xc8>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <HAL_ADC_MspInit+0xc8>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_ADC_MspInit+0xc8>)
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <HAL_ADC_MspInit+0xc8>)
 800089a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800089e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_ADC_MspInit+0xc8>)
 80008a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <HAL_ADC_MspInit+0xc8>)
 80008aa:	2220      	movs	r2, #32
 80008ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <HAL_ADC_MspInit+0xc8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008b4:	4809      	ldr	r0, [pc, #36]	@ (80008dc <HAL_ADC_MspInit+0xc8>)
 80008b6:	f001 faab 	bl	8001e10 <HAL_DMA_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80008c0:	f7ff ff7a 	bl	80007b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <HAL_ADC_MspInit+0xc8>)
 80008c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80008ca:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <HAL_ADC_MspInit+0xc8>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	200000cc 	.word	0x200000cc
 80008e0:	40020008 	.word	0x40020008

080008e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a13      	ldr	r2, [pc, #76]	@ (8000940 <HAL_TIM_Base_MspInit+0x5c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d10c      	bne.n	8000910 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008f6:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <HAL_TIM_Base_MspInit+0x60>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <HAL_TIM_Base_MspInit+0x60>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	61d3      	str	r3, [r2, #28]
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_TIM_Base_MspInit+0x60>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800090e:	e010      	b.n	8000932 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0c      	ldr	r2, [pc, #48]	@ (8000948 <HAL_TIM_Base_MspInit+0x64>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d10b      	bne.n	8000932 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800091a:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <HAL_TIM_Base_MspInit+0x60>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a09      	ldr	r2, [pc, #36]	@ (8000944 <HAL_TIM_Base_MspInit+0x60>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <HAL_TIM_Base_MspInit+0x60>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40001000 	.word	0x40001000
 8000944:	40021000 	.word	0x40021000
 8000948:	40001400 	.word	0x40001400

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a17      	ldr	r2, [pc, #92]	@ (80009c8 <HAL_UART_MspInit+0x7c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d128      	bne.n	80009c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800096e:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <HAL_UART_MspInit+0x80>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a16      	ldr	r2, [pc, #88]	@ (80009cc <HAL_UART_MspInit+0x80>)
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <HAL_UART_MspInit+0x80>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <HAL_UART_MspInit+0x80>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	4a10      	ldr	r2, [pc, #64]	@ (80009cc <HAL_UART_MspInit+0x80>)
 800098c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000990:	6153      	str	r3, [r2, #20]
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <HAL_UART_MspInit+0x80>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800099e:	230c      	movs	r3, #12
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ae:	2307      	movs	r3, #7
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009bc:	f001 fbdc 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40004400 	.word	0x40004400
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	@ 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009e0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a9c <HAL_InitTick+0xcc>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a2d      	ldr	r2, [pc, #180]	@ (8000a9c <HAL_InitTick+0xcc>)
 80009e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b2b      	ldr	r3, [pc, #172]	@ (8000a9c <HAL_InitTick+0xcc>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 020c 	add.w	r2, r7, #12
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 ffe8 	bl	80039d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a08:	f002 ffc4 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 8000a0c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a10:	4a23      	ldr	r2, [pc, #140]	@ (8000aa0 <HAL_InitTick+0xd0>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	0c9b      	lsrs	r3, r3, #18
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a1c:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <HAL_InitTick+0xd4>)
 8000a1e:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <HAL_InitTick+0xd8>)
 8000a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a22:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <HAL_InitTick+0xd4>)
 8000a24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa4 <HAL_InitTick+0xd4>)
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a30:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <HAL_InitTick+0xd4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <HAL_InitTick+0xd4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <HAL_InitTick+0xd4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a42:	4818      	ldr	r0, [pc, #96]	@ (8000aa4 <HAL_InitTick+0xd4>)
 8000a44:	f003 fa18 	bl	8003e78 <HAL_TIM_Base_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d11b      	bne.n	8000a8e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a56:	4813      	ldr	r0, [pc, #76]	@ (8000aa4 <HAL_InitTick+0xd4>)
 8000a58:	f003 face 	bl	8003ff8 <HAL_TIM_Base_Start_IT>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d111      	bne.n	8000a8e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a6a:	2019      	movs	r0, #25
 8000a6c:	f001 f9c2 	bl	8001df4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b0f      	cmp	r3, #15
 8000a74:	d808      	bhi.n	8000a88 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a76:	2200      	movs	r2, #0
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	2019      	movs	r0, #25
 8000a7c:	f001 f99e 	bl	8001dbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a80:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <HAL_InitTick+0xdc>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	e002      	b.n	8000a8e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3730      	adds	r7, #48	@ 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	431bde83 	.word	0x431bde83
 8000aa4:	20007250 	.word	0x20007250
 8000aa8:	40012c00 	.word	0x40012c00
 8000aac:	20000004 	.word	0x20000004

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000aec:	4802      	ldr	r0, [pc, #8]	@ (8000af8 <DMA1_Channel1_IRQHandler+0x10>)
 8000aee:	f001 fa35 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000cc 	.word	0x200000cc

08000afc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b00:	4802      	ldr	r0, [pc, #8]	@ (8000b0c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b02:	f003 fae9 	bl	80040d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20007250 	.word	0x20007250

08000b10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b6c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b38:	f7ff ffea 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	@ (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	@ (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f008 f92d 	bl	8008dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b66:	f7ff fb3b 	bl	80001e0 <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b78:	08026404 	.word	0x08026404
  ldr r2, =_sbss
 8000b7c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b80:	20008dc0 	.word	0x20008dc0

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <HAL_Init+0x28>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <HAL_Init+0x28>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f001 f904 	bl	8001da6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f7ff ff16 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fe0e 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	2000729c 	.word	0x2000729c

08000bdc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;  
 8000be0:	4b03      	ldr	r3, [pc, #12]	@ (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	2000729c 	.word	0x2000729c

08000bf4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09a      	sub	sp, #104	@ 0x68
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d101      	bne.n	8000c28 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e1e3      	b.n	8000ff0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d176      	bne.n	8000d28 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d152      	bne.n	8000ce8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff fdd9 	bl	8000814 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d13b      	bne.n	8000ce8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 ff85 	bl	8001b80 <ADC_Disable>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d12f      	bne.n	8000ce8 <HAL_ADC_Init+0xe0>
 8000c88:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d12b      	bne.n	8000ce8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c98:	f023 0302 	bic.w	r3, r3, #2
 8000c9c:	f043 0202 	orr.w	r2, r3, #2
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000cb2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000cc2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cc4:	4b92      	ldr	r3, [pc, #584]	@ (8000f10 <HAL_ADC_Init+0x308>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a92      	ldr	r2, [pc, #584]	@ (8000f14 <HAL_ADC_Init+0x30c>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	0c9a      	lsrs	r2, r3, #18
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cda:	e002      	b.n	8000ce2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f9      	bne.n	8000cdc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d007      	beq.n	8000d06 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d04:	d110      	bne.n	8000d28 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f023 0312 	bic.w	r3, r3, #18
 8000d0e:	f043 0210 	orr.w	r2, r3, #16
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	f043 0201 	orr.w	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f040 8150 	bne.w	8000fd6 <HAL_ADC_Init+0x3ce>
 8000d36:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 814b 	bne.w	8000fd6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 8143 	bne.w	8000fd6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000d58:	f043 0202 	orr.w	r2, r3, #2
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d68:	d004      	beq.n	8000d74 <HAL_ADC_Init+0x16c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a6a      	ldr	r2, [pc, #424]	@ (8000f18 <HAL_ADC_Init+0x310>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d101      	bne.n	8000d78 <HAL_ADC_Init+0x170>
 8000d74:	4b69      	ldr	r3, [pc, #420]	@ (8000f1c <HAL_ADC_Init+0x314>)
 8000d76:	e000      	b.n	8000d7a <HAL_ADC_Init+0x172>
 8000d78:	4b69      	ldr	r3, [pc, #420]	@ (8000f20 <HAL_ADC_Init+0x318>)
 8000d7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d84:	d102      	bne.n	8000d8c <HAL_ADC_Init+0x184>
 8000d86:	4b64      	ldr	r3, [pc, #400]	@ (8000f18 <HAL_ADC_Init+0x310>)
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e01a      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a61      	ldr	r2, [pc, #388]	@ (8000f18 <HAL_ADC_Init+0x310>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d103      	bne.n	8000d9e <HAL_ADC_Init+0x196>
 8000d96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	e011      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a60      	ldr	r2, [pc, #384]	@ (8000f24 <HAL_ADC_Init+0x31c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d102      	bne.n	8000dae <HAL_ADC_Init+0x1a6>
 8000da8:	4b5f      	ldr	r3, [pc, #380]	@ (8000f28 <HAL_ADC_Init+0x320>)
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	e009      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a5d      	ldr	r2, [pc, #372]	@ (8000f28 <HAL_ADC_Init+0x320>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d102      	bne.n	8000dbe <HAL_ADC_Init+0x1b6>
 8000db8:	4b5a      	ldr	r3, [pc, #360]	@ (8000f24 <HAL_ADC_Init+0x31c>)
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	e001      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d108      	bne.n	8000de2 <HAL_ADC_Init+0x1da>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d101      	bne.n	8000de2 <HAL_ADC_Init+0x1da>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <HAL_ADC_Init+0x1dc>
 8000de2:	2300      	movs	r3, #0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d11c      	bne.n	8000e22 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000de8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d010      	beq.n	8000e10 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d107      	bne.n	8000e0a <HAL_ADC_Init+0x202>
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d101      	bne.n	8000e0a <HAL_ADC_Init+0x202>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <HAL_ADC_Init+0x204>
 8000e0a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d108      	bne.n	8000e22 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e20:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7e5b      	ldrb	r3, [r3, #25]
 8000e26:	035b      	lsls	r3, r3, #13
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000e2c:	2a01      	cmp	r2, #1
 8000e2e:	d002      	beq.n	8000e36 <HAL_ADC_Init+0x22e>
 8000e30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e34:	e000      	b.n	8000e38 <HAL_ADC_Init+0x230>
 8000e36:	2200      	movs	r2, #0
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d11b      	bne.n	8000e8e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7e5b      	ldrb	r3, [r3, #25]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d109      	bne.n	8000e72 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e62:	3b01      	subs	r3, #1
 8000e64:	045a      	lsls	r2, r3, #17
 8000e66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e70:	e00d      	b.n	8000e8e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000e7a:	f043 0220 	orr.w	r2, r3, #32
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	f043 0201 	orr.w	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d054      	beq.n	8000f40 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a22      	ldr	r2, [pc, #136]	@ (8000f24 <HAL_ADC_Init+0x31c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d004      	beq.n	8000eaa <HAL_ADC_Init+0x2a2>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a20      	ldr	r2, [pc, #128]	@ (8000f28 <HAL_ADC_Init+0x320>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d140      	bne.n	8000f2c <HAL_ADC_Init+0x324>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eae:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000eb2:	d02a      	beq.n	8000f0a <HAL_ADC_Init+0x302>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ebc:	d022      	beq.n	8000f04 <HAL_ADC_Init+0x2fc>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec2:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000ec6:	d01a      	beq.n	8000efe <HAL_ADC_Init+0x2f6>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ecc:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000ed0:	d012      	beq.n	8000ef8 <HAL_ADC_Init+0x2f0>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed6:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000eda:	d00a      	beq.n	8000ef2 <HAL_ADC_Init+0x2ea>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee0:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000ee4:	d002      	beq.n	8000eec <HAL_ADC_Init+0x2e4>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eea:	e023      	b.n	8000f34 <HAL_ADC_Init+0x32c>
 8000eec:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ef0:	e020      	b.n	8000f34 <HAL_ADC_Init+0x32c>
 8000ef2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ef6:	e01d      	b.n	8000f34 <HAL_ADC_Init+0x32c>
 8000ef8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000efc:	e01a      	b.n	8000f34 <HAL_ADC_Init+0x32c>
 8000efe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f02:	e017      	b.n	8000f34 <HAL_ADC_Init+0x32c>
 8000f04:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000f08:	e014      	b.n	8000f34 <HAL_ADC_Init+0x32c>
 8000f0a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000f0e:	e011      	b.n	8000f34 <HAL_ADC_Init+0x32c>
 8000f10:	20000000 	.word	0x20000000
 8000f14:	431bde83 	.word	0x431bde83
 8000f18:	50000100 	.word	0x50000100
 8000f1c:	50000300 	.word	0x50000300
 8000f20:	50000700 	.word	0x50000700
 8000f24:	50000400 	.word	0x50000400
 8000f28:	50000500 	.word	0x50000500
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d114      	bne.n	8000f78 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6812      	ldr	r2, [r2, #0]
 8000f58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f5c:	f023 0302 	bic.w	r3, r3, #2
 8000f60:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7e1b      	ldrb	r3, [r3, #24]
 8000f66:	039a      	lsls	r2, r3, #14
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4313      	orrs	r3, r2
 8000f72:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f74:	4313      	orrs	r3, r2
 8000f76:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <HAL_ADC_Init+0x3f0>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d10c      	bne.n	8000fae <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f023 010f 	bic.w	r1, r3, #15
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	1e5a      	subs	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fac:	e007      	b.n	8000fbe <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 020f 	bic.w	r2, r2, #15
 8000fbc:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	f023 0303 	bic.w	r3, r3, #3
 8000fcc:	f043 0201 	orr.w	r2, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fd4:	e00a      	b.n	8000fec <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	f023 0312 	bic.w	r3, r3, #18
 8000fde:	f043 0210 	orr.w	r2, r3, #16
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000fec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3768      	adds	r7, #104	@ 0x68
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	fff0c007 	.word	0xfff0c007

08000ffc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 80f7 	bne.w	800120a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001022:	2b01      	cmp	r3, #1
 8001024:	d101      	bne.n	800102a <HAL_ADC_Start_DMA+0x2e>
 8001026:	2302      	movs	r3, #2
 8001028:	e0f2      	b.n	8001210 <HAL_ADC_Start_DMA+0x214>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800103a:	d004      	beq.n	8001046 <HAL_ADC_Start_DMA+0x4a>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a75      	ldr	r2, [pc, #468]	@ (8001218 <HAL_ADC_Start_DMA+0x21c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d109      	bne.n	800105a <HAL_ADC_Start_DMA+0x5e>
 8001046:	4b75      	ldr	r3, [pc, #468]	@ (800121c <HAL_ADC_Start_DMA+0x220>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf0c      	ite	eq
 8001052:	2301      	moveq	r3, #1
 8001054:	2300      	movne	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	e008      	b.n	800106c <HAL_ADC_Start_DMA+0x70>
 800105a:	4b71      	ldr	r3, [pc, #452]	@ (8001220 <HAL_ADC_Start_DMA+0x224>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	2b00      	cmp	r3, #0
 8001064:	bf0c      	ite	eq
 8001066:	2301      	moveq	r3, #1
 8001068:	2300      	movne	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80c5 	beq.w	80011fc <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 fd20 	bl	8001ab8 <ADC_Enable>
 8001078:	4603      	mov	r3, r0
 800107a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 80b7 	bne.w	80011f2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010a0:	d004      	beq.n	80010ac <HAL_ADC_Start_DMA+0xb0>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001218 <HAL_ADC_Start_DMA+0x21c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d106      	bne.n	80010ba <HAL_ADC_Start_DMA+0xbe>
 80010ac:	4b5b      	ldr	r3, [pc, #364]	@ (800121c <HAL_ADC_Start_DMA+0x220>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f003 031f 	and.w	r3, r3, #31
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d010      	beq.n	80010da <HAL_ADC_Start_DMA+0xde>
 80010b8:	e005      	b.n	80010c6 <HAL_ADC_Start_DMA+0xca>
 80010ba:	4b59      	ldr	r3, [pc, #356]	@ (8001220 <HAL_ADC_Start_DMA+0x224>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d009      	beq.n	80010da <HAL_ADC_Start_DMA+0xde>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010ce:	d004      	beq.n	80010da <HAL_ADC_Start_DMA+0xde>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a53      	ldr	r2, [pc, #332]	@ (8001224 <HAL_ADC_Start_DMA+0x228>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d115      	bne.n	8001106 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d036      	beq.n	8001162 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001104:	e02d      	b.n	8001162 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800111a:	d004      	beq.n	8001126 <HAL_ADC_Start_DMA+0x12a>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a3d      	ldr	r2, [pc, #244]	@ (8001218 <HAL_ADC_Start_DMA+0x21c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10a      	bne.n	800113c <HAL_ADC_Start_DMA+0x140>
 8001126:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	e008      	b.n	800114e <HAL_ADC_Start_DMA+0x152>
 800113c:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <HAL_ADC_Start_DMA+0x228>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf14      	ite	ne
 8001148:	2301      	movne	r3, #1
 800114a:	2300      	moveq	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800115a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800116a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800116e:	d106      	bne.n	800117e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001174:	f023 0206 	bic.w	r2, r3, #6
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	645a      	str	r2, [r3, #68]	@ 0x44
 800117c:	e002      	b.n	8001184 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001190:	4a25      	ldr	r2, [pc, #148]	@ (8001228 <HAL_ADC_Start_DMA+0x22c>)
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001198:	4a24      	ldr	r2, [pc, #144]	@ (800122c <HAL_ADC_Start_DMA+0x230>)
 800119a:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a0:	4a23      	ldr	r2, [pc, #140]	@ (8001230 <HAL_ADC_Start_DMA+0x234>)
 80011a2:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	221c      	movs	r2, #28
 80011aa:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0210 	orr.w	r2, r2, #16
 80011ba:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3340      	adds	r3, #64	@ 0x40
 80011d6:	4619      	mov	r1, r3
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f000 fe5f 	bl	8001e9e <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0204 	orr.w	r2, r2, #4
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	e00d      	b.n	800120e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80011fa:	e008      	b.n	800120e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001208:	e001      	b.n	800120e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800120a:	2302      	movs	r3, #2
 800120c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800120e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	50000100 	.word	0x50000100
 800121c:	50000300 	.word	0x50000300
 8001220:	50000700 	.word	0x50000700
 8001224:	50000400 	.word	0x50000400
 8001228:	080019ed 	.word	0x080019ed
 800122c:	08001a67 	.word	0x08001a67
 8001230:	08001a83 	.word	0x08001a83

08001234 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001234:	b480      	push	{r7}
 8001236:	b09b      	sub	sp, #108	@ 0x6c
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x22>
 8001252:	2302      	movs	r3, #2
 8001254:	e2c8      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x5b4>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	f040 82ac 	bne.w	80017c6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b04      	cmp	r3, #4
 8001274:	d81c      	bhi.n	80012b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	461a      	mov	r2, r3
 800128a:	231f      	movs	r3, #31
 800128c:	4093      	lsls	r3, r2
 800128e:	43db      	mvns	r3, r3
 8001290:	4019      	ands	r1, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa00 f203 	lsl.w	r2, r0, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80012ae:	e063      	b.n	8001378 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b09      	cmp	r3, #9
 80012b6:	d81e      	bhi.n	80012f6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	3b1e      	subs	r3, #30
 80012cc:	221f      	movs	r2, #31
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	4019      	ands	r1, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	3b1e      	subs	r3, #30
 80012e8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80012f4:	e040      	b.n	8001378 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b0e      	cmp	r3, #14
 80012fc:	d81e      	bhi.n	800133c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	3b3c      	subs	r3, #60	@ 0x3c
 8001312:	221f      	movs	r2, #31
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	4019      	ands	r1, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	3b3c      	subs	r3, #60	@ 0x3c
 800132e:	fa00 f203 	lsl.w	r2, r0, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	639a      	str	r2, [r3, #56]	@ 0x38
 800133a:	e01d      	b.n	8001378 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	3b5a      	subs	r3, #90	@ 0x5a
 8001350:	221f      	movs	r2, #31
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	4019      	ands	r1, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	3b5a      	subs	r3, #90	@ 0x5a
 800136c:	fa00 f203 	lsl.w	r2, r0, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 80e5 	bne.w	8001552 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b09      	cmp	r3, #9
 800138e:	d91c      	bls.n	80013ca <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6999      	ldr	r1, [r3, #24]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	3b1e      	subs	r3, #30
 80013a2:	2207      	movs	r2, #7
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	4019      	ands	r1, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	6898      	ldr	r0, [r3, #8]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	3b1e      	subs	r3, #30
 80013bc:	fa00 f203 	lsl.w	r2, r0, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	619a      	str	r2, [r3, #24]
 80013c8:	e019      	b.n	80013fe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6959      	ldr	r1, [r3, #20]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4019      	ands	r1, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	6898      	ldr	r0, [r3, #8]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	fa00 f203 	lsl.w	r2, r0, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	695a      	ldr	r2, [r3, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	3b01      	subs	r3, #1
 800141c:	2b03      	cmp	r3, #3
 800141e:	d84f      	bhi.n	80014c0 <HAL_ADC_ConfigChannel+0x28c>
 8001420:	a201      	add	r2, pc, #4	@ (adr r2, 8001428 <HAL_ADC_ConfigChannel+0x1f4>)
 8001422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001426:	bf00      	nop
 8001428:	08001439 	.word	0x08001439
 800142c:	0800145b 	.word	0x0800145b
 8001430:	0800147d 	.word	0x0800147d
 8001434:	0800149f 	.word	0x0800149f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800143e:	4b99      	ldr	r3, [pc, #612]	@ (80016a4 <HAL_ADC_ConfigChannel+0x470>)
 8001440:	4013      	ands	r3, r2
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	0691      	lsls	r1, r2, #26
 8001448:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800144a:	430a      	orrs	r2, r1
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001456:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001458:	e07b      	b.n	8001552 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001460:	4b90      	ldr	r3, [pc, #576]	@ (80016a4 <HAL_ADC_ConfigChannel+0x470>)
 8001462:	4013      	ands	r3, r2
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	0691      	lsls	r1, r2, #26
 800146a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800146c:	430a      	orrs	r2, r1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001478:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800147a:	e06a      	b.n	8001552 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001482:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <HAL_ADC_ConfigChannel+0x470>)
 8001484:	4013      	ands	r3, r2
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	0691      	lsls	r1, r2, #26
 800148c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800148e:	430a      	orrs	r2, r1
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800149a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800149c:	e059      	b.n	8001552 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80014a4:	4b7f      	ldr	r3, [pc, #508]	@ (80016a4 <HAL_ADC_ConfigChannel+0x470>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	0691      	lsls	r1, r2, #26
 80014ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014b0:	430a      	orrs	r2, r1
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014bc:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014be:	e048      	b.n	8001552 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	069b      	lsls	r3, r3, #26
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d107      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014e2:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	069b      	lsls	r3, r3, #26
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d107      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001506:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800150e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	069b      	lsls	r3, r3, #26
 8001518:	429a      	cmp	r2, r3
 800151a:	d107      	bne.n	800152c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800152a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001532:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	069b      	lsls	r3, r3, #26
 800153c:	429a      	cmp	r2, r3
 800153e:	d107      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800154e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001550:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d108      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x33e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x33e>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_ADC_ConfigChannel+0x340>
 8001572:	2300      	movs	r3, #0
 8001574:	2b00      	cmp	r3, #0
 8001576:	f040 8131 	bne.w	80017dc <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d00f      	beq.n	80015a2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2201      	movs	r2, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43da      	mvns	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	400a      	ands	r2, r1
 800159c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80015a0:	e049      	b.n	8001636 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	409a      	lsls	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	d91c      	bls.n	80015fe <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6999      	ldr	r1, [r3, #24]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4613      	mov	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	3b1b      	subs	r3, #27
 80015d6:	2207      	movs	r2, #7
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	4019      	ands	r1, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	6898      	ldr	r0, [r3, #8]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	3b1b      	subs	r3, #27
 80015f0:	fa00 f203 	lsl.w	r2, r0, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	619a      	str	r2, [r3, #24]
 80015fc:	e01b      	b.n	8001636 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6959      	ldr	r1, [r3, #20]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	2207      	movs	r2, #7
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	4019      	ands	r1, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6898      	ldr	r0, [r3, #8]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	fa00 f203 	lsl.w	r2, r0, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800163e:	d004      	beq.n	800164a <HAL_ADC_ConfigChannel+0x416>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a18      	ldr	r2, [pc, #96]	@ (80016a8 <HAL_ADC_ConfigChannel+0x474>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_ADC_ConfigChannel+0x41a>
 800164a:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <HAL_ADC_ConfigChannel+0x478>)
 800164c:	e000      	b.n	8001650 <HAL_ADC_ConfigChannel+0x41c>
 800164e:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <HAL_ADC_ConfigChannel+0x47c>)
 8001650:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b10      	cmp	r3, #16
 8001658:	d105      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800165a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	d015      	beq.n	8001692 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800166a:	2b11      	cmp	r3, #17
 800166c:	d105      	bne.n	800167a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800166e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800167e:	2b12      	cmp	r3, #18
 8001680:	f040 80ac 	bne.w	80017dc <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001684:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800168c:	2b00      	cmp	r3, #0
 800168e:	f040 80a5 	bne.w	80017dc <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800169a:	d10b      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x480>
 800169c:	4b02      	ldr	r3, [pc, #8]	@ (80016a8 <HAL_ADC_ConfigChannel+0x474>)
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e023      	b.n	80016ea <HAL_ADC_ConfigChannel+0x4b6>
 80016a2:	bf00      	nop
 80016a4:	83fff000 	.word	0x83fff000
 80016a8:	50000100 	.word	0x50000100
 80016ac:	50000300 	.word	0x50000300
 80016b0:	50000700 	.word	0x50000700
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a4e      	ldr	r2, [pc, #312]	@ (80017f4 <HAL_ADC_ConfigChannel+0x5c0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d103      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x492>
 80016be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e011      	b.n	80016ea <HAL_ADC_ConfigChannel+0x4b6>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a4b      	ldr	r2, [pc, #300]	@ (80017f8 <HAL_ADC_ConfigChannel+0x5c4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d102      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x4a2>
 80016d0:	4b4a      	ldr	r3, [pc, #296]	@ (80017fc <HAL_ADC_ConfigChannel+0x5c8>)
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e009      	b.n	80016ea <HAL_ADC_ConfigChannel+0x4b6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a48      	ldr	r2, [pc, #288]	@ (80017fc <HAL_ADC_ConfigChannel+0x5c8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d102      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x4b2>
 80016e0:	4b45      	ldr	r3, [pc, #276]	@ (80017f8 <HAL_ADC_ConfigChannel+0x5c4>)
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	e001      	b.n	80016ea <HAL_ADC_ConfigChannel+0x4b6>
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d108      	bne.n	800170a <HAL_ADC_ConfigChannel+0x4d6>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_ADC_ConfigChannel+0x4d6>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_ADC_ConfigChannel+0x4d8>
 800170a:	2300      	movs	r3, #0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d150      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001710:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d010      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x4fe>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x4fe>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_ADC_ConfigChannel+0x500>
 8001732:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001734:	2b00      	cmp	r3, #0
 8001736:	d13c      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b10      	cmp	r3, #16
 800173e:	d11d      	bne.n	800177c <HAL_ADC_ConfigChannel+0x548>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001748:	d118      	bne.n	800177c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800174a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001752:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001754:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001756:	4b2a      	ldr	r3, [pc, #168]	@ (8001800 <HAL_ADC_ConfigChannel+0x5cc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a2a      	ldr	r2, [pc, #168]	@ (8001804 <HAL_ADC_ConfigChannel+0x5d0>)
 800175c:	fba2 2303 	umull	r2, r3, r2, r3
 8001760:	0c9a      	lsrs	r2, r3, #18
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800176c:	e002      	b.n	8001774 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	3b01      	subs	r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f9      	bne.n	800176e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800177a:	e02e      	b.n	80017da <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b11      	cmp	r3, #17
 8001782:	d10b      	bne.n	800179c <HAL_ADC_ConfigChannel+0x568>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800178c:	d106      	bne.n	800179c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800178e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001798:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800179a:	e01e      	b.n	80017da <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b12      	cmp	r3, #18
 80017a2:	d11a      	bne.n	80017da <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80017a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017b0:	e013      	b.n	80017da <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f043 0220 	orr.w	r2, r3, #32
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017c4:	e00a      	b.n	80017dc <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f043 0220 	orr.w	r2, r3, #32
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017d8:	e000      	b.n	80017dc <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017da:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80017e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	376c      	adds	r7, #108	@ 0x6c
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	50000100 	.word	0x50000100
 80017f8:	50000400 	.word	0x50000400
 80017fc:	50000500 	.word	0x50000500
 8001800:	20000000 	.word	0x20000000
 8001804:	431bde83 	.word	0x431bde83

08001808 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001808:	b480      	push	{r7}
 800180a:	b099      	sub	sp, #100	@ 0x64
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001820:	d102      	bne.n	8001828 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001822:	4b6d      	ldr	r3, [pc, #436]	@ (80019d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	e01a      	b.n	800185e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a6a      	ldr	r2, [pc, #424]	@ (80019d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d103      	bne.n	800183a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001832:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	e011      	b.n	800185e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a67      	ldr	r2, [pc, #412]	@ (80019dc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d102      	bne.n	800184a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001844:	4b66      	ldr	r3, [pc, #408]	@ (80019e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	e009      	b.n	800185e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a64      	ldr	r2, [pc, #400]	@ (80019e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d102      	bne.n	800185a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001854:	4b61      	ldr	r3, [pc, #388]	@ (80019dc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	e001      	b.n	800185e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b0      	b.n	80019ca <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001872:	2302      	movs	r3, #2
 8001874:	e0a9      	b.n	80019ca <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f040 808d 	bne.w	80019a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 8086 	bne.w	80019a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018a4:	d004      	beq.n	80018b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a4b      	ldr	r2, [pc, #300]	@ (80019d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80018b0:	4b4c      	ldr	r3, [pc, #304]	@ (80019e4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80018b2:	e000      	b.n	80018b6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80018b4:	4b4c      	ldr	r3, [pc, #304]	@ (80019e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80018b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d040      	beq.n	8001942 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018d2:	035b      	lsls	r3, r3, #13
 80018d4:	430b      	orrs	r3, r1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018da:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d108      	bne.n	80018fc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80018fc:	2300      	movs	r3, #0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d15c      	bne.n	80019bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800191e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001920:	2b00      	cmp	r3, #0
 8001922:	d14b      	bne.n	80019bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001924:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800192c:	f023 030f 	bic.w	r3, r3, #15
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	6811      	ldr	r1, [r2, #0]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	6892      	ldr	r2, [r2, #8]
 8001938:	430a      	orrs	r2, r1
 800193a:	431a      	orrs	r2, r3
 800193c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800193e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001940:	e03c      	b.n	80019bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001942:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800194a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800194c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800196e:	2300      	movs	r3, #0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d123      	bne.n	80019bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d107      	bne.n	8001990 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001990:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001992:	2b00      	cmp	r3, #0
 8001994:	d112      	bne.n	80019bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800199e:	f023 030f 	bic.w	r3, r3, #15
 80019a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80019a4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019a6:	e009      	b.n	80019bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	f043 0220 	orr.w	r2, r3, #32
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80019ba:	e000      	b.n	80019be <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019bc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80019ca:	4618      	mov	r0, r3
 80019cc:	3764      	adds	r7, #100	@ 0x64
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	50000100 	.word	0x50000100
 80019dc:	50000400 	.word	0x50000400
 80019e0:	50000500 	.word	0x50000500
 80019e4:	50000300 	.word	0x50000300
 80019e8:	50000700 	.word	0x50000700

080019ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d126      	bne.n	8001a54 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d115      	bne.n	8001a4c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d111      	bne.n	8001a4c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f7fe fe07 	bl	8000660 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a52:	e004      	b.n	8001a5e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4798      	blx	r3
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a72:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7fe fde3 	bl	8000640 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa0:	f043 0204 	orr.w	r2, r3, #4
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff f8a3 	bl	8000bf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <ADC_Enable+0x2c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <ADC_Enable+0x2c>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <ADC_Enable+0x2e>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d143      	bne.n	8001b72 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b22      	ldr	r3, [pc, #136]	@ (8001b7c <ADC_Enable+0xc4>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00d      	beq.n	8001b14 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afc:	f043 0210 	orr.w	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e02f      	b.n	8001b74 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001b24:	f7ff f85a 	bl	8000bdc <HAL_GetTick>
 8001b28:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b2a:	e01b      	b.n	8001b64 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b2c:	f7ff f856 	bl	8000bdc <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d914      	bls.n	8001b64 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d00d      	beq.n	8001b64 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	f043 0210 	orr.w	r2, r3, #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e007      	b.n	8001b74 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d1dc      	bne.n	8001b2c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	8000003f 	.word	0x8000003f

08001b80 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d108      	bne.n	8001bac <ADC_Disable+0x2c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <ADC_Disable+0x2c>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <ADC_Disable+0x2e>
 8001bac:	2300      	movs	r3, #0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d047      	beq.n	8001c42 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 030d 	and.w	r3, r3, #13
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d10f      	bne.n	8001be0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0202 	orr.w	r2, r2, #2
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001bd8:	f7ff f800 	bl	8000bdc <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bde:	e029      	b.n	8001c34 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	f043 0210 	orr.w	r2, r3, #16
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf0:	f043 0201 	orr.w	r2, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e023      	b.n	8001c44 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bfc:	f7fe ffee 	bl	8000bdc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d914      	bls.n	8001c34 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d10d      	bne.n	8001c34 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f043 0210 	orr.w	r2, r3, #16
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e007      	b.n	8001c44 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d0dc      	beq.n	8001bfc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c98:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <__NVIC_GetPriorityGrouping+0x18>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db0b      	blt.n	8001cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	4907      	ldr	r1, [pc, #28]	@ (8001ce8 <__NVIC_EnableIRQ+0x38>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	@ (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	@ (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	@ 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	@ 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ff4c 	bl	8001c4c <__NVIC_SetPriorityGrouping>
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dce:	f7ff ff61 	bl	8001c94 <__NVIC_GetPriorityGrouping>
 8001dd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	6978      	ldr	r0, [r7, #20]
 8001dda:	f7ff ffb1 	bl	8001d40 <NVIC_EncodePriority>
 8001dde:	4602      	mov	r2, r0
 8001de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff80 	bl	8001cec <__NVIC_SetPriority>
}
 8001dec:	bf00      	nop
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff54 	bl	8001cb0 <__NVIC_EnableIRQ>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e037      	b.n	8001e96 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e3c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001e40:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f941 	bl	8002100 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_DMA_Start_IT+0x20>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e04a      	b.n	8001f54 <HAL_DMA_Start_IT+0xb6>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d13a      	bne.n	8001f46 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 f8d4 	bl	80020a2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 020e 	orr.w	r2, r2, #14
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e00f      	b.n	8001f34 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 020a 	orr.w	r2, r2, #10
 8001f22:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0204 	bic.w	r2, r2, #4
 8001f32:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e005      	b.n	8001f52 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	2204      	movs	r2, #4
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d024      	beq.n	8001fce <HAL_DMA_IRQHandler+0x72>
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01f      	beq.n	8001fce <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0204 	bic.w	r2, r2, #4
 8001faa:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d06a      	beq.n	800209a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fcc:	e065      	b.n	800209a <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d02c      	beq.n	8002038 <HAL_DMA_IRQHandler+0xdc>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d027      	beq.n	8002038 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10b      	bne.n	800200e <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 020a 	bic.w	r2, r2, #10
 8002004:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002016:	2102      	movs	r1, #2
 8002018:	fa01 f202 	lsl.w	r2, r1, r2
 800201c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	d035      	beq.n	800209a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002036:	e030      	b.n	800209a <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	2208      	movs	r2, #8
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d028      	beq.n	800209a <HAL_DMA_IRQHandler+0x13e>
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d023      	beq.n	800209a <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 020e 	bic.w	r2, r2, #14
 8002060:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f202 	lsl.w	r2, r1, r2
 8002070:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
    }
  }
}
 8002098:	e7ff      	b.n	800209a <HAL_DMA_IRQHandler+0x13e>
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d108      	bne.n	80020e2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020e0:	e007      	b.n	80020f2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	60da      	str	r2, [r3, #12]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <DMA_CalcBaseAndBitshift+0x60>)
 8002110:	429a      	cmp	r2, r3
 8002112:	d80f      	bhi.n	8002134 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <DMA_CalcBaseAndBitshift+0x64>)
 800211c:	4413      	add	r3, r2
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <DMA_CalcBaseAndBitshift+0x68>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	009a      	lsls	r2, r3, #2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a0f      	ldr	r2, [pc, #60]	@ (800216c <DMA_CalcBaseAndBitshift+0x6c>)
 8002130:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002132:	e00e      	b.n	8002152 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <DMA_CalcBaseAndBitshift+0x70>)
 800213c:	4413      	add	r3, r2
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <DMA_CalcBaseAndBitshift+0x68>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	009a      	lsls	r2, r3, #2
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a09      	ldr	r2, [pc, #36]	@ (8002174 <DMA_CalcBaseAndBitshift+0x74>)
 8002150:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40020407 	.word	0x40020407
 8002164:	bffdfff8 	.word	0xbffdfff8
 8002168:	cccccccd 	.word	0xcccccccd
 800216c:	40020000 	.word	0x40020000
 8002170:	bffdfbf8 	.word	0xbffdfbf8
 8002174:	40020400 	.word	0x40020400

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002186:	e160      	b.n	800244a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8152 	beq.w	8002444 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d005      	beq.n	80021b8 <HAL_GPIO_Init+0x40>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d130      	bne.n	800221a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ee:	2201      	movs	r2, #1
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	f003 0201 	and.w	r2, r3, #1
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b03      	cmp	r3, #3
 8002224:	d017      	beq.n	8002256 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d123      	bne.n	80022aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	6939      	ldr	r1, [r7, #16]
 80022a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0203 	and.w	r2, r3, #3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80ac 	beq.w	8002444 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002468 <HAL_GPIO_Init+0x2f0>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002468 <HAL_GPIO_Init+0x2f0>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6193      	str	r3, [r2, #24]
 80022f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002468 <HAL_GPIO_Init+0x2f0>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002304:	4a59      	ldr	r2, [pc, #356]	@ (800246c <HAL_GPIO_Init+0x2f4>)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	3302      	adds	r3, #2
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800232e:	d025      	beq.n	800237c <HAL_GPIO_Init+0x204>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a4f      	ldr	r2, [pc, #316]	@ (8002470 <HAL_GPIO_Init+0x2f8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d01f      	beq.n	8002378 <HAL_GPIO_Init+0x200>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a4e      	ldr	r2, [pc, #312]	@ (8002474 <HAL_GPIO_Init+0x2fc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d019      	beq.n	8002374 <HAL_GPIO_Init+0x1fc>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a4d      	ldr	r2, [pc, #308]	@ (8002478 <HAL_GPIO_Init+0x300>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d013      	beq.n	8002370 <HAL_GPIO_Init+0x1f8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a4c      	ldr	r2, [pc, #304]	@ (800247c <HAL_GPIO_Init+0x304>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00d      	beq.n	800236c <HAL_GPIO_Init+0x1f4>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a4b      	ldr	r2, [pc, #300]	@ (8002480 <HAL_GPIO_Init+0x308>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <HAL_GPIO_Init+0x1f0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a4a      	ldr	r2, [pc, #296]	@ (8002484 <HAL_GPIO_Init+0x30c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_GPIO_Init+0x1ec>
 8002360:	2306      	movs	r3, #6
 8002362:	e00c      	b.n	800237e <HAL_GPIO_Init+0x206>
 8002364:	2307      	movs	r3, #7
 8002366:	e00a      	b.n	800237e <HAL_GPIO_Init+0x206>
 8002368:	2305      	movs	r3, #5
 800236a:	e008      	b.n	800237e <HAL_GPIO_Init+0x206>
 800236c:	2304      	movs	r3, #4
 800236e:	e006      	b.n	800237e <HAL_GPIO_Init+0x206>
 8002370:	2303      	movs	r3, #3
 8002372:	e004      	b.n	800237e <HAL_GPIO_Init+0x206>
 8002374:	2302      	movs	r3, #2
 8002376:	e002      	b.n	800237e <HAL_GPIO_Init+0x206>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_GPIO_Init+0x206>
 800237c:	2300      	movs	r3, #0
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	f002 0203 	and.w	r2, r2, #3
 8002384:	0092      	lsls	r2, r2, #2
 8002386:	4093      	lsls	r3, r2
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800238e:	4937      	ldr	r1, [pc, #220]	@ (800246c <HAL_GPIO_Init+0x2f4>)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239c:	4b3a      	ldr	r3, [pc, #232]	@ (8002488 <HAL_GPIO_Init+0x310>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023c0:	4a31      	ldr	r2, [pc, #196]	@ (8002488 <HAL_GPIO_Init+0x310>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c6:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <HAL_GPIO_Init+0x310>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023ea:	4a27      	ldr	r2, [pc, #156]	@ (8002488 <HAL_GPIO_Init+0x310>)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023f0:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <HAL_GPIO_Init+0x310>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002414:	4a1c      	ldr	r2, [pc, #112]	@ (8002488 <HAL_GPIO_Init+0x310>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800241a:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <HAL_GPIO_Init+0x310>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800243e:	4a12      	ldr	r2, [pc, #72]	@ (8002488 <HAL_GPIO_Init+0x310>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	3301      	adds	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	f47f ae97 	bne.w	8002188 <HAL_GPIO_Init+0x10>
  }
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40021000 	.word	0x40021000
 800246c:	40010000 	.word	0x40010000
 8002470:	48000400 	.word	0x48000400
 8002474:	48000800 	.word	0x48000800
 8002478:	48000c00 	.word	0x48000c00
 800247c:	48001000 	.word	0x48001000
 8002480:	48001400 	.word	0x48001400
 8002484:	48001800 	.word	0x48001800
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43d9      	mvns	r1, r3
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	400b      	ands	r3, r1
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002500:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002506:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f001 b83a 	b.w	800358a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 816f 	beq.w	800280a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800252c:	4bb5      	ldr	r3, [pc, #724]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b04      	cmp	r3, #4
 8002536:	d00c      	beq.n	8002552 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002538:	4bb2      	ldr	r3, [pc, #712]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d15c      	bne.n	80025fe <HAL_RCC_OscConfig+0x10e>
 8002544:	4baf      	ldr	r3, [pc, #700]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002550:	d155      	bne.n	80025fe <HAL_RCC_OscConfig+0x10e>
 8002552:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002556:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002566:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_RCC_OscConfig+0x94>
 800257e:	4ba1      	ldr	r3, [pc, #644]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	e015      	b.n	80025b0 <HAL_RCC_OscConfig+0xc0>
 8002584:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002588:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002598:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800259c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80025a0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80025ac:	4b95      	ldr	r3, [pc, #596]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025b4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80025b8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80025bc:	fa92 f2a2 	rbit	r2, r2
 80025c0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80025c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80025c8:	fab2 f282 	clz	r2, r2
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f042 0220 	orr.w	r2, r2, #32
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	f002 021f 	and.w	r2, r2, #31
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8111 	beq.w	8002808 <HAL_RCC_OscConfig+0x318>
 80025e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 8108 	bne.w	8002808 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f000 bfc6 	b.w	800358a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002602:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x12e>
 8002610:	4b7c      	ldr	r3, [pc, #496]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a7b      	ldr	r2, [pc, #492]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e036      	b.n	800268c <HAL_RCC_OscConfig+0x19c>
 800261e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002622:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x158>
 800262e:	4b75      	ldr	r3, [pc, #468]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a74      	ldr	r2, [pc, #464]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b72      	ldr	r3, [pc, #456]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a71      	ldr	r2, [pc, #452]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002640:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e021      	b.n	800268c <HAL_RCC_OscConfig+0x19c>
 8002648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800264c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x184>
 800265a:	4b6a      	ldr	r3, [pc, #424]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a69      	ldr	r2, [pc, #420]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b67      	ldr	r3, [pc, #412]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a66      	ldr	r2, [pc, #408]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0x19c>
 8002674:	4b63      	ldr	r3, [pc, #396]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a62      	ldr	r2, [pc, #392]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 800267a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b60      	ldr	r3, [pc, #384]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a5f      	ldr	r2, [pc, #380]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800268a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800268c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002690:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d059      	beq.n	8002750 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe fa9e 	bl	8000bdc <HAL_GetTick>
 80026a0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a6:	f7fe fa99 	bl	8000bdc <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	@ 0x64
 80026b4:	d902      	bls.n	80026bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	f000 bf67 	b.w	800358a <HAL_RCC_OscConfig+0x109a>
 80026bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026c0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80026d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_OscConfig+0x1fe>
 80026e8:	4b46      	ldr	r3, [pc, #280]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x22a>
 80026ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026f2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002702:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002706:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800270a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002716:	4b3b      	ldr	r3, [pc, #236]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800271e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002722:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002726:	fa92 f2a2 	rbit	r2, r2
 800272a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800272e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002732:	fab2 f282 	clz	r2, r2
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	f042 0220 	orr.w	r2, r2, #32
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	f002 021f 	and.w	r2, r2, #31
 8002742:	2101      	movs	r1, #1
 8002744:	fa01 f202 	lsl.w	r2, r1, r2
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ab      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1b6>
 800274e:	e05c      	b.n	800280a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe fa44 	bl	8000bdc <HAL_GetTick>
 8002754:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275a:	f7fe fa3f 	bl	8000bdc <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	@ 0x64
 8002768:	d902      	bls.n	8002770 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	f000 bf0d 	b.w	800358a <HAL_RCC_OscConfig+0x109a>
 8002770:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002774:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002784:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d102      	bne.n	80027a2 <HAL_RCC_OscConfig+0x2b2>
 800279c:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	e015      	b.n	80027ce <HAL_RCC_OscConfig+0x2de>
 80027a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80027b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ba:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80027be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <HAL_RCC_OscConfig+0x314>)
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027d2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80027d6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80027da:	fa92 f2a2 	rbit	r2, r2
 80027de:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80027e2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80027e6:	fab2 f282 	clz	r2, r2
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	f042 0220 	orr.w	r2, r2, #32
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	f002 021f 	and.w	r2, r2, #31
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ab      	bne.n	800275a <HAL_RCC_OscConfig+0x26a>
 8002802:	e002      	b.n	800280a <HAL_RCC_OscConfig+0x31a>
 8002804:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800280e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 817f 	beq.w	8002b1e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002820:	4ba7      	ldr	r3, [pc, #668]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00c      	beq.n	8002846 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800282c:	4ba4      	ldr	r3, [pc, #656]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b08      	cmp	r3, #8
 8002836:	d173      	bne.n	8002920 <HAL_RCC_OscConfig+0x430>
 8002838:	4ba1      	ldr	r3, [pc, #644]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002844:	d16c      	bne.n	8002920 <HAL_RCC_OscConfig+0x430>
 8002846:	2302      	movs	r3, #2
 8002848:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002858:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <HAL_RCC_OscConfig+0x386>
 8002870:	4b93      	ldr	r3, [pc, #588]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	e013      	b.n	800289e <HAL_RCC_OscConfig+0x3ae>
 8002876:	2302      	movs	r3, #2
 8002878:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002888:	2302      	movs	r3, #2
 800288a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800288e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800289a:	4b89      	ldr	r3, [pc, #548]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	2202      	movs	r2, #2
 80028a0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80028a4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80028a8:	fa92 f2a2 	rbit	r2, r2
 80028ac:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80028b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80028b4:	fab2 f282 	clz	r2, r2
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	f042 0220 	orr.w	r2, r2, #32
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	f002 021f 	and.w	r2, r2, #31
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCC_OscConfig+0x3f6>
 80028d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d002      	beq.n	80028e6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f000 be52 	b.w	800358a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b76      	ldr	r3, [pc, #472]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	21f8      	movs	r1, #248	@ 0xf8
 80028fc:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002904:	fa91 f1a1 	rbit	r1, r1
 8002908:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800290c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002910:	fab1 f181 	clz	r1, r1
 8002914:	b2c9      	uxtb	r1, r1
 8002916:	408b      	lsls	r3, r1
 8002918:	4969      	ldr	r1, [pc, #420]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	e0fe      	b.n	8002b1e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002924:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8088 	beq.w	8002a42 <HAL_RCC_OscConfig+0x552>
 8002932:	2301      	movs	r3, #1
 8002934:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002944:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002952:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	461a      	mov	r2, r3
 800295a:	2301      	movs	r3, #1
 800295c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7fe f93d 	bl	8000bdc <HAL_GetTick>
 8002962:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002966:	e00a      	b.n	800297e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002968:	f7fe f938 	bl	8000bdc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d902      	bls.n	800297e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	f000 be06 	b.w	800358a <HAL_RCC_OscConfig+0x109a>
 800297e:	2302      	movs	r3, #2
 8002980:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002990:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_OscConfig+0x4be>
 80029a8:	4b45      	ldr	r3, [pc, #276]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	e013      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e6>
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80029c0:	2302      	movs	r3, #2
 80029c2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80029c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80029d2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	2202      	movs	r2, #2
 80029d8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80029dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80029e0:	fa92 f2a2 	rbit	r2, r2
 80029e4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80029e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80029ec:	fab2 f282 	clz	r2, r2
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	f042 0220 	orr.w	r2, r2, #32
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	f002 021f 	and.w	r2, r2, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0af      	beq.n	8002968 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a08:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	21f8      	movs	r1, #248	@ 0xf8
 8002a1e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002a26:	fa91 f1a1 	rbit	r1, r1
 8002a2a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002a2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a32:	fab1 f181 	clz	r1, r1
 8002a36:	b2c9      	uxtb	r1, r1
 8002a38:	408b      	lsls	r3, r1
 8002a3a:	4921      	ldr	r1, [pc, #132]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
 8002a40:	e06d      	b.n	8002b1e <HAL_RCC_OscConfig+0x62e>
 8002a42:	2301      	movs	r3, #1
 8002a44:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002a54:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe f8b5 	bl	8000bdc <HAL_GetTick>
 8002a72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a78:	f7fe f8b0 	bl	8000bdc <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d902      	bls.n	8002a8e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	f000 bd7e 	b.w	800358a <HAL_RCC_OscConfig+0x109a>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002aa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5d4>
 8002ab8:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <HAL_RCC_OscConfig+0x5d0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	e016      	b.n	8002aec <HAL_RCC_OscConfig+0x5fc>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002adc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ae8:	4bbf      	ldr	r3, [pc, #764]	@ (8002de8 <HAL_RCC_OscConfig+0x8f8>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	2202      	movs	r2, #2
 8002aee:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002af2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002af6:	fa92 f2a2 	rbit	r2, r2
 8002afa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002afe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002b02:	fab2 f282 	clz	r2, r2
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f042 0220 	orr.w	r2, r2, #32
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	f002 021f 	and.w	r2, r2, #31
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f202 	lsl.w	r2, r1, r2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ac      	bne.n	8002a78 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8113 	beq.w	8002d5a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d07c      	beq.n	8002c3e <HAL_RCC_OscConfig+0x74e>
 8002b44:	2301      	movs	r3, #1
 8002b46:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002b56:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	4ba2      	ldr	r3, [pc, #648]	@ (8002dec <HAL_RCC_OscConfig+0x8fc>)
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe f835 	bl	8000bdc <HAL_GetTick>
 8002b72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b78:	f7fe f830 	bl	8000bdc <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d902      	bls.n	8002b8e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	f000 bcfe 	b.w	800358a <HAL_RCC_OscConfig+0x109a>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b98:	fa93 f2a3 	rbit	r2, r3
 8002b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bae:	2202      	movs	r2, #2
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fa93 f2a3 	rbit	r2, r3
 8002bc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fa93 f2a3 	rbit	r2, r3
 8002be4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	4b7e      	ldr	r3, [pc, #504]	@ (8002de8 <HAL_RCC_OscConfig+0x8f8>)
 8002bf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	6019      	str	r1, [r3, #0]
 8002bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c02:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	fa93 f1a3 	rbit	r1, r3
 8002c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c10:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c14:	6019      	str	r1, [r3, #0]
  return result;
 8002c16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c1a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d09d      	beq.n	8002b78 <HAL_RCC_OscConfig+0x688>
 8002c3c:	e08d      	b.n	8002d5a <HAL_RCC_OscConfig+0x86a>
 8002c3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c42:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f2a3 	rbit	r2, r3
 8002c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c60:	601a      	str	r2, [r3, #0]
  return result;
 8002c62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c66:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c6a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6c:	fab3 f383 	clz	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b5d      	ldr	r3, [pc, #372]	@ (8002dec <HAL_RCC_OscConfig+0x8fc>)
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7fd ffac 	bl	8000bdc <HAL_GetTick>
 8002c84:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fd ffa7 	bl	8000bdc <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d902      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	f000 bc75 	b.w	800358a <HAL_RCC_OscConfig+0x109a>
 8002ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ca8:	2202      	movs	r2, #2
 8002caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	fa93 f2a3 	rbit	r2, r3
 8002cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cbe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ccc:	2202      	movs	r2, #2
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	fa93 f2a3 	rbit	r2, r3
 8002cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	fa93 f2a3 	rbit	r2, r3
 8002d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	4b36      	ldr	r3, [pc, #216]	@ (8002de8 <HAL_RCC_OscConfig+0x8f8>)
 8002d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d14:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d18:	2102      	movs	r1, #2
 8002d1a:	6019      	str	r1, [r3, #0]
 8002d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	fa93 f1a3 	rbit	r1, r3
 8002d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d32:	6019      	str	r1, [r3, #0]
  return result;
 8002d34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d38:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d197      	bne.n	8002c8a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 81a5 	beq.w	80030ba <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d76:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <HAL_RCC_OscConfig+0x8f8>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d116      	bne.n	8002db0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <HAL_RCC_OscConfig+0x8f8>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4a18      	ldr	r2, [pc, #96]	@ (8002de8 <HAL_RCC_OscConfig+0x8f8>)
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d8c:	61d3      	str	r3, [r2, #28]
 8002d8e:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <HAL_RCC_OscConfig+0x8f8>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002da8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <HAL_RCC_OscConfig+0x900>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d121      	bne.n	8002e00 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <HAL_RCC_OscConfig+0x900>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002df0 <HAL_RCC_OscConfig+0x900>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc8:	f7fd ff08 	bl	8000bdc <HAL_GetTick>
 8002dcc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	e010      	b.n	8002df4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd2:	f7fd ff03 	bl	8000bdc <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	@ 0x64
 8002de0:	d908      	bls.n	8002df4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e3d1      	b.n	800358a <HAL_RCC_OscConfig+0x109a>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	10908120 	.word	0x10908120
 8002df0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	4b8d      	ldr	r3, [pc, #564]	@ (800302c <HAL_RCC_OscConfig+0xb3c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0e8      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x92e>
 8002e10:	4b87      	ldr	r3, [pc, #540]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a86      	ldr	r2, [pc, #536]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	e035      	b.n	8002e8a <HAL_RCC_OscConfig+0x99a>
 8002e1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x958>
 8002e2e:	4b80      	ldr	r3, [pc, #512]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	4a7f      	ldr	r2, [pc, #508]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	6213      	str	r3, [r2, #32]
 8002e3a:	4b7d      	ldr	r3, [pc, #500]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4a7c      	ldr	r2, [pc, #496]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e40:	f023 0304 	bic.w	r3, r3, #4
 8002e44:	6213      	str	r3, [r2, #32]
 8002e46:	e020      	b.n	8002e8a <HAL_RCC_OscConfig+0x99a>
 8002e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d10c      	bne.n	8002e72 <HAL_RCC_OscConfig+0x982>
 8002e58:	4b75      	ldr	r3, [pc, #468]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4a74      	ldr	r2, [pc, #464]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	6213      	str	r3, [r2, #32]
 8002e64:	4b72      	ldr	r3, [pc, #456]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4a71      	ldr	r2, [pc, #452]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6213      	str	r3, [r2, #32]
 8002e70:	e00b      	b.n	8002e8a <HAL_RCC_OscConfig+0x99a>
 8002e72:	4b6f      	ldr	r3, [pc, #444]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4a6e      	ldr	r2, [pc, #440]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6213      	str	r3, [r2, #32]
 8002e7e:	4b6c      	ldr	r3, [pc, #432]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a6b      	ldr	r2, [pc, #428]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8081 	beq.w	8002f9e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9c:	f7fd fe9e 	bl	8000bdc <HAL_GetTick>
 8002ea0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	e00b      	b.n	8002ebe <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fd fe99 	bl	8000bdc <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e365      	b.n	800358a <HAL_RCC_OscConfig+0x109a>
 8002ebe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ece:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002edc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002eea:	2202      	movs	r2, #2
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	fa93 f2a3 	rbit	r2, r3
 8002efc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f00:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f04:	601a      	str	r2, [r3, #0]
  return result;
 8002f06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f0a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_OscConfig+0xa3a>
 8002f24:	4b42      	ldr	r3, [pc, #264]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	e013      	b.n	8002f52 <HAL_RCC_OscConfig+0xa62>
 8002f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f2e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f32:	2202      	movs	r2, #2
 8002f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	fa93 f2a3 	rbit	r2, r3
 8002f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f48:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	4b38      	ldr	r3, [pc, #224]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f56:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	6011      	str	r1, [r2, #0]
 8002f5e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f62:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	fa92 f1a2 	rbit	r1, r2
 8002f6c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f70:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002f74:	6011      	str	r1, [r2, #0]
  return result;
 8002f76:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f7a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	fab2 f282 	clz	r2, r2
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	f002 021f 	and.w	r2, r2, #31
 8002f90:	2101      	movs	r1, #1
 8002f92:	fa01 f202 	lsl.w	r2, r1, r2
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d084      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x9b6>
 8002f9c:	e083      	b.n	80030a6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fd fe1d 	bl	8000bdc <HAL_GetTick>
 8002fa2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7fd fe18 	bl	8000bdc <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e2e4      	b.n	800358a <HAL_RCC_OscConfig+0x109a>
 8002fc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002fc8:	2202      	movs	r2, #2
 8002fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f2a3 	rbit	r2, r3
 8002fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fde:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002fec:	2202      	movs	r2, #2
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003002:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003006:	601a      	str	r2, [r3, #0]
  return result;
 8003008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800300c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003010:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d106      	bne.n	8003034 <HAL_RCC_OscConfig+0xb44>
 8003026:	4b02      	ldr	r3, [pc, #8]	@ (8003030 <HAL_RCC_OscConfig+0xb40>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	e017      	b.n	800305c <HAL_RCC_OscConfig+0xb6c>
 800302c:	40007000 	.word	0x40007000
 8003030:	40021000 	.word	0x40021000
 8003034:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003038:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800303c:	2202      	movs	r2, #2
 800303e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003044:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003052:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	4bb3      	ldr	r3, [pc, #716]	@ (8003328 <HAL_RCC_OscConfig+0xe38>)
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003060:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003064:	2102      	movs	r1, #2
 8003066:	6011      	str	r1, [r2, #0]
 8003068:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800306c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	fa92 f1a2 	rbit	r1, r2
 8003076:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800307a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800307e:	6011      	str	r1, [r2, #0]
  return result;
 8003080:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003084:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	fab2 f282 	clz	r2, r2
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	f002 021f 	and.w	r2, r2, #31
 800309a:	2101      	movs	r1, #1
 800309c:	fa01 f202 	lsl.w	r2, r1, r2
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d180      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d105      	bne.n	80030ba <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003328 <HAL_RCC_OscConfig+0xe38>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4a9d      	ldr	r2, [pc, #628]	@ (8003328 <HAL_RCC_OscConfig+0xe38>)
 80030b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 825e 	beq.w	8003588 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030cc:	4b96      	ldr	r3, [pc, #600]	@ (8003328 <HAL_RCC_OscConfig+0xe38>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	f000 821f 	beq.w	8003518 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	f040 8170 	bne.w	80033cc <HAL_RCC_OscConfig+0xedc>
 80030ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030fe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	fa93 f2a3 	rbit	r2, r3
 8003108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800310c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003110:	601a      	str	r2, [r3, #0]
  return result;
 8003112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003116:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800311a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003126:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	461a      	mov	r2, r3
 800312e:	2300      	movs	r3, #0
 8003130:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7fd fd53 	bl	8000bdc <HAL_GetTick>
 8003136:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313a:	e009      	b.n	8003150 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313c:	f7fd fd4e 	bl	8000bdc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e21c      	b.n	800358a <HAL_RCC_OscConfig+0x109a>
 8003150:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003154:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003158:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800315c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003162:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f2a3 	rbit	r2, r3
 800316c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003170:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003174:	601a      	str	r2, [r3, #0]
  return result;
 8003176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800317a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800317e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d102      	bne.n	800319a <HAL_RCC_OscConfig+0xcaa>
 8003194:	4b64      	ldr	r3, [pc, #400]	@ (8003328 <HAL_RCC_OscConfig+0xe38>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	e027      	b.n	80031ea <HAL_RCC_OscConfig+0xcfa>
 800319a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800319e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80031a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ac:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	fa93 f2a3 	rbit	r2, r3
 80031b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031c4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031d2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	fa93 f2a3 	rbit	r2, r3
 80031dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	4b50      	ldr	r3, [pc, #320]	@ (8003328 <HAL_RCC_OscConfig+0xe38>)
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031ee:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031f2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031f6:	6011      	str	r1, [r2, #0]
 80031f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031fc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	fa92 f1a2 	rbit	r1, r2
 8003206:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800320a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800320e:	6011      	str	r1, [r2, #0]
  return result;
 8003210:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003214:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	fab2 f282 	clz	r2, r2
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	f042 0220 	orr.w	r2, r2, #32
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f002 021f 	and.w	r2, r2, #31
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f202 	lsl.w	r2, r1, r2
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d182      	bne.n	800313c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003236:	4b3c      	ldr	r3, [pc, #240]	@ (8003328 <HAL_RCC_OscConfig+0xe38>)
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	f023 020f 	bic.w	r2, r3, #15
 800323e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003242:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	4937      	ldr	r1, [pc, #220]	@ (8003328 <HAL_RCC_OscConfig+0xe38>)
 800324c:	4313      	orrs	r3, r2
 800324e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003250:	4b35      	ldr	r3, [pc, #212]	@ (8003328 <HAL_RCC_OscConfig+0xe38>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800325c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a19      	ldr	r1, [r3, #32]
 8003264:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003268:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	430b      	orrs	r3, r1
 8003272:	492d      	ldr	r1, [pc, #180]	@ (8003328 <HAL_RCC_OscConfig+0xe38>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800327c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003280:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800328a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	fa93 f2a3 	rbit	r2, r3
 8003294:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003298:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800329c:	601a      	str	r2, [r3, #0]
  return result;
 800329e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032a2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032a6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	461a      	mov	r2, r3
 80032ba:	2301      	movs	r3, #1
 80032bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fd fc8d 	bl	8000bdc <HAL_GetTick>
 80032c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c6:	e009      	b.n	80032dc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fd fc88 	bl	8000bdc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e156      	b.n	800358a <HAL_RCC_OscConfig+0x109a>
 80032dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032e0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fa93 f2a3 	rbit	r2, r3
 80032f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003300:	601a      	str	r2, [r3, #0]
  return result;
 8003302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003306:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800330a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <HAL_RCC_OscConfig+0xe3c>
 8003320:	4b01      	ldr	r3, [pc, #4]	@ (8003328 <HAL_RCC_OscConfig+0xe38>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	e02a      	b.n	800337c <HAL_RCC_OscConfig+0xe8c>
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003330:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003334:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003338:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800333e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	fa93 f2a3 	rbit	r2, r3
 8003348:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800334c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003356:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800335a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003364:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	fa93 f2a3 	rbit	r2, r3
 800336e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003372:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	4b86      	ldr	r3, [pc, #536]	@ (8003594 <HAL_RCC_OscConfig+0x10a4>)
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003380:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003384:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003388:	6011      	str	r1, [r2, #0]
 800338a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800338e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	fa92 f1a2 	rbit	r1, r2
 8003398:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800339c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80033a0:	6011      	str	r1, [r2, #0]
  return result;
 80033a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033a6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	fab2 f282 	clz	r2, r2
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f042 0220 	orr.w	r2, r2, #32
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f002 021f 	and.w	r2, r2, #31
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f202 	lsl.w	r2, r1, r2
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f43f af7f 	beq.w	80032c8 <HAL_RCC_OscConfig+0xdd8>
 80033ca:	e0dd      	b.n	8003588 <HAL_RCC_OscConfig+0x1098>
 80033cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033de:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	fa93 f2a3 	rbit	r2, r3
 80033e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ec:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033f0:	601a      	str	r2, [r3, #0]
  return result;
 80033f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033f6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033fa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003406:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	461a      	mov	r2, r3
 800340e:	2300      	movs	r3, #0
 8003410:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003412:	f7fd fbe3 	bl	8000bdc <HAL_GetTick>
 8003416:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341a:	e009      	b.n	8003430 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341c:	f7fd fbde 	bl	8000bdc <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0ac      	b.n	800358a <HAL_RCC_OscConfig+0x109a>
 8003430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003434:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003438:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800343c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003442:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	fa93 f2a3 	rbit	r2, r3
 800344c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003450:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003454:	601a      	str	r2, [r3, #0]
  return result;
 8003456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800345a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800345e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d102      	bne.n	800347a <HAL_RCC_OscConfig+0xf8a>
 8003474:	4b47      	ldr	r3, [pc, #284]	@ (8003594 <HAL_RCC_OscConfig+0x10a4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	e027      	b.n	80034ca <HAL_RCC_OscConfig+0xfda>
 800347a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800347e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003482:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800348c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fa93 f2a3 	rbit	r2, r3
 8003496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800349a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80034a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	fa93 f2a3 	rbit	r2, r3
 80034bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034c0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	4b33      	ldr	r3, [pc, #204]	@ (8003594 <HAL_RCC_OscConfig+0x10a4>)
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034ce:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034d2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034d6:	6011      	str	r1, [r2, #0]
 80034d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034dc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	fa92 f1a2 	rbit	r1, r2
 80034e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034ea:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80034ee:	6011      	str	r1, [r2, #0]
  return result;
 80034f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034f4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	fab2 f282 	clz	r2, r2
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	f042 0220 	orr.w	r2, r2, #32
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	f002 021f 	and.w	r2, r2, #31
 800350a:	2101      	movs	r1, #1
 800350c:	fa01 f202 	lsl.w	r2, r1, r2
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d182      	bne.n	800341c <HAL_RCC_OscConfig+0xf2c>
 8003516:	e037      	b.n	8003588 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003518:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800351c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e02e      	b.n	800358a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800352c:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <HAL_RCC_OscConfig+0x10a4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003534:	4b17      	ldr	r3, [pc, #92]	@ (8003594 <HAL_RCC_OscConfig+0x10a4>)
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800353c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003540:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003548:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	429a      	cmp	r2, r3
 8003552:	d117      	bne.n	8003584 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003554:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003558:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800355c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003560:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003568:	429a      	cmp	r2, r3
 800356a:	d10b      	bne.n	8003584 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800356c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003578:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40021000 	.word	0x40021000

08003598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b09e      	sub	sp, #120	@ 0x78
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e162      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b0:	4b90      	ldr	r3, [pc, #576]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d910      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b8d      	ldr	r3, [pc, #564]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 0207 	bic.w	r2, r3, #7
 80035c6:	498b      	ldr	r1, [pc, #556]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b89      	ldr	r3, [pc, #548]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e14a      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ec:	4b82      	ldr	r3, [pc, #520]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	497f      	ldr	r1, [pc, #508]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80dc 	beq.w	80037c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d13c      	bne.n	800368e <HAL_RCC_ClockConfig+0xf6>
 8003614:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003618:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d102      	bne.n	800363e <HAL_RCC_ClockConfig+0xa6>
 8003638:	4b6f      	ldr	r3, [pc, #444]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	e00f      	b.n	800365e <HAL_RCC_ClockConfig+0xc6>
 800363e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003642:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	667b      	str	r3, [r7, #100]	@ 0x64
 800364c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003650:	663b      	str	r3, [r7, #96]	@ 0x60
 8003652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800365a:	4b67      	ldr	r3, [pc, #412]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003662:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003664:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003666:	fa92 f2a2 	rbit	r2, r2
 800366a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800366c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800366e:	fab2 f282 	clz	r2, r2
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	f042 0220 	orr.w	r2, r2, #32
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	f002 021f 	and.w	r2, r2, #31
 800367e:	2101      	movs	r1, #1
 8003680:	fa01 f202 	lsl.w	r2, r1, r2
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d17b      	bne.n	8003782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0f3      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d13c      	bne.n	8003710 <HAL_RCC_ClockConfig+0x178>
 8003696:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800369a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d102      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x128>
 80036ba:	4b4f      	ldr	r3, [pc, #316]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e00f      	b.n	80036e0 <HAL_RCC_ClockConfig+0x148>
 80036c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80036d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036dc:	4b46      	ldr	r3, [pc, #280]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036e4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80036e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036e8:	fa92 f2a2 	rbit	r2, r2
 80036ec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80036ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036f0:	fab2 f282 	clz	r2, r2
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	f042 0220 	orr.w	r2, r2, #32
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	f002 021f 	and.w	r2, r2, #31
 8003700:	2101      	movs	r1, #1
 8003702:	fa01 f202 	lsl.w	r2, r1, r2
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d13a      	bne.n	8003782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0b2      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
 8003710:	2302      	movs	r3, #2
 8003712:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800371c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d102      	bne.n	8003738 <HAL_RCC_ClockConfig+0x1a0>
 8003732:	4b31      	ldr	r3, [pc, #196]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	e00d      	b.n	8003754 <HAL_RCC_ClockConfig+0x1bc>
 8003738:	2302      	movs	r3, #2
 800373a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24
 8003744:	2302      	movs	r3, #2
 8003746:	623b      	str	r3, [r7, #32]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	4b29      	ldr	r3, [pc, #164]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	2202      	movs	r2, #2
 8003756:	61ba      	str	r2, [r7, #24]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	fa92 f2a2 	rbit	r2, r2
 800375e:	617a      	str	r2, [r7, #20]
  return result;
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	fab2 f282 	clz	r2, r2
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	f042 0220 	orr.w	r2, r2, #32
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	f002 021f 	and.w	r2, r2, #31
 8003772:	2101      	movs	r1, #1
 8003774:	fa01 f202 	lsl.w	r2, r1, r2
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e079      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b1d      	ldr	r3, [pc, #116]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	491a      	ldr	r1, [pc, #104]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fd fa22 	bl	8000bdc <HAL_GetTick>
 8003798:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fd fa1e 	bl	8000bdc <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e061      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b11      	ldr	r3, [pc, #68]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d214      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 0207 	bic.w	r2, r3, #7
 80037da:	4906      	ldr	r1, [pc, #24]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b04      	ldr	r3, [pc, #16]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e040      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
 80037f4:	40022000 	.word	0x40022000
 80037f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003808:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <HAL_RCC_ClockConfig+0x2e8>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	491a      	ldr	r1, [pc, #104]	@ (8003880 <HAL_RCC_ClockConfig+0x2e8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003826:	4b16      	ldr	r3, [pc, #88]	@ (8003880 <HAL_RCC_ClockConfig+0x2e8>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4912      	ldr	r1, [pc, #72]	@ (8003880 <HAL_RCC_ClockConfig+0x2e8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800383a:	f000 f829 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 800383e:	4601      	mov	r1, r0
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <HAL_RCC_ClockConfig+0x2e8>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003848:	22f0      	movs	r2, #240	@ 0xf0
 800384a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	fa92 f2a2 	rbit	r2, r2
 8003852:	60fa      	str	r2, [r7, #12]
  return result;
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	fab2 f282 	clz	r2, r2
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	40d3      	lsrs	r3, r2
 800385e:	4a09      	ldr	r2, [pc, #36]	@ (8003884 <HAL_RCC_ClockConfig+0x2ec>)
 8003860:	5cd3      	ldrb	r3, [r2, r3]
 8003862:	fa21 f303 	lsr.w	r3, r1, r3
 8003866:	4a08      	ldr	r2, [pc, #32]	@ (8003888 <HAL_RCC_ClockConfig+0x2f0>)
 8003868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800386a:	4b08      	ldr	r3, [pc, #32]	@ (800388c <HAL_RCC_ClockConfig+0x2f4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd f8ae 	bl	80009d0 <HAL_InitTick>
  
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3778      	adds	r7, #120	@ 0x78
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	08008f5c 	.word	0x08008f5c
 8003888:	20000000 	.word	0x20000000
 800388c:	20000004 	.word	0x20000004

08003890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80038aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d002      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x30>
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0x36>
 80038be:	e029      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c0:	4b1a      	ldr	r3, [pc, #104]	@ (800392c <HAL_RCC_GetSysClockFreq+0x9c>)
 80038c2:	613b      	str	r3, [r7, #16]
      break;
 80038c4:	e029      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	0c9b      	lsrs	r3, r3, #18
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	4a18      	ldr	r2, [pc, #96]	@ (8003930 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038d0:	5cd3      	ldrb	r3, [r2, r3]
 80038d2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80038d4:	4b14      	ldr	r3, [pc, #80]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x98>)
 80038d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	4a15      	ldr	r2, [pc, #84]	@ (8003934 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038de:	5cd3      	ldrb	r3, [r2, r3]
 80038e0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038ec:	4a0f      	ldr	r2, [pc, #60]	@ (800392c <HAL_RCC_GetSysClockFreq+0x9c>)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e007      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038fe:	4a0b      	ldr	r2, [pc, #44]	@ (800392c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	fbb2 f2f3 	udiv	r2, r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	fb02 f303 	mul.w	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	613b      	str	r3, [r7, #16]
      break;
 8003912:	e002      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003914:	4b05      	ldr	r3, [pc, #20]	@ (800392c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003916:	613b      	str	r3, [r7, #16]
      break;
 8003918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391a:	693b      	ldr	r3, [r7, #16]
}
 800391c:	4618      	mov	r0, r3
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	40021000 	.word	0x40021000
 800392c:	007a1200 	.word	0x007a1200
 8003930:	08008f74 	.word	0x08008f74
 8003934:	08008f84 	.word	0x08008f84

08003938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <HAL_RCC_GetHCLKFreq+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000000 	.word	0x20000000

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003956:	f7ff ffef 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 800395a:	4601      	mov	r1, r0
 800395c:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003964:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003968:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	fa92 f2a2 	rbit	r2, r2
 8003970:	603a      	str	r2, [r7, #0]
  return result;
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	fab2 f282 	clz	r2, r2
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	40d3      	lsrs	r3, r2
 800397c:	4a04      	ldr	r2, [pc, #16]	@ (8003990 <HAL_RCC_GetPCLK1Freq+0x40>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000
 8003990:	08008f6c 	.word	0x08008f6c

08003994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800399a:	f7ff ffcd 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 800399e:	4601      	mov	r1, r0
 80039a0:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80039a8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80039ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	fa92 f2a2 	rbit	r2, r2
 80039b4:	603a      	str	r2, [r7, #0]
  return result;
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	fab2 f282 	clz	r2, r2
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	40d3      	lsrs	r3, r2
 80039c0:	4a04      	ldr	r2, [pc, #16]	@ (80039d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039c2:	5cd3      	ldrb	r3, [r2, r3]
 80039c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	08008f6c 	.word	0x08008f6c

080039d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	220f      	movs	r2, #15
 80039e6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039e8:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0203 	and.w	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80039f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003a00:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a0c:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	08db      	lsrs	r3, r3, #3
 8003a12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003a1a:	4b07      	ldr	r3, [pc, #28]	@ (8003a38 <HAL_RCC_GetClockConfig+0x60>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0207 	and.w	r2, r3, #7
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	601a      	str	r2, [r3, #0]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40022000 	.word	0x40022000

08003a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b092      	sub	sp, #72	@ 0x48
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80d4 	beq.w	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a60:	4b4e      	ldr	r3, [pc, #312]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10e      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	4a4a      	ldr	r2, [pc, #296]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a76:	61d3      	str	r3, [r2, #28]
 8003a78:	4b48      	ldr	r3, [pc, #288]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8a:	4b45      	ldr	r3, [pc, #276]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d118      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a96:	4b42      	ldr	r3, [pc, #264]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a41      	ldr	r2, [pc, #260]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa2:	f7fd f89b 	bl	8000bdc <HAL_GetTick>
 8003aa6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa8:	e008      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aaa:	f7fd f897 	bl	8000bdc <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b64      	cmp	r3, #100	@ 0x64
 8003ab6:	d901      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e1d6      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	4b38      	ldr	r3, [pc, #224]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ac8:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8084 	beq.w	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d07c      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003af6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	461a      	mov	r2, r3
 8003b12:	2301      	movs	r3, #1
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	461a      	mov	r2, r3
 8003b36:	2300      	movs	r3, #0
 8003b38:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b3a:	4a18      	ldr	r2, [pc, #96]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b3e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d04b      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4a:	f7fd f847 	bl	8000bdc <HAL_GetTick>
 8003b4e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fd f843 	bl	8000bdc <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e180      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6e:	fa93 f3a3 	rbit	r3, r3
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b74:	2302      	movs	r3, #2
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	61fb      	str	r3, [r7, #28]
  return result;
 8003b80:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f043 0302 	orr.w	r3, r3, #2
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d108      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b96:	4b01      	ldr	r3, [pc, #4]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	e00d      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	10908100 	.word	0x10908100
 8003ba8:	2302      	movs	r3, #2
 8003baa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	4b9a      	ldr	r3, [pc, #616]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	2202      	movs	r2, #2
 8003bba:	613a      	str	r2, [r7, #16]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	fa92 f2a2 	rbit	r2, r2
 8003bc2:	60fa      	str	r2, [r7, #12]
  return result;
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	fab2 f282 	clz	r2, r2
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	f002 021f 	and.w	r2, r2, #31
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0b7      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003be2:	4b8f      	ldr	r3, [pc, #572]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	498c      	ldr	r1, [pc, #560]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bf4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfc:	4b88      	ldr	r3, [pc, #544]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4a87      	ldr	r2, [pc, #540]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c14:	4b82      	ldr	r3, [pc, #520]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	f023 0203 	bic.w	r2, r3, #3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	497f      	ldr	r1, [pc, #508]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c32:	4b7b      	ldr	r3, [pc, #492]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4978      	ldr	r1, [pc, #480]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c50:	4b73      	ldr	r3, [pc, #460]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	4970      	ldr	r1, [pc, #448]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c6e:	4b6c      	ldr	r3, [pc, #432]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	f023 0210 	bic.w	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	4969      	ldr	r1, [pc, #420]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c8c:	4b64      	ldr	r3, [pc, #400]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c98:	4961      	ldr	r1, [pc, #388]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d008      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003caa:	4b5d      	ldr	r3, [pc, #372]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	f023 0220 	bic.w	r2, r3, #32
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	495a      	ldr	r1, [pc, #360]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cc8:	4b55      	ldr	r3, [pc, #340]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ccc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	4952      	ldr	r1, [pc, #328]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ce6:	4b4e      	ldr	r3, [pc, #312]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	494b      	ldr	r1, [pc, #300]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d04:	4b46      	ldr	r3, [pc, #280]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	4943      	ldr	r1, [pc, #268]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d22:	4b3f      	ldr	r3, [pc, #252]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	493c      	ldr	r1, [pc, #240]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d40:	4b37      	ldr	r3, [pc, #220]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	4934      	ldr	r1, [pc, #208]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d5e:	4b30      	ldr	r3, [pc, #192]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d62:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6a:	492d      	ldr	r1, [pc, #180]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d7c:	4b28      	ldr	r3, [pc, #160]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d88:	4925      	ldr	r1, [pc, #148]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d008      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d9a:	4b21      	ldr	r3, [pc, #132]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	491e      	ldr	r1, [pc, #120]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003db8:	4b19      	ldr	r3, [pc, #100]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc4:	4916      	ldr	r1, [pc, #88]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003dd6:	4b12      	ldr	r3, [pc, #72]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	490f      	ldr	r1, [pc, #60]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003df4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e00:	4907      	ldr	r1, [pc, #28]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00c      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003e12:	4b03      	ldr	r3, [pc, #12]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	e002      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
 8003e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e26:	4913      	ldr	r1, [pc, #76]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003e38:	4b0e      	ldr	r3, [pc, #56]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e44:	490b      	ldr	r1, [pc, #44]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003e56:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e62:	4904      	ldr	r1, [pc, #16]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3748      	adds	r7, #72	@ 0x48
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000

08003e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e049      	b.n	8003f1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fc fd20 	bl	80008e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f000 fa38 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d001      	beq.n	8003f40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e047      	b.n	8003fd0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a23      	ldr	r2, [pc, #140]	@ (8003fdc <HAL_TIM_Base_Start+0xb4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01d      	beq.n	8003f8e <HAL_TIM_Base_Start+0x66>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5a:	d018      	beq.n	8003f8e <HAL_TIM_Base_Start+0x66>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe0 <HAL_TIM_Base_Start+0xb8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_TIM_Base_Start+0x66>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe4 <HAL_TIM_Base_Start+0xbc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_TIM_Base_Start+0x66>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe8 <HAL_TIM_Base_Start+0xc0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_TIM_Base_Start+0x66>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fec <HAL_TIM_Base_Start+0xc4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_TIM_Base_Start+0x66>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a19      	ldr	r2, [pc, #100]	@ (8003ff0 <HAL_TIM_Base_Start+0xc8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d115      	bne.n	8003fba <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	4b17      	ldr	r3, [pc, #92]	@ (8003ff4 <HAL_TIM_Base_Start+0xcc>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b06      	cmp	r3, #6
 8003f9e:	d015      	beq.n	8003fcc <HAL_TIM_Base_Start+0xa4>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa6:	d011      	beq.n	8003fcc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb8:	e008      	b.n	8003fcc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0201 	orr.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e000      	b.n	8003fce <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40013400 	.word	0x40013400
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	40015000 	.word	0x40015000
 8003ff4:	00010007 	.word	0x00010007

08003ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d001      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e04f      	b.n	80040b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a23      	ldr	r2, [pc, #140]	@ (80040bc <HAL_TIM_Base_Start_IT+0xc4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01d      	beq.n	800406e <HAL_TIM_Base_Start_IT+0x76>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403a:	d018      	beq.n	800406e <HAL_TIM_Base_Start_IT+0x76>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1f      	ldr	r2, [pc, #124]	@ (80040c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <HAL_TIM_Base_Start_IT+0x76>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1e      	ldr	r2, [pc, #120]	@ (80040c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_TIM_Base_Start_IT+0x76>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1c      	ldr	r2, [pc, #112]	@ (80040c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_TIM_Base_Start_IT+0x76>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1b      	ldr	r2, [pc, #108]	@ (80040cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_TIM_Base_Start_IT+0x76>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a19      	ldr	r2, [pc, #100]	@ (80040d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d115      	bne.n	800409a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	4b17      	ldr	r3, [pc, #92]	@ (80040d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004076:	4013      	ands	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b06      	cmp	r3, #6
 800407e:	d015      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0xb4>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004086:	d011      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004098:	e008      	b.n	80040ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e000      	b.n	80040ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40013400 	.word	0x40013400
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40015000 	.word	0x40015000
 80040d4:	00010007 	.word	0x00010007

080040d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d020      	beq.n	800413c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01b      	beq.n	800413c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0202 	mvn.w	r2, #2
 800410c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8e4 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8d6 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8e7 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d020      	beq.n	8004188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01b      	beq.n	8004188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0204 	mvn.w	r2, #4
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8be 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f8b0 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8c1 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d020      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0208 	mvn.w	r2, #8
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2204      	movs	r2, #4
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f898 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f88a 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f89b 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d020      	beq.n	8004220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0210 	mvn.w	r2, #16
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2208      	movs	r2, #8
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f872 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f864 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f875 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0201 	mvn.w	r2, #1
 800423c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fc faa8 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9a2 	bl	80045ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00c      	beq.n	800428c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f99a 	bl	80045c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f834 	bl	8004318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00c      	beq.n	80042d4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0220 	mvn.w	r2, #32
 80042cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f962 	bl	8004598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a48      	ldr	r2, [pc, #288]	@ (8004460 <TIM_Base_SetConfig+0x134>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434a:	d00f      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a45      	ldr	r2, [pc, #276]	@ (8004464 <TIM_Base_SetConfig+0x138>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a44      	ldr	r2, [pc, #272]	@ (8004468 <TIM_Base_SetConfig+0x13c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a43      	ldr	r2, [pc, #268]	@ (800446c <TIM_Base_SetConfig+0x140>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a42      	ldr	r2, [pc, #264]	@ (8004470 <TIM_Base_SetConfig+0x144>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a37      	ldr	r2, [pc, #220]	@ (8004460 <TIM_Base_SetConfig+0x134>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01f      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438c:	d01b      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a34      	ldr	r2, [pc, #208]	@ (8004464 <TIM_Base_SetConfig+0x138>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d017      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a33      	ldr	r2, [pc, #204]	@ (8004468 <TIM_Base_SetConfig+0x13c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a32      	ldr	r2, [pc, #200]	@ (800446c <TIM_Base_SetConfig+0x140>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00f      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a32      	ldr	r2, [pc, #200]	@ (8004474 <TIM_Base_SetConfig+0x148>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a31      	ldr	r2, [pc, #196]	@ (8004478 <TIM_Base_SetConfig+0x14c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a30      	ldr	r2, [pc, #192]	@ (800447c <TIM_Base_SetConfig+0x150>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004470 <TIM_Base_SetConfig+0x144>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d108      	bne.n	80043d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a18      	ldr	r2, [pc, #96]	@ (8004460 <TIM_Base_SetConfig+0x134>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <TIM_Base_SetConfig+0x100>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a19      	ldr	r2, [pc, #100]	@ (800446c <TIM_Base_SetConfig+0x140>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00f      	beq.n	800442c <TIM_Base_SetConfig+0x100>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a19      	ldr	r2, [pc, #100]	@ (8004474 <TIM_Base_SetConfig+0x148>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00b      	beq.n	800442c <TIM_Base_SetConfig+0x100>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a18      	ldr	r2, [pc, #96]	@ (8004478 <TIM_Base_SetConfig+0x14c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d007      	beq.n	800442c <TIM_Base_SetConfig+0x100>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a17      	ldr	r2, [pc, #92]	@ (800447c <TIM_Base_SetConfig+0x150>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_Base_SetConfig+0x100>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a12      	ldr	r2, [pc, #72]	@ (8004470 <TIM_Base_SetConfig+0x144>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d103      	bne.n	8004434 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b01      	cmp	r3, #1
 8004444:	d105      	bne.n	8004452 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	611a      	str	r2, [r3, #16]
  }
}
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40000400 	.word	0x40000400
 8004468:	40000800 	.word	0x40000800
 800446c:	40013400 	.word	0x40013400
 8004470:	40015000 	.word	0x40015000
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800

08004480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004494:	2302      	movs	r3, #2
 8004496:	e06d      	b.n	8004574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a30      	ldr	r2, [pc, #192]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d108      	bne.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1e      	ldr	r2, [pc, #120]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d01d      	beq.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004514:	d018      	beq.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1c      	ldr	r2, [pc, #112]	@ (800458c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1a      	ldr	r2, [pc, #104]	@ (8004590 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00e      	beq.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a15      	ldr	r2, [pc, #84]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d009      	beq.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a16      	ldr	r2, [pc, #88]	@ (8004594 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a11      	ldr	r2, [pc, #68]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d10c      	bne.n	8004562 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800454e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40013400 	.word	0x40013400
 8004588:	40015000 	.word	0x40015000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40014000 	.word	0x40014000

08004598 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e040      	b.n	8004668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc f9a8 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	@ 0x24
 8004600:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f9fc 	bl	8004a18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f825 	bl	8004670 <UART_SetConfig>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e01b      	b.n	8004668 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800463e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800464e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fa7b 	bl	8004b5c <UART_CheckIdleState>
 8004666:	4603      	mov	r3, r0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4b92      	ldr	r3, [pc, #584]	@ (80048e4 <UART_SetConfig+0x274>)
 800469c:	4013      	ands	r3, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	6979      	ldr	r1, [r7, #20]
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	430a      	orrs	r2, r1
 80046e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a80      	ldr	r2, [pc, #512]	@ (80048e8 <UART_SetConfig+0x278>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d120      	bne.n	800472e <UART_SetConfig+0xbe>
 80046ec:	4b7f      	ldr	r3, [pc, #508]	@ (80048ec <UART_SetConfig+0x27c>)
 80046ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d817      	bhi.n	8004728 <UART_SetConfig+0xb8>
 80046f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004700 <UART_SetConfig+0x90>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004711 	.word	0x08004711
 8004704:	0800471d 	.word	0x0800471d
 8004708:	08004723 	.word	0x08004723
 800470c:	08004717 	.word	0x08004717
 8004710:	2301      	movs	r3, #1
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e0b5      	b.n	8004882 <UART_SetConfig+0x212>
 8004716:	2302      	movs	r3, #2
 8004718:	77fb      	strb	r3, [r7, #31]
 800471a:	e0b2      	b.n	8004882 <UART_SetConfig+0x212>
 800471c:	2304      	movs	r3, #4
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	e0af      	b.n	8004882 <UART_SetConfig+0x212>
 8004722:	2308      	movs	r3, #8
 8004724:	77fb      	strb	r3, [r7, #31]
 8004726:	e0ac      	b.n	8004882 <UART_SetConfig+0x212>
 8004728:	2310      	movs	r3, #16
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e0a9      	b.n	8004882 <UART_SetConfig+0x212>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a6f      	ldr	r2, [pc, #444]	@ (80048f0 <UART_SetConfig+0x280>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d124      	bne.n	8004782 <UART_SetConfig+0x112>
 8004738:	4b6c      	ldr	r3, [pc, #432]	@ (80048ec <UART_SetConfig+0x27c>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004740:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004744:	d011      	beq.n	800476a <UART_SetConfig+0xfa>
 8004746:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800474a:	d817      	bhi.n	800477c <UART_SetConfig+0x10c>
 800474c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004750:	d011      	beq.n	8004776 <UART_SetConfig+0x106>
 8004752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004756:	d811      	bhi.n	800477c <UART_SetConfig+0x10c>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <UART_SetConfig+0xf4>
 800475c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004760:	d006      	beq.n	8004770 <UART_SetConfig+0x100>
 8004762:	e00b      	b.n	800477c <UART_SetConfig+0x10c>
 8004764:	2300      	movs	r3, #0
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e08b      	b.n	8004882 <UART_SetConfig+0x212>
 800476a:	2302      	movs	r3, #2
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e088      	b.n	8004882 <UART_SetConfig+0x212>
 8004770:	2304      	movs	r3, #4
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e085      	b.n	8004882 <UART_SetConfig+0x212>
 8004776:	2308      	movs	r3, #8
 8004778:	77fb      	strb	r3, [r7, #31]
 800477a:	e082      	b.n	8004882 <UART_SetConfig+0x212>
 800477c:	2310      	movs	r3, #16
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e07f      	b.n	8004882 <UART_SetConfig+0x212>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a5b      	ldr	r2, [pc, #364]	@ (80048f4 <UART_SetConfig+0x284>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d124      	bne.n	80047d6 <UART_SetConfig+0x166>
 800478c:	4b57      	ldr	r3, [pc, #348]	@ (80048ec <UART_SetConfig+0x27c>)
 800478e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004790:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004794:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004798:	d011      	beq.n	80047be <UART_SetConfig+0x14e>
 800479a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800479e:	d817      	bhi.n	80047d0 <UART_SetConfig+0x160>
 80047a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047a4:	d011      	beq.n	80047ca <UART_SetConfig+0x15a>
 80047a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047aa:	d811      	bhi.n	80047d0 <UART_SetConfig+0x160>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <UART_SetConfig+0x148>
 80047b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047b4:	d006      	beq.n	80047c4 <UART_SetConfig+0x154>
 80047b6:	e00b      	b.n	80047d0 <UART_SetConfig+0x160>
 80047b8:	2300      	movs	r3, #0
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e061      	b.n	8004882 <UART_SetConfig+0x212>
 80047be:	2302      	movs	r3, #2
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e05e      	b.n	8004882 <UART_SetConfig+0x212>
 80047c4:	2304      	movs	r3, #4
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e05b      	b.n	8004882 <UART_SetConfig+0x212>
 80047ca:	2308      	movs	r3, #8
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e058      	b.n	8004882 <UART_SetConfig+0x212>
 80047d0:	2310      	movs	r3, #16
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e055      	b.n	8004882 <UART_SetConfig+0x212>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a47      	ldr	r2, [pc, #284]	@ (80048f8 <UART_SetConfig+0x288>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d124      	bne.n	800482a <UART_SetConfig+0x1ba>
 80047e0:	4b42      	ldr	r3, [pc, #264]	@ (80048ec <UART_SetConfig+0x27c>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80047e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047ec:	d011      	beq.n	8004812 <UART_SetConfig+0x1a2>
 80047ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047f2:	d817      	bhi.n	8004824 <UART_SetConfig+0x1b4>
 80047f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f8:	d011      	beq.n	800481e <UART_SetConfig+0x1ae>
 80047fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047fe:	d811      	bhi.n	8004824 <UART_SetConfig+0x1b4>
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <UART_SetConfig+0x19c>
 8004804:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004808:	d006      	beq.n	8004818 <UART_SetConfig+0x1a8>
 800480a:	e00b      	b.n	8004824 <UART_SetConfig+0x1b4>
 800480c:	2300      	movs	r3, #0
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e037      	b.n	8004882 <UART_SetConfig+0x212>
 8004812:	2302      	movs	r3, #2
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e034      	b.n	8004882 <UART_SetConfig+0x212>
 8004818:	2304      	movs	r3, #4
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e031      	b.n	8004882 <UART_SetConfig+0x212>
 800481e:	2308      	movs	r3, #8
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e02e      	b.n	8004882 <UART_SetConfig+0x212>
 8004824:	2310      	movs	r3, #16
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e02b      	b.n	8004882 <UART_SetConfig+0x212>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a33      	ldr	r2, [pc, #204]	@ (80048fc <UART_SetConfig+0x28c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d124      	bne.n	800487e <UART_SetConfig+0x20e>
 8004834:	4b2d      	ldr	r3, [pc, #180]	@ (80048ec <UART_SetConfig+0x27c>)
 8004836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004838:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800483c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004840:	d011      	beq.n	8004866 <UART_SetConfig+0x1f6>
 8004842:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004846:	d817      	bhi.n	8004878 <UART_SetConfig+0x208>
 8004848:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800484c:	d011      	beq.n	8004872 <UART_SetConfig+0x202>
 800484e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004852:	d811      	bhi.n	8004878 <UART_SetConfig+0x208>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <UART_SetConfig+0x1f0>
 8004858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800485c:	d006      	beq.n	800486c <UART_SetConfig+0x1fc>
 800485e:	e00b      	b.n	8004878 <UART_SetConfig+0x208>
 8004860:	2300      	movs	r3, #0
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e00d      	b.n	8004882 <UART_SetConfig+0x212>
 8004866:	2302      	movs	r3, #2
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e00a      	b.n	8004882 <UART_SetConfig+0x212>
 800486c:	2304      	movs	r3, #4
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e007      	b.n	8004882 <UART_SetConfig+0x212>
 8004872:	2308      	movs	r3, #8
 8004874:	77fb      	strb	r3, [r7, #31]
 8004876:	e004      	b.n	8004882 <UART_SetConfig+0x212>
 8004878:	2310      	movs	r3, #16
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e001      	b.n	8004882 <UART_SetConfig+0x212>
 800487e:	2310      	movs	r3, #16
 8004880:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488a:	d16b      	bne.n	8004964 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800488c:	7ffb      	ldrb	r3, [r7, #31]
 800488e:	2b08      	cmp	r3, #8
 8004890:	d838      	bhi.n	8004904 <UART_SetConfig+0x294>
 8004892:	a201      	add	r2, pc, #4	@ (adr r2, 8004898 <UART_SetConfig+0x228>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048c5 	.word	0x080048c5
 80048a0:	080048cd 	.word	0x080048cd
 80048a4:	08004905 	.word	0x08004905
 80048a8:	080048d3 	.word	0x080048d3
 80048ac:	08004905 	.word	0x08004905
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004905 	.word	0x08004905
 80048b8:	080048db 	.word	0x080048db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048bc:	f7ff f848 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 80048c0:	61b8      	str	r0, [r7, #24]
        break;
 80048c2:	e024      	b.n	800490e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c4:	f7ff f866 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 80048c8:	61b8      	str	r0, [r7, #24]
        break;
 80048ca:	e020      	b.n	800490e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <UART_SetConfig+0x290>)
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e01d      	b.n	800490e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048d2:	f7fe ffdd 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 80048d6:	61b8      	str	r0, [r7, #24]
        break;
 80048d8:	e019      	b.n	800490e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048de:	61bb      	str	r3, [r7, #24]
        break;
 80048e0:	e015      	b.n	800490e <UART_SetConfig+0x29e>
 80048e2:	bf00      	nop
 80048e4:	efff69f3 	.word	0xefff69f3
 80048e8:	40013800 	.word	0x40013800
 80048ec:	40021000 	.word	0x40021000
 80048f0:	40004400 	.word	0x40004400
 80048f4:	40004800 	.word	0x40004800
 80048f8:	40004c00 	.word	0x40004c00
 80048fc:	40005000 	.word	0x40005000
 8004900:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	77bb      	strb	r3, [r7, #30]
        break;
 800490c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d073      	beq.n	80049fc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	005a      	lsls	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	441a      	add	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b0f      	cmp	r3, #15
 800492e:	d916      	bls.n	800495e <UART_SetConfig+0x2ee>
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004936:	d212      	bcs.n	800495e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f023 030f 	bic.w	r3, r3, #15
 8004940:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	b29b      	uxth	r3, r3
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	b29a      	uxth	r2, r3
 800494e:	89fb      	ldrh	r3, [r7, #14]
 8004950:	4313      	orrs	r3, r2
 8004952:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	89fa      	ldrh	r2, [r7, #14]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	e04e      	b.n	80049fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	77bb      	strb	r3, [r7, #30]
 8004962:	e04b      	b.n	80049fc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004964:	7ffb      	ldrb	r3, [r7, #31]
 8004966:	2b08      	cmp	r3, #8
 8004968:	d827      	bhi.n	80049ba <UART_SetConfig+0x34a>
 800496a:	a201      	add	r2, pc, #4	@ (adr r2, 8004970 <UART_SetConfig+0x300>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	08004995 	.word	0x08004995
 8004974:	0800499d 	.word	0x0800499d
 8004978:	080049a5 	.word	0x080049a5
 800497c:	080049bb 	.word	0x080049bb
 8004980:	080049ab 	.word	0x080049ab
 8004984:	080049bb 	.word	0x080049bb
 8004988:	080049bb 	.word	0x080049bb
 800498c:	080049bb 	.word	0x080049bb
 8004990:	080049b3 	.word	0x080049b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004994:	f7fe ffdc 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8004998:	61b8      	str	r0, [r7, #24]
        break;
 800499a:	e013      	b.n	80049c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800499c:	f7fe fffa 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 80049a0:	61b8      	str	r0, [r7, #24]
        break;
 80049a2:	e00f      	b.n	80049c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a14 <UART_SetConfig+0x3a4>)
 80049a6:	61bb      	str	r3, [r7, #24]
        break;
 80049a8:	e00c      	b.n	80049c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049aa:	f7fe ff71 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 80049ae:	61b8      	str	r0, [r7, #24]
        break;
 80049b0:	e008      	b.n	80049c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049b6:	61bb      	str	r3, [r7, #24]
        break;
 80049b8:	e004      	b.n	80049c4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	77bb      	strb	r3, [r7, #30]
        break;
 80049c2:	bf00      	nop
    }

    if (pclk != 0U)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d018      	beq.n	80049fc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	085a      	lsrs	r2, r3, #1
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	441a      	add	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b0f      	cmp	r3, #15
 80049e2:	d909      	bls.n	80049f8 <UART_SetConfig+0x388>
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ea:	d205      	bcs.n	80049f8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60da      	str	r2, [r3, #12]
 80049f6:	e001      	b.n	80049fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a08:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	007a1200 	.word	0x007a1200

08004a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01a      	beq.n	8004b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b16:	d10a      	bne.n	8004b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b098      	sub	sp, #96	@ 0x60
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b6c:	f7fc f836 	bl	8000bdc <HAL_GetTick>
 8004b70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d12e      	bne.n	8004bde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f88c 	bl	8004cac <UART_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d021      	beq.n	8004bde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bae:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e6      	bne.n	8004b9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e062      	b.n	8004ca4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d149      	bne.n	8004c80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f856 	bl	8004cac <UART_WaitOnFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d03c      	beq.n	8004c80 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	623b      	str	r3, [r7, #32]
   return(result);
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e6      	bne.n	8004c06 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0301 	bic.w	r3, r3, #1
 8004c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c58:	61fa      	str	r2, [r7, #28]
 8004c5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	69b9      	ldr	r1, [r7, #24]
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	617b      	str	r3, [r7, #20]
   return(result);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e5      	bne.n	8004c38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e011      	b.n	8004ca4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3758      	adds	r7, #88	@ 0x58
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cbc:	e04f      	b.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d04b      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc6:	f7fb ff89 	bl	8000bdc <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d302      	bcc.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e04e      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d037      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b80      	cmp	r3, #128	@ 0x80
 8004cf2:	d034      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b40      	cmp	r3, #64	@ 0x40
 8004cf8:	d031      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d110      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f838 	bl	8004d86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e029      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d38:	d111      	bne.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f81e 	bl	8004d86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e00f      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4013      	ands	r3, r2
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	2300      	movne	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d0a0      	beq.n	8004cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b095      	sub	sp, #84	@ 0x54
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dac:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004db2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e6      	bne.n	8004d8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004de0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d118      	bne.n	8004e2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f023 0310 	bic.w	r3, r3, #16
 8004e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6979      	ldr	r1, [r7, #20]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	613b      	str	r3, [r7, #16]
   return(result);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e6      	bne.n	8004dfc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e42:	bf00      	nop
 8004e44:	3754      	adds	r7, #84	@ 0x54
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e56:	f3ef 8305 	mrs	r3, IPSR
 8004e5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10f      	bne.n	8004e82 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e62:	f3ef 8310 	mrs	r3, PRIMASK
 8004e66:	607b      	str	r3, [r7, #4]
  return(result);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <osKernelInitialize+0x32>
 8004e6e:	4b11      	ldr	r3, [pc, #68]	@ (8004eb4 <osKernelInitialize+0x64>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d109      	bne.n	8004e8a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e76:	f3ef 8311 	mrs	r3, BASEPRI
 8004e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004e82:	f06f 0305 	mvn.w	r3, #5
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e00c      	b.n	8004ea4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb4 <osKernelInitialize+0x64>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d105      	bne.n	8004e9e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004e92:	4b08      	ldr	r3, [pc, #32]	@ (8004eb4 <osKernelInitialize+0x64>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e002      	b.n	8004ea4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	200072a0 	.word	0x200072a0

08004eb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ebe:	f3ef 8305 	mrs	r3, IPSR
 8004ec2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eca:	f3ef 8310 	mrs	r3, PRIMASK
 8004ece:	607b      	str	r3, [r7, #4]
  return(result);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <osKernelStart+0x32>
 8004ed6:	4b11      	ldr	r3, [pc, #68]	@ (8004f1c <osKernelStart+0x64>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d109      	bne.n	8004ef2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ede:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004eea:	f06f 0305 	mvn.w	r3, #5
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e00e      	b.n	8004f10 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f1c <osKernelStart+0x64>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d107      	bne.n	8004f0a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004efa:	4b08      	ldr	r3, [pc, #32]	@ (8004f1c <osKernelStart+0x64>)
 8004efc:	2202      	movs	r2, #2
 8004efe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004f00:	f001 f84c 	bl	8005f9c <vTaskStartScheduler>
      stat = osOK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	e002      	b.n	8004f10 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f10:	68fb      	ldr	r3, [r7, #12]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	200072a0 	.word	0x200072a0

08004f20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b092      	sub	sp, #72	@ 0x48
 8004f24:	af04      	add	r7, sp, #16
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f30:	f3ef 8305 	mrs	r3, IPSR
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f040 8094 	bne.w	8005066 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f42:	623b      	str	r3, [r7, #32]
  return(result);
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f040 808d 	bne.w	8005066 <osThreadNew+0x146>
 8004f4c:	4b48      	ldr	r3, [pc, #288]	@ (8005070 <osThreadNew+0x150>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d106      	bne.n	8004f62 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f54:	f3ef 8311 	mrs	r3, BASEPRI
 8004f58:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 8082 	bne.w	8005066 <osThreadNew+0x146>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d07e      	beq.n	8005066 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004f68:	2380      	movs	r3, #128	@ 0x80
 8004f6a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004f6c:	2318      	movs	r3, #24
 8004f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004f70:	2300      	movs	r3, #0
 8004f72:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004f74:	f107 031b 	add.w	r3, r7, #27
 8004f78:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8004f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d045      	beq.n	8005012 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <osThreadNew+0x74>
        name = attr->name;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <osThreadNew+0x9a>
 8004fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004faa:	2b38      	cmp	r3, #56	@ 0x38
 8004fac:	d805      	bhi.n	8004fba <osThreadNew+0x9a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <osThreadNew+0x9e>
        return (NULL);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e054      	b.n	8005068 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	089b      	lsrs	r3, r3, #2
 8004fcc:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <osThreadNew+0xd4>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2ba7      	cmp	r3, #167	@ 0xa7
 8004fdc:	d90a      	bls.n	8004ff4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d006      	beq.n	8004ff4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <osThreadNew+0xd4>
        mem = 1;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ff2:	e010      	b.n	8005016 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10c      	bne.n	8005016 <osThreadNew+0xf6>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d108      	bne.n	8005016 <osThreadNew+0xf6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <osThreadNew+0xf6>
          mem = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005010:	e001      	b.n	8005016 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	2b01      	cmp	r3, #1
 800501a:	d110      	bne.n	800503e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005024:	9202      	str	r2, [sp, #8]
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005030:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fdfe 	bl	8005c34 <xTaskCreateStatic>
 8005038:	4603      	mov	r3, r0
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e013      	b.n	8005066 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	2b00      	cmp	r3, #0
 8005042:	d110      	bne.n	8005066 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005046:	b29a      	uxth	r2, r3
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 fe4b 	bl	8005cf2 <xTaskCreate>
 800505c:	4603      	mov	r3, r0
 800505e:	2b01      	cmp	r3, #1
 8005060:	d001      	beq.n	8005066 <osThreadNew+0x146>
          hTask = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005066:	697b      	ldr	r3, [r7, #20]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3738      	adds	r7, #56	@ 0x38
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	200072a0 	.word	0x200072a0

08005074 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4a07      	ldr	r2, [pc, #28]	@ (80050a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005084:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4a06      	ldr	r2, [pc, #24]	@ (80050a4 <vApplicationGetIdleTaskMemory+0x30>)
 800508a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2280      	movs	r2, #128	@ 0x80
 8005090:	601a      	str	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	200072a4 	.word	0x200072a4
 80050a4:	2000734c 	.word	0x2000734c

080050a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a07      	ldr	r2, [pc, #28]	@ (80050d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80050b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4a06      	ldr	r2, [pc, #24]	@ (80050d8 <vApplicationGetTimerTaskMemory+0x30>)
 80050be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050c6:	601a      	str	r2, [r3, #0]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	2000754c 	.word	0x2000754c
 80050d8:	200075f4 	.word	0x200075f4

080050dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f103 0208 	add.w	r2, r3, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f04f 32ff 	mov.w	r2, #4294967295
 80050f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f103 0208 	add.w	r2, r3, #8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f103 0208 	add.w	r2, r3, #8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	601a      	str	r2, [r3, #0]
}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d103      	bne.n	800519e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e00c      	b.n	80051b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3308      	adds	r3, #8
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e002      	b.n	80051ac <vListInsert+0x2e>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d2f6      	bcs.n	80051a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	601a      	str	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6892      	ldr	r2, [r2, #8]
 8005206:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6852      	ldr	r2, [r2, #4]
 8005210:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d103      	bne.n	8005224 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	1e5a      	subs	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10b      	bne.n	8005270 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	e7fd      	b.n	800526c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005270:	f002 f9ca 	bl	8007608 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527c:	68f9      	ldr	r1, [r7, #12]
 800527e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	441a      	add	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a0:	3b01      	subs	r3, #1
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	441a      	add	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	22ff      	movs	r2, #255	@ 0xff
 80052b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	22ff      	movs	r2, #255	@ 0xff
 80052bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d114      	bne.n	80052f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01a      	beq.n	8005304 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3310      	adds	r3, #16
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 f906 	bl	80064e4 <xTaskRemoveFromEventList>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d012      	beq.n	8005304 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052de:	4b0d      	ldr	r3, [pc, #52]	@ (8005314 <xQueueGenericReset+0xd0>)
 80052e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	e009      	b.n	8005304 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3310      	adds	r3, #16
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fef1 	bl	80050dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3324      	adds	r3, #36	@ 0x24
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff feec 	bl	80050dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005304:	f002 f9b2 	bl	800766c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005308:	2301      	movs	r3, #1
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	e000ed04 	.word	0xe000ed04

08005318 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08e      	sub	sp, #56	@ 0x38
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	e7fd      	b.n	8005340 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10b      	bne.n	8005362 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800535c:	bf00      	nop
 800535e:	bf00      	nop
 8005360:	e7fd      	b.n	800535e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <xQueueGenericCreateStatic+0x56>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <xQueueGenericCreateStatic+0x5a>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <xQueueGenericCreateStatic+0x5c>
 8005372:	2300      	movs	r3, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10b      	bne.n	8005390 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	623b      	str	r3, [r7, #32]
}
 800538a:	bf00      	nop
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <xQueueGenericCreateStatic+0x84>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <xQueueGenericCreateStatic+0x88>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <xQueueGenericCreateStatic+0x8a>
 80053a0:	2300      	movs	r3, #0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10b      	bne.n	80053be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	61fb      	str	r3, [r7, #28]
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	e7fd      	b.n	80053ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053be:	2350      	movs	r3, #80	@ 0x50
 80053c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b50      	cmp	r3, #80	@ 0x50
 80053c6:	d00b      	beq.n	80053e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	61bb      	str	r3, [r7, #24]
}
 80053da:	bf00      	nop
 80053dc:	bf00      	nop
 80053de:	e7fd      	b.n	80053dc <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80053e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00d      	beq.n	8005406 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053f2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80053f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	4613      	mov	r3, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f805 	bl	8005410 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005408:	4618      	mov	r0, r3
 800540a:	3730      	adds	r7, #48	@ 0x30
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d103      	bne.n	800542c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e002      	b.n	8005432 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800543e:	2101      	movs	r1, #1
 8005440:	69b8      	ldr	r0, [r7, #24]
 8005442:	f7ff feff 	bl	8005244 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08e      	sub	sp, #56	@ 0x38
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005466:	2300      	movs	r3, #0
 8005468:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10b      	bne.n	800548c <xQueueGenericSend+0x34>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005486:	bf00      	nop
 8005488:	bf00      	nop
 800548a:	e7fd      	b.n	8005488 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <xQueueGenericSend+0x42>
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <xQueueGenericSend+0x46>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <xQueueGenericSend+0x48>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <xQueueGenericSend+0x64>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054b6:	bf00      	nop
 80054b8:	bf00      	nop
 80054ba:	e7fd      	b.n	80054b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d103      	bne.n	80054ca <xQueueGenericSend+0x72>
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <xQueueGenericSend+0x76>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <xQueueGenericSend+0x78>
 80054ce:	2300      	movs	r3, #0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10b      	bne.n	80054ec <xQueueGenericSend+0x94>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	623b      	str	r3, [r7, #32]
}
 80054e6:	bf00      	nop
 80054e8:	bf00      	nop
 80054ea:	e7fd      	b.n	80054e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054ec:	f001 f9c6 	bl	800687c <xTaskGetSchedulerState>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <xQueueGenericSend+0xa4>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <xQueueGenericSend+0xa8>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <xQueueGenericSend+0xaa>
 8005500:	2300      	movs	r3, #0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <xQueueGenericSend+0xc6>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	61fb      	str	r3, [r7, #28]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800551e:	f002 f873 	bl	8007608 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552a:	429a      	cmp	r2, r3
 800552c:	d302      	bcc.n	8005534 <xQueueGenericSend+0xdc>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d129      	bne.n	8005588 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800553a:	f000 fa0d 	bl	8005958 <prvCopyDataToQueue>
 800553e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d010      	beq.n	800556a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554a:	3324      	adds	r3, #36	@ 0x24
 800554c:	4618      	mov	r0, r3
 800554e:	f000 ffc9 	bl	80064e4 <xTaskRemoveFromEventList>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d013      	beq.n	8005580 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005558:	4b3f      	ldr	r3, [pc, #252]	@ (8005658 <xQueueGenericSend+0x200>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	e00a      	b.n	8005580 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005570:	4b39      	ldr	r3, [pc, #228]	@ (8005658 <xQueueGenericSend+0x200>)
 8005572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005580:	f002 f874 	bl	800766c <vPortExitCritical>
				return pdPASS;
 8005584:	2301      	movs	r3, #1
 8005586:	e063      	b.n	8005650 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800558e:	f002 f86d 	bl	800766c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005592:	2300      	movs	r3, #0
 8005594:	e05c      	b.n	8005650 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005598:	2b00      	cmp	r3, #0
 800559a:	d106      	bne.n	80055aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800559c:	f107 0314 	add.w	r3, r7, #20
 80055a0:	4618      	mov	r0, r3
 80055a2:	f001 f803 	bl	80065ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a6:	2301      	movs	r3, #1
 80055a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055aa:	f002 f85f 	bl	800766c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055ae:	f000 fd65 	bl	800607c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055b2:	f002 f829 	bl	8007608 <vPortEnterCritical>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055bc:	b25b      	sxtb	r3, r3
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c2:	d103      	bne.n	80055cc <xQueueGenericSend+0x174>
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d103      	bne.n	80055e2 <xQueueGenericSend+0x18a>
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055e2:	f002 f843 	bl	800766c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e6:	1d3a      	adds	r2, r7, #4
 80055e8:	f107 0314 	add.w	r3, r7, #20
 80055ec:	4611      	mov	r1, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fff2 	bl	80065d8 <xTaskCheckForTimeOut>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d124      	bne.n	8005644 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055fc:	f000 faa4 	bl	8005b48 <prvIsQueueFull>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d018      	beq.n	8005638 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	3310      	adds	r3, #16
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	4611      	mov	r1, r2
 800560e:	4618      	mov	r0, r3
 8005610:	f000 ff16 	bl	8006440 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005616:	f000 fa2f 	bl	8005a78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800561a:	f000 fd3d 	bl	8006098 <xTaskResumeAll>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	f47f af7c 	bne.w	800551e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005626:	4b0c      	ldr	r3, [pc, #48]	@ (8005658 <xQueueGenericSend+0x200>)
 8005628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	e772      	b.n	800551e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005638:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800563a:	f000 fa1d 	bl	8005a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800563e:	f000 fd2b 	bl	8006098 <xTaskResumeAll>
 8005642:	e76c      	b.n	800551e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005644:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005646:	f000 fa17 	bl	8005a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800564a:	f000 fd25 	bl	8006098 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800564e:	2300      	movs	r3, #0
		}
	}
}
 8005650:	4618      	mov	r0, r3
 8005652:	3738      	adds	r7, #56	@ 0x38
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08e      	sub	sp, #56	@ 0x38
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10b      	bne.n	800568c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	e7fd      	b.n	8005688 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d103      	bne.n	800569a <xQueueGenericSendFromISR+0x3e>
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <xQueueGenericSendFromISR+0x42>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <xQueueGenericSendFromISR+0x44>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	623b      	str	r3, [r7, #32]
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	e7fd      	b.n	80056b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d103      	bne.n	80056ca <xQueueGenericSendFromISR+0x6e>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <xQueueGenericSendFromISR+0x72>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xQueueGenericSendFromISR+0x74>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	61fb      	str	r3, [r7, #28]
}
 80056e6:	bf00      	nop
 80056e8:	bf00      	nop
 80056ea:	e7fd      	b.n	80056e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056ec:	f002 f86c 	bl	80077c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056f0:	f3ef 8211 	mrs	r2, BASEPRI
 80056f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	61ba      	str	r2, [r7, #24]
 8005706:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005708:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800570a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005714:	429a      	cmp	r2, r3
 8005716:	d302      	bcc.n	800571e <xQueueGenericSendFromISR+0xc2>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d12c      	bne.n	8005778 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005724:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800572e:	f000 f913 	bl	8005958 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005732:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d112      	bne.n	8005762 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800573c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	d016      	beq.n	8005772 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005746:	3324      	adds	r3, #36	@ 0x24
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fecb 	bl	80064e4 <xTaskRemoveFromEventList>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00e      	beq.n	8005772 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00b      	beq.n	8005772 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	e007      	b.n	8005772 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005762:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005766:	3301      	adds	r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	b25a      	sxtb	r2, r3
 800576c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005772:	2301      	movs	r3, #1
 8005774:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005776:	e001      	b.n	800577c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005778:	2300      	movs	r3, #0
 800577a:	637b      	str	r3, [r7, #52]	@ 0x34
 800577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005786:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800578a:	4618      	mov	r0, r3
 800578c:	3738      	adds	r7, #56	@ 0x38
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08c      	sub	sp, #48	@ 0x30
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <xQueueReceive+0x32>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	623b      	str	r3, [r7, #32]
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	e7fd      	b.n	80057c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d103      	bne.n	80057d4 <xQueueReceive+0x40>
 80057cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <xQueueReceive+0x44>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <xQueueReceive+0x46>
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10b      	bne.n	80057f6 <xQueueReceive+0x62>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	61fb      	str	r3, [r7, #28]
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057f6:	f001 f841 	bl	800687c <xTaskGetSchedulerState>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <xQueueReceive+0x72>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <xQueueReceive+0x76>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <xQueueReceive+0x78>
 800580a:	2300      	movs	r3, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10b      	bne.n	8005828 <xQueueReceive+0x94>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	61bb      	str	r3, [r7, #24]
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	e7fd      	b.n	8005824 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005828:	f001 feee 	bl	8007608 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800582c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005830:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01f      	beq.n	8005878 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800583c:	f000 f8f6 	bl	8005a2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	1e5a      	subs	r2, r3, #1
 8005844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005846:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00f      	beq.n	8005870 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005852:	3310      	adds	r3, #16
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fe45 	bl	80064e4 <xTaskRemoveFromEventList>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005860:	4b3c      	ldr	r3, [pc, #240]	@ (8005954 <xQueueReceive+0x1c0>)
 8005862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005870:	f001 fefc 	bl	800766c <vPortExitCritical>
				return pdPASS;
 8005874:	2301      	movs	r3, #1
 8005876:	e069      	b.n	800594c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800587e:	f001 fef5 	bl	800766c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005882:	2300      	movs	r3, #0
 8005884:	e062      	b.n	800594c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800588c:	f107 0310 	add.w	r3, r7, #16
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fe8b 	bl	80065ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005896:	2301      	movs	r3, #1
 8005898:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800589a:	f001 fee7 	bl	800766c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800589e:	f000 fbed 	bl	800607c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058a2:	f001 feb1 	bl	8007608 <vPortEnterCritical>
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058ac:	b25b      	sxtb	r3, r3
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d103      	bne.n	80058bc <xQueueReceive+0x128>
 80058b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058c2:	b25b      	sxtb	r3, r3
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d103      	bne.n	80058d2 <xQueueReceive+0x13e>
 80058ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058d2:	f001 fecb 	bl	800766c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058d6:	1d3a      	adds	r2, r7, #4
 80058d8:	f107 0310 	add.w	r3, r7, #16
 80058dc:	4611      	mov	r1, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fe7a 	bl	80065d8 <xTaskCheckForTimeOut>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d123      	bne.n	8005932 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058ec:	f000 f916 	bl	8005b1c <prvIsQueueEmpty>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d017      	beq.n	8005926 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f8:	3324      	adds	r3, #36	@ 0x24
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4611      	mov	r1, r2
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fd9e 	bl	8006440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005904:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005906:	f000 f8b7 	bl	8005a78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800590a:	f000 fbc5 	bl	8006098 <xTaskResumeAll>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d189      	bne.n	8005828 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005914:	4b0f      	ldr	r3, [pc, #60]	@ (8005954 <xQueueReceive+0x1c0>)
 8005916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	e780      	b.n	8005828 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005928:	f000 f8a6 	bl	8005a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800592c:	f000 fbb4 	bl	8006098 <xTaskResumeAll>
 8005930:	e77a      	b.n	8005828 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005934:	f000 f8a0 	bl	8005a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005938:	f000 fbae 	bl	8006098 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800593c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800593e:	f000 f8ed 	bl	8005b1c <prvIsQueueEmpty>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	f43f af6f 	beq.w	8005828 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800594a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800594c:	4618      	mov	r0, r3
 800594e:	3730      	adds	r7, #48	@ 0x30
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	e000ed04 	.word	0xe000ed04

08005958 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10d      	bne.n	8005992 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d14d      	bne.n	8005a1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 ff98 	bl	80068b8 <xTaskPriorityDisinherit>
 8005988:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	605a      	str	r2, [r3, #4]
 8005990:	e043      	b.n	8005a1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d119      	bne.n	80059cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6898      	ldr	r0, [r3, #8]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	461a      	mov	r2, r3
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	f003 fa32 	bl	8008e0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	441a      	add	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d32b      	bcc.n	8005a1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	609a      	str	r2, [r3, #8]
 80059ca:	e026      	b.n	8005a1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68d8      	ldr	r0, [r3, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d4:	461a      	mov	r2, r3
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	f003 fa18 	bl	8008e0c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	425b      	negs	r3, r3
 80059e6:	441a      	add	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d207      	bcs.n	8005a08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a00:	425b      	negs	r3, r3
 8005a02:	441a      	add	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d105      	bne.n	8005a1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a22:	697b      	ldr	r3, [r7, #20]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d018      	beq.n	8005a70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	441a      	add	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d303      	bcc.n	8005a60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68d9      	ldr	r1, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6838      	ldr	r0, [r7, #0]
 8005a6c:	f003 f9ce 	bl	8008e0c <memcpy>
	}
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a80:	f001 fdc2 	bl	8007608 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a8c:	e011      	b.n	8005ab2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d012      	beq.n	8005abc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3324      	adds	r3, #36	@ 0x24
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fd22 	bl	80064e4 <xTaskRemoveFromEventList>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005aa6:	f000 fdfb 	bl	80066a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	dce9      	bgt.n	8005a8e <prvUnlockQueue+0x16>
 8005aba:	e000      	b.n	8005abe <prvUnlockQueue+0x46>
					break;
 8005abc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	22ff      	movs	r2, #255	@ 0xff
 8005ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005ac6:	f001 fdd1 	bl	800766c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aca:	f001 fd9d 	bl	8007608 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ad4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ad6:	e011      	b.n	8005afc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d012      	beq.n	8005b06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3310      	adds	r3, #16
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fcfd 	bl	80064e4 <xTaskRemoveFromEventList>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005af0:	f000 fdd6 	bl	80066a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005af4:	7bbb      	ldrb	r3, [r7, #14]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	dce9      	bgt.n	8005ad8 <prvUnlockQueue+0x60>
 8005b04:	e000      	b.n	8005b08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	22ff      	movs	r2, #255	@ 0xff
 8005b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b10:	f001 fdac 	bl	800766c <vPortExitCritical>
}
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b24:	f001 fd70 	bl	8007608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b30:	2301      	movs	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e001      	b.n	8005b3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b3a:	f001 fd97 	bl	800766c <vPortExitCritical>

	return xReturn;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b50:	f001 fd5a 	bl	8007608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d102      	bne.n	8005b66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e001      	b.n	8005b6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b6a:	f001 fd7f 	bl	800766c <vPortExitCritical>

	return xReturn;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	e014      	b.n	8005bb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b88:	4a0f      	ldr	r2, [pc, #60]	@ (8005bc8 <vQueueAddToRegistry+0x50>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b94:	490c      	ldr	r1, [pc, #48]	@ (8005bc8 <vQueueAddToRegistry+0x50>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc8 <vQueueAddToRegistry+0x50>)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005baa:	e006      	b.n	8005bba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b07      	cmp	r3, #7
 8005bb6:	d9e7      	bls.n	8005b88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	200079f4 	.word	0x200079f4

08005bcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bdc:	f001 fd14 	bl	8007608 <vPortEnterCritical>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005be6:	b25b      	sxtb	r3, r3
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d103      	bne.n	8005bf6 <vQueueWaitForMessageRestricted+0x2a>
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bfc:	b25b      	sxtb	r3, r3
 8005bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c02:	d103      	bne.n	8005c0c <vQueueWaitForMessageRestricted+0x40>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c0c:	f001 fd2e 	bl	800766c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3324      	adds	r3, #36	@ 0x24
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fc33 	bl	800648c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c26:	6978      	ldr	r0, [r7, #20]
 8005c28:	f7ff ff26 	bl	8005a78 <prvUnlockQueue>
	}
 8005c2c:	bf00      	nop
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08e      	sub	sp, #56	@ 0x38
 8005c38:	af04      	add	r7, sp, #16
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10b      	bne.n	8005c60 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	623b      	str	r3, [r7, #32]
}
 8005c5a:	bf00      	nop
 8005c5c:	bf00      	nop
 8005c5e:	e7fd      	b.n	8005c5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10b      	bne.n	8005c7e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	61fb      	str	r3, [r7, #28]
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	e7fd      	b.n	8005c7a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c7e:	23a8      	movs	r3, #168	@ 0xa8
 8005c80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2ba8      	cmp	r3, #168	@ 0xa8
 8005c86:	d00b      	beq.n	8005ca0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	61bb      	str	r3, [r7, #24]
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	e7fd      	b.n	8005c9c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01e      	beq.n	8005ce4 <xTaskCreateStatic+0xb0>
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01b      	beq.n	8005ce4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cb4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9303      	str	r3, [sp, #12]
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	9302      	str	r3, [sp, #8]
 8005cc6:	f107 0314 	add.w	r3, r7, #20
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f850 	bl	8005d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cdc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005cde:	f000 f8ed 	bl	8005ebc <prvAddNewTaskToReadyList>
 8005ce2:	e001      	b.n	8005ce8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ce8:	697b      	ldr	r3, [r7, #20]
	}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3728      	adds	r7, #40	@ 0x28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b08c      	sub	sp, #48	@ 0x30
 8005cf6:	af04      	add	r7, sp, #16
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	603b      	str	r3, [r7, #0]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 fda0 	bl	800784c <pvPortMalloc>
 8005d0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00e      	beq.n	8005d32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005d14:	20a8      	movs	r0, #168	@ 0xa8
 8005d16:	f001 fd99 	bl	800784c <pvPortMalloc>
 8005d1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d28:	e005      	b.n	8005d36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d2a:	6978      	ldr	r0, [r7, #20]
 8005d2c:	f001 fe56 	bl	80079dc <vPortFree>
 8005d30:	e001      	b.n	8005d36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d017      	beq.n	8005d6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d44:	88fa      	ldrh	r2, [r7, #6]
 8005d46:	2300      	movs	r3, #0
 8005d48:	9303      	str	r3, [sp, #12]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	9302      	str	r3, [sp, #8]
 8005d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f80e 	bl	8005d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d60:	69f8      	ldr	r0, [r7, #28]
 8005d62:	f000 f8ab 	bl	8005ebc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d66:	2301      	movs	r3, #1
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	e002      	b.n	8005d72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d72:	69bb      	ldr	r3, [r7, #24]
	}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3720      	adds	r7, #32
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	461a      	mov	r2, r3
 8005d94:	21a5      	movs	r1, #165	@ 0xa5
 8005d96:	f002 ffb5 	bl	8008d04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005da4:	3b01      	subs	r3, #1
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f023 0307 	bic.w	r3, r3, #7
 8005db2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00b      	beq.n	8005dd6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	617b      	str	r3, [r7, #20]
}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	e7fd      	b.n	8005dd2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	e012      	b.n	8005e02 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	7819      	ldrb	r1, [r3, #0]
 8005de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	3334      	adds	r3, #52	@ 0x34
 8005dec:	460a      	mov	r2, r1
 8005dee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d006      	beq.n	8005e0a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2b0f      	cmp	r3, #15
 8005e06:	d9e9      	bls.n	8005ddc <prvInitialiseNewTask+0x60>
 8005e08:	e000      	b.n	8005e0c <prvInitialiseNewTask+0x90>
		{
			break;
 8005e0a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	2b37      	cmp	r3, #55	@ 0x37
 8005e18:	d901      	bls.n	8005e1e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e1a:	2337      	movs	r3, #55	@ 0x37
 8005e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e28:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e32:	3304      	adds	r3, #4
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff f971 	bl	800511c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3c:	3318      	adds	r3, #24
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff f96c 	bl	800511c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	3354      	adds	r3, #84	@ 0x54
 8005e6e:	224c      	movs	r2, #76	@ 0x4c
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f002 ff46 	bl	8008d04 <memset>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005eb0 <prvInitialiseNewTask+0x134>)
 8005e7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e80:	4a0c      	ldr	r2, [pc, #48]	@ (8005eb4 <prvInitialiseNewTask+0x138>)
 8005e82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	4a0c      	ldr	r2, [pc, #48]	@ (8005eb8 <prvInitialiseNewTask+0x13c>)
 8005e88:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	68f9      	ldr	r1, [r7, #12]
 8005e8e:	69b8      	ldr	r0, [r7, #24]
 8005e90:	f001 fa88 	bl	80073a4 <pxPortInitialiseStack>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ea6:	bf00      	nop
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20008c80 	.word	0x20008c80
 8005eb4:	20008ce8 	.word	0x20008ce8
 8005eb8:	20008d50 	.word	0x20008d50

08005ebc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ec4:	f001 fba0 	bl	8007608 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8005f80 <prvAddNewTaskToReadyList+0xc4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	4a2c      	ldr	r2, [pc, #176]	@ (8005f80 <prvAddNewTaskToReadyList+0xc4>)
 8005ed0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8005f84 <prvAddNewTaskToReadyList+0xc8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d109      	bne.n	8005eee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005eda:	4a2a      	ldr	r2, [pc, #168]	@ (8005f84 <prvAddNewTaskToReadyList+0xc8>)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ee0:	4b27      	ldr	r3, [pc, #156]	@ (8005f80 <prvAddNewTaskToReadyList+0xc4>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d110      	bne.n	8005f0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ee8:	f000 fbfe 	bl	80066e8 <prvInitialiseTaskLists>
 8005eec:	e00d      	b.n	8005f0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005eee:	4b26      	ldr	r3, [pc, #152]	@ (8005f88 <prvAddNewTaskToReadyList+0xcc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ef6:	4b23      	ldr	r3, [pc, #140]	@ (8005f84 <prvAddNewTaskToReadyList+0xc8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d802      	bhi.n	8005f0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f04:	4a1f      	ldr	r2, [pc, #124]	@ (8005f84 <prvAddNewTaskToReadyList+0xc8>)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f0a:	4b20      	ldr	r3, [pc, #128]	@ (8005f8c <prvAddNewTaskToReadyList+0xd0>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	4a1e      	ldr	r2, [pc, #120]	@ (8005f8c <prvAddNewTaskToReadyList+0xd0>)
 8005f12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f14:	4b1d      	ldr	r3, [pc, #116]	@ (8005f8c <prvAddNewTaskToReadyList+0xd0>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f20:	4b1b      	ldr	r3, [pc, #108]	@ (8005f90 <prvAddNewTaskToReadyList+0xd4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d903      	bls.n	8005f30 <prvAddNewTaskToReadyList+0x74>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2c:	4a18      	ldr	r2, [pc, #96]	@ (8005f90 <prvAddNewTaskToReadyList+0xd4>)
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f34:	4613      	mov	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4a15      	ldr	r2, [pc, #84]	@ (8005f94 <prvAddNewTaskToReadyList+0xd8>)
 8005f3e:	441a      	add	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3304      	adds	r3, #4
 8005f44:	4619      	mov	r1, r3
 8005f46:	4610      	mov	r0, r2
 8005f48:	f7ff f8f5 	bl	8005136 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f4c:	f001 fb8e 	bl	800766c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f50:	4b0d      	ldr	r3, [pc, #52]	@ (8005f88 <prvAddNewTaskToReadyList+0xcc>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00e      	beq.n	8005f76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f58:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <prvAddNewTaskToReadyList+0xc8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d207      	bcs.n	8005f76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f66:	4b0c      	ldr	r3, [pc, #48]	@ (8005f98 <prvAddNewTaskToReadyList+0xdc>)
 8005f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20007f08 	.word	0x20007f08
 8005f84:	20007a34 	.word	0x20007a34
 8005f88:	20007f14 	.word	0x20007f14
 8005f8c:	20007f24 	.word	0x20007f24
 8005f90:	20007f10 	.word	0x20007f10
 8005f94:	20007a38 	.word	0x20007a38
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	@ 0x28
 8005fa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005faa:	463a      	mov	r2, r7
 8005fac:	1d39      	adds	r1, r7, #4
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff f85e 	bl	8005074 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	9202      	str	r2, [sp, #8]
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	460a      	mov	r2, r1
 8005fca:	4924      	ldr	r1, [pc, #144]	@ (800605c <vTaskStartScheduler+0xc0>)
 8005fcc:	4824      	ldr	r0, [pc, #144]	@ (8006060 <vTaskStartScheduler+0xc4>)
 8005fce:	f7ff fe31 	bl	8005c34 <xTaskCreateStatic>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4a23      	ldr	r2, [pc, #140]	@ (8006064 <vTaskStartScheduler+0xc8>)
 8005fd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fd8:	4b22      	ldr	r3, [pc, #136]	@ (8006064 <vTaskStartScheduler+0xc8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e001      	b.n	8005fea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d102      	bne.n	8005ff6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ff0:	f000 feb8 	bl	8006d64 <xTimerCreateTimerTask>
 8005ff4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d11b      	bne.n	8006034 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	613b      	str	r3, [r7, #16]
}
 800600e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006010:	4b15      	ldr	r3, [pc, #84]	@ (8006068 <vTaskStartScheduler+0xcc>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3354      	adds	r3, #84	@ 0x54
 8006016:	4a15      	ldr	r2, [pc, #84]	@ (800606c <vTaskStartScheduler+0xd0>)
 8006018:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800601a:	4b15      	ldr	r3, [pc, #84]	@ (8006070 <vTaskStartScheduler+0xd4>)
 800601c:	f04f 32ff 	mov.w	r2, #4294967295
 8006020:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006022:	4b14      	ldr	r3, [pc, #80]	@ (8006074 <vTaskStartScheduler+0xd8>)
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006028:	4b13      	ldr	r3, [pc, #76]	@ (8006078 <vTaskStartScheduler+0xdc>)
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800602e:	f001 fa47 	bl	80074c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006032:	e00f      	b.n	8006054 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d10b      	bne.n	8006054 <vTaskStartScheduler+0xb8>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60fb      	str	r3, [r7, #12]
}
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	e7fd      	b.n	8006050 <vTaskStartScheduler+0xb4>
}
 8006054:	bf00      	nop
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	08008efc 	.word	0x08008efc
 8006060:	080066b9 	.word	0x080066b9
 8006064:	20007f2c 	.word	0x20007f2c
 8006068:	20007a34 	.word	0x20007a34
 800606c:	20000010 	.word	0x20000010
 8006070:	20007f28 	.word	0x20007f28
 8006074:	20007f14 	.word	0x20007f14
 8006078:	20007f0c 	.word	0x20007f0c

0800607c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006080:	4b04      	ldr	r3, [pc, #16]	@ (8006094 <vTaskSuspendAll+0x18>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	4a03      	ldr	r2, [pc, #12]	@ (8006094 <vTaskSuspendAll+0x18>)
 8006088:	6013      	str	r3, [r2, #0]
}
 800608a:	bf00      	nop
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	20007f30 	.word	0x20007f30

08006098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060a6:	4b42      	ldr	r3, [pc, #264]	@ (80061b0 <xTaskResumeAll+0x118>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10b      	bne.n	80060c6 <xTaskResumeAll+0x2e>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	603b      	str	r3, [r7, #0]
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	e7fd      	b.n	80060c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060c6:	f001 fa9f 	bl	8007608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060ca:	4b39      	ldr	r3, [pc, #228]	@ (80061b0 <xTaskResumeAll+0x118>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	4a37      	ldr	r2, [pc, #220]	@ (80061b0 <xTaskResumeAll+0x118>)
 80060d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d4:	4b36      	ldr	r3, [pc, #216]	@ (80061b0 <xTaskResumeAll+0x118>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d162      	bne.n	80061a2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060dc:	4b35      	ldr	r3, [pc, #212]	@ (80061b4 <xTaskResumeAll+0x11c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d05e      	beq.n	80061a2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060e4:	e02f      	b.n	8006146 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80060e6:	4b34      	ldr	r3, [pc, #208]	@ (80061b8 <xTaskResumeAll+0x120>)
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3318      	adds	r3, #24
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff f87c 	bl	80051f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff f877 	bl	80051f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006106:	4b2d      	ldr	r3, [pc, #180]	@ (80061bc <xTaskResumeAll+0x124>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d903      	bls.n	8006116 <xTaskResumeAll+0x7e>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	4a2a      	ldr	r2, [pc, #168]	@ (80061bc <xTaskResumeAll+0x124>)
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4a27      	ldr	r2, [pc, #156]	@ (80061c0 <xTaskResumeAll+0x128>)
 8006124:	441a      	add	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3304      	adds	r3, #4
 800612a:	4619      	mov	r1, r3
 800612c:	4610      	mov	r0, r2
 800612e:	f7ff f802 	bl	8005136 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006136:	4b23      	ldr	r3, [pc, #140]	@ (80061c4 <xTaskResumeAll+0x12c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613c:	429a      	cmp	r2, r3
 800613e:	d302      	bcc.n	8006146 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006140:	4b21      	ldr	r3, [pc, #132]	@ (80061c8 <xTaskResumeAll+0x130>)
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006146:	4b1c      	ldr	r3, [pc, #112]	@ (80061b8 <xTaskResumeAll+0x120>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1cb      	bne.n	80060e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006154:	f000 fb6c 	bl	8006830 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006158:	4b1c      	ldr	r3, [pc, #112]	@ (80061cc <xTaskResumeAll+0x134>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d010      	beq.n	8006186 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006164:	f000 f846 	bl	80061f4 <xTaskIncrementTick>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800616e:	4b16      	ldr	r3, [pc, #88]	@ (80061c8 <xTaskResumeAll+0x130>)
 8006170:	2201      	movs	r2, #1
 8006172:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3b01      	subs	r3, #1
 8006178:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1f1      	bne.n	8006164 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006180:	4b12      	ldr	r3, [pc, #72]	@ (80061cc <xTaskResumeAll+0x134>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006186:	4b10      	ldr	r3, [pc, #64]	@ (80061c8 <xTaskResumeAll+0x130>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800618e:	2301      	movs	r3, #1
 8006190:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006192:	4b0f      	ldr	r3, [pc, #60]	@ (80061d0 <xTaskResumeAll+0x138>)
 8006194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061a2:	f001 fa63 	bl	800766c <vPortExitCritical>

	return xAlreadyYielded;
 80061a6:	68bb      	ldr	r3, [r7, #8]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20007f30 	.word	0x20007f30
 80061b4:	20007f08 	.word	0x20007f08
 80061b8:	20007ec8 	.word	0x20007ec8
 80061bc:	20007f10 	.word	0x20007f10
 80061c0:	20007a38 	.word	0x20007a38
 80061c4:	20007a34 	.word	0x20007a34
 80061c8:	20007f1c 	.word	0x20007f1c
 80061cc:	20007f18 	.word	0x20007f18
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061da:	4b05      	ldr	r3, [pc, #20]	@ (80061f0 <xTaskGetTickCount+0x1c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061e0:	687b      	ldr	r3, [r7, #4]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20007f0c 	.word	0x20007f0c

080061f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061fe:	4b52      	ldr	r3, [pc, #328]	@ (8006348 <xTaskIncrementTick+0x154>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f040 808f 	bne.w	8006326 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006208:	4b50      	ldr	r3, [pc, #320]	@ (800634c <xTaskIncrementTick+0x158>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006210:	4a4e      	ldr	r2, [pc, #312]	@ (800634c <xTaskIncrementTick+0x158>)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d121      	bne.n	8006260 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800621c:	4b4c      	ldr	r3, [pc, #304]	@ (8006350 <xTaskIncrementTick+0x15c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	603b      	str	r3, [r7, #0]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <xTaskIncrementTick+0x46>
 800623e:	4b44      	ldr	r3, [pc, #272]	@ (8006350 <xTaskIncrementTick+0x15c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	4b43      	ldr	r3, [pc, #268]	@ (8006354 <xTaskIncrementTick+0x160>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a41      	ldr	r2, [pc, #260]	@ (8006350 <xTaskIncrementTick+0x15c>)
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	4a41      	ldr	r2, [pc, #260]	@ (8006354 <xTaskIncrementTick+0x160>)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	4b41      	ldr	r3, [pc, #260]	@ (8006358 <xTaskIncrementTick+0x164>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3301      	adds	r3, #1
 8006258:	4a3f      	ldr	r2, [pc, #252]	@ (8006358 <xTaskIncrementTick+0x164>)
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	f000 fae8 	bl	8006830 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006260:	4b3e      	ldr	r3, [pc, #248]	@ (800635c <xTaskIncrementTick+0x168>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	429a      	cmp	r2, r3
 8006268:	d34e      	bcc.n	8006308 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800626a:	4b39      	ldr	r3, [pc, #228]	@ (8006350 <xTaskIncrementTick+0x15c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <xTaskIncrementTick+0x84>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <xTaskIncrementTick+0x86>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800627e:	4b37      	ldr	r3, [pc, #220]	@ (800635c <xTaskIncrementTick+0x168>)
 8006280:	f04f 32ff 	mov.w	r2, #4294967295
 8006284:	601a      	str	r2, [r3, #0]
					break;
 8006286:	e03f      	b.n	8006308 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006288:	4b31      	ldr	r3, [pc, #196]	@ (8006350 <xTaskIncrementTick+0x15c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	429a      	cmp	r2, r3
 800629e:	d203      	bcs.n	80062a8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062a0:	4a2e      	ldr	r2, [pc, #184]	@ (800635c <xTaskIncrementTick+0x168>)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6013      	str	r3, [r2, #0]
						break;
 80062a6:	e02f      	b.n	8006308 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	3304      	adds	r3, #4
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fe ff9f 	bl	80051f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d004      	beq.n	80062c4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	3318      	adds	r3, #24
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fe ff96 	bl	80051f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c8:	4b25      	ldr	r3, [pc, #148]	@ (8006360 <xTaskIncrementTick+0x16c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d903      	bls.n	80062d8 <xTaskIncrementTick+0xe4>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d4:	4a22      	ldr	r2, [pc, #136]	@ (8006360 <xTaskIncrementTick+0x16c>)
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006364 <xTaskIncrementTick+0x170>)
 80062e6:	441a      	add	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f7fe ff21 	bl	8005136 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006368 <xTaskIncrementTick+0x174>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	429a      	cmp	r2, r3
 8006300:	d3b3      	bcc.n	800626a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006302:	2301      	movs	r3, #1
 8006304:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006306:	e7b0      	b.n	800626a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006308:	4b17      	ldr	r3, [pc, #92]	@ (8006368 <xTaskIncrementTick+0x174>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630e:	4915      	ldr	r1, [pc, #84]	@ (8006364 <xTaskIncrementTick+0x170>)
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d907      	bls.n	8006330 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	e004      	b.n	8006330 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006326:	4b11      	ldr	r3, [pc, #68]	@ (800636c <xTaskIncrementTick+0x178>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3301      	adds	r3, #1
 800632c:	4a0f      	ldr	r2, [pc, #60]	@ (800636c <xTaskIncrementTick+0x178>)
 800632e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006330:	4b0f      	ldr	r3, [pc, #60]	@ (8006370 <xTaskIncrementTick+0x17c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8006338:	2301      	movs	r3, #1
 800633a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800633c:	697b      	ldr	r3, [r7, #20]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20007f30 	.word	0x20007f30
 800634c:	20007f0c 	.word	0x20007f0c
 8006350:	20007ec0 	.word	0x20007ec0
 8006354:	20007ec4 	.word	0x20007ec4
 8006358:	20007f20 	.word	0x20007f20
 800635c:	20007f28 	.word	0x20007f28
 8006360:	20007f10 	.word	0x20007f10
 8006364:	20007a38 	.word	0x20007a38
 8006368:	20007a34 	.word	0x20007a34
 800636c:	20007f18 	.word	0x20007f18
 8006370:	20007f1c 	.word	0x20007f1c

08006374 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800637a:	4b2b      	ldr	r3, [pc, #172]	@ (8006428 <vTaskSwitchContext+0xb4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006382:	4b2a      	ldr	r3, [pc, #168]	@ (800642c <vTaskSwitchContext+0xb8>)
 8006384:	2201      	movs	r2, #1
 8006386:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006388:	e047      	b.n	800641a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800638a:	4b28      	ldr	r3, [pc, #160]	@ (800642c <vTaskSwitchContext+0xb8>)
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006390:	4b27      	ldr	r3, [pc, #156]	@ (8006430 <vTaskSwitchContext+0xbc>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e011      	b.n	80063bc <vTaskSwitchContext+0x48>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10b      	bne.n	80063b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	607b      	str	r3, [r7, #4]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <vTaskSwitchContext+0x3e>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	491d      	ldr	r1, [pc, #116]	@ (8006434 <vTaskSwitchContext+0xc0>)
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0e3      	beq.n	8006398 <vTaskSwitchContext+0x24>
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4a16      	ldr	r2, [pc, #88]	@ (8006434 <vTaskSwitchContext+0xc0>)
 80063dc:	4413      	add	r3, r2
 80063de:	60bb      	str	r3, [r7, #8]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	3308      	adds	r3, #8
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d104      	bne.n	8006400 <vTaskSwitchContext+0x8c>
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	605a      	str	r2, [r3, #4]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	4a0c      	ldr	r2, [pc, #48]	@ (8006438 <vTaskSwitchContext+0xc4>)
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	4a09      	ldr	r2, [pc, #36]	@ (8006430 <vTaskSwitchContext+0xbc>)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006410:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <vTaskSwitchContext+0xc4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3354      	adds	r3, #84	@ 0x54
 8006416:	4a09      	ldr	r2, [pc, #36]	@ (800643c <vTaskSwitchContext+0xc8>)
 8006418:	6013      	str	r3, [r2, #0]
}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	20007f30 	.word	0x20007f30
 800642c:	20007f1c 	.word	0x20007f1c
 8006430:	20007f10 	.word	0x20007f10
 8006434:	20007a38 	.word	0x20007a38
 8006438:	20007a34 	.word	0x20007a34
 800643c:	20000010 	.word	0x20000010

08006440 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10b      	bne.n	8006468 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	60fb      	str	r3, [r7, #12]
}
 8006462:	bf00      	nop
 8006464:	bf00      	nop
 8006466:	e7fd      	b.n	8006464 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006468:	4b07      	ldr	r3, [pc, #28]	@ (8006488 <vTaskPlaceOnEventList+0x48>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3318      	adds	r3, #24
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fe fe84 	bl	800517e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006476:	2101      	movs	r1, #1
 8006478:	6838      	ldr	r0, [r7, #0]
 800647a:	f000 fc1f 	bl	8006cbc <prvAddCurrentTaskToDelayedList>
}
 800647e:	bf00      	nop
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20007a34 	.word	0x20007a34

0800648c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10b      	bne.n	80064b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	617b      	str	r3, [r7, #20]
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	e7fd      	b.n	80064b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064b6:	4b0a      	ldr	r3, [pc, #40]	@ (80064e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3318      	adds	r3, #24
 80064bc:	4619      	mov	r1, r3
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7fe fe39 	bl	8005136 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80064ca:	f04f 33ff 	mov.w	r3, #4294967295
 80064ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	68b8      	ldr	r0, [r7, #8]
 80064d4:	f000 fbf2 	bl	8006cbc <prvAddCurrentTaskToDelayedList>
	}
 80064d8:	bf00      	nop
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20007a34 	.word	0x20007a34

080064e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	60fb      	str	r3, [r7, #12]
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	e7fd      	b.n	800650e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	3318      	adds	r3, #24
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fe6a 	bl	80051f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800651c:	4b1d      	ldr	r3, [pc, #116]	@ (8006594 <xTaskRemoveFromEventList+0xb0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d11d      	bne.n	8006560 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	3304      	adds	r3, #4
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe fe61 	bl	80051f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006532:	4b19      	ldr	r3, [pc, #100]	@ (8006598 <xTaskRemoveFromEventList+0xb4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d903      	bls.n	8006542 <xTaskRemoveFromEventList+0x5e>
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653e:	4a16      	ldr	r2, [pc, #88]	@ (8006598 <xTaskRemoveFromEventList+0xb4>)
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4a13      	ldr	r2, [pc, #76]	@ (800659c <xTaskRemoveFromEventList+0xb8>)
 8006550:	441a      	add	r2, r3
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7fe fdec 	bl	8005136 <vListInsertEnd>
 800655e:	e005      	b.n	800656c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	3318      	adds	r3, #24
 8006564:	4619      	mov	r1, r3
 8006566:	480e      	ldr	r0, [pc, #56]	@ (80065a0 <xTaskRemoveFromEventList+0xbc>)
 8006568:	f7fe fde5 	bl	8005136 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006570:	4b0c      	ldr	r3, [pc, #48]	@ (80065a4 <xTaskRemoveFromEventList+0xc0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006576:	429a      	cmp	r2, r3
 8006578:	d905      	bls.n	8006586 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800657a:	2301      	movs	r3, #1
 800657c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800657e:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <xTaskRemoveFromEventList+0xc4>)
 8006580:	2201      	movs	r2, #1
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	e001      	b.n	800658a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800658a:	697b      	ldr	r3, [r7, #20]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20007f30 	.word	0x20007f30
 8006598:	20007f10 	.word	0x20007f10
 800659c:	20007a38 	.word	0x20007a38
 80065a0:	20007ec8 	.word	0x20007ec8
 80065a4:	20007a34 	.word	0x20007a34
 80065a8:	20007f1c 	.word	0x20007f1c

080065ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065b4:	4b06      	ldr	r3, [pc, #24]	@ (80065d0 <vTaskInternalSetTimeOutState+0x24>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065bc:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <vTaskInternalSetTimeOutState+0x28>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	605a      	str	r2, [r3, #4]
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	20007f20 	.word	0x20007f20
 80065d4:	20007f0c 	.word	0x20007f0c

080065d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	613b      	str	r3, [r7, #16]
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10b      	bne.n	800661e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	60fb      	str	r3, [r7, #12]
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	e7fd      	b.n	800661a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800661e:	f000 fff3 	bl	8007608 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006622:	4b1d      	ldr	r3, [pc, #116]	@ (8006698 <xTaskCheckForTimeOut+0xc0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663a:	d102      	bne.n	8006642 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800663c:	2300      	movs	r3, #0
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	e023      	b.n	800668a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4b15      	ldr	r3, [pc, #84]	@ (800669c <xTaskCheckForTimeOut+0xc4>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d007      	beq.n	800665e <xTaskCheckForTimeOut+0x86>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	429a      	cmp	r2, r3
 8006656:	d302      	bcc.n	800665e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006658:	2301      	movs	r3, #1
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	e015      	b.n	800668a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	429a      	cmp	r2, r3
 8006666:	d20b      	bcs.n	8006680 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	1ad2      	subs	r2, r2, r3
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff ff99 	bl	80065ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800667a:	2300      	movs	r3, #0
 800667c:	61fb      	str	r3, [r7, #28]
 800667e:	e004      	b.n	800668a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006686:	2301      	movs	r3, #1
 8006688:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800668a:	f000 ffef 	bl	800766c <vPortExitCritical>

	return xReturn;
 800668e:	69fb      	ldr	r3, [r7, #28]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3720      	adds	r7, #32
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20007f0c 	.word	0x20007f0c
 800669c:	20007f20 	.word	0x20007f20

080066a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066a4:	4b03      	ldr	r3, [pc, #12]	@ (80066b4 <vTaskMissedYield+0x14>)
 80066a6:	2201      	movs	r2, #1
 80066a8:	601a      	str	r2, [r3, #0]
}
 80066aa:	bf00      	nop
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	20007f1c 	.word	0x20007f1c

080066b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066c0:	f000 f852 	bl	8006768 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066c4:	4b06      	ldr	r3, [pc, #24]	@ (80066e0 <prvIdleTask+0x28>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d9f9      	bls.n	80066c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066cc:	4b05      	ldr	r3, [pc, #20]	@ (80066e4 <prvIdleTask+0x2c>)
 80066ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066dc:	e7f0      	b.n	80066c0 <prvIdleTask+0x8>
 80066de:	bf00      	nop
 80066e0:	20007a38 	.word	0x20007a38
 80066e4:	e000ed04 	.word	0xe000ed04

080066e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066ee:	2300      	movs	r3, #0
 80066f0:	607b      	str	r3, [r7, #4]
 80066f2:	e00c      	b.n	800670e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4a12      	ldr	r2, [pc, #72]	@ (8006748 <prvInitialiseTaskLists+0x60>)
 8006700:	4413      	add	r3, r2
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe fcea 	bl	80050dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3301      	adds	r3, #1
 800670c:	607b      	str	r3, [r7, #4]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b37      	cmp	r3, #55	@ 0x37
 8006712:	d9ef      	bls.n	80066f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006714:	480d      	ldr	r0, [pc, #52]	@ (800674c <prvInitialiseTaskLists+0x64>)
 8006716:	f7fe fce1 	bl	80050dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800671a:	480d      	ldr	r0, [pc, #52]	@ (8006750 <prvInitialiseTaskLists+0x68>)
 800671c:	f7fe fcde 	bl	80050dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006720:	480c      	ldr	r0, [pc, #48]	@ (8006754 <prvInitialiseTaskLists+0x6c>)
 8006722:	f7fe fcdb 	bl	80050dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006726:	480c      	ldr	r0, [pc, #48]	@ (8006758 <prvInitialiseTaskLists+0x70>)
 8006728:	f7fe fcd8 	bl	80050dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800672c:	480b      	ldr	r0, [pc, #44]	@ (800675c <prvInitialiseTaskLists+0x74>)
 800672e:	f7fe fcd5 	bl	80050dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006732:	4b0b      	ldr	r3, [pc, #44]	@ (8006760 <prvInitialiseTaskLists+0x78>)
 8006734:	4a05      	ldr	r2, [pc, #20]	@ (800674c <prvInitialiseTaskLists+0x64>)
 8006736:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006738:	4b0a      	ldr	r3, [pc, #40]	@ (8006764 <prvInitialiseTaskLists+0x7c>)
 800673a:	4a05      	ldr	r2, [pc, #20]	@ (8006750 <prvInitialiseTaskLists+0x68>)
 800673c:	601a      	str	r2, [r3, #0]
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20007a38 	.word	0x20007a38
 800674c:	20007e98 	.word	0x20007e98
 8006750:	20007eac 	.word	0x20007eac
 8006754:	20007ec8 	.word	0x20007ec8
 8006758:	20007edc 	.word	0x20007edc
 800675c:	20007ef4 	.word	0x20007ef4
 8006760:	20007ec0 	.word	0x20007ec0
 8006764:	20007ec4 	.word	0x20007ec4

08006768 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800676e:	e019      	b.n	80067a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006770:	f000 ff4a 	bl	8007608 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006774:	4b10      	ldr	r3, [pc, #64]	@ (80067b8 <prvCheckTasksWaitingTermination+0x50>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3304      	adds	r3, #4
 8006780:	4618      	mov	r0, r3
 8006782:	f7fe fd35 	bl	80051f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006786:	4b0d      	ldr	r3, [pc, #52]	@ (80067bc <prvCheckTasksWaitingTermination+0x54>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3b01      	subs	r3, #1
 800678c:	4a0b      	ldr	r2, [pc, #44]	@ (80067bc <prvCheckTasksWaitingTermination+0x54>)
 800678e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006790:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <prvCheckTasksWaitingTermination+0x58>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3b01      	subs	r3, #1
 8006796:	4a0a      	ldr	r2, [pc, #40]	@ (80067c0 <prvCheckTasksWaitingTermination+0x58>)
 8006798:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800679a:	f000 ff67 	bl	800766c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f810 	bl	80067c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067a4:	4b06      	ldr	r3, [pc, #24]	@ (80067c0 <prvCheckTasksWaitingTermination+0x58>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e1      	bne.n	8006770 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067ac:	bf00      	nop
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20007edc 	.word	0x20007edc
 80067bc:	20007f08 	.word	0x20007f08
 80067c0:	20007ef0 	.word	0x20007ef0

080067c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3354      	adds	r3, #84	@ 0x54
 80067d0:	4618      	mov	r0, r3
 80067d2:	f002 fa9f 	bl	8008d14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d108      	bne.n	80067f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 f8f9 	bl	80079dc <vPortFree>
				vPortFree( pxTCB );
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 f8f6 	bl	80079dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067f0:	e019      	b.n	8006826 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d103      	bne.n	8006804 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 f8ed 	bl	80079dc <vPortFree>
	}
 8006802:	e010      	b.n	8006826 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800680a:	2b02      	cmp	r3, #2
 800680c:	d00b      	beq.n	8006826 <prvDeleteTCB+0x62>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	60fb      	str	r3, [r7, #12]
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	e7fd      	b.n	8006822 <prvDeleteTCB+0x5e>
	}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006836:	4b0f      	ldr	r3, [pc, #60]	@ (8006874 <prvResetNextTaskUnblockTime+0x44>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <prvResetNextTaskUnblockTime+0x14>
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <prvResetNextTaskUnblockTime+0x16>
 8006844:	2300      	movs	r3, #0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d004      	beq.n	8006854 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800684a:	4b0b      	ldr	r3, [pc, #44]	@ (8006878 <prvResetNextTaskUnblockTime+0x48>)
 800684c:	f04f 32ff 	mov.w	r2, #4294967295
 8006850:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006852:	e008      	b.n	8006866 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006854:	4b07      	ldr	r3, [pc, #28]	@ (8006874 <prvResetNextTaskUnblockTime+0x44>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	4a05      	ldr	r2, [pc, #20]	@ (8006878 <prvResetNextTaskUnblockTime+0x48>)
 8006864:	6013      	str	r3, [r2, #0]
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20007ec0 	.word	0x20007ec0
 8006878:	20007f28 	.word	0x20007f28

0800687c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006882:	4b0b      	ldr	r3, [pc, #44]	@ (80068b0 <xTaskGetSchedulerState+0x34>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d102      	bne.n	8006890 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800688a:	2301      	movs	r3, #1
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	e008      	b.n	80068a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006890:	4b08      	ldr	r3, [pc, #32]	@ (80068b4 <xTaskGetSchedulerState+0x38>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d102      	bne.n	800689e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006898:	2302      	movs	r3, #2
 800689a:	607b      	str	r3, [r7, #4]
 800689c:	e001      	b.n	80068a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800689e:	2300      	movs	r3, #0
 80068a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068a2:	687b      	ldr	r3, [r7, #4]
	}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	20007f14 	.word	0x20007f14
 80068b4:	20007f30 	.word	0x20007f30

080068b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d058      	beq.n	8006980 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068ce:	4b2f      	ldr	r3, [pc, #188]	@ (800698c <xTaskPriorityDisinherit+0xd4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d00b      	beq.n	80068f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	60fb      	str	r3, [r7, #12]
}
 80068ea:	bf00      	nop
 80068ec:	bf00      	nop
 80068ee:	e7fd      	b.n	80068ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10b      	bne.n	8006910 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	60bb      	str	r3, [r7, #8]
}
 800690a:	bf00      	nop
 800690c:	bf00      	nop
 800690e:	e7fd      	b.n	800690c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006914:	1e5a      	subs	r2, r3, #1
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006922:	429a      	cmp	r2, r3
 8006924:	d02c      	beq.n	8006980 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800692a:	2b00      	cmp	r3, #0
 800692c:	d128      	bne.n	8006980 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	3304      	adds	r3, #4
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fc5c 	bl	80051f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006944:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006950:	4b0f      	ldr	r3, [pc, #60]	@ (8006990 <xTaskPriorityDisinherit+0xd8>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d903      	bls.n	8006960 <xTaskPriorityDisinherit+0xa8>
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695c:	4a0c      	ldr	r2, [pc, #48]	@ (8006990 <xTaskPriorityDisinherit+0xd8>)
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4a09      	ldr	r2, [pc, #36]	@ (8006994 <xTaskPriorityDisinherit+0xdc>)
 800696e:	441a      	add	r2, r3
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7fe fbdd 	bl	8005136 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006980:	697b      	ldr	r3, [r7, #20]
	}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20007a34 	.word	0x20007a34
 8006990:	20007f10 	.word	0x20007f10
 8006994:	20007a38 	.word	0x20007a38

08006998 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80069a2:	f000 fe31 	bl	8007608 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80069a6:	4b20      	ldr	r3, [pc, #128]	@ (8006a28 <ulTaskNotifyTake+0x90>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d113      	bne.n	80069da <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80069b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a28 <ulTaskNotifyTake+0x90>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00b      	beq.n	80069da <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069c2:	2101      	movs	r1, #1
 80069c4:	6838      	ldr	r0, [r7, #0]
 80069c6:	f000 f979 	bl	8006cbc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80069ca:	4b18      	ldr	r3, [pc, #96]	@ (8006a2c <ulTaskNotifyTake+0x94>)
 80069cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80069da:	f000 fe47 	bl	800766c <vPortExitCritical>

		taskENTER_CRITICAL();
 80069de:	f000 fe13 	bl	8007608 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80069e2:	4b11      	ldr	r3, [pc, #68]	@ (8006a28 <ulTaskNotifyTake+0x90>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069ea:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00e      	beq.n	8006a10 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80069f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006a28 <ulTaskNotifyTake+0x90>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8006a02:	e005      	b.n	8006a10 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006a04:	4b08      	ldr	r3, [pc, #32]	@ (8006a28 <ulTaskNotifyTake+0x90>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	3a01      	subs	r2, #1
 8006a0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a10:	4b05      	ldr	r3, [pc, #20]	@ (8006a28 <ulTaskNotifyTake+0x90>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8006a1a:	f000 fe27 	bl	800766c <vPortExitCritical>

		return ulReturn;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
	}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20007a34 	.word	0x20007a34
 8006a2c:	e000ed04 	.word	0xe000ed04

08006a30 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	@ 0x28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006a40:	2301      	movs	r3, #1
 8006a42:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <xTaskGenericNotify+0x32>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	61bb      	str	r3, [r7, #24]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006a66:	f000 fdcf 	bl	8007608 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d004      	beq.n	8006a7a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006a80:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	2202      	movs	r2, #2
 8006a86:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d82e      	bhi.n	8006aee <xTaskGenericNotify+0xbe>
 8006a90:	a201      	add	r2, pc, #4	@ (adr r2, 8006a98 <xTaskGenericNotify+0x68>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006aef 	.word	0x08006aef
 8006a9c:	08006aad 	.word	0x08006aad
 8006aa0:	08006abf 	.word	0x08006abf
 8006aa4:	08006acf 	.word	0x08006acf
 8006aa8:	08006ad9 	.word	0x08006ad9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006abc:	e017      	b.n	8006aee <xTaskGenericNotify+0xbe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006acc:	e00f      	b.n	8006aee <xTaskGenericNotify+0xbe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006ad6:	e00a      	b.n	8006aee <xTaskGenericNotify+0xbe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006ad8:	7ffb      	ldrb	r3, [r7, #31]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d004      	beq.n	8006ae8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006ae6:	e001      	b.n	8006aec <xTaskGenericNotify+0xbc>
						xReturn = pdFAIL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006aec:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006aee:	7ffb      	ldrb	r3, [r7, #31]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d13b      	bne.n	8006b6c <xTaskGenericNotify+0x13c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	3304      	adds	r3, #4
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fb79 	bl	80051f0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b02:	4b1e      	ldr	r3, [pc, #120]	@ (8006b7c <xTaskGenericNotify+0x14c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d903      	bls.n	8006b12 <xTaskGenericNotify+0xe2>
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006b7c <xTaskGenericNotify+0x14c>)
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4a18      	ldr	r2, [pc, #96]	@ (8006b80 <xTaskGenericNotify+0x150>)
 8006b20:	441a      	add	r2, r3
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f7fe fb04 	bl	8005136 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00b      	beq.n	8006b4e <xTaskGenericNotify+0x11e>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	617b      	str	r3, [r7, #20]
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	e7fd      	b.n	8006b4a <xTaskGenericNotify+0x11a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b52:	4b0c      	ldr	r3, [pc, #48]	@ (8006b84 <xTaskGenericNotify+0x154>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d907      	bls.n	8006b6c <xTaskGenericNotify+0x13c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b88 <xTaskGenericNotify+0x158>)
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006b6c:	f000 fd7e 	bl	800766c <vPortExitCritical>

		return xReturn;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3728      	adds	r7, #40	@ 0x28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20007f10 	.word	0x20007f10
 8006b80:	20007a38 	.word	0x20007a38
 8006b84:	20007a34 	.word	0x20007a34
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	@ 0x28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10b      	bne.n	8006bb4 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	61bb      	str	r3, [r7, #24]
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bb4:	f000 fe08 	bl	80077c8 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8006bbc:	f3ef 8211 	mrs	r2, BASEPRI
 8006bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	617a      	str	r2, [r7, #20]
 8006bd2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006bd4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bd6:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006bde:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006bf6:	7ffb      	ldrb	r3, [r7, #31]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d148      	bne.n	8006c8e <vTaskNotifyGiveFromISR+0x102>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	60fb      	str	r3, [r7, #12]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c1c:	4b21      	ldr	r3, [pc, #132]	@ (8006ca4 <vTaskNotifyGiveFromISR+0x118>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d11d      	bne.n	8006c60 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	3304      	adds	r3, #4
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe fae1 	bl	80051f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c32:	4b1d      	ldr	r3, [pc, #116]	@ (8006ca8 <vTaskNotifyGiveFromISR+0x11c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d903      	bls.n	8006c42 <vTaskNotifyGiveFromISR+0xb6>
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ca8 <vTaskNotifyGiveFromISR+0x11c>)
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4a17      	ldr	r2, [pc, #92]	@ (8006cac <vTaskNotifyGiveFromISR+0x120>)
 8006c50:	441a      	add	r2, r3
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	3304      	adds	r3, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f7fe fa6c 	bl	8005136 <vListInsertEnd>
 8006c5e:	e005      	b.n	8006c6c <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	3318      	adds	r3, #24
 8006c64:	4619      	mov	r1, r3
 8006c66:	4812      	ldr	r0, [pc, #72]	@ (8006cb0 <vTaskNotifyGiveFromISR+0x124>)
 8006c68:	f7fe fa65 	bl	8005136 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c70:	4b10      	ldr	r3, [pc, #64]	@ (8006cb4 <vTaskNotifyGiveFromISR+0x128>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d909      	bls.n	8006c8e <vTaskNotifyGiveFromISR+0x102>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2201      	movs	r2, #1
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e002      	b.n	8006c8e <vTaskNotifyGiveFromISR+0x102>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006c88:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb8 <vTaskNotifyGiveFromISR+0x12c>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f383 8811 	msr	BASEPRI, r3
}
 8006c98:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006c9a:	bf00      	nop
 8006c9c:	3728      	adds	r7, #40	@ 0x28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20007f30 	.word	0x20007f30
 8006ca8:	20007f10 	.word	0x20007f10
 8006cac:	20007a38 	.word	0x20007a38
 8006cb0:	20007ec8 	.word	0x20007ec8
 8006cb4:	20007a34 	.word	0x20007a34
 8006cb8:	20007f1c 	.word	0x20007f1c

08006cbc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cc6:	4b21      	ldr	r3, [pc, #132]	@ (8006d4c <prvAddCurrentTaskToDelayedList+0x90>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ccc:	4b20      	ldr	r3, [pc, #128]	@ (8006d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe fa8c 	bl	80051f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d10a      	bne.n	8006cf6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4619      	mov	r1, r3
 8006cee:	4819      	ldr	r0, [pc, #100]	@ (8006d54 <prvAddCurrentTaskToDelayedList+0x98>)
 8006cf0:	f7fe fa21 	bl	8005136 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cf4:	e026      	b.n	8006d44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cfe:	4b14      	ldr	r3, [pc, #80]	@ (8006d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d209      	bcs.n	8006d22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d0e:	4b12      	ldr	r3, [pc, #72]	@ (8006d58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b0f      	ldr	r3, [pc, #60]	@ (8006d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f7fe fa2f 	bl	800517e <vListInsert>
}
 8006d20:	e010      	b.n	8006d44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d22:	4b0e      	ldr	r3, [pc, #56]	@ (8006d5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b0a      	ldr	r3, [pc, #40]	@ (8006d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	f7fe fa25 	bl	800517e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d34:	4b0a      	ldr	r3, [pc, #40]	@ (8006d60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d202      	bcs.n	8006d44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d3e:	4a08      	ldr	r2, [pc, #32]	@ (8006d60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	6013      	str	r3, [r2, #0]
}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20007f0c 	.word	0x20007f0c
 8006d50:	20007a34 	.word	0x20007a34
 8006d54:	20007ef4 	.word	0x20007ef4
 8006d58:	20007ec4 	.word	0x20007ec4
 8006d5c:	20007ec0 	.word	0x20007ec0
 8006d60:	20007f28 	.word	0x20007f28

08006d64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08a      	sub	sp, #40	@ 0x28
 8006d68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d6e:	f000 fad9 	bl	8007324 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d72:	4b1d      	ldr	r3, [pc, #116]	@ (8006de8 <xTimerCreateTimerTask+0x84>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d021      	beq.n	8006dbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d82:	1d3a      	adds	r2, r7, #4
 8006d84:	f107 0108 	add.w	r1, r7, #8
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe f98b 	bl	80050a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	9202      	str	r2, [sp, #8]
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	2300      	movs	r3, #0
 8006da2:	460a      	mov	r2, r1
 8006da4:	4911      	ldr	r1, [pc, #68]	@ (8006dec <xTimerCreateTimerTask+0x88>)
 8006da6:	4812      	ldr	r0, [pc, #72]	@ (8006df0 <xTimerCreateTimerTask+0x8c>)
 8006da8:	f7fe ff44 	bl	8005c34 <xTaskCreateStatic>
 8006dac:	4603      	mov	r3, r0
 8006dae:	4a11      	ldr	r2, [pc, #68]	@ (8006df4 <xTimerCreateTimerTask+0x90>)
 8006db0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006db2:	4b10      	ldr	r3, [pc, #64]	@ (8006df4 <xTimerCreateTimerTask+0x90>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10b      	bne.n	8006ddc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	613b      	str	r3, [r7, #16]
}
 8006dd6:	bf00      	nop
 8006dd8:	bf00      	nop
 8006dda:	e7fd      	b.n	8006dd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ddc:	697b      	ldr	r3, [r7, #20]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20007f64 	.word	0x20007f64
 8006dec:	08008f04 	.word	0x08008f04
 8006df0:	08006f19 	.word	0x08006f19
 8006df4:	20007f68 	.word	0x20007f68

08006df8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	@ 0x28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10b      	bne.n	8006e28 <xTimerGenericCommand+0x30>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	623b      	str	r3, [r7, #32]
}
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	e7fd      	b.n	8006e24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e28:	4b19      	ldr	r3, [pc, #100]	@ (8006e90 <xTimerGenericCommand+0x98>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d02a      	beq.n	8006e86 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b05      	cmp	r3, #5
 8006e40:	dc18      	bgt.n	8006e74 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e42:	f7ff fd1b 	bl	800687c <xTaskGetSchedulerState>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d109      	bne.n	8006e60 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e4c:	4b10      	ldr	r3, [pc, #64]	@ (8006e90 <xTimerGenericCommand+0x98>)
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	f107 0110 	add.w	r1, r7, #16
 8006e54:	2300      	movs	r3, #0
 8006e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e58:	f7fe fafe 	bl	8005458 <xQueueGenericSend>
 8006e5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e5e:	e012      	b.n	8006e86 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e60:	4b0b      	ldr	r3, [pc, #44]	@ (8006e90 <xTimerGenericCommand+0x98>)
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	f107 0110 	add.w	r1, r7, #16
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f7fe faf4 	bl	8005458 <xQueueGenericSend>
 8006e70:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e72:	e008      	b.n	8006e86 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e74:	4b06      	ldr	r3, [pc, #24]	@ (8006e90 <xTimerGenericCommand+0x98>)
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	f107 0110 	add.w	r1, r7, #16
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	f7fe fbec 	bl	800565c <xQueueGenericSendFromISR>
 8006e84:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3728      	adds	r7, #40	@ 0x28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20007f64 	.word	0x20007f64

08006e94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8006f14 <prvProcessExpiredTimer+0x80>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fe f99f 	bl	80051f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d123      	bne.n	8006f02 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	18d1      	adds	r1, r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	6978      	ldr	r0, [r7, #20]
 8006ec8:	f000 f8cc 	bl	8007064 <prvInsertTimerInActiveList>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d017      	beq.n	8006f02 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	2100      	movs	r1, #0
 8006edc:	6978      	ldr	r0, [r7, #20]
 8006ede:	f7ff ff8b 	bl	8006df8 <xTimerGenericCommand>
 8006ee2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	60fb      	str	r3, [r7, #12]
}
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	e7fd      	b.n	8006efe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f06:	6978      	ldr	r0, [r7, #20]
 8006f08:	4798      	blx	r3
}
 8006f0a:	bf00      	nop
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20007f5c 	.word	0x20007f5c

08006f18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f20:	f107 0308 	add.w	r3, r7, #8
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 f859 	bl	8006fdc <prvGetNextExpireTime>
 8006f2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f805 	bl	8006f40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f36:	f000 f8d7 	bl	80070e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f3a:	bf00      	nop
 8006f3c:	e7f0      	b.n	8006f20 <prvTimerTask+0x8>
	...

08006f40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f4a:	f7ff f897 	bl	800607c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f4e:	f107 0308 	add.w	r3, r7, #8
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f866 	bl	8007024 <prvSampleTimeNow>
 8006f58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d130      	bne.n	8006fc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <prvProcessTimerOrBlockTask+0x3c>
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d806      	bhi.n	8006f7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f6e:	f7ff f893 	bl	8006098 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff ff8d 	bl	8006e94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f7a:	e024      	b.n	8006fc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f82:	4b13      	ldr	r3, [pc, #76]	@ (8006fd0 <prvProcessTimerOrBlockTask+0x90>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2301      	moveq	r3, #1
 8006f8e:	2300      	movne	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f94:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd4 <prvProcessTimerOrBlockTask+0x94>)
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f7fe fe13 	bl	8005bcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006fa6:	f7ff f877 	bl	8006098 <xTaskResumeAll>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fb0:	4b09      	ldr	r3, [pc, #36]	@ (8006fd8 <prvProcessTimerOrBlockTask+0x98>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
}
 8006fc0:	e001      	b.n	8006fc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fc2:	f7ff f869 	bl	8006098 <xTaskResumeAll>
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20007f60 	.word	0x20007f60
 8006fd4:	20007f64 	.word	0x20007f64
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8007020 <prvGetNextExpireTime+0x44>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bf0c      	ite	eq
 8006fee:	2301      	moveq	r3, #1
 8006ff0:	2300      	movne	r3, #0
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d105      	bne.n	800700e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007002:	4b07      	ldr	r3, [pc, #28]	@ (8007020 <prvGetNextExpireTime+0x44>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e001      	b.n	8007012 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007012:	68fb      	ldr	r3, [r7, #12]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	20007f5c 	.word	0x20007f5c

08007024 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800702c:	f7ff f8d2 	bl	80061d4 <xTaskGetTickCount>
 8007030:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007032:	4b0b      	ldr	r3, [pc, #44]	@ (8007060 <prvSampleTimeNow+0x3c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	429a      	cmp	r2, r3
 800703a:	d205      	bcs.n	8007048 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800703c:	f000 f910 	bl	8007260 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	e002      	b.n	800704e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800704e:	4a04      	ldr	r2, [pc, #16]	@ (8007060 <prvSampleTimeNow+0x3c>)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007054:	68fb      	ldr	r3, [r7, #12]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20007f6c 	.word	0x20007f6c

08007064 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007072:	2300      	movs	r3, #0
 8007074:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	429a      	cmp	r2, r3
 8007088:	d812      	bhi.n	80070b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	429a      	cmp	r2, r3
 8007096:	d302      	bcc.n	800709e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007098:	2301      	movs	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e01b      	b.n	80070d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800709e:	4b10      	ldr	r3, [pc, #64]	@ (80070e0 <prvInsertTimerInActiveList+0x7c>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7fe f868 	bl	800517e <vListInsert>
 80070ae:	e012      	b.n	80070d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d206      	bcs.n	80070c6 <prvInsertTimerInActiveList+0x62>
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d302      	bcc.n	80070c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	e007      	b.n	80070d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070c6:	4b07      	ldr	r3, [pc, #28]	@ (80070e4 <prvInsertTimerInActiveList+0x80>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f7fe f854 	bl	800517e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070d6:	697b      	ldr	r3, [r7, #20]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20007f60 	.word	0x20007f60
 80070e4:	20007f5c 	.word	0x20007f5c

080070e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08e      	sub	sp, #56	@ 0x38
 80070ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ee:	e0a5      	b.n	800723c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da19      	bge.n	800712a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070f6:	1d3b      	adds	r3, r7, #4
 80070f8:	3304      	adds	r3, #4
 80070fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10b      	bne.n	800711a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	61fb      	str	r3, [r7, #28]
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	e7fd      	b.n	8007116 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800711a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007120:	6850      	ldr	r0, [r2, #4]
 8007122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007124:	6892      	ldr	r2, [r2, #8]
 8007126:	4611      	mov	r1, r2
 8007128:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	f2c0 8085 	blt.w	800723c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d004      	beq.n	8007148 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800713e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007140:	3304      	adds	r3, #4
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe f854 	bl	80051f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007148:	463b      	mov	r3, r7
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff ff6a 	bl	8007024 <prvSampleTimeNow>
 8007150:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b09      	cmp	r3, #9
 8007156:	d86c      	bhi.n	8007232 <prvProcessReceivedCommands+0x14a>
 8007158:	a201      	add	r2, pc, #4	@ (adr r2, 8007160 <prvProcessReceivedCommands+0x78>)
 800715a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715e:	bf00      	nop
 8007160:	08007189 	.word	0x08007189
 8007164:	08007189 	.word	0x08007189
 8007168:	08007189 	.word	0x08007189
 800716c:	08007233 	.word	0x08007233
 8007170:	080071e7 	.word	0x080071e7
 8007174:	08007221 	.word	0x08007221
 8007178:	08007189 	.word	0x08007189
 800717c:	08007189 	.word	0x08007189
 8007180:	08007233 	.word	0x08007233
 8007184:	080071e7 	.word	0x080071e7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	18d1      	adds	r1, r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007194:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007196:	f7ff ff65 	bl	8007064 <prvInsertTimerInActiveList>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d04a      	beq.n	8007236 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071a6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80071a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d142      	bne.n	8007236 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	441a      	add	r2, r3
 80071b8:	2300      	movs	r3, #0
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	2300      	movs	r3, #0
 80071be:	2100      	movs	r1, #0
 80071c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071c2:	f7ff fe19 	bl	8006df8 <xTimerGenericCommand>
 80071c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d133      	bne.n	8007236 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	61bb      	str	r3, [r7, #24]
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10b      	bne.n	800720c <prvProcessReceivedCommands+0x124>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	617b      	str	r3, [r7, #20]
}
 8007206:	bf00      	nop
 8007208:	bf00      	nop
 800720a:	e7fd      	b.n	8007208 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800720c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007212:	18d1      	adds	r1, r2, r3
 8007214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007218:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800721a:	f7ff ff23 	bl	8007064 <prvInsertTimerInActiveList>
					break;
 800721e:	e00d      	b.n	800723c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d107      	bne.n	800723a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800722a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800722c:	f000 fbd6 	bl	80079dc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007230:	e003      	b.n	800723a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8007232:	bf00      	nop
 8007234:	e002      	b.n	800723c <prvProcessReceivedCommands+0x154>
					break;
 8007236:	bf00      	nop
 8007238:	e000      	b.n	800723c <prvProcessReceivedCommands+0x154>
					break;
 800723a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800723c:	4b07      	ldr	r3, [pc, #28]	@ (800725c <prvProcessReceivedCommands+0x174>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	1d39      	adds	r1, r7, #4
 8007242:	2200      	movs	r2, #0
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe faa5 	bl	8005794 <xQueueReceive>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	f47f af4f 	bne.w	80070f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	3730      	adds	r7, #48	@ 0x30
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20007f64 	.word	0x20007f64

08007260 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007266:	e046      	b.n	80072f6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007268:	4b2c      	ldr	r3, [pc, #176]	@ (800731c <prvSwitchTimerLists+0xbc>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007272:	4b2a      	ldr	r3, [pc, #168]	@ (800731c <prvSwitchTimerLists+0xbc>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3304      	adds	r3, #4
 8007280:	4618      	mov	r0, r3
 8007282:	f7fd ffb5 	bl	80051f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d12f      	bne.n	80072f6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4413      	add	r3, r2
 800729e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d90e      	bls.n	80072c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072b4:	4b19      	ldr	r3, [pc, #100]	@ (800731c <prvSwitchTimerLists+0xbc>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f7fd ff5d 	bl	800517e <vListInsert>
 80072c4:	e017      	b.n	80072f6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072c6:	2300      	movs	r3, #0
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	2300      	movs	r3, #0
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	2100      	movs	r1, #0
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7ff fd91 	bl	8006df8 <xTimerGenericCommand>
 80072d6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10b      	bne.n	80072f6 <prvSwitchTimerLists+0x96>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	603b      	str	r3, [r7, #0]
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	e7fd      	b.n	80072f2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072f6:	4b09      	ldr	r3, [pc, #36]	@ (800731c <prvSwitchTimerLists+0xbc>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1b3      	bne.n	8007268 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007300:	4b06      	ldr	r3, [pc, #24]	@ (800731c <prvSwitchTimerLists+0xbc>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007306:	4b06      	ldr	r3, [pc, #24]	@ (8007320 <prvSwitchTimerLists+0xc0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a04      	ldr	r2, [pc, #16]	@ (800731c <prvSwitchTimerLists+0xbc>)
 800730c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800730e:	4a04      	ldr	r2, [pc, #16]	@ (8007320 <prvSwitchTimerLists+0xc0>)
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	6013      	str	r3, [r2, #0]
}
 8007314:	bf00      	nop
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	20007f5c 	.word	0x20007f5c
 8007320:	20007f60 	.word	0x20007f60

08007324 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800732a:	f000 f96d 	bl	8007608 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800732e:	4b15      	ldr	r3, [pc, #84]	@ (8007384 <prvCheckForValidListAndQueue+0x60>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d120      	bne.n	8007378 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007336:	4814      	ldr	r0, [pc, #80]	@ (8007388 <prvCheckForValidListAndQueue+0x64>)
 8007338:	f7fd fed0 	bl	80050dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800733c:	4813      	ldr	r0, [pc, #76]	@ (800738c <prvCheckForValidListAndQueue+0x68>)
 800733e:	f7fd fecd 	bl	80050dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007342:	4b13      	ldr	r3, [pc, #76]	@ (8007390 <prvCheckForValidListAndQueue+0x6c>)
 8007344:	4a10      	ldr	r2, [pc, #64]	@ (8007388 <prvCheckForValidListAndQueue+0x64>)
 8007346:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007348:	4b12      	ldr	r3, [pc, #72]	@ (8007394 <prvCheckForValidListAndQueue+0x70>)
 800734a:	4a10      	ldr	r2, [pc, #64]	@ (800738c <prvCheckForValidListAndQueue+0x68>)
 800734c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800734e:	2300      	movs	r3, #0
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	4b11      	ldr	r3, [pc, #68]	@ (8007398 <prvCheckForValidListAndQueue+0x74>)
 8007354:	4a11      	ldr	r2, [pc, #68]	@ (800739c <prvCheckForValidListAndQueue+0x78>)
 8007356:	2110      	movs	r1, #16
 8007358:	200a      	movs	r0, #10
 800735a:	f7fd ffdd 	bl	8005318 <xQueueGenericCreateStatic>
 800735e:	4603      	mov	r3, r0
 8007360:	4a08      	ldr	r2, [pc, #32]	@ (8007384 <prvCheckForValidListAndQueue+0x60>)
 8007362:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007364:	4b07      	ldr	r3, [pc, #28]	@ (8007384 <prvCheckForValidListAndQueue+0x60>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d005      	beq.n	8007378 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800736c:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <prvCheckForValidListAndQueue+0x60>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	490b      	ldr	r1, [pc, #44]	@ (80073a0 <prvCheckForValidListAndQueue+0x7c>)
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fc00 	bl	8005b78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007378:	f000 f978 	bl	800766c <vPortExitCritical>
}
 800737c:	bf00      	nop
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20007f64 	.word	0x20007f64
 8007388:	20007f34 	.word	0x20007f34
 800738c:	20007f48 	.word	0x20007f48
 8007390:	20007f5c 	.word	0x20007f5c
 8007394:	20007f60 	.word	0x20007f60
 8007398:	20008010 	.word	0x20008010
 800739c:	20007f70 	.word	0x20007f70
 80073a0:	08008f0c 	.word	0x08008f0c

080073a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3b04      	subs	r3, #4
 80073b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3b04      	subs	r3, #4
 80073c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007408 <pxPortInitialiseStack+0x64>)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3b14      	subs	r3, #20
 80073de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3b04      	subs	r3, #4
 80073ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f06f 0202 	mvn.w	r2, #2
 80073f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3b20      	subs	r3, #32
 80073f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073fa:	68fb      	ldr	r3, [r7, #12]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	0800740d 	.word	0x0800740d

0800740c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007416:	4b13      	ldr	r3, [pc, #76]	@ (8007464 <prvTaskExitError+0x58>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741e:	d00b      	beq.n	8007438 <prvTaskExitError+0x2c>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	60fb      	str	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	e7fd      	b.n	8007434 <prvTaskExitError+0x28>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	60bb      	str	r3, [r7, #8]
}
 800744a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800744c:	bf00      	nop
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0fc      	beq.n	800744e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	2000000c 	.word	0x2000000c
	...

08007470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007470:	4b07      	ldr	r3, [pc, #28]	@ (8007490 <pxCurrentTCBConst2>)
 8007472:	6819      	ldr	r1, [r3, #0]
 8007474:	6808      	ldr	r0, [r1, #0]
 8007476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	f380 8809 	msr	PSP, r0
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f04f 0000 	mov.w	r0, #0
 8007486:	f380 8811 	msr	BASEPRI, r0
 800748a:	4770      	bx	lr
 800748c:	f3af 8000 	nop.w

08007490 <pxCurrentTCBConst2>:
 8007490:	20007a34 	.word	0x20007a34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop

08007498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007498:	4808      	ldr	r0, [pc, #32]	@ (80074bc <prvPortStartFirstTask+0x24>)
 800749a:	6800      	ldr	r0, [r0, #0]
 800749c:	6800      	ldr	r0, [r0, #0]
 800749e:	f380 8808 	msr	MSP, r0
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f380 8814 	msr	CONTROL, r0
 80074aa:	b662      	cpsie	i
 80074ac:	b661      	cpsie	f
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	df00      	svc	0
 80074b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ba:	bf00      	nop
 80074bc:	e000ed08 	.word	0xe000ed08

080074c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074c6:	4b47      	ldr	r3, [pc, #284]	@ (80075e4 <xPortStartScheduler+0x124>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a47      	ldr	r2, [pc, #284]	@ (80075e8 <xPortStartScheduler+0x128>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d10b      	bne.n	80074e8 <xPortStartScheduler+0x28>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	613b      	str	r3, [r7, #16]
}
 80074e2:	bf00      	nop
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074e8:	4b3e      	ldr	r3, [pc, #248]	@ (80075e4 <xPortStartScheduler+0x124>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a3f      	ldr	r2, [pc, #252]	@ (80075ec <xPortStartScheduler+0x12c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d10b      	bne.n	800750a <xPortStartScheduler+0x4a>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	60fb      	str	r3, [r7, #12]
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	e7fd      	b.n	8007506 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800750a:	4b39      	ldr	r3, [pc, #228]	@ (80075f0 <xPortStartScheduler+0x130>)
 800750c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	22ff      	movs	r2, #255	@ 0xff
 800751a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800752c:	b2da      	uxtb	r2, r3
 800752e:	4b31      	ldr	r3, [pc, #196]	@ (80075f4 <xPortStartScheduler+0x134>)
 8007530:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007532:	4b31      	ldr	r3, [pc, #196]	@ (80075f8 <xPortStartScheduler+0x138>)
 8007534:	2207      	movs	r2, #7
 8007536:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007538:	e009      	b.n	800754e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800753a:	4b2f      	ldr	r3, [pc, #188]	@ (80075f8 <xPortStartScheduler+0x138>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3b01      	subs	r3, #1
 8007540:	4a2d      	ldr	r2, [pc, #180]	@ (80075f8 <xPortStartScheduler+0x138>)
 8007542:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	b2db      	uxtb	r3, r3
 800754c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007556:	2b80      	cmp	r3, #128	@ 0x80
 8007558:	d0ef      	beq.n	800753a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800755a:	4b27      	ldr	r3, [pc, #156]	@ (80075f8 <xPortStartScheduler+0x138>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f1c3 0307 	rsb	r3, r3, #7
 8007562:	2b04      	cmp	r3, #4
 8007564:	d00b      	beq.n	800757e <xPortStartScheduler+0xbe>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	60bb      	str	r3, [r7, #8]
}
 8007578:	bf00      	nop
 800757a:	bf00      	nop
 800757c:	e7fd      	b.n	800757a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800757e:	4b1e      	ldr	r3, [pc, #120]	@ (80075f8 <xPortStartScheduler+0x138>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	4a1c      	ldr	r2, [pc, #112]	@ (80075f8 <xPortStartScheduler+0x138>)
 8007586:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007588:	4b1b      	ldr	r3, [pc, #108]	@ (80075f8 <xPortStartScheduler+0x138>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007590:	4a19      	ldr	r2, [pc, #100]	@ (80075f8 <xPortStartScheduler+0x138>)
 8007592:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	b2da      	uxtb	r2, r3
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800759c:	4b17      	ldr	r3, [pc, #92]	@ (80075fc <xPortStartScheduler+0x13c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a16      	ldr	r2, [pc, #88]	@ (80075fc <xPortStartScheduler+0x13c>)
 80075a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075a8:	4b14      	ldr	r3, [pc, #80]	@ (80075fc <xPortStartScheduler+0x13c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a13      	ldr	r2, [pc, #76]	@ (80075fc <xPortStartScheduler+0x13c>)
 80075ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80075b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075b4:	f000 f8da 	bl	800776c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075b8:	4b11      	ldr	r3, [pc, #68]	@ (8007600 <xPortStartScheduler+0x140>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075be:	f000 f8f9 	bl	80077b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075c2:	4b10      	ldr	r3, [pc, #64]	@ (8007604 <xPortStartScheduler+0x144>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007604 <xPortStartScheduler+0x144>)
 80075c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80075cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075ce:	f7ff ff63 	bl	8007498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075d2:	f7fe fecf 	bl	8006374 <vTaskSwitchContext>
	prvTaskExitError();
 80075d6:	f7ff ff19 	bl	800740c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	e000ed00 	.word	0xe000ed00
 80075e8:	410fc271 	.word	0x410fc271
 80075ec:	410fc270 	.word	0x410fc270
 80075f0:	e000e400 	.word	0xe000e400
 80075f4:	20008060 	.word	0x20008060
 80075f8:	20008064 	.word	0x20008064
 80075fc:	e000ed20 	.word	0xe000ed20
 8007600:	2000000c 	.word	0x2000000c
 8007604:	e000ef34 	.word	0xe000ef34

08007608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	607b      	str	r3, [r7, #4]
}
 8007620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007622:	4b10      	ldr	r3, [pc, #64]	@ (8007664 <vPortEnterCritical+0x5c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3301      	adds	r3, #1
 8007628:	4a0e      	ldr	r2, [pc, #56]	@ (8007664 <vPortEnterCritical+0x5c>)
 800762a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800762c:	4b0d      	ldr	r3, [pc, #52]	@ (8007664 <vPortEnterCritical+0x5c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d110      	bne.n	8007656 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007634:	4b0c      	ldr	r3, [pc, #48]	@ (8007668 <vPortEnterCritical+0x60>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <vPortEnterCritical+0x4e>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	603b      	str	r3, [r7, #0]
}
 8007650:	bf00      	nop
 8007652:	bf00      	nop
 8007654:	e7fd      	b.n	8007652 <vPortEnterCritical+0x4a>
	}
}
 8007656:	bf00      	nop
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	2000000c 	.word	0x2000000c
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007672:	4b12      	ldr	r3, [pc, #72]	@ (80076bc <vPortExitCritical+0x50>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <vPortExitCritical+0x26>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	607b      	str	r3, [r7, #4]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007692:	4b0a      	ldr	r3, [pc, #40]	@ (80076bc <vPortExitCritical+0x50>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3b01      	subs	r3, #1
 8007698:	4a08      	ldr	r2, [pc, #32]	@ (80076bc <vPortExitCritical+0x50>)
 800769a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800769c:	4b07      	ldr	r3, [pc, #28]	@ (80076bc <vPortExitCritical+0x50>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d105      	bne.n	80076b0 <vPortExitCritical+0x44>
 80076a4:	2300      	movs	r3, #0
 80076a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	f383 8811 	msr	BASEPRI, r3
}
 80076ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	2000000c 	.word	0x2000000c

080076c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076c0:	f3ef 8009 	mrs	r0, PSP
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	4b15      	ldr	r3, [pc, #84]	@ (8007720 <pxCurrentTCBConst>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	f01e 0f10 	tst.w	lr, #16
 80076d0:	bf08      	it	eq
 80076d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076da:	6010      	str	r0, [r2, #0]
 80076dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80076e4:	f380 8811 	msr	BASEPRI, r0
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f7fe fe40 	bl	8006374 <vTaskSwitchContext>
 80076f4:	f04f 0000 	mov.w	r0, #0
 80076f8:	f380 8811 	msr	BASEPRI, r0
 80076fc:	bc09      	pop	{r0, r3}
 80076fe:	6819      	ldr	r1, [r3, #0]
 8007700:	6808      	ldr	r0, [r1, #0]
 8007702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007706:	f01e 0f10 	tst.w	lr, #16
 800770a:	bf08      	it	eq
 800770c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007710:	f380 8809 	msr	PSP, r0
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	f3af 8000 	nop.w

08007720 <pxCurrentTCBConst>:
 8007720:	20007a34 	.word	0x20007a34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop

08007728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
}
 8007740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007742:	f7fe fd57 	bl	80061f4 <xTaskIncrementTick>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800774c:	4b06      	ldr	r3, [pc, #24]	@ (8007768 <SysTick_Handler+0x40>)
 800774e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	2300      	movs	r3, #0
 8007756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f383 8811 	msr	BASEPRI, r3
}
 800775e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007770:	4b0b      	ldr	r3, [pc, #44]	@ (80077a0 <vPortSetupTimerInterrupt+0x34>)
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007776:	4b0b      	ldr	r3, [pc, #44]	@ (80077a4 <vPortSetupTimerInterrupt+0x38>)
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800777c:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <vPortSetupTimerInterrupt+0x3c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a0a      	ldr	r2, [pc, #40]	@ (80077ac <vPortSetupTimerInterrupt+0x40>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	099b      	lsrs	r3, r3, #6
 8007788:	4a09      	ldr	r2, [pc, #36]	@ (80077b0 <vPortSetupTimerInterrupt+0x44>)
 800778a:	3b01      	subs	r3, #1
 800778c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800778e:	4b04      	ldr	r3, [pc, #16]	@ (80077a0 <vPortSetupTimerInterrupt+0x34>)
 8007790:	2207      	movs	r2, #7
 8007792:	601a      	str	r2, [r3, #0]
}
 8007794:	bf00      	nop
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	e000e010 	.word	0xe000e010
 80077a4:	e000e018 	.word	0xe000e018
 80077a8:	20000000 	.word	0x20000000
 80077ac:	10624dd3 	.word	0x10624dd3
 80077b0:	e000e014 	.word	0xe000e014

080077b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80077c4 <vPortEnableVFP+0x10>
 80077b8:	6801      	ldr	r1, [r0, #0]
 80077ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077be:	6001      	str	r1, [r0, #0]
 80077c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077c2:	bf00      	nop
 80077c4:	e000ed88 	.word	0xe000ed88

080077c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077ce:	f3ef 8305 	mrs	r3, IPSR
 80077d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b0f      	cmp	r3, #15
 80077d8:	d915      	bls.n	8007806 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077da:	4a18      	ldr	r2, [pc, #96]	@ (800783c <vPortValidateInterruptPriority+0x74>)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077e4:	4b16      	ldr	r3, [pc, #88]	@ (8007840 <vPortValidateInterruptPriority+0x78>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	7afa      	ldrb	r2, [r7, #11]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d20b      	bcs.n	8007806 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	607b      	str	r3, [r7, #4]
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	e7fd      	b.n	8007802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007806:	4b0f      	ldr	r3, [pc, #60]	@ (8007844 <vPortValidateInterruptPriority+0x7c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800780e:	4b0e      	ldr	r3, [pc, #56]	@ (8007848 <vPortValidateInterruptPriority+0x80>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d90b      	bls.n	800782e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	603b      	str	r3, [r7, #0]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <vPortValidateInterruptPriority+0x62>
	}
 800782e:	bf00      	nop
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	e000e3f0 	.word	0xe000e3f0
 8007840:	20008060 	.word	0x20008060
 8007844:	e000ed0c 	.word	0xe000ed0c
 8007848:	20008064 	.word	0x20008064

0800784c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08a      	sub	sp, #40	@ 0x28
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007854:	2300      	movs	r3, #0
 8007856:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007858:	f7fe fc10 	bl	800607c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800785c:	4b5a      	ldr	r3, [pc, #360]	@ (80079c8 <pvPortMalloc+0x17c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007864:	f000 f916 	bl	8007a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007868:	4b58      	ldr	r3, [pc, #352]	@ (80079cc <pvPortMalloc+0x180>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4013      	ands	r3, r2
 8007870:	2b00      	cmp	r3, #0
 8007872:	f040 8090 	bne.w	8007996 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01e      	beq.n	80078ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800787c:	2208      	movs	r2, #8
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4413      	add	r3, r2
 8007882:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b00      	cmp	r3, #0
 800788c:	d015      	beq.n	80078ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f023 0307 	bic.w	r3, r3, #7
 8007894:	3308      	adds	r3, #8
 8007896:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00b      	beq.n	80078ba <pvPortMalloc+0x6e>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	617b      	str	r3, [r7, #20]
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	e7fd      	b.n	80078b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d06a      	beq.n	8007996 <pvPortMalloc+0x14a>
 80078c0:	4b43      	ldr	r3, [pc, #268]	@ (80079d0 <pvPortMalloc+0x184>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d865      	bhi.n	8007996 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078ca:	4b42      	ldr	r3, [pc, #264]	@ (80079d4 <pvPortMalloc+0x188>)
 80078cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078ce:	4b41      	ldr	r3, [pc, #260]	@ (80079d4 <pvPortMalloc+0x188>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078d4:	e004      	b.n	80078e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d903      	bls.n	80078f2 <pvPortMalloc+0xa6>
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f1      	bne.n	80078d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078f2:	4b35      	ldr	r3, [pc, #212]	@ (80079c8 <pvPortMalloc+0x17c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d04c      	beq.n	8007996 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2208      	movs	r2, #8
 8007902:	4413      	add	r3, r2
 8007904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	1ad2      	subs	r2, r2, r3
 8007916:	2308      	movs	r3, #8
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	429a      	cmp	r2, r3
 800791c:	d920      	bls.n	8007960 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800791e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4413      	add	r3, r2
 8007924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <pvPortMalloc+0xfc>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	613b      	str	r3, [r7, #16]
}
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	e7fd      	b.n	8007944 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800795a:	69b8      	ldr	r0, [r7, #24]
 800795c:	f000 f8fc 	bl	8007b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007960:	4b1b      	ldr	r3, [pc, #108]	@ (80079d0 <pvPortMalloc+0x184>)
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	4a19      	ldr	r2, [pc, #100]	@ (80079d0 <pvPortMalloc+0x184>)
 800796c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800796e:	4b18      	ldr	r3, [pc, #96]	@ (80079d0 <pvPortMalloc+0x184>)
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	4b19      	ldr	r3, [pc, #100]	@ (80079d8 <pvPortMalloc+0x18c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d203      	bcs.n	8007982 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800797a:	4b15      	ldr	r3, [pc, #84]	@ (80079d0 <pvPortMalloc+0x184>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a16      	ldr	r2, [pc, #88]	@ (80079d8 <pvPortMalloc+0x18c>)
 8007980:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	4b11      	ldr	r3, [pc, #68]	@ (80079cc <pvPortMalloc+0x180>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	431a      	orrs	r2, r3
 800798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007996:	f7fe fb7f 	bl	8006098 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <pvPortMalloc+0x170>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	60fb      	str	r3, [r7, #12]
}
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	e7fd      	b.n	80079b8 <pvPortMalloc+0x16c>
	return pvReturn;
 80079bc:	69fb      	ldr	r3, [r7, #28]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3728      	adds	r7, #40	@ 0x28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20008c70 	.word	0x20008c70
 80079cc:	20008c7c 	.word	0x20008c7c
 80079d0:	20008c74 	.word	0x20008c74
 80079d4:	20008c68 	.word	0x20008c68
 80079d8:	20008c78 	.word	0x20008c78

080079dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d04a      	beq.n	8007a84 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079ee:	2308      	movs	r3, #8
 80079f0:	425b      	negs	r3, r3
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4413      	add	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	4b22      	ldr	r3, [pc, #136]	@ (8007a8c <vPortFree+0xb0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4013      	ands	r3, r2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10b      	bne.n	8007a22 <vPortFree+0x46>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	60fb      	str	r3, [r7, #12]
}
 8007a1c:	bf00      	nop
 8007a1e:	bf00      	nop
 8007a20:	e7fd      	b.n	8007a1e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00b      	beq.n	8007a42 <vPortFree+0x66>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	60bb      	str	r3, [r7, #8]
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	e7fd      	b.n	8007a3e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	4b11      	ldr	r3, [pc, #68]	@ (8007a8c <vPortFree+0xb0>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d019      	beq.n	8007a84 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d115      	bne.n	8007a84 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a8c <vPortFree+0xb0>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	43db      	mvns	r3, r3
 8007a62:	401a      	ands	r2, r3
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a68:	f7fe fb08 	bl	800607c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	4b07      	ldr	r3, [pc, #28]	@ (8007a90 <vPortFree+0xb4>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4413      	add	r3, r2
 8007a76:	4a06      	ldr	r2, [pc, #24]	@ (8007a90 <vPortFree+0xb4>)
 8007a78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a7a:	6938      	ldr	r0, [r7, #16]
 8007a7c:	f000 f86c 	bl	8007b58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a80:	f7fe fb0a 	bl	8006098 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a84:	bf00      	nop
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20008c7c 	.word	0x20008c7c
 8007a90:	20008c74 	.word	0x20008c74

08007a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a9a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007aa0:	4b27      	ldr	r3, [pc, #156]	@ (8007b40 <prvHeapInit+0xac>)
 8007aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00c      	beq.n	8007ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3307      	adds	r3, #7
 8007ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0307 	bic.w	r3, r3, #7
 8007aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b40 <prvHeapInit+0xac>)
 8007ac4:	4413      	add	r3, r2
 8007ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007acc:	4a1d      	ldr	r2, [pc, #116]	@ (8007b44 <prvHeapInit+0xb0>)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8007b44 <prvHeapInit+0xb0>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4413      	add	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1a9b      	subs	r3, r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0307 	bic.w	r3, r3, #7
 8007aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4a15      	ldr	r2, [pc, #84]	@ (8007b48 <prvHeapInit+0xb4>)
 8007af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007af6:	4b14      	ldr	r3, [pc, #80]	@ (8007b48 <prvHeapInit+0xb4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2200      	movs	r2, #0
 8007afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007afe:	4b12      	ldr	r3, [pc, #72]	@ (8007b48 <prvHeapInit+0xb4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	1ad2      	subs	r2, r2, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b14:	4b0c      	ldr	r3, [pc, #48]	@ (8007b48 <prvHeapInit+0xb4>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	4a0a      	ldr	r2, [pc, #40]	@ (8007b4c <prvHeapInit+0xb8>)
 8007b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	4a09      	ldr	r2, [pc, #36]	@ (8007b50 <prvHeapInit+0xbc>)
 8007b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b2c:	4b09      	ldr	r3, [pc, #36]	@ (8007b54 <prvHeapInit+0xc0>)
 8007b2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b32:	601a      	str	r2, [r3, #0]
}
 8007b34:	bf00      	nop
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	20008068 	.word	0x20008068
 8007b44:	20008c68 	.word	0x20008c68
 8007b48:	20008c70 	.word	0x20008c70
 8007b4c:	20008c78 	.word	0x20008c78
 8007b50:	20008c74 	.word	0x20008c74
 8007b54:	20008c7c 	.word	0x20008c7c

08007b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b60:	4b28      	ldr	r3, [pc, #160]	@ (8007c04 <prvInsertBlockIntoFreeList+0xac>)
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e002      	b.n	8007b6c <prvInsertBlockIntoFreeList+0x14>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d8f7      	bhi.n	8007b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	4413      	add	r3, r2
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d108      	bne.n	8007b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	441a      	add	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	441a      	add	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d118      	bne.n	8007be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	4b15      	ldr	r3, [pc, #84]	@ (8007c08 <prvInsertBlockIntoFreeList+0xb0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d00d      	beq.n	8007bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	441a      	add	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	e008      	b.n	8007be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007c08 <prvInsertBlockIntoFreeList+0xb0>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	e003      	b.n	8007be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d002      	beq.n	8007bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bf6:	bf00      	nop
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	20008c68 	.word	0x20008c68
 8007c08:	20008c70 	.word	0x20008c70

08007c0c <arm_rfft_32_fast_init_f32>:
 8007c0c:	b150      	cbz	r0, 8007c24 <arm_rfft_32_fast_init_f32+0x18>
 8007c0e:	b510      	push	{r4, lr}
 8007c10:	2110      	movs	r1, #16
 8007c12:	4604      	mov	r4, r0
 8007c14:	f000 fd58 	bl	80086c8 <arm_cfft_init_f32>
 8007c18:	b918      	cbnz	r0, 8007c22 <arm_rfft_32_fast_init_f32+0x16>
 8007c1a:	4b04      	ldr	r3, [pc, #16]	@ (8007c2c <arm_rfft_32_fast_init_f32+0x20>)
 8007c1c:	6163      	str	r3, [r4, #20]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	8222      	strh	r2, [r4, #16]
 8007c22:	bd10      	pop	{r4, pc}
 8007c24:	f04f 30ff 	mov.w	r0, #4294967295
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	080219ec 	.word	0x080219ec

08007c30 <arm_rfft_64_fast_init_f32>:
 8007c30:	b150      	cbz	r0, 8007c48 <arm_rfft_64_fast_init_f32+0x18>
 8007c32:	b510      	push	{r4, lr}
 8007c34:	2120      	movs	r1, #32
 8007c36:	4604      	mov	r4, r0
 8007c38:	f000 fd46 	bl	80086c8 <arm_cfft_init_f32>
 8007c3c:	b918      	cbnz	r0, 8007c46 <arm_rfft_64_fast_init_f32+0x16>
 8007c3e:	4b04      	ldr	r3, [pc, #16]	@ (8007c50 <arm_rfft_64_fast_init_f32+0x20>)
 8007c40:	6163      	str	r3, [r4, #20]
 8007c42:	2240      	movs	r2, #64	@ 0x40
 8007c44:	8222      	strh	r2, [r4, #16]
 8007c46:	bd10      	pop	{r4, pc}
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	0802626c 	.word	0x0802626c

08007c54 <arm_rfft_128_fast_init_f32>:
 8007c54:	b150      	cbz	r0, 8007c6c <arm_rfft_128_fast_init_f32+0x18>
 8007c56:	b510      	push	{r4, lr}
 8007c58:	2140      	movs	r1, #64	@ 0x40
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	f000 fd34 	bl	80086c8 <arm_cfft_init_f32>
 8007c60:	b918      	cbnz	r0, 8007c6a <arm_rfft_128_fast_init_f32+0x16>
 8007c62:	4b04      	ldr	r3, [pc, #16]	@ (8007c74 <arm_rfft_128_fast_init_f32+0x20>)
 8007c64:	6163      	str	r3, [r4, #20]
 8007c66:	2280      	movs	r2, #128	@ 0x80
 8007c68:	8222      	strh	r2, [r4, #16]
 8007c6a:	bd10      	pop	{r4, pc}
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	0801f3ec 	.word	0x0801f3ec

08007c78 <arm_rfft_256_fast_init_f32>:
 8007c78:	b158      	cbz	r0, 8007c92 <arm_rfft_256_fast_init_f32+0x1a>
 8007c7a:	b510      	push	{r4, lr}
 8007c7c:	2180      	movs	r1, #128	@ 0x80
 8007c7e:	4604      	mov	r4, r0
 8007c80:	f000 fd22 	bl	80086c8 <arm_cfft_init_f32>
 8007c84:	b920      	cbnz	r0, 8007c90 <arm_rfft_256_fast_init_f32+0x18>
 8007c86:	4b04      	ldr	r3, [pc, #16]	@ (8007c98 <arm_rfft_256_fast_init_f32+0x20>)
 8007c88:	6163      	str	r3, [r4, #20]
 8007c8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c8e:	8222      	strh	r2, [r4, #16]
 8007c90:	bd10      	pop	{r4, pc}
 8007c92:	f04f 30ff 	mov.w	r0, #4294967295
 8007c96:	4770      	bx	lr
 8007c98:	080215ec 	.word	0x080215ec

08007c9c <arm_rfft_512_fast_init_f32>:
 8007c9c:	b160      	cbz	r0, 8007cb8 <arm_rfft_512_fast_init_f32+0x1c>
 8007c9e:	b510      	push	{r4, lr}
 8007ca0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	f000 fd0f 	bl	80086c8 <arm_cfft_init_f32>
 8007caa:	b920      	cbnz	r0, 8007cb6 <arm_rfft_512_fast_init_f32+0x1a>
 8007cac:	4b04      	ldr	r3, [pc, #16]	@ (8007cc0 <arm_rfft_512_fast_init_f32+0x24>)
 8007cae:	6163      	str	r3, [r4, #20]
 8007cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cb4:	8222      	strh	r2, [r4, #16]
 8007cb6:	bd10      	pop	{r4, pc}
 8007cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	08025a6c 	.word	0x08025a6c

08007cc4 <arm_rfft_1024_fast_init_f32>:
 8007cc4:	b160      	cbz	r0, 8007ce0 <arm_rfft_1024_fast_init_f32+0x1c>
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ccc:	4604      	mov	r4, r0
 8007cce:	f000 fcfb 	bl	80086c8 <arm_cfft_init_f32>
 8007cd2:	b920      	cbnz	r0, 8007cde <arm_rfft_1024_fast_init_f32+0x1a>
 8007cd4:	4b04      	ldr	r3, [pc, #16]	@ (8007ce8 <arm_rfft_1024_fast_init_f32+0x24>)
 8007cd6:	6163      	str	r3, [r4, #20]
 8007cd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007cdc:	8222      	strh	r2, [r4, #16]
 8007cde:	bd10      	pop	{r4, pc}
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	0801e3ec 	.word	0x0801e3ec

08007cec <arm_rfft_2048_fast_init_f32>:
 8007cec:	b160      	cbz	r0, 8007d08 <arm_rfft_2048_fast_init_f32+0x1c>
 8007cee:	b510      	push	{r4, lr}
 8007cf0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	f000 fce7 	bl	80086c8 <arm_cfft_init_f32>
 8007cfa:	b920      	cbnz	r0, 8007d06 <arm_rfft_2048_fast_init_f32+0x1a>
 8007cfc:	4b04      	ldr	r3, [pc, #16]	@ (8007d10 <arm_rfft_2048_fast_init_f32+0x24>)
 8007cfe:	6163      	str	r3, [r4, #20]
 8007d00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d04:	8222      	strh	r2, [r4, #16]
 8007d06:	bd10      	pop	{r4, pc}
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	0801f5ec 	.word	0x0801f5ec

08007d14 <arm_rfft_4096_fast_init_f32>:
 8007d14:	b160      	cbz	r0, 8007d30 <arm_rfft_4096_fast_init_f32+0x1c>
 8007d16:	b510      	push	{r4, lr}
 8007d18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	f000 fcd3 	bl	80086c8 <arm_cfft_init_f32>
 8007d22:	b920      	cbnz	r0, 8007d2e <arm_rfft_4096_fast_init_f32+0x1a>
 8007d24:	4b04      	ldr	r3, [pc, #16]	@ (8007d38 <arm_rfft_4096_fast_init_f32+0x24>)
 8007d26:	6163      	str	r3, [r4, #20]
 8007d28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007d2c:	8222      	strh	r2, [r4, #16]
 8007d2e:	bd10      	pop	{r4, pc}
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	08021a6c 	.word	0x08021a6c

08007d3c <arm_rfft_fast_init_f32>:
 8007d3c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007d40:	d024      	beq.n	8007d8c <arm_rfft_fast_init_f32+0x50>
 8007d42:	d807      	bhi.n	8007d54 <arm_rfft_fast_init_f32+0x18>
 8007d44:	2980      	cmp	r1, #128	@ 0x80
 8007d46:	d01c      	beq.n	8007d82 <arm_rfft_fast_init_f32+0x46>
 8007d48:	d90c      	bls.n	8007d64 <arm_rfft_fast_init_f32+0x28>
 8007d4a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007d4e:	d11a      	bne.n	8007d86 <arm_rfft_fast_init_f32+0x4a>
 8007d50:	4b0f      	ldr	r3, [pc, #60]	@ (8007d90 <arm_rfft_fast_init_f32+0x54>)
 8007d52:	4718      	bx	r3
 8007d54:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007d58:	d011      	beq.n	8007d7e <arm_rfft_fast_init_f32+0x42>
 8007d5a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007d5e:	d107      	bne.n	8007d70 <arm_rfft_fast_init_f32+0x34>
 8007d60:	4b0c      	ldr	r3, [pc, #48]	@ (8007d94 <arm_rfft_fast_init_f32+0x58>)
 8007d62:	4718      	bx	r3
 8007d64:	2920      	cmp	r1, #32
 8007d66:	d008      	beq.n	8007d7a <arm_rfft_fast_init_f32+0x3e>
 8007d68:	2940      	cmp	r1, #64	@ 0x40
 8007d6a:	d10c      	bne.n	8007d86 <arm_rfft_fast_init_f32+0x4a>
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d98 <arm_rfft_fast_init_f32+0x5c>)
 8007d6e:	e7f0      	b.n	8007d52 <arm_rfft_fast_init_f32+0x16>
 8007d70:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007d74:	d107      	bne.n	8007d86 <arm_rfft_fast_init_f32+0x4a>
 8007d76:	4b09      	ldr	r3, [pc, #36]	@ (8007d9c <arm_rfft_fast_init_f32+0x60>)
 8007d78:	e7eb      	b.n	8007d52 <arm_rfft_fast_init_f32+0x16>
 8007d7a:	4b09      	ldr	r3, [pc, #36]	@ (8007da0 <arm_rfft_fast_init_f32+0x64>)
 8007d7c:	e7e9      	b.n	8007d52 <arm_rfft_fast_init_f32+0x16>
 8007d7e:	4b09      	ldr	r3, [pc, #36]	@ (8007da4 <arm_rfft_fast_init_f32+0x68>)
 8007d80:	e7e7      	b.n	8007d52 <arm_rfft_fast_init_f32+0x16>
 8007d82:	4b09      	ldr	r3, [pc, #36]	@ (8007da8 <arm_rfft_fast_init_f32+0x6c>)
 8007d84:	e7e5      	b.n	8007d52 <arm_rfft_fast_init_f32+0x16>
 8007d86:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8a:	4770      	bx	lr
 8007d8c:	4b07      	ldr	r3, [pc, #28]	@ (8007dac <arm_rfft_fast_init_f32+0x70>)
 8007d8e:	e7e0      	b.n	8007d52 <arm_rfft_fast_init_f32+0x16>
 8007d90:	08007c79 	.word	0x08007c79
 8007d94:	08007d15 	.word	0x08007d15
 8007d98:	08007c31 	.word	0x08007c31
 8007d9c:	08007cc5 	.word	0x08007cc5
 8007da0:	08007c0d 	.word	0x08007c0d
 8007da4:	08007ced 	.word	0x08007ced
 8007da8:	08007c55 	.word	0x08007c55
 8007dac:	08007c9d 	.word	0x08007c9d

08007db0 <stage_rfft_f32>:
 8007db0:	b410      	push	{r4}
 8007db2:	edd1 7a00 	vldr	s15, [r1]
 8007db6:	ed91 7a01 	vldr	s14, [r1, #4]
 8007dba:	8804      	ldrh	r4, [r0, #0]
 8007dbc:	6940      	ldr	r0, [r0, #20]
 8007dbe:	ee37 7a07 	vadd.f32	s14, s14, s14
 8007dc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007dc6:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8007dca:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007dce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007dd2:	3c01      	subs	r4, #1
 8007dd4:	ee26 7a84 	vmul.f32	s14, s13, s8
 8007dd8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007ddc:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8007de0:	ed82 7a00 	vstr	s14, [r2]
 8007de4:	edc2 7a01 	vstr	s15, [r2, #4]
 8007de8:	3010      	adds	r0, #16
 8007dea:	3210      	adds	r2, #16
 8007dec:	3b08      	subs	r3, #8
 8007dee:	3110      	adds	r1, #16
 8007df0:	ed11 5a02 	vldr	s10, [r1, #-8]
 8007df4:	ed93 7a02 	vldr	s14, [r3, #8]
 8007df8:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007dfc:	edd3 4a03 	vldr	s9, [r3, #12]
 8007e00:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007e04:	ed10 6a01 	vldr	s12, [r0, #-4]
 8007e08:	ee77 5a45 	vsub.f32	s11, s14, s10
 8007e0c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007e10:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8007e14:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8007e18:	ee66 5a25 	vmul.f32	s11, s12, s11
 8007e1c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007e20:	ee37 7a23 	vadd.f32	s14, s14, s7
 8007e24:	ee66 6a85 	vmul.f32	s13, s13, s10
 8007e28:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007e2c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007e30:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007e34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e38:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007e3c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007e40:	3c01      	subs	r4, #1
 8007e42:	ed02 7a02 	vstr	s14, [r2, #-8]
 8007e46:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007e4a:	f1a3 0308 	sub.w	r3, r3, #8
 8007e4e:	f101 0108 	add.w	r1, r1, #8
 8007e52:	f100 0008 	add.w	r0, r0, #8
 8007e56:	f102 0208 	add.w	r2, r2, #8
 8007e5a:	d1c9      	bne.n	8007df0 <stage_rfft_f32+0x40>
 8007e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop

08007e64 <merge_rfft_f32>:
 8007e64:	b410      	push	{r4}
 8007e66:	edd1 7a00 	vldr	s15, [r1]
 8007e6a:	edd1 6a01 	vldr	s13, [r1, #4]
 8007e6e:	8804      	ldrh	r4, [r0, #0]
 8007e70:	6940      	ldr	r0, [r0, #20]
 8007e72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007e76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e7a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8007e7e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007e82:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007e86:	3c01      	subs	r4, #1
 8007e88:	ed82 7a00 	vstr	s14, [r2]
 8007e8c:	edc2 7a01 	vstr	s15, [r2, #4]
 8007e90:	b3dc      	cbz	r4, 8007f0a <merge_rfft_f32+0xa6>
 8007e92:	00e3      	lsls	r3, r4, #3
 8007e94:	3b08      	subs	r3, #8
 8007e96:	440b      	add	r3, r1
 8007e98:	3010      	adds	r0, #16
 8007e9a:	3210      	adds	r2, #16
 8007e9c:	3110      	adds	r1, #16
 8007e9e:	ed11 5a02 	vldr	s10, [r1, #-8]
 8007ea2:	ed93 7a02 	vldr	s14, [r3, #8]
 8007ea6:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007eaa:	edd3 4a03 	vldr	s9, [r3, #12]
 8007eae:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007eb2:	ed10 6a01 	vldr	s12, [r0, #-4]
 8007eb6:	ee75 5a47 	vsub.f32	s11, s10, s14
 8007eba:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007ebe:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8007ec2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8007ec6:	ee66 5a25 	vmul.f32	s11, s12, s11
 8007eca:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007ece:	ee37 7a63 	vsub.f32	s14, s14, s7
 8007ed2:	ee66 6a85 	vmul.f32	s13, s13, s10
 8007ed6:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007eda:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007ede:	ee37 7a46 	vsub.f32	s14, s14, s12
 8007ee2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ee6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007eea:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007eee:	3c01      	subs	r4, #1
 8007ef0:	ed02 7a02 	vstr	s14, [r2, #-8]
 8007ef4:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007ef8:	f1a3 0308 	sub.w	r3, r3, #8
 8007efc:	f101 0108 	add.w	r1, r1, #8
 8007f00:	f100 0008 	add.w	r0, r0, #8
 8007f04:	f102 0208 	add.w	r2, r2, #8
 8007f08:	d1c9      	bne.n	8007e9e <merge_rfft_f32+0x3a>
 8007f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <arm_rfft_fast_f32>:
 8007f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f14:	461c      	mov	r4, r3
 8007f16:	4605      	mov	r5, r0
 8007f18:	4616      	mov	r6, r2
 8007f1a:	b14b      	cbz	r3, 8007f30 <arm_rfft_fast_f32+0x20>
 8007f1c:	f7ff ffa2 	bl	8007e64 <merge_rfft_f32>
 8007f20:	4622      	mov	r2, r4
 8007f22:	4631      	mov	r1, r6
 8007f24:	4628      	mov	r0, r5
 8007f26:	2301      	movs	r3, #1
 8007f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2c:	f000 bb34 	b.w	8008598 <arm_cfft_f32>
 8007f30:	460f      	mov	r7, r1
 8007f32:	461a      	mov	r2, r3
 8007f34:	2301      	movs	r3, #1
 8007f36:	f000 fb2f 	bl	8008598 <arm_cfft_f32>
 8007f3a:	4632      	mov	r2, r6
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	4628      	mov	r0, r5
 8007f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f44:	f7ff bf34 	b.w	8007db0 <stage_rfft_f32>

08007f48 <arm_cfft_radix8by2_f32>:
 8007f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4c:	ed2d 8b08 	vpush	{d8-d11}
 8007f50:	f8b0 c000 	ldrh.w	ip, [r0]
 8007f54:	6842      	ldr	r2, [r0, #4]
 8007f56:	4607      	mov	r7, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8007f5e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8007f62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007f66:	b082      	sub	sp, #8
 8007f68:	f000 80b0 	beq.w	80080cc <arm_cfft_radix8by2_f32+0x184>
 8007f6c:	008c      	lsls	r4, r1, #2
 8007f6e:	3410      	adds	r4, #16
 8007f70:	f100 0310 	add.w	r3, r0, #16
 8007f74:	1906      	adds	r6, r0, r4
 8007f76:	3210      	adds	r2, #16
 8007f78:	4444      	add	r4, r8
 8007f7a:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8007f7e:	f108 0510 	add.w	r5, r8, #16
 8007f82:	ed15 2a04 	vldr	s4, [r5, #-16]
 8007f86:	ed55 2a03 	vldr	s5, [r5, #-12]
 8007f8a:	ed54 4a04 	vldr	s9, [r4, #-16]
 8007f8e:	ed14 4a03 	vldr	s8, [r4, #-12]
 8007f92:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007f96:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007f9a:	ed53 3a04 	vldr	s7, [r3, #-16]
 8007f9e:	ed15 0a02 	vldr	s0, [r5, #-8]
 8007fa2:	ed55 0a01 	vldr	s1, [r5, #-4]
 8007fa6:	ed56 6a04 	vldr	s13, [r6, #-16]
 8007faa:	ed16 3a03 	vldr	s6, [r6, #-12]
 8007fae:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007fb2:	ed13 5a02 	vldr	s10, [r3, #-8]
 8007fb6:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007fba:	ed16 1a02 	vldr	s2, [r6, #-8]
 8007fbe:	ed56 1a01 	vldr	s3, [r6, #-4]
 8007fc2:	ee73 ba82 	vadd.f32	s23, s7, s4
 8007fc6:	ee37 ba22 	vadd.f32	s22, s14, s5
 8007fca:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8007fce:	ee33 9a04 	vadd.f32	s18, s6, s8
 8007fd2:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8007fd6:	ee75 aa00 	vadd.f32	s21, s10, s0
 8007fda:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8007fde:	ee71 8a06 	vadd.f32	s17, s2, s12
 8007fe2:	ed43 ba04 	vstr	s23, [r3, #-16]
 8007fe6:	ed03 ba03 	vstr	s22, [r3, #-12]
 8007fea:	ed43 aa02 	vstr	s21, [r3, #-8]
 8007fee:	ed03 aa01 	vstr	s20, [r3, #-4]
 8007ff2:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007ff6:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007ffa:	ed06 9a03 	vstr	s18, [r6, #-12]
 8007ffe:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008002:	ee37 7a62 	vsub.f32	s14, s14, s5
 8008006:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800800a:	ee34 4a43 	vsub.f32	s8, s8, s6
 800800e:	ed52 6a03 	vldr	s13, [r2, #-12]
 8008012:	ed12 3a04 	vldr	s6, [r2, #-16]
 8008016:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800801a:	ee27 8a26 	vmul.f32	s16, s14, s13
 800801e:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8008022:	ee23 2a83 	vmul.f32	s4, s7, s6
 8008026:	ee64 4a83 	vmul.f32	s9, s9, s6
 800802a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800802e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8008032:	ee64 6a26 	vmul.f32	s13, s8, s13
 8008036:	ee24 4a03 	vmul.f32	s8, s8, s6
 800803a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800803e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008042:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8008046:	ee32 3a08 	vadd.f32	s6, s4, s16
 800804a:	ed05 7a03 	vstr	s14, [r5, #-12]
 800804e:	ed05 3a04 	vstr	s6, [r5, #-16]
 8008052:	ed04 4a04 	vstr	s8, [r4, #-16]
 8008056:	ed44 6a03 	vstr	s13, [r4, #-12]
 800805a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800805e:	ee76 6a41 	vsub.f32	s13, s12, s2
 8008062:	ee35 5a40 	vsub.f32	s10, s10, s0
 8008066:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800806a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800806e:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008072:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008076:	ee66 4a87 	vmul.f32	s9, s13, s14
 800807a:	ee25 4a25 	vmul.f32	s8, s10, s11
 800807e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008082:	ee25 5a07 	vmul.f32	s10, s10, s14
 8008086:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800808a:	ee26 7a07 	vmul.f32	s14, s12, s14
 800808e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008092:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008096:	ee74 5a23 	vadd.f32	s11, s8, s7
 800809a:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800809e:	ee37 7a26 	vadd.f32	s14, s14, s13
 80080a2:	3310      	adds	r3, #16
 80080a4:	4563      	cmp	r3, ip
 80080a6:	ed45 5a02 	vstr	s11, [r5, #-8]
 80080aa:	f106 0610 	add.w	r6, r6, #16
 80080ae:	ed45 7a01 	vstr	s15, [r5, #-4]
 80080b2:	f102 0210 	add.w	r2, r2, #16
 80080b6:	ed04 6a02 	vstr	s12, [r4, #-8]
 80080ba:	ed04 7a01 	vstr	s14, [r4, #-4]
 80080be:	f105 0510 	add.w	r5, r5, #16
 80080c2:	f104 0410 	add.w	r4, r4, #16
 80080c6:	f47f af5c 	bne.w	8007f82 <arm_cfft_radix8by2_f32+0x3a>
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	b289      	uxth	r1, r1
 80080ce:	2302      	movs	r3, #2
 80080d0:	9101      	str	r1, [sp, #4]
 80080d2:	f000 fb4b 	bl	800876c <arm_radix8_butterfly_f32>
 80080d6:	9901      	ldr	r1, [sp, #4]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	4640      	mov	r0, r8
 80080dc:	2302      	movs	r3, #2
 80080de:	b002      	add	sp, #8
 80080e0:	ecbd 8b08 	vpop	{d8-d11}
 80080e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080e8:	f000 bb40 	b.w	800876c <arm_radix8_butterfly_f32>

080080ec <arm_cfft_radix8by4_f32>:
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	ed2d 8b0a 	vpush	{d8-d12}
 80080f4:	8803      	ldrh	r3, [r0, #0]
 80080f6:	6842      	ldr	r2, [r0, #4]
 80080f8:	b08d      	sub	sp, #52	@ 0x34
 80080fa:	085b      	lsrs	r3, r3, #1
 80080fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80080fe:	4608      	mov	r0, r1
 8008100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008104:	edd1 5a00 	vldr	s11, [r1]
 8008108:	edd0 7a00 	vldr	s15, [r0]
 800810c:	edd1 3a01 	vldr	s7, [r1, #4]
 8008110:	ed90 5a01 	vldr	s10, [r0, #4]
 8008114:	9108      	str	r1, [sp, #32]
 8008116:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800811a:	ed96 7a00 	vldr	s14, [r6]
 800811e:	ed96 4a01 	vldr	s8, [r6, #4]
 8008122:	9607      	str	r6, [sp, #28]
 8008124:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8008128:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800812c:	edd8 4a00 	vldr	s9, [r8]
 8008130:	ed98 3a01 	vldr	s6, [r8, #4]
 8008134:	ee77 6a06 	vadd.f32	s13, s14, s12
 8008138:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800813c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008140:	4604      	mov	r4, r0
 8008142:	edc0 6a00 	vstr	s13, [r0]
 8008146:	edd6 5a01 	vldr	s11, [r6, #4]
 800814a:	edd8 2a01 	vldr	s5, [r8, #4]
 800814e:	ee75 6a23 	vadd.f32	s13, s10, s7
 8008152:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008156:	ee36 6a47 	vsub.f32	s12, s12, s14
 800815a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800815e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8008162:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008166:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800816a:	3408      	adds	r4, #8
 800816c:	ee35 4a47 	vsub.f32	s8, s10, s14
 8008170:	460d      	mov	r5, r1
 8008172:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008176:	4637      	mov	r7, r6
 8008178:	9402      	str	r4, [sp, #8]
 800817a:	3708      	adds	r7, #8
 800817c:	460c      	mov	r4, r1
 800817e:	3508      	adds	r5, #8
 8008180:	0859      	lsrs	r1, r3, #1
 8008182:	9109      	str	r1, [sp, #36]	@ 0x24
 8008184:	9706      	str	r7, [sp, #24]
 8008186:	9505      	str	r5, [sp, #20]
 8008188:	f102 0708 	add.w	r7, r2, #8
 800818c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8008190:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008194:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8008198:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800819c:	ee77 7a83 	vadd.f32	s15, s15, s6
 80081a0:	ee34 5a24 	vadd.f32	s10, s8, s9
 80081a4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80081a8:	3902      	subs	r1, #2
 80081aa:	4645      	mov	r5, r8
 80081ac:	9701      	str	r7, [sp, #4]
 80081ae:	f102 0c18 	add.w	ip, r2, #24
 80081b2:	f102 0710 	add.w	r7, r2, #16
 80081b6:	3508      	adds	r5, #8
 80081b8:	0849      	lsrs	r1, r1, #1
 80081ba:	edc0 5a01 	vstr	s11, [r0, #4]
 80081be:	9703      	str	r7, [sp, #12]
 80081c0:	edc6 3a00 	vstr	s7, [r6]
 80081c4:	ed86 5a01 	vstr	s10, [r6, #4]
 80081c8:	f8cd c000 	str.w	ip, [sp]
 80081cc:	ed84 6a00 	vstr	s12, [r4]
 80081d0:	edc4 6a01 	vstr	s13, [r4, #4]
 80081d4:	9504      	str	r5, [sp, #16]
 80081d6:	edc8 7a00 	vstr	s15, [r8]
 80081da:	ed88 7a01 	vstr	s14, [r8, #4]
 80081de:	910b      	str	r1, [sp, #44]	@ 0x2c
 80081e0:	f000 8138 	beq.w	8008454 <arm_cfft_radix8by4_f32+0x368>
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	3b0c      	subs	r3, #12
 80081e8:	f1a6 0c0c 	sub.w	ip, r6, #12
 80081ec:	f106 0510 	add.w	r5, r6, #16
 80081f0:	4626      	mov	r6, r4
 80081f2:	46bb      	mov	fp, r7
 80081f4:	f102 0a20 	add.w	sl, r2, #32
 80081f8:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 80081fc:	f106 0710 	add.w	r7, r6, #16
 8008200:	4443      	add	r3, r8
 8008202:	f100 0e10 	add.w	lr, r0, #16
 8008206:	3c0c      	subs	r4, #12
 8008208:	f1a8 060c 	sub.w	r6, r8, #12
 800820c:	f108 0210 	add.w	r2, r8, #16
 8008210:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8008214:	ed57 5a02 	vldr	s11, [r7, #-8]
 8008218:	ed55 7a02 	vldr	s15, [r5, #-8]
 800821c:	ed52 1a02 	vldr	s3, [r2, #-8]
 8008220:	ed57 6a01 	vldr	s13, [r7, #-4]
 8008224:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8008228:	ed12 1a01 	vldr	s2, [r2, #-4]
 800822c:	ed15 8a01 	vldr	s16, [r5, #-4]
 8008230:	ee35 4a25 	vadd.f32	s8, s10, s11
 8008234:	ee30 6a26 	vadd.f32	s12, s0, s13
 8008238:	ee37 7a84 	vadd.f32	s14, s15, s8
 800823c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008240:	ee37 7a21 	vadd.f32	s14, s14, s3
 8008244:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008248:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800824c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8008250:	ed52 6a01 	vldr	s13, [r2, #-4]
 8008254:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008258:	ee78 aa25 	vadd.f32	s21, s16, s11
 800825c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008260:	ee70 3a67 	vsub.f32	s7, s0, s15
 8008264:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8008268:	ed96 7a02 	vldr	s14, [r6, #8]
 800826c:	ed9c 2a02 	vldr	s4, [ip, #8]
 8008270:	ed94 ba02 	vldr	s22, [r4, #8]
 8008274:	edd3 9a02 	vldr	s19, [r3, #8]
 8008278:	edd6 2a01 	vldr	s5, [r6, #4]
 800827c:	ed9c 9a01 	vldr	s18, [ip, #4]
 8008280:	ed93 5a01 	vldr	s10, [r3, #4]
 8008284:	edd4 0a01 	vldr	s1, [r4, #4]
 8008288:	ee72 6a07 	vadd.f32	s13, s4, s14
 800828c:	ee32 2a47 	vsub.f32	s4, s4, s14
 8008290:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8008294:	ee79 4a22 	vadd.f32	s9, s18, s5
 8008298:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800829c:	ee79 2a62 	vsub.f32	s5, s18, s5
 80082a0:	ed8c 7a02 	vstr	s14, [ip, #8]
 80082a4:	ed94 7a01 	vldr	s14, [r4, #4]
 80082a8:	edd3 8a01 	vldr	s17, [r3, #4]
 80082ac:	ee34 7a87 	vadd.f32	s14, s9, s14
 80082b0:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80082b4:	ee37 7a28 	vadd.f32	s14, s14, s17
 80082b8:	ee32 9a60 	vsub.f32	s18, s4, s1
 80082bc:	ed8c 7a01 	vstr	s14, [ip, #4]
 80082c0:	ed1b 7a01 	vldr	s14, [fp, #-4]
 80082c4:	ed1b aa02 	vldr	s20, [fp, #-8]
 80082c8:	ee73 8a22 	vadd.f32	s17, s6, s5
 80082cc:	ee39 9a05 	vadd.f32	s18, s18, s10
 80082d0:	ee7a aac1 	vsub.f32	s21, s21, s2
 80082d4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80082d8:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80082dc:	ee69 ba07 	vmul.f32	s23, s18, s14
 80082e0:	ee6a aa87 	vmul.f32	s21, s21, s14
 80082e4:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80082e8:	ee63 ca87 	vmul.f32	s25, s7, s14
 80082ec:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80082f0:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80082f4:	ee68 8a87 	vmul.f32	s17, s17, s14
 80082f8:	ee73 3aea 	vsub.f32	s7, s7, s21
 80082fc:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008300:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8008304:	ee3b aaca 	vsub.f32	s20, s23, s20
 8008308:	ee34 4a67 	vsub.f32	s8, s8, s15
 800830c:	ee76 6acb 	vsub.f32	s13, s13, s22
 8008310:	ee36 6a48 	vsub.f32	s12, s12, s16
 8008314:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8008318:	ed05 7a02 	vstr	s14, [r5, #-8]
 800831c:	ed45 3a01 	vstr	s7, [r5, #-4]
 8008320:	edc4 8a01 	vstr	s17, [r4, #4]
 8008324:	ed84 aa02 	vstr	s20, [r4, #8]
 8008328:	ed5a 3a04 	vldr	s7, [sl, #-16]
 800832c:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8008330:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8008334:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8008338:	ee34 4a61 	vsub.f32	s8, s8, s3
 800833c:	ee36 6a41 	vsub.f32	s12, s12, s2
 8008340:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8008344:	ee66 9a26 	vmul.f32	s19, s12, s13
 8008348:	ee24 9a23 	vmul.f32	s18, s8, s7
 800834c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8008350:	ee24 4a26 	vmul.f32	s8, s8, s13
 8008354:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008358:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800835c:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8008360:	ee36 6a44 	vsub.f32	s12, s12, s8
 8008364:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008368:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800836c:	ee79 3a29 	vadd.f32	s7, s18, s19
 8008370:	ee75 6a60 	vsub.f32	s13, s10, s1
 8008374:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8008378:	ee77 7a80 	vadd.f32	s15, s15, s0
 800837c:	ed47 3a02 	vstr	s7, [r7, #-8]
 8008380:	ed07 6a01 	vstr	s12, [r7, #-4]
 8008384:	ed86 7a01 	vstr	s14, [r6, #4]
 8008388:	ed86 4a02 	vstr	s8, [r6, #8]
 800838c:	ee35 6a81 	vadd.f32	s12, s11, s2
 8008390:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8008394:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 8008398:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 800839c:	ee33 3a62 	vsub.f32	s6, s6, s5
 80083a0:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80083a4:	ee67 2a26 	vmul.f32	s5, s14, s13
 80083a8:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80083ac:	ee26 5a25 	vmul.f32	s10, s12, s11
 80083b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80083b4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80083b8:	ee27 7a25 	vmul.f32	s14, s14, s11
 80083bc:	ee63 6a26 	vmul.f32	s13, s6, s13
 80083c0:	ee23 3a25 	vmul.f32	s6, s6, s11
 80083c4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80083c8:	ee75 5a24 	vadd.f32	s11, s10, s9
 80083cc:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80083d0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80083d4:	3901      	subs	r1, #1
 80083d6:	ed42 5a02 	vstr	s11, [r2, #-8]
 80083da:	ed42 7a01 	vstr	s15, [r2, #-4]
 80083de:	f10e 0e08 	add.w	lr, lr, #8
 80083e2:	ed83 3a02 	vstr	s6, [r3, #8]
 80083e6:	ed83 7a01 	vstr	s14, [r3, #4]
 80083ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80083ee:	f10b 0b08 	add.w	fp, fp, #8
 80083f2:	f105 0508 	add.w	r5, r5, #8
 80083f6:	f1a4 0408 	sub.w	r4, r4, #8
 80083fa:	f10a 0a10 	add.w	sl, sl, #16
 80083fe:	f107 0708 	add.w	r7, r7, #8
 8008402:	f1a6 0608 	sub.w	r6, r6, #8
 8008406:	f109 0918 	add.w	r9, r9, #24
 800840a:	f102 0208 	add.w	r2, r2, #8
 800840e:	f1a3 0308 	sub.w	r3, r3, #8
 8008412:	f47f aefd 	bne.w	8008210 <arm_cfft_radix8by4_f32+0x124>
 8008416:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008418:	9902      	ldr	r1, [sp, #8]
 800841a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800841e:	9102      	str	r1, [sp, #8]
 8008420:	9901      	ldr	r1, [sp, #4]
 8008422:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008426:	9101      	str	r1, [sp, #4]
 8008428:	9906      	ldr	r1, [sp, #24]
 800842a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800842e:	9106      	str	r1, [sp, #24]
 8008430:	9903      	ldr	r1, [sp, #12]
 8008432:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8008436:	9103      	str	r1, [sp, #12]
 8008438:	9905      	ldr	r1, [sp, #20]
 800843a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800843e:	9105      	str	r1, [sp, #20]
 8008440:	9904      	ldr	r1, [sp, #16]
 8008442:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8008446:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800844a:	9204      	str	r2, [sp, #16]
 800844c:	9a00      	ldr	r2, [sp, #0]
 800844e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	9902      	ldr	r1, [sp, #8]
 8008456:	9d05      	ldr	r5, [sp, #20]
 8008458:	ed91 4a00 	vldr	s8, [r1]
 800845c:	edd5 6a00 	vldr	s13, [r5]
 8008460:	9b06      	ldr	r3, [sp, #24]
 8008462:	9c04      	ldr	r4, [sp, #16]
 8008464:	edd3 7a00 	vldr	s15, [r3]
 8008468:	ed94 3a00 	vldr	s6, [r4]
 800846c:	edd5 4a01 	vldr	s9, [r5, #4]
 8008470:	edd1 3a01 	vldr	s7, [r1, #4]
 8008474:	ed94 2a01 	vldr	s4, [r4, #4]
 8008478:	ed93 7a01 	vldr	s14, [r3, #4]
 800847c:	9a01      	ldr	r2, [sp, #4]
 800847e:	ee34 6a26 	vadd.f32	s12, s8, s13
 8008482:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8008486:	ee37 5a86 	vadd.f32	s10, s15, s12
 800848a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800848e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008492:	ee74 6a66 	vsub.f32	s13, s8, s13
 8008496:	ed81 5a00 	vstr	s10, [r1]
 800849a:	ed93 5a01 	vldr	s10, [r3, #4]
 800849e:	edd4 4a01 	vldr	s9, [r4, #4]
 80084a2:	ee35 5a85 	vadd.f32	s10, s11, s10
 80084a6:	ee37 4a26 	vadd.f32	s8, s14, s13
 80084aa:	ee35 5a24 	vadd.f32	s10, s10, s9
 80084ae:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80084b2:	ed81 5a01 	vstr	s10, [r1, #4]
 80084b6:	edd2 1a00 	vldr	s3, [r2]
 80084ba:	edd2 2a01 	vldr	s5, [r2, #4]
 80084be:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80084c2:	ee34 5a83 	vadd.f32	s10, s9, s6
 80084c6:	ee34 4a42 	vsub.f32	s8, s8, s4
 80084ca:	ee36 6a67 	vsub.f32	s12, s12, s15
 80084ce:	ee64 4a21 	vmul.f32	s9, s8, s3
 80084d2:	ee24 4a22 	vmul.f32	s8, s8, s5
 80084d6:	ee65 2a22 	vmul.f32	s5, s10, s5
 80084da:	ee25 5a21 	vmul.f32	s10, s10, s3
 80084de:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80084e2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80084e6:	edc3 2a00 	vstr	s5, [r3]
 80084ea:	ed83 5a01 	vstr	s10, [r3, #4]
 80084ee:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80084f2:	9b03      	ldr	r3, [sp, #12]
 80084f4:	ee36 6a43 	vsub.f32	s12, s12, s6
 80084f8:	ed93 4a01 	vldr	s8, [r3, #4]
 80084fc:	ed93 5a00 	vldr	s10, [r3]
 8008500:	9b00      	ldr	r3, [sp, #0]
 8008502:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8008506:	ee66 4a05 	vmul.f32	s9, s12, s10
 800850a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800850e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008512:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008516:	ee35 6a46 	vsub.f32	s12, s10, s12
 800851a:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800851e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8008522:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008526:	ed85 6a01 	vstr	s12, [r5, #4]
 800852a:	edc5 5a00 	vstr	s11, [r5]
 800852e:	edd3 5a01 	vldr	s11, [r3, #4]
 8008532:	edd3 6a00 	vldr	s13, [r3]
 8008536:	ee37 7a02 	vadd.f32	s14, s14, s4
 800853a:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800853e:	ee27 6a26 	vmul.f32	s12, s14, s13
 8008542:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008546:	ee27 7a25 	vmul.f32	s14, s14, s11
 800854a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800854e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008552:	ee76 7a27 	vadd.f32	s15, s12, s15
 8008556:	ed84 7a01 	vstr	s14, [r4, #4]
 800855a:	edc4 7a00 	vstr	s15, [r4]
 800855e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008560:	9100      	str	r1, [sp, #0]
 8008562:	6862      	ldr	r2, [r4, #4]
 8008564:	2304      	movs	r3, #4
 8008566:	f000 f901 	bl	800876c <arm_radix8_butterfly_f32>
 800856a:	9807      	ldr	r0, [sp, #28]
 800856c:	9900      	ldr	r1, [sp, #0]
 800856e:	6862      	ldr	r2, [r4, #4]
 8008570:	2304      	movs	r3, #4
 8008572:	f000 f8fb 	bl	800876c <arm_radix8_butterfly_f32>
 8008576:	9808      	ldr	r0, [sp, #32]
 8008578:	9900      	ldr	r1, [sp, #0]
 800857a:	6862      	ldr	r2, [r4, #4]
 800857c:	2304      	movs	r3, #4
 800857e:	f000 f8f5 	bl	800876c <arm_radix8_butterfly_f32>
 8008582:	9900      	ldr	r1, [sp, #0]
 8008584:	6862      	ldr	r2, [r4, #4]
 8008586:	4640      	mov	r0, r8
 8008588:	2304      	movs	r3, #4
 800858a:	b00d      	add	sp, #52	@ 0x34
 800858c:	ecbd 8b0a 	vpop	{d8-d12}
 8008590:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	f000 b8ea 	b.w	800876c <arm_radix8_butterfly_f32>

08008598 <arm_cfft_f32>:
 8008598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800859c:	2a01      	cmp	r2, #1
 800859e:	8805      	ldrh	r5, [r0, #0]
 80085a0:	4607      	mov	r7, r0
 80085a2:	4690      	mov	r8, r2
 80085a4:	460c      	mov	r4, r1
 80085a6:	4699      	mov	r9, r3
 80085a8:	d05c      	beq.n	8008664 <arm_cfft_f32+0xcc>
 80085aa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80085ae:	d054      	beq.n	800865a <arm_cfft_f32+0xc2>
 80085b0:	d810      	bhi.n	80085d4 <arm_cfft_f32+0x3c>
 80085b2:	2d40      	cmp	r5, #64	@ 0x40
 80085b4:	d015      	beq.n	80085e2 <arm_cfft_f32+0x4a>
 80085b6:	d94c      	bls.n	8008652 <arm_cfft_f32+0xba>
 80085b8:	2d80      	cmp	r5, #128	@ 0x80
 80085ba:	d103      	bne.n	80085c4 <arm_cfft_f32+0x2c>
 80085bc:	4621      	mov	r1, r4
 80085be:	4638      	mov	r0, r7
 80085c0:	f7ff fcc2 	bl	8007f48 <arm_cfft_radix8by2_f32>
 80085c4:	f1b9 0f00 	cmp.w	r9, #0
 80085c8:	d114      	bne.n	80085f4 <arm_cfft_f32+0x5c>
 80085ca:	f1b8 0f01 	cmp.w	r8, #1
 80085ce:	d019      	beq.n	8008604 <arm_cfft_f32+0x6c>
 80085d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d4:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80085d8:	d03f      	beq.n	800865a <arm_cfft_f32+0xc2>
 80085da:	d933      	bls.n	8008644 <arm_cfft_f32+0xac>
 80085dc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80085e0:	d1f0      	bne.n	80085c4 <arm_cfft_f32+0x2c>
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	2301      	movs	r3, #1
 80085e6:	4629      	mov	r1, r5
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 f8bf 	bl	800876c <arm_radix8_butterfly_f32>
 80085ee:	f1b9 0f00 	cmp.w	r9, #0
 80085f2:	d0ea      	beq.n	80085ca <arm_cfft_f32+0x32>
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	89b9      	ldrh	r1, [r7, #12]
 80085f8:	4620      	mov	r0, r4
 80085fa:	f000 f845 	bl	8008688 <arm_bitreversal_32>
 80085fe:	f1b8 0f01 	cmp.w	r8, #1
 8008602:	d1e5      	bne.n	80085d0 <arm_cfft_f32+0x38>
 8008604:	ee07 5a90 	vmov	s15, r5
 8008608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008610:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008614:	2d00      	cmp	r5, #0
 8008616:	d0db      	beq.n	80085d0 <arm_cfft_f32+0x38>
 8008618:	f104 0108 	add.w	r1, r4, #8
 800861c:	2300      	movs	r3, #0
 800861e:	3301      	adds	r3, #1
 8008620:	429d      	cmp	r5, r3
 8008622:	f101 0108 	add.w	r1, r1, #8
 8008626:	ed11 7a04 	vldr	s14, [r1, #-16]
 800862a:	ed51 7a03 	vldr	s15, [r1, #-12]
 800862e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008632:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008636:	ed01 7a04 	vstr	s14, [r1, #-16]
 800863a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800863e:	d1ee      	bne.n	800861e <arm_cfft_f32+0x86>
 8008640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008644:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8008648:	d0cb      	beq.n	80085e2 <arm_cfft_f32+0x4a>
 800864a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800864e:	d0b5      	beq.n	80085bc <arm_cfft_f32+0x24>
 8008650:	e7b8      	b.n	80085c4 <arm_cfft_f32+0x2c>
 8008652:	2d10      	cmp	r5, #16
 8008654:	d0b2      	beq.n	80085bc <arm_cfft_f32+0x24>
 8008656:	2d20      	cmp	r5, #32
 8008658:	d1b4      	bne.n	80085c4 <arm_cfft_f32+0x2c>
 800865a:	4621      	mov	r1, r4
 800865c:	4638      	mov	r0, r7
 800865e:	f7ff fd45 	bl	80080ec <arm_cfft_radix8by4_f32>
 8008662:	e7af      	b.n	80085c4 <arm_cfft_f32+0x2c>
 8008664:	b16d      	cbz	r5, 8008682 <arm_cfft_f32+0xea>
 8008666:	310c      	adds	r1, #12
 8008668:	2600      	movs	r6, #0
 800866a:	ed51 7a02 	vldr	s15, [r1, #-8]
 800866e:	3601      	adds	r6, #1
 8008670:	eef1 7a67 	vneg.f32	s15, s15
 8008674:	42b5      	cmp	r5, r6
 8008676:	ed41 7a02 	vstr	s15, [r1, #-8]
 800867a:	f101 0108 	add.w	r1, r1, #8
 800867e:	d1f4      	bne.n	800866a <arm_cfft_f32+0xd2>
 8008680:	e793      	b.n	80085aa <arm_cfft_f32+0x12>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0a4      	beq.n	80085d0 <arm_cfft_f32+0x38>
 8008686:	e7b5      	b.n	80085f4 <arm_cfft_f32+0x5c>

08008688 <arm_bitreversal_32>:
 8008688:	b1e9      	cbz	r1, 80086c6 <arm_bitreversal_32+0x3e>
 800868a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800868c:	2500      	movs	r5, #0
 800868e:	f102 0e02 	add.w	lr, r2, #2
 8008692:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8008696:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800869a:	08a4      	lsrs	r4, r4, #2
 800869c:	089b      	lsrs	r3, r3, #2
 800869e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80086a2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80086a6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80086aa:	00a6      	lsls	r6, r4, #2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80086b2:	3304      	adds	r3, #4
 80086b4:	1d34      	adds	r4, r6, #4
 80086b6:	3502      	adds	r5, #2
 80086b8:	58c6      	ldr	r6, [r0, r3]
 80086ba:	5907      	ldr	r7, [r0, r4]
 80086bc:	50c7      	str	r7, [r0, r3]
 80086be:	428d      	cmp	r5, r1
 80086c0:	5106      	str	r6, [r0, r4]
 80086c2:	d3e6      	bcc.n	8008692 <arm_bitreversal_32+0xa>
 80086c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086c6:	4770      	bx	lr

080086c8 <arm_cfft_init_f32>:
 80086c8:	4603      	mov	r3, r0
 80086ca:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80086ce:	f04f 0000 	mov.w	r0, #0
 80086d2:	b410      	push	{r4}
 80086d4:	8019      	strh	r1, [r3, #0]
 80086d6:	6058      	str	r0, [r3, #4]
 80086d8:	d033      	beq.n	8008742 <arm_cfft_init_f32+0x7a>
 80086da:	d918      	bls.n	800870e <arm_cfft_init_f32+0x46>
 80086dc:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80086e0:	d027      	beq.n	8008732 <arm_cfft_init_f32+0x6a>
 80086e2:	d90c      	bls.n	80086fe <arm_cfft_init_f32+0x36>
 80086e4:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80086e8:	d11e      	bne.n	8008728 <arm_cfft_init_f32+0x60>
 80086ea:	4a17      	ldr	r2, [pc, #92]	@ (8008748 <arm_cfft_init_f32+0x80>)
 80086ec:	8994      	ldrh	r4, [r2, #12]
 80086ee:	819c      	strh	r4, [r3, #12]
 80086f0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80086f4:	e9c3 2101 	strd	r2, r1, [r3, #4]
 80086f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008702:	d018      	beq.n	8008736 <arm_cfft_init_f32+0x6e>
 8008704:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008708:	d10e      	bne.n	8008728 <arm_cfft_init_f32+0x60>
 800870a:	4a10      	ldr	r2, [pc, #64]	@ (800874c <arm_cfft_init_f32+0x84>)
 800870c:	e7ee      	b.n	80086ec <arm_cfft_init_f32+0x24>
 800870e:	2940      	cmp	r1, #64	@ 0x40
 8008710:	d013      	beq.n	800873a <arm_cfft_init_f32+0x72>
 8008712:	d903      	bls.n	800871c <arm_cfft_init_f32+0x54>
 8008714:	2980      	cmp	r1, #128	@ 0x80
 8008716:	d107      	bne.n	8008728 <arm_cfft_init_f32+0x60>
 8008718:	4a0d      	ldr	r2, [pc, #52]	@ (8008750 <arm_cfft_init_f32+0x88>)
 800871a:	e7e7      	b.n	80086ec <arm_cfft_init_f32+0x24>
 800871c:	2910      	cmp	r1, #16
 800871e:	d00e      	beq.n	800873e <arm_cfft_init_f32+0x76>
 8008720:	2920      	cmp	r1, #32
 8008722:	d101      	bne.n	8008728 <arm_cfft_init_f32+0x60>
 8008724:	4a0b      	ldr	r2, [pc, #44]	@ (8008754 <arm_cfft_init_f32+0x8c>)
 8008726:	e7e1      	b.n	80086ec <arm_cfft_init_f32+0x24>
 8008728:	f04f 30ff 	mov.w	r0, #4294967295
 800872c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	4a09      	ldr	r2, [pc, #36]	@ (8008758 <arm_cfft_init_f32+0x90>)
 8008734:	e7da      	b.n	80086ec <arm_cfft_init_f32+0x24>
 8008736:	4a09      	ldr	r2, [pc, #36]	@ (800875c <arm_cfft_init_f32+0x94>)
 8008738:	e7d8      	b.n	80086ec <arm_cfft_init_f32+0x24>
 800873a:	4a09      	ldr	r2, [pc, #36]	@ (8008760 <arm_cfft_init_f32+0x98>)
 800873c:	e7d6      	b.n	80086ec <arm_cfft_init_f32+0x24>
 800873e:	4a09      	ldr	r2, [pc, #36]	@ (8008764 <arm_cfft_init_f32+0x9c>)
 8008740:	e7d4      	b.n	80086ec <arm_cfft_init_f32+0x24>
 8008742:	4a09      	ldr	r2, [pc, #36]	@ (8008768 <arm_cfft_init_f32+0xa0>)
 8008744:	e7d2      	b.n	80086ec <arm_cfft_init_f32+0x24>
 8008746:	bf00      	nop
 8008748:	080263cc 	.word	0x080263cc
 800874c:	0802636c 	.word	0x0802636c
 8008750:	0802637c 	.word	0x0802637c
 8008754:	080263bc 	.word	0x080263bc
 8008758:	0802639c 	.word	0x0802639c
 800875c:	080263dc 	.word	0x080263dc
 8008760:	080263ec 	.word	0x080263ec
 8008764:	0802638c 	.word	0x0802638c
 8008768:	080263ac 	.word	0x080263ac

0800876c <arm_radix8_butterfly_f32>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	ed2d 8b10 	vpush	{d8-d15}
 8008774:	b093      	sub	sp, #76	@ 0x4c
 8008776:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800877a:	4603      	mov	r3, r0
 800877c:	3304      	adds	r3, #4
 800877e:	ed9f bac0 	vldr	s22, [pc, #768]	@ 8008a80 <arm_radix8_butterfly_f32+0x314>
 8008782:	9010      	str	r0, [sp, #64]	@ 0x40
 8008784:	468b      	mov	fp, r1
 8008786:	9311      	str	r3, [sp, #68]	@ 0x44
 8008788:	4689      	mov	r9, r1
 800878a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800878c:	ea4f 05db 	mov.w	r5, fp, lsr #3
 8008790:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8008794:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 8008798:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 800879c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80087a0:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 80087a4:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 80087a8:	9100      	str	r1, [sp, #0]
 80087aa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80087ae:	f108 0004 	add.w	r0, r8, #4
 80087b2:	f10e 0104 	add.w	r1, lr, #4
 80087b6:	462e      	mov	r6, r5
 80087b8:	4420      	add	r0, r4
 80087ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087be:	4421      	add	r1, r4
 80087c0:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 80087c4:	960d      	str	r6, [sp, #52]	@ 0x34
 80087c6:	9402      	str	r4, [sp, #8]
 80087c8:	012c      	lsls	r4, r5, #4
 80087ca:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 80087ce:	9403      	str	r4, [sp, #12]
 80087d0:	00ec      	lsls	r4, r5, #3
 80087d2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80087d4:	9404      	str	r4, [sp, #16]
 80087d6:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 80087da:	9405      	str	r4, [sp, #20]
 80087dc:	016c      	lsls	r4, r5, #5
 80087de:	9401      	str	r4, [sp, #4]
 80087e0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80087e2:	9c00      	ldr	r4, [sp, #0]
 80087e4:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 80087e8:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80087ec:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80087f0:	f04f 0c00 	mov.w	ip, #0
 80087f4:	edd6 6a00 	vldr	s13, [r6]
 80087f8:	edd7 1a00 	vldr	s3, [r7]
 80087fc:	ed15 aa01 	vldr	s20, [r5, #-4]
 8008800:	edd2 5a00 	vldr	s11, [r2]
 8008804:	ed51 9a01 	vldr	s19, [r1, #-4]
 8008808:	ed94 6a00 	vldr	s12, [r4]
 800880c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8008810:	ed93 3a00 	vldr	s6, [r3]
 8008814:	ee39 0a86 	vadd.f32	s0, s19, s12
 8008818:	ee33 2a21 	vadd.f32	s4, s6, s3
 800881c:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8008820:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8008824:	ee35 7a02 	vadd.f32	s14, s10, s4
 8008828:	ee34 4a80 	vadd.f32	s8, s9, s0
 800882c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008830:	ee74 6a07 	vadd.f32	s13, s8, s14
 8008834:	ee34 4a47 	vsub.f32	s8, s8, s14
 8008838:	ed45 6a01 	vstr	s13, [r5, #-4]
 800883c:	ed82 4a00 	vstr	s8, [r2]
 8008840:	edd0 6a00 	vldr	s13, [r0]
 8008844:	ed96 9a01 	vldr	s18, [r6, #4]
 8008848:	edd3 2a01 	vldr	s5, [r3, #4]
 800884c:	edd7 8a01 	vldr	s17, [r7, #4]
 8008850:	edd5 0a00 	vldr	s1, [r5]
 8008854:	edd2 3a01 	vldr	s7, [r2, #4]
 8008858:	ed94 8a01 	vldr	s16, [r4, #4]
 800885c:	ed91 7a00 	vldr	s14, [r1]
 8008860:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008864:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8008868:	ee72 aae8 	vsub.f32	s21, s5, s17
 800886c:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8008870:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8008874:	ee77 7a83 	vadd.f32	s15, s15, s6
 8008878:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800887c:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8008880:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8008884:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8008888:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800888c:	ee77 0a08 	vadd.f32	s1, s14, s16
 8008890:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8008894:	ee37 7a48 	vsub.f32	s14, s14, s16
 8008898:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800889c:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80088a0:	ee76 6a89 	vadd.f32	s13, s13, s18
 80088a4:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80088a8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80088ac:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80088b0:	ee35 5a42 	vsub.f32	s10, s10, s4
 80088b4:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80088b8:	ee33 2a20 	vadd.f32	s4, s6, s1
 80088bc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80088c0:	ee33 3a60 	vsub.f32	s6, s6, s1
 80088c4:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80088c8:	ee77 0a01 	vadd.f32	s1, s14, s2
 80088cc:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80088d0:	ee37 7a41 	vsub.f32	s14, s14, s2
 80088d4:	ee73 1a84 	vadd.f32	s3, s7, s8
 80088d8:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80088dc:	ee76 3a27 	vadd.f32	s7, s12, s15
 80088e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80088e4:	ee32 8a00 	vadd.f32	s16, s4, s0
 80088e8:	ee33 1a45 	vsub.f32	s2, s6, s10
 80088ec:	ee32 2a40 	vsub.f32	s4, s4, s0
 80088f0:	ee35 5a03 	vadd.f32	s10, s10, s6
 80088f4:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80088f8:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80088fc:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8008900:	ee34 6a67 	vsub.f32	s12, s8, s15
 8008904:	ee75 4a87 	vadd.f32	s9, s11, s14
 8008908:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800890c:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8008910:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008914:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8008918:	44dc      	add	ip, fp
 800891a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800891e:	45e1      	cmp	r9, ip
 8008920:	ed85 8a00 	vstr	s16, [r5]
 8008924:	ed82 2a01 	vstr	s4, [r2, #4]
 8008928:	4455      	add	r5, sl
 800892a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800892e:	4452      	add	r2, sl
 8008930:	edc4 6a00 	vstr	s13, [r4]
 8008934:	ed81 1a00 	vstr	s2, [r1]
 8008938:	ed84 5a01 	vstr	s10, [r4, #4]
 800893c:	4451      	add	r1, sl
 800893e:	ed00 3a01 	vstr	s6, [r0, #-4]
 8008942:	4454      	add	r4, sl
 8008944:	edc7 2a00 	vstr	s5, [r7]
 8008948:	edc6 4a00 	vstr	s9, [r6]
 800894c:	ed83 7a00 	vstr	s14, [r3]
 8008950:	edc0 5a00 	vstr	s11, [r0]
 8008954:	edc7 3a01 	vstr	s7, [r7, #4]
 8008958:	4450      	add	r0, sl
 800895a:	ed86 6a01 	vstr	s12, [r6, #4]
 800895e:	4457      	add	r7, sl
 8008960:	edc3 7a01 	vstr	s15, [r3, #4]
 8008964:	4456      	add	r6, sl
 8008966:	4453      	add	r3, sl
 8008968:	f63f af44 	bhi.w	80087f4 <arm_radix8_butterfly_f32+0x88>
 800896c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800896e:	2b07      	cmp	r3, #7
 8008970:	f240 81c3 	bls.w	8008cfa <arm_radix8_butterfly_f32+0x58e>
 8008974:	9805      	ldr	r0, [sp, #20]
 8008976:	9a01      	ldr	r2, [sp, #4]
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	9d04      	ldr	r5, [sp, #16]
 800897c:	9902      	ldr	r1, [sp, #8]
 800897e:	f100 0c08 	add.w	ip, r0, #8
 8008982:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008984:	3208      	adds	r2, #8
 8008986:	1882      	adds	r2, r0, r2
 8008988:	3308      	adds	r3, #8
 800898a:	920a      	str	r2, [sp, #40]	@ 0x28
 800898c:	4602      	mov	r2, r0
 800898e:	18d3      	adds	r3, r2, r3
 8008990:	3108      	adds	r1, #8
 8008992:	3508      	adds	r5, #8
 8008994:	1851      	adds	r1, r2, r1
 8008996:	9307      	str	r3, [sp, #28]
 8008998:	4613      	mov	r3, r2
 800899a:	442a      	add	r2, r5
 800899c:	9206      	str	r2, [sp, #24]
 800899e:	461a      	mov	r2, r3
 80089a0:	4462      	add	r2, ip
 80089a2:	f10e 0e0c 	add.w	lr, lr, #12
 80089a6:	9205      	str	r2, [sp, #20]
 80089a8:	461a      	mov	r2, r3
 80089aa:	4472      	add	r2, lr
 80089ac:	f108 0808 	add.w	r8, r8, #8
 80089b0:	330c      	adds	r3, #12
 80089b2:	4440      	add	r0, r8
 80089b4:	f04f 0e00 	mov.w	lr, #0
 80089b8:	9203      	str	r2, [sp, #12]
 80089ba:	9304      	str	r3, [sp, #16]
 80089bc:	465a      	mov	r2, fp
 80089be:	464b      	mov	r3, r9
 80089c0:	46f3      	mov	fp, lr
 80089c2:	46d1      	mov	r9, sl
 80089c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80089c6:	9108      	str	r1, [sp, #32]
 80089c8:	f04f 0801 	mov.w	r8, #1
 80089cc:	469a      	mov	sl, r3
 80089ce:	4696      	mov	lr, r2
 80089d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089d2:	449b      	add	fp, r3
 80089d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80089da:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 80089de:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 80089e2:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 80089e6:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 80089ea:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 80089ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80089f0:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 80089f4:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 80089f8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80089fa:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 80089fe:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 8008a02:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 8008a06:	9202      	str	r2, [sp, #8]
 8008a08:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8008a0c:	9301      	str	r3, [sp, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	edd3 da01 	vldr	s27, [r3, #4]
 8008a14:	9b01      	ldr	r3, [sp, #4]
 8008a16:	edd0 7a00 	vldr	s15, [r0]
 8008a1a:	ed93 da01 	vldr	s26, [r3, #4]
 8008a1e:	9b02      	ldr	r3, [sp, #8]
 8008a20:	edcd 7a02 	vstr	s15, [sp, #8]
 8008a24:	ed93 ca01 	vldr	s24, [r3, #4]
 8008a28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a2a:	eddc ca01 	vldr	s25, [ip, #4]
 8008a2e:	edd3 7a00 	vldr	s15, [r3]
 8008a32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a34:	edcd 7a01 	vstr	s15, [sp, #4]
 8008a38:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8008a3c:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8008a40:	9200      	str	r2, [sp, #0]
 8008a42:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 8008a46:	edd3 7a00 	vldr	s15, [r3]
 8008a4a:	ed92 fa01 	vldr	s30, [r2, #4]
 8008a4e:	9a00      	ldr	r2, [sp, #0]
 8008a50:	edd1 ea01 	vldr	s29, [r1, #4]
 8008a54:	ed92 ea01 	vldr	s28, [r2, #4]
 8008a58:	edd7 ba00 	vldr	s23, [r7]
 8008a5c:	edd6 aa00 	vldr	s21, [r6]
 8008a60:	ed95 aa00 	vldr	s20, [r5]
 8008a64:	edd4 9a00 	vldr	s19, [r4]
 8008a68:	edcd 7a00 	vstr	s15, [sp]
 8008a6c:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8008a70:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8008a74:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8008a78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8008a7c:	46c4      	mov	ip, r8
 8008a7e:	e001      	b.n	8008a84 <arm_radix8_butterfly_f32+0x318>
 8008a80:	3f3504f3 	.word	0x3f3504f3
 8008a84:	ed91 6a00 	vldr	s12, [r1]
 8008a88:	ed93 5a00 	vldr	s10, [r3]
 8008a8c:	edd0 fa00 	vldr	s31, [r0]
 8008a90:	edd4 7a00 	vldr	s15, [r4]
 8008a94:	ed95 7a00 	vldr	s14, [r5]
 8008a98:	ed56 3a01 	vldr	s7, [r6, #-4]
 8008a9c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8008aa0:	ed92 2a00 	vldr	s4, [r2]
 8008aa4:	ed96 0a00 	vldr	s0, [r6]
 8008aa8:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008aac:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008ab0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8008ab4:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008ab8:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008abc:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008ac0:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008ac4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008ac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008acc:	ed06 6a01 	vstr	s12, [r6, #-4]
 8008ad0:	edd4 8a01 	vldr	s17, [r4, #4]
 8008ad4:	ed92 9a01 	vldr	s18, [r2, #4]
 8008ad8:	edd7 0a00 	vldr	s1, [r7]
 8008adc:	edd1 2a01 	vldr	s5, [r1, #4]
 8008ae0:	ed95 7a01 	vldr	s14, [r5, #4]
 8008ae4:	ed93 6a01 	vldr	s12, [r3, #4]
 8008ae8:	edd0 5a01 	vldr	s11, [r0, #4]
 8008aec:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008af0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8008af4:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008af8:	ee78 fac7 	vsub.f32	s31, s17, s14
 8008afc:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008b00:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008b04:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008b08:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008b0c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008b10:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008b14:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008b18:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8008b1c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008b20:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8008b24:	ee32 1a08 	vadd.f32	s2, s4, s16
 8008b28:	ee72 fa87 	vadd.f32	s31, s5, s14
 8008b2c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008b30:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008b34:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008b38:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008b3c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008b40:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008b44:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8008b48:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8008b4c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008b50:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008b54:	ee74 0a22 	vadd.f32	s1, s8, s5
 8008b58:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008b5c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008b60:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008b64:	ee32 4a64 	vsub.f32	s8, s4, s9
 8008b68:	ee73 8a09 	vadd.f32	s17, s6, s18
 8008b6c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8008b70:	ee33 9a49 	vsub.f32	s18, s6, s18
 8008b74:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8008b78:	ee35 3a85 	vadd.f32	s6, s11, s10
 8008b7c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8008b80:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8008b84:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008b88:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8008b8c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8008b90:	ee35 8a03 	vadd.f32	s16, s10, s6
 8008b94:	ee38 0a80 	vadd.f32	s0, s17, s0
 8008b98:	ee73 3a82 	vadd.f32	s7, s7, s4
 8008b9c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8008ba0:	ed9d 2a00 	vldr	s4, [sp]
 8008ba4:	eddd 1a01 	vldr	s3, [sp, #4]
 8008ba8:	ee35 5a43 	vsub.f32	s10, s10, s6
 8008bac:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8008bb0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8008bb4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8008bb8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008bbc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8008bc0:	ee76 5a49 	vsub.f32	s11, s12, s18
 8008bc4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8008bc8:	ee39 6a06 	vadd.f32	s12, s18, s12
 8008bcc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8008bd0:	ee21 4a84 	vmul.f32	s8, s3, s8
 8008bd4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8008bd8:	ee22 7a07 	vmul.f32	s14, s4, s14
 8008bdc:	ee22 2a08 	vmul.f32	s4, s4, s16
 8008be0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8008be4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8008be8:	ee31 1a09 	vadd.f32	s2, s2, s18
 8008bec:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8008bf0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8008bf4:	ee74 0a60 	vsub.f32	s1, s8, s1
 8008bf8:	ee37 7a48 	vsub.f32	s14, s14, s16
 8008bfc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8008c00:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8008c04:	ee72 1a21 	vadd.f32	s3, s4, s3
 8008c08:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8008c0c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8008c10:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8008c14:	ee38 8a04 	vadd.f32	s16, s16, s8
 8008c18:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8008c1c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8008c20:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8008c24:	eddd 5a02 	vldr	s11, [sp, #8]
 8008c28:	edc6 fa00 	vstr	s31, [r6]
 8008c2c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8008c30:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008c34:	ee30 0a45 	vsub.f32	s0, s0, s10
 8008c38:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8008c3c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8008c40:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8008c44:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8008c48:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8008c4c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8008c50:	ee74 4a89 	vadd.f32	s9, s9, s18
 8008c54:	ee34 3a43 	vsub.f32	s6, s8, s6
 8008c58:	ee78 8a85 	vadd.f32	s17, s17, s10
 8008c5c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008c60:	44f4      	add	ip, lr
 8008c62:	45e2      	cmp	sl, ip
 8008c64:	edc3 3a00 	vstr	s7, [r3]
 8008c68:	edc3 6a01 	vstr	s13, [r3, #4]
 8008c6c:	444e      	add	r6, r9
 8008c6e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8008c72:	edc7 0a00 	vstr	s1, [r7]
 8008c76:	444b      	add	r3, r9
 8008c78:	ed80 2a00 	vstr	s4, [r0]
 8008c7c:	edc0 2a01 	vstr	s5, [r0, #4]
 8008c80:	444f      	add	r7, r9
 8008c82:	edc2 1a00 	vstr	s3, [r2]
 8008c86:	ed82 7a01 	vstr	s14, [r2, #4]
 8008c8a:	4448      	add	r0, r9
 8008c8c:	ed85 8a00 	vstr	s16, [r5]
 8008c90:	ed85 0a01 	vstr	s0, [r5, #4]
 8008c94:	444a      	add	r2, r9
 8008c96:	edc1 4a00 	vstr	s9, [r1]
 8008c9a:	444d      	add	r5, r9
 8008c9c:	ed81 3a01 	vstr	s6, [r1, #4]
 8008ca0:	edc4 8a00 	vstr	s17, [r4]
 8008ca4:	ed84 6a01 	vstr	s12, [r4, #4]
 8008ca8:	4449      	add	r1, r9
 8008caa:	444c      	add	r4, r9
 8008cac:	f63f aeea 	bhi.w	8008a84 <arm_radix8_butterfly_f32+0x318>
 8008cb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb8:	3308      	adds	r3, #8
 8008cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cbc:	9b08      	ldr	r3, [sp, #32]
 8008cbe:	3308      	adds	r3, #8
 8008cc0:	9308      	str	r3, [sp, #32]
 8008cc2:	9b07      	ldr	r3, [sp, #28]
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	9307      	str	r3, [sp, #28]
 8008cc8:	9b06      	ldr	r3, [sp, #24]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	9306      	str	r3, [sp, #24]
 8008cce:	9b05      	ldr	r3, [sp, #20]
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	9305      	str	r3, [sp, #20]
 8008cd4:	9b04      	ldr	r3, [sp, #16]
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	9304      	str	r3, [sp, #16]
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	9303      	str	r3, [sp, #12]
 8008ce0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ce2:	f108 0801 	add.w	r8, r8, #1
 8008ce6:	4543      	cmp	r3, r8
 8008ce8:	f47f ae72 	bne.w	80089d0 <arm_radix8_butterfly_f32+0x264>
 8008cec:	469b      	mov	fp, r3
 8008cee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	46d1      	mov	r9, sl
 8008cf6:	930e      	str	r3, [sp, #56]	@ 0x38
 8008cf8:	e547      	b.n	800878a <arm_radix8_butterfly_f32+0x1e>
 8008cfa:	b013      	add	sp, #76	@ 0x4c
 8008cfc:	ecbd 8b10 	vpop	{d8-d15}
 8008d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d04 <memset>:
 8008d04:	4402      	add	r2, r0
 8008d06:	4603      	mov	r3, r0
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d100      	bne.n	8008d0e <memset+0xa>
 8008d0c:	4770      	bx	lr
 8008d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d12:	e7f9      	b.n	8008d08 <memset+0x4>

08008d14 <_reclaim_reent>:
 8008d14:	4b29      	ldr	r3, [pc, #164]	@ (8008dbc <_reclaim_reent+0xa8>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4283      	cmp	r3, r0
 8008d1a:	b570      	push	{r4, r5, r6, lr}
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	d04b      	beq.n	8008db8 <_reclaim_reent+0xa4>
 8008d20:	69c3      	ldr	r3, [r0, #28]
 8008d22:	b1ab      	cbz	r3, 8008d50 <_reclaim_reent+0x3c>
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	b16b      	cbz	r3, 8008d44 <_reclaim_reent+0x30>
 8008d28:	2500      	movs	r5, #0
 8008d2a:	69e3      	ldr	r3, [r4, #28]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	5959      	ldr	r1, [r3, r5]
 8008d30:	2900      	cmp	r1, #0
 8008d32:	d13b      	bne.n	8008dac <_reclaim_reent+0x98>
 8008d34:	3504      	adds	r5, #4
 8008d36:	2d80      	cmp	r5, #128	@ 0x80
 8008d38:	d1f7      	bne.n	8008d2a <_reclaim_reent+0x16>
 8008d3a:	69e3      	ldr	r3, [r4, #28]
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	68d9      	ldr	r1, [r3, #12]
 8008d40:	f000 f872 	bl	8008e28 <_free_r>
 8008d44:	69e3      	ldr	r3, [r4, #28]
 8008d46:	6819      	ldr	r1, [r3, #0]
 8008d48:	b111      	cbz	r1, 8008d50 <_reclaim_reent+0x3c>
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 f86c 	bl	8008e28 <_free_r>
 8008d50:	6961      	ldr	r1, [r4, #20]
 8008d52:	b111      	cbz	r1, 8008d5a <_reclaim_reent+0x46>
 8008d54:	4620      	mov	r0, r4
 8008d56:	f000 f867 	bl	8008e28 <_free_r>
 8008d5a:	69e1      	ldr	r1, [r4, #28]
 8008d5c:	b111      	cbz	r1, 8008d64 <_reclaim_reent+0x50>
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 f862 	bl	8008e28 <_free_r>
 8008d64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008d66:	b111      	cbz	r1, 8008d6e <_reclaim_reent+0x5a>
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 f85d 	bl	8008e28 <_free_r>
 8008d6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d70:	b111      	cbz	r1, 8008d78 <_reclaim_reent+0x64>
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 f858 	bl	8008e28 <_free_r>
 8008d78:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008d7a:	b111      	cbz	r1, 8008d82 <_reclaim_reent+0x6e>
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f000 f853 	bl	8008e28 <_free_r>
 8008d82:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008d84:	b111      	cbz	r1, 8008d8c <_reclaim_reent+0x78>
 8008d86:	4620      	mov	r0, r4
 8008d88:	f000 f84e 	bl	8008e28 <_free_r>
 8008d8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008d8e:	b111      	cbz	r1, 8008d96 <_reclaim_reent+0x82>
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 f849 	bl	8008e28 <_free_r>
 8008d96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008d98:	b111      	cbz	r1, 8008da0 <_reclaim_reent+0x8c>
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 f844 	bl	8008e28 <_free_r>
 8008da0:	6a23      	ldr	r3, [r4, #32]
 8008da2:	b14b      	cbz	r3, 8008db8 <_reclaim_reent+0xa4>
 8008da4:	4620      	mov	r0, r4
 8008da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008daa:	4718      	bx	r3
 8008dac:	680e      	ldr	r6, [r1, #0]
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 f83a 	bl	8008e28 <_free_r>
 8008db4:	4631      	mov	r1, r6
 8008db6:	e7bb      	b.n	8008d30 <_reclaim_reent+0x1c>
 8008db8:	bd70      	pop	{r4, r5, r6, pc}
 8008dba:	bf00      	nop
 8008dbc:	20000010 	.word	0x20000010

08008dc0 <__libc_init_array>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8008df8 <__libc_init_array+0x38>)
 8008dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8008dfc <__libc_init_array+0x3c>)
 8008dc6:	1b64      	subs	r4, r4, r5
 8008dc8:	10a4      	asrs	r4, r4, #2
 8008dca:	2600      	movs	r6, #0
 8008dcc:	42a6      	cmp	r6, r4
 8008dce:	d109      	bne.n	8008de4 <__libc_init_array+0x24>
 8008dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8008e00 <__libc_init_array+0x40>)
 8008dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8008e04 <__libc_init_array+0x44>)
 8008dd4:	f000 f87e 	bl	8008ed4 <_init>
 8008dd8:	1b64      	subs	r4, r4, r5
 8008dda:	10a4      	asrs	r4, r4, #2
 8008ddc:	2600      	movs	r6, #0
 8008dde:	42a6      	cmp	r6, r4
 8008de0:	d105      	bne.n	8008dee <__libc_init_array+0x2e>
 8008de2:	bd70      	pop	{r4, r5, r6, pc}
 8008de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de8:	4798      	blx	r3
 8008dea:	3601      	adds	r6, #1
 8008dec:	e7ee      	b.n	8008dcc <__libc_init_array+0xc>
 8008dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df2:	4798      	blx	r3
 8008df4:	3601      	adds	r6, #1
 8008df6:	e7f2      	b.n	8008dde <__libc_init_array+0x1e>
 8008df8:	080263fc 	.word	0x080263fc
 8008dfc:	080263fc 	.word	0x080263fc
 8008e00:	080263fc 	.word	0x080263fc
 8008e04:	08026400 	.word	0x08026400

08008e08 <__retarget_lock_acquire_recursive>:
 8008e08:	4770      	bx	lr

08008e0a <__retarget_lock_release_recursive>:
 8008e0a:	4770      	bx	lr

08008e0c <memcpy>:
 8008e0c:	440a      	add	r2, r1
 8008e0e:	4291      	cmp	r1, r2
 8008e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e14:	d100      	bne.n	8008e18 <memcpy+0xc>
 8008e16:	4770      	bx	lr
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e22:	4291      	cmp	r1, r2
 8008e24:	d1f9      	bne.n	8008e1a <memcpy+0xe>
 8008e26:	bd10      	pop	{r4, pc}

08008e28 <_free_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	2900      	cmp	r1, #0
 8008e2e:	d041      	beq.n	8008eb4 <_free_r+0x8c>
 8008e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e34:	1f0c      	subs	r4, r1, #4
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfb8      	it	lt
 8008e3a:	18e4      	addlt	r4, r4, r3
 8008e3c:	f000 f83e 	bl	8008ebc <__malloc_lock>
 8008e40:	4a1d      	ldr	r2, [pc, #116]	@ (8008eb8 <_free_r+0x90>)
 8008e42:	6813      	ldr	r3, [r2, #0]
 8008e44:	b933      	cbnz	r3, 8008e54 <_free_r+0x2c>
 8008e46:	6063      	str	r3, [r4, #4]
 8008e48:	6014      	str	r4, [r2, #0]
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e50:	f000 b83a 	b.w	8008ec8 <__malloc_unlock>
 8008e54:	42a3      	cmp	r3, r4
 8008e56:	d908      	bls.n	8008e6a <_free_r+0x42>
 8008e58:	6820      	ldr	r0, [r4, #0]
 8008e5a:	1821      	adds	r1, r4, r0
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf01      	itttt	eq
 8008e60:	6819      	ldreq	r1, [r3, #0]
 8008e62:	685b      	ldreq	r3, [r3, #4]
 8008e64:	1809      	addeq	r1, r1, r0
 8008e66:	6021      	streq	r1, [r4, #0]
 8008e68:	e7ed      	b.n	8008e46 <_free_r+0x1e>
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	b10b      	cbz	r3, 8008e74 <_free_r+0x4c>
 8008e70:	42a3      	cmp	r3, r4
 8008e72:	d9fa      	bls.n	8008e6a <_free_r+0x42>
 8008e74:	6811      	ldr	r1, [r2, #0]
 8008e76:	1850      	adds	r0, r2, r1
 8008e78:	42a0      	cmp	r0, r4
 8008e7a:	d10b      	bne.n	8008e94 <_free_r+0x6c>
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	4401      	add	r1, r0
 8008e80:	1850      	adds	r0, r2, r1
 8008e82:	4283      	cmp	r3, r0
 8008e84:	6011      	str	r1, [r2, #0]
 8008e86:	d1e0      	bne.n	8008e4a <_free_r+0x22>
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	6053      	str	r3, [r2, #4]
 8008e8e:	4408      	add	r0, r1
 8008e90:	6010      	str	r0, [r2, #0]
 8008e92:	e7da      	b.n	8008e4a <_free_r+0x22>
 8008e94:	d902      	bls.n	8008e9c <_free_r+0x74>
 8008e96:	230c      	movs	r3, #12
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	e7d6      	b.n	8008e4a <_free_r+0x22>
 8008e9c:	6820      	ldr	r0, [r4, #0]
 8008e9e:	1821      	adds	r1, r4, r0
 8008ea0:	428b      	cmp	r3, r1
 8008ea2:	bf04      	itt	eq
 8008ea4:	6819      	ldreq	r1, [r3, #0]
 8008ea6:	685b      	ldreq	r3, [r3, #4]
 8008ea8:	6063      	str	r3, [r4, #4]
 8008eaa:	bf04      	itt	eq
 8008eac:	1809      	addeq	r1, r1, r0
 8008eae:	6021      	streq	r1, [r4, #0]
 8008eb0:	6054      	str	r4, [r2, #4]
 8008eb2:	e7ca      	b.n	8008e4a <_free_r+0x22>
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20008dbc 	.word	0x20008dbc

08008ebc <__malloc_lock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	@ (8008ec4 <__malloc_lock+0x8>)
 8008ebe:	f7ff bfa3 	b.w	8008e08 <__retarget_lock_acquire_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	20008db8 	.word	0x20008db8

08008ec8 <__malloc_unlock>:
 8008ec8:	4801      	ldr	r0, [pc, #4]	@ (8008ed0 <__malloc_unlock+0x8>)
 8008eca:	f7ff bf9e 	b.w	8008e0a <__retarget_lock_release_recursive>
 8008ece:	bf00      	nop
 8008ed0:	20008db8 	.word	0x20008db8

08008ed4 <_init>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	bf00      	nop
 8008ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eda:	bc08      	pop	{r3}
 8008edc:	469e      	mov	lr, r3
 8008ede:	4770      	bx	lr

08008ee0 <_fini>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	bf00      	nop
 8008ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee6:	bc08      	pop	{r3}
 8008ee8:	469e      	mov	lr, r3
 8008eea:	4770      	bx	lr
